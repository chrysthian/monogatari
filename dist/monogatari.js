/** vim: et:ts=4:sw=4:sts=4
 * @license RequireJS 2.1.17 Copyright (c) 2010-2015, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/requirejs for details
 */
//Not using strict: uneven strict support in browsers, #392, and causes
//problems with requirejs.exec()/transpiler plugins that may not be strict.
/*jslint regexp: true, nomen: true, sloppy: true */
/*global window, navigator, document, importScripts, setTimeout, opera */

var requirejs, require, define;
(function (global) {
    var req, s, head, baseElement, dataMain, src,
        interactiveScript, currentlyAddingScript, mainScript, subPath,
        version = '2.1.17',
        commentRegExp = /(\/\*([\s\S]*?)\*\/|([^:]|^)\/\/(.*)$)/mg,
        cjsRequireRegExp = /[^.]\s*require\s*\(\s*["']([^'"\s]+)["']\s*\)/g,
        jsSuffixRegExp = /\.js$/,
        currDirRegExp = /^\.\//,
        op = Object.prototype,
        ostring = op.toString,
        hasOwn = op.hasOwnProperty,
        ap = Array.prototype,
        apsp = ap.splice,
        isBrowser = !!(typeof window !== 'undefined' && typeof navigator !== 'undefined' && window.document),
        isWebWorker = !isBrowser && typeof importScripts !== 'undefined',
        //PS3 indicates loaded and complete, but need to wait for complete
        //specifically. Sequence is 'loading', 'loaded', execution,
        // then 'complete'. The UA check is unfortunate, but not sure how
        //to feature test w/o causing perf issues.
        readyRegExp = isBrowser && navigator.platform === 'PLAYSTATION 3' ?
                      /^complete$/ : /^(complete|loaded)$/,
        defContextName = '_',
        //Oh the tragedy, detecting opera. See the usage of isOpera for reason.
        isOpera = typeof opera !== 'undefined' && opera.toString() === '[object Opera]',
        contexts = {},
        cfg = {},
        globalDefQueue = [],
        useInteractive = false;

    function isFunction(it) {
        return ostring.call(it) === '[object Function]';
    }

    function isArray(it) {
        return ostring.call(it) === '[object Array]';
    }

    /**
     * Helper function for iterating over an array. If the func returns
     * a true value, it will break out of the loop.
     */
    function each(ary, func) {
        if (ary) {
            var i;
            for (i = 0; i < ary.length; i += 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    /**
     * Helper function for iterating over an array backwards. If the func
     * returns a true value, it will break out of the loop.
     */
    function eachReverse(ary, func) {
        if (ary) {
            var i;
            for (i = ary.length - 1; i > -1; i -= 1) {
                if (ary[i] && func(ary[i], i, ary)) {
                    break;
                }
            }
        }
    }

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    function getOwn(obj, prop) {
        return hasProp(obj, prop) && obj[prop];
    }

    /**
     * Cycles over properties in an object and calls a function for each
     * property value. If the function returns a truthy value, then the
     * iteration is stopped.
     */
    function eachProp(obj, func) {
        var prop;
        for (prop in obj) {
            if (hasProp(obj, prop)) {
                if (func(obj[prop], prop)) {
                    break;
                }
            }
        }
    }

    /**
     * Simple function to mix in properties from source into target,
     * but only if target does not already have a property of the same name.
     */
    function mixin(target, source, force, deepStringMixin) {
        if (source) {
            eachProp(source, function (value, prop) {
                if (force || !hasProp(target, prop)) {
                    if (deepStringMixin && typeof value === 'object' && value &&
                        !isArray(value) && !isFunction(value) &&
                        !(value instanceof RegExp)) {

                        if (!target[prop]) {
                            target[prop] = {};
                        }
                        mixin(target[prop], value, force, deepStringMixin);
                    } else {
                        target[prop] = value;
                    }
                }
            });
        }
        return target;
    }

    //Similar to Function.prototype.bind, but the 'this' object is specified
    //first, since it is easier to read/figure out what 'this' will be.
    function bind(obj, fn) {
        return function () {
            return fn.apply(obj, arguments);
        };
    }

    function scripts() {
        return document.getElementsByTagName('script');
    }

    function defaultOnError(err) {
        throw err;
    }

    //Allow getting a global that is expressed in
    //dot notation, like 'a.b.c'.
    function getGlobal(value) {
        if (!value) {
            return value;
        }
        var g = global;
        each(value.split('.'), function (part) {
            g = g[part];
        });
        return g;
    }

    /**
     * Constructs an error with a pointer to an URL with more information.
     * @param {String} id the error ID that maps to an ID on a web page.
     * @param {String} message human readable error.
     * @param {Error} [err] the original error, if there is one.
     *
     * @returns {Error}
     */
    function makeError(id, msg, err, requireModules) {
        var e = new Error(msg + '\nhttp://requirejs.org/docs/errors.html#' + id);
        e.requireType = id;
        e.requireModules = requireModules;
        if (err) {
            e.originalError = err;
        }
        return e;
    }

    if (typeof define !== 'undefined') {
        //If a define is already in play via another AMD loader,
        //do not overwrite.
        return;
    }

    if (typeof requirejs !== 'undefined') {
        if (isFunction(requirejs)) {
            //Do not overwrite an existing requirejs instance.
            return;
        }
        cfg = requirejs;
        requirejs = undefined;
    }

    //Allow for a require config object
    if (typeof require !== 'undefined' && !isFunction(require)) {
        //assume it is a config object.
        cfg = require;
        require = undefined;
    }

    function newContext(contextName) {
        var inCheckLoaded, Module, context, handlers,
            checkLoadedTimeoutId,
            config = {
                //Defaults. Do not set a default for map
                //config to speed up normalize(), which
                //will run faster if there is no default.
                waitSeconds: 7,
                baseUrl: './',
                paths: {},
                bundles: {},
                pkgs: {},
                shim: {},
                config: {}
            },
            registry = {},
            //registry of just enabled modules, to speed
            //cycle breaking code when lots of modules
            //are registered, but not activated.
            enabledRegistry = {},
            undefEvents = {},
            defQueue = [],
            defined = {},
            urlFetched = {},
            bundlesMap = {},
            requireCounter = 1,
            unnormalizedCounter = 1;

        /**
         * Trims the . and .. from an array of path segments.
         * It will keep a leading path segment if a .. will become
         * the first path segment, to help with module name lookups,
         * which act like paths, but can be remapped. But the end result,
         * all paths that use this function should look normalized.
         * NOTE: this method MODIFIES the input array.
         * @param {Array} ary the array of path segments.
         */
        function trimDots(ary) {
            var i, part;
            for (i = 0; i < ary.length; i++) {
                part = ary[i];
                if (part === '.') {
                    ary.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && ary[2] === '..') || ary[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        ary.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
        }

        /**
         * Given a relative module name, like ./something, normalize it to
         * a real name that can be mapped to a path.
         * @param {String} name the relative name
         * @param {String} baseName a real name that the name arg is relative
         * to.
         * @param {Boolean} applyMap apply the map config to the value. Should
         * only be done if this normalization is for a dependency ID.
         * @returns {String} normalized name
         */
        function normalize(name, baseName, applyMap) {
            var pkgMain, mapValue, nameParts, i, j, nameSegment, lastIndex,
                foundMap, foundI, foundStarMap, starI, normalizedBaseParts,
                baseParts = (baseName && baseName.split('/')),
                map = config.map,
                starMap = map && map['*'];

            //Adjust any relative paths.
            if (name) {
                name = name.split('/');
                lastIndex = name.length - 1;

                // If wanting node ID compatibility, strip .js from end
                // of IDs. Have to do this here, and not in nameToUrl
                // because node allows either .js or non .js to map
                // to same file.
                if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                    name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
                }

                // Starts with a '.' so need the baseName
                if (name[0].charAt(0) === '.' && baseParts) {
                    //Convert baseName to array, and lop off the last part,
                    //so that . matches that 'directory' and not name of the baseName's
                    //module. For instance, baseName of 'one/two/three', maps to
                    //'one/two/three.js', but we want the directory, 'one/two' for
                    //this normalization.
                    normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                    name = normalizedBaseParts.concat(name);
                }

                trimDots(name);
                name = name.join('/');
            }

            //Apply map config if available.
            if (applyMap && map && (baseParts || starMap)) {
                nameParts = name.split('/');

                outerLoop: for (i = nameParts.length; i > 0; i -= 1) {
                    nameSegment = nameParts.slice(0, i).join('/');

                    if (baseParts) {
                        //Find the longest baseName segment match in the config.
                        //So, do joins on the biggest to smallest lengths of baseParts.
                        for (j = baseParts.length; j > 0; j -= 1) {
                            mapValue = getOwn(map, baseParts.slice(0, j).join('/'));

                            //baseName segment has config, find if it has one for
                            //this name.
                            if (mapValue) {
                                mapValue = getOwn(mapValue, nameSegment);
                                if (mapValue) {
                                    //Match, update name to the new value.
                                    foundMap = mapValue;
                                    foundI = i;
                                    break outerLoop;
                                }
                            }
                        }
                    }

                    //Check for a star map match, but just hold on to it,
                    //if there is a shorter segment match later in a matching
                    //config, then favor over this star map.
                    if (!foundStarMap && starMap && getOwn(starMap, nameSegment)) {
                        foundStarMap = getOwn(starMap, nameSegment);
                        starI = i;
                    }
                }

                if (!foundMap && foundStarMap) {
                    foundMap = foundStarMap;
                    foundI = starI;
                }

                if (foundMap) {
                    nameParts.splice(0, foundI, foundMap);
                    name = nameParts.join('/');
                }
            }

            // If the name points to a package's name, use
            // the package main instead.
            pkgMain = getOwn(config.pkgs, name);

            return pkgMain ? pkgMain : name;
        }

        function removeScript(name) {
            if (isBrowser) {
                each(scripts(), function (scriptNode) {
                    if (scriptNode.getAttribute('data-requiremodule') === name &&
                            scriptNode.getAttribute('data-requirecontext') === context.contextName) {
                        scriptNode.parentNode.removeChild(scriptNode);
                        return true;
                    }
                });
            }
        }

        function hasPathFallback(id) {
            var pathConfig = getOwn(config.paths, id);
            if (pathConfig && isArray(pathConfig) && pathConfig.length > 1) {
                //Pop off the first array value, since it failed, and
                //retry
                pathConfig.shift();
                context.require.undef(id);

                //Custom require that does not do map translation, since
                //ID is "absolute", already mapped/resolved.
                context.makeRequire(null, {
                    skipMap: true
                })([id]);

                return true;
            }
        }

        //Turns a plugin!resource to [plugin, resource]
        //with the plugin being undefined if the name
        //did not have a plugin prefix.
        function splitPrefix(name) {
            var prefix,
                index = name ? name.indexOf('!') : -1;
            if (index > -1) {
                prefix = name.substring(0, index);
                name = name.substring(index + 1, name.length);
            }
            return [prefix, name];
        }

        /**
         * Creates a module mapping that includes plugin prefix, module
         * name, and path. If parentModuleMap is provided it will
         * also normalize the name via require.normalize()
         *
         * @param {String} name the module name
         * @param {String} [parentModuleMap] parent module map
         * for the module name, used to resolve relative names.
         * @param {Boolean} isNormalized: is the ID already normalized.
         * This is true if this call is done for a define() module ID.
         * @param {Boolean} applyMap: apply the map config to the ID.
         * Should only be true if this map is for a dependency.
         *
         * @returns {Object}
         */
        function makeModuleMap(name, parentModuleMap, isNormalized, applyMap) {
            var url, pluginModule, suffix, nameParts,
                prefix = null,
                parentName = parentModuleMap ? parentModuleMap.name : null,
                originalName = name,
                isDefine = true,
                normalizedName = '';

            //If no name, then it means it is a require call, generate an
            //internal name.
            if (!name) {
                isDefine = false;
                name = '_@r' + (requireCounter += 1);
            }

            nameParts = splitPrefix(name);
            prefix = nameParts[0];
            name = nameParts[1];

            if (prefix) {
                prefix = normalize(prefix, parentName, applyMap);
                pluginModule = getOwn(defined, prefix);
            }

            //Account for relative paths if there is a base name.
            if (name) {
                if (prefix) {
                    if (pluginModule && pluginModule.normalize) {
                        //Plugin is loaded, use its normalize method.
                        normalizedName = pluginModule.normalize(name, function (name) {
                            return normalize(name, parentName, applyMap);
                        });
                    } else {
                        // If nested plugin references, then do not try to
                        // normalize, as it will not normalize correctly. This
                        // places a restriction on resourceIds, and the longer
                        // term solution is not to normalize until plugins are
                        // loaded and all normalizations to allow for async
                        // loading of a loader plugin. But for now, fixes the
                        // common uses. Details in #1131
                        normalizedName = name.indexOf('!') === -1 ?
                                         normalize(name, parentName, applyMap) :
                                         name;
                    }
                } else {
                    //A regular module.
                    normalizedName = normalize(name, parentName, applyMap);

                    //Normalized name may be a plugin ID due to map config
                    //application in normalize. The map config values must
                    //already be normalized, so do not need to redo that part.
                    nameParts = splitPrefix(normalizedName);
                    prefix = nameParts[0];
                    normalizedName = nameParts[1];
                    isNormalized = true;

                    url = context.nameToUrl(normalizedName);
                }
            }

            //If the id is a plugin id that cannot be determined if it needs
            //normalization, stamp it with a unique ID so two matching relative
            //ids that may conflict can be separate.
            suffix = prefix && !pluginModule && !isNormalized ?
                     '_unnormalized' + (unnormalizedCounter += 1) :
                     '';

            return {
                prefix: prefix,
                name: normalizedName,
                parentMap: parentModuleMap,
                unnormalized: !!suffix,
                url: url,
                originalName: originalName,
                isDefine: isDefine,
                id: (prefix ?
                        prefix + '!' + normalizedName :
                        normalizedName) + suffix
            };
        }

        function getModule(depMap) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (!mod) {
                mod = registry[id] = new context.Module(depMap);
            }

            return mod;
        }

        function on(depMap, name, fn) {
            var id = depMap.id,
                mod = getOwn(registry, id);

            if (hasProp(defined, id) &&
                    (!mod || mod.defineEmitComplete)) {
                if (name === 'defined') {
                    fn(defined[id]);
                }
            } else {
                mod = getModule(depMap);
                if (mod.error && name === 'error') {
                    fn(mod.error);
                } else {
                    mod.on(name, fn);
                }
            }
        }

        function onError(err, errback) {
            var ids = err.requireModules,
                notified = false;

            if (errback) {
                errback(err);
            } else {
                each(ids, function (id) {
                    var mod = getOwn(registry, id);
                    if (mod) {
                        //Set error on module, so it skips timeout checks.
                        mod.error = err;
                        if (mod.events.error) {
                            notified = true;
                            mod.emit('error', err);
                        }
                    }
                });

                if (!notified) {
                    req.onError(err);
                }
            }
        }

        /**
         * Internal method to transfer globalQueue items to this context's
         * defQueue.
         */
        function takeGlobalQueue() {
            //Push all the globalDefQueue items into the context's defQueue
            if (globalDefQueue.length) {
                //Array splice in the values since the context code has a
                //local var ref to defQueue, so cannot just reassign the one
                //on context.
                apsp.apply(defQueue,
                           [defQueue.length, 0].concat(globalDefQueue));
                globalDefQueue = [];
            }
        }

        handlers = {
            'require': function (mod) {
                if (mod.require) {
                    return mod.require;
                } else {
                    return (mod.require = context.makeRequire(mod.map));
                }
            },
            'exports': function (mod) {
                mod.usingExports = true;
                if (mod.map.isDefine) {
                    if (mod.exports) {
                        return (defined[mod.map.id] = mod.exports);
                    } else {
                        return (mod.exports = defined[mod.map.id] = {});
                    }
                }
            },
            'module': function (mod) {
                if (mod.module) {
                    return mod.module;
                } else {
                    return (mod.module = {
                        id: mod.map.id,
                        uri: mod.map.url,
                        config: function () {
                            return  getOwn(config.config, mod.map.id) || {};
                        },
                        exports: mod.exports || (mod.exports = {})
                    });
                }
            }
        };

        function cleanRegistry(id) {
            //Clean up machinery used for waiting modules.
            delete registry[id];
            delete enabledRegistry[id];
        }

        function breakCycle(mod, traced, processed) {
            var id = mod.map.id;

            if (mod.error) {
                mod.emit('error', mod.error);
            } else {
                traced[id] = true;
                each(mod.depMaps, function (depMap, i) {
                    var depId = depMap.id,
                        dep = getOwn(registry, depId);

                    //Only force things that have not completed
                    //being defined, so still in the registry,
                    //and only if it has not been matched up
                    //in the module already.
                    if (dep && !mod.depMatched[i] && !processed[depId]) {
                        if (getOwn(traced, depId)) {
                            mod.defineDep(i, defined[depId]);
                            mod.check(); //pass false?
                        } else {
                            breakCycle(dep, traced, processed);
                        }
                    }
                });
                processed[id] = true;
            }
        }

        function checkLoaded() {
            var err, usingPathFallback,
                waitInterval = config.waitSeconds * 1000,
                //It is possible to disable the wait interval by using waitSeconds of 0.
                expired = waitInterval && (context.startTime + waitInterval) < new Date().getTime(),
                noLoads = [],
                reqCalls = [],
                stillLoading = false,
                needCycleCheck = true;

            //Do not bother if this call was a result of a cycle break.
            if (inCheckLoaded) {
                return;
            }

            inCheckLoaded = true;

            //Figure out the state of all the modules.
            eachProp(enabledRegistry, function (mod) {
                var map = mod.map,
                    modId = map.id;

                //Skip things that are not enabled or in error state.
                if (!mod.enabled) {
                    return;
                }

                if (!map.isDefine) {
                    reqCalls.push(mod);
                }

                if (!mod.error) {
                    //If the module should be executed, and it has not
                    //been inited and time is up, remember it.
                    if (!mod.inited && expired) {
                        if (hasPathFallback(modId)) {
                            usingPathFallback = true;
                            stillLoading = true;
                        } else {
                            noLoads.push(modId);
                            removeScript(modId);
                        }
                    } else if (!mod.inited && mod.fetched && map.isDefine) {
                        stillLoading = true;
                        if (!map.prefix) {
                            //No reason to keep looking for unfinished
                            //loading. If the only stillLoading is a
                            //plugin resource though, keep going,
                            //because it may be that a plugin resource
                            //is waiting on a non-plugin cycle.
                            return (needCycleCheck = false);
                        }
                    }
                }
            });

            if (expired && noLoads.length) {
                //If wait time expired, throw error of unloaded modules.
                err = makeError('timeout', 'Load timeout for modules: ' + noLoads, null, noLoads);
                err.contextName = context.contextName;
                return onError(err);
            }

            //Not expired, check for a cycle.
            if (needCycleCheck) {
                each(reqCalls, function (mod) {
                    breakCycle(mod, {}, {});
                });
            }

            //If still waiting on loads, and the waiting load is something
            //other than a plugin resource, or there are still outstanding
            //scripts, then just try back later.
            if ((!expired || usingPathFallback) && stillLoading) {
                //Something is still waiting to load. Wait for it, but only
                //if a timeout is not already in effect.
                if ((isBrowser || isWebWorker) && !checkLoadedTimeoutId) {
                    checkLoadedTimeoutId = setTimeout(function () {
                        checkLoadedTimeoutId = 0;
                        checkLoaded();
                    }, 50);
                }
            }

            inCheckLoaded = false;
        }

        Module = function (map) {
            this.events = getOwn(undefEvents, map.id) || {};
            this.map = map;
            this.shim = getOwn(config.shim, map.id);
            this.depExports = [];
            this.depMaps = [];
            this.depMatched = [];
            this.pluginMaps = {};
            this.depCount = 0;

            /* this.exports this.factory
               this.depMaps = [],
               this.enabled, this.fetched
            */
        };

        Module.prototype = {
            init: function (depMaps, factory, errback, options) {
                options = options || {};

                //Do not do more inits if already done. Can happen if there
                //are multiple define calls for the same module. That is not
                //a normal, common case, but it is also not unexpected.
                if (this.inited) {
                    return;
                }

                this.factory = factory;

                if (errback) {
                    //Register for errors on this module.
                    this.on('error', errback);
                } else if (this.events.error) {
                    //If no errback already, but there are error listeners
                    //on this module, set up an errback to pass to the deps.
                    errback = bind(this, function (err) {
                        this.emit('error', err);
                    });
                }

                //Do a copy of the dependency array, so that
                //source inputs are not modified. For example
                //"shim" deps are passed in here directly, and
                //doing a direct modification of the depMaps array
                //would affect that config.
                this.depMaps = depMaps && depMaps.slice(0);

                this.errback = errback;

                //Indicate this module has be initialized
                this.inited = true;

                this.ignore = options.ignore;

                //Could have option to init this module in enabled mode,
                //or could have been previously marked as enabled. However,
                //the dependencies are not known until init is called. So
                //if enabled previously, now trigger dependencies as enabled.
                if (options.enabled || this.enabled) {
                    //Enable this module and dependencies.
                    //Will call this.check()
                    this.enable();
                } else {
                    this.check();
                }
            },

            defineDep: function (i, depExports) {
                //Because of cycles, defined callback for a given
                //export can be called more than once.
                if (!this.depMatched[i]) {
                    this.depMatched[i] = true;
                    this.depCount -= 1;
                    this.depExports[i] = depExports;
                }
            },

            fetch: function () {
                if (this.fetched) {
                    return;
                }
                this.fetched = true;

                context.startTime = (new Date()).getTime();

                var map = this.map;

                //If the manager is for a plugin managed resource,
                //ask the plugin to load it now.
                if (this.shim) {
                    context.makeRequire(this.map, {
                        enableBuildCallback: true
                    })(this.shim.deps || [], bind(this, function () {
                        return map.prefix ? this.callPlugin() : this.load();
                    }));
                } else {
                    //Regular dependency.
                    return map.prefix ? this.callPlugin() : this.load();
                }
            },

            load: function () {
                var url = this.map.url;

                //Regular dependency.
                if (!urlFetched[url]) {
                    urlFetched[url] = true;
                    context.load(this.map.id, url);
                }
            },

            /**
             * Checks if the module is ready to define itself, and if so,
             * define it.
             */
            check: function () {
                if (!this.enabled || this.enabling) {
                    return;
                }

                var err, cjsModule,
                    id = this.map.id,
                    depExports = this.depExports,
                    exports = this.exports,
                    factory = this.factory;

                if (!this.inited) {
                    this.fetch();
                } else if (this.error) {
                    this.emit('error', this.error);
                } else if (!this.defining) {
                    //The factory could trigger another require call
                    //that would result in checking this module to
                    //define itself again. If already in the process
                    //of doing that, skip this work.
                    this.defining = true;

                    if (this.depCount < 1 && !this.defined) {
                        if (isFunction(factory)) {
                            //If there is an error listener, favor passing
                            //to that instead of throwing an error. However,
                            //only do it for define()'d  modules. require
                            //errbacks should not be called for failures in
                            //their callbacks (#699). However if a global
                            //onError is set, use that.
                            if ((this.events.error && this.map.isDefine) ||
                                req.onError !== defaultOnError) {
                                try {
                                    exports = context.execCb(id, factory, depExports, exports);
                                } catch (e) {
                                    err = e;
                                }
                            } else {
                                exports = context.execCb(id, factory, depExports, exports);
                            }

                            // Favor return value over exports. If node/cjs in play,
                            // then will not have a return value anyway. Favor
                            // module.exports assignment over exports object.
                            if (this.map.isDefine && exports === undefined) {
                                cjsModule = this.module;
                                if (cjsModule) {
                                    exports = cjsModule.exports;
                                } else if (this.usingExports) {
                                    //exports already set the defined value.
                                    exports = this.exports;
                                }
                            }

                            if (err) {
                                err.requireMap = this.map;
                                err.requireModules = this.map.isDefine ? [this.map.id] : null;
                                err.requireType = this.map.isDefine ? 'define' : 'require';
                                return onError((this.error = err));
                            }

                        } else {
                            //Just a literal value
                            exports = factory;
                        }

                        this.exports = exports;

                        if (this.map.isDefine && !this.ignore) {
                            defined[id] = exports;

                            if (req.onResourceLoad) {
                                req.onResourceLoad(context, this.map, this.depMaps);
                            }
                        }

                        //Clean up
                        cleanRegistry(id);

                        this.defined = true;
                    }

                    //Finished the define stage. Allow calling check again
                    //to allow define notifications below in the case of a
                    //cycle.
                    this.defining = false;

                    if (this.defined && !this.defineEmitted) {
                        this.defineEmitted = true;
                        this.emit('defined', this.exports);
                        this.defineEmitComplete = true;
                    }

                }
            },

            callPlugin: function () {
                var map = this.map,
                    id = map.id,
                    //Map already normalized the prefix.
                    pluginMap = makeModuleMap(map.prefix);

                //Mark this as a dependency for this plugin, so it
                //can be traced for cycles.
                this.depMaps.push(pluginMap);

                on(pluginMap, 'defined', bind(this, function (plugin) {
                    var load, normalizedMap, normalizedMod,
                        bundleId = getOwn(bundlesMap, this.map.id),
                        name = this.map.name,
                        parentName = this.map.parentMap ? this.map.parentMap.name : null,
                        localRequire = context.makeRequire(map.parentMap, {
                            enableBuildCallback: true
                        });

                    //If current map is not normalized, wait for that
                    //normalized name to load instead of continuing.
                    if (this.map.unnormalized) {
                        //Normalize the ID if the plugin allows it.
                        if (plugin.normalize) {
                            name = plugin.normalize(name, function (name) {
                                return normalize(name, parentName, true);
                            }) || '';
                        }

                        //prefix and name should already be normalized, no need
                        //for applying map config again either.
                        normalizedMap = makeModuleMap(map.prefix + '!' + name,
                                                      this.map.parentMap);
                        on(normalizedMap,
                            'defined', bind(this, function (value) {
                                this.init([], function () { return value; }, null, {
                                    enabled: true,
                                    ignore: true
                                });
                            }));

                        normalizedMod = getOwn(registry, normalizedMap.id);
                        if (normalizedMod) {
                            //Mark this as a dependency for this plugin, so it
                            //can be traced for cycles.
                            this.depMaps.push(normalizedMap);

                            if (this.events.error) {
                                normalizedMod.on('error', bind(this, function (err) {
                                    this.emit('error', err);
                                }));
                            }
                            normalizedMod.enable();
                        }

                        return;
                    }

                    //If a paths config, then just load that file instead to
                    //resolve the plugin, as it is built into that paths layer.
                    if (bundleId) {
                        this.map.url = context.nameToUrl(bundleId);
                        this.load();
                        return;
                    }

                    load = bind(this, function (value) {
                        this.init([], function () { return value; }, null, {
                            enabled: true
                        });
                    });

                    load.error = bind(this, function (err) {
                        this.inited = true;
                        this.error = err;
                        err.requireModules = [id];

                        //Remove temp unnormalized modules for this module,
                        //since they will never be resolved otherwise now.
                        eachProp(registry, function (mod) {
                            if (mod.map.id.indexOf(id + '_unnormalized') === 0) {
                                cleanRegistry(mod.map.id);
                            }
                        });

                        onError(err);
                    });

                    //Allow plugins to load other code without having to know the
                    //context or how to 'complete' the load.
                    load.fromText = bind(this, function (text, textAlt) {
                        /*jslint evil: true */
                        var moduleName = map.name,
                            moduleMap = makeModuleMap(moduleName),
                            hasInteractive = useInteractive;

                        //As of 2.1.0, support just passing the text, to reinforce
                        //fromText only being called once per resource. Still
                        //support old style of passing moduleName but discard
                        //that moduleName in favor of the internal ref.
                        if (textAlt) {
                            text = textAlt;
                        }

                        //Turn off interactive script matching for IE for any define
                        //calls in the text, then turn it back on at the end.
                        if (hasInteractive) {
                            useInteractive = false;
                        }

                        //Prime the system by creating a module instance for
                        //it.
                        getModule(moduleMap);

                        //Transfer any config to this other module.
                        if (hasProp(config.config, id)) {
                            config.config[moduleName] = config.config[id];
                        }

                        try {
                            req.exec(text);
                        } catch (e) {
                            return onError(makeError('fromtexteval',
                                             'fromText eval for ' + id +
                                            ' failed: ' + e,
                                             e,
                                             [id]));
                        }

                        if (hasInteractive) {
                            useInteractive = true;
                        }

                        //Mark this as a dependency for the plugin
                        //resource
                        this.depMaps.push(moduleMap);

                        //Support anonymous modules.
                        context.completeLoad(moduleName);

                        //Bind the value of that module to the value for this
                        //resource ID.
                        localRequire([moduleName], load);
                    });

                    //Use parentName here since the plugin's name is not reliable,
                    //could be some weird string with no path that actually wants to
                    //reference the parentName's path.
                    plugin.load(map.name, localRequire, load, config);
                }));

                context.enable(pluginMap, this);
                this.pluginMaps[pluginMap.id] = pluginMap;
            },

            enable: function () {
                enabledRegistry[this.map.id] = this;
                this.enabled = true;

                //Set flag mentioning that the module is enabling,
                //so that immediate calls to the defined callbacks
                //for dependencies do not trigger inadvertent load
                //with the depCount still being zero.
                this.enabling = true;

                //Enable each dependency
                each(this.depMaps, bind(this, function (depMap, i) {
                    var id, mod, handler;

                    if (typeof depMap === 'string') {
                        //Dependency needs to be converted to a depMap
                        //and wired up to this module.
                        depMap = makeModuleMap(depMap,
                                               (this.map.isDefine ? this.map : this.map.parentMap),
                                               false,
                                               !this.skipMap);
                        this.depMaps[i] = depMap;

                        handler = getOwn(handlers, depMap.id);

                        if (handler) {
                            this.depExports[i] = handler(this);
                            return;
                        }

                        this.depCount += 1;

                        on(depMap, 'defined', bind(this, function (depExports) {
                            this.defineDep(i, depExports);
                            this.check();
                        }));

                        if (this.errback) {
                            on(depMap, 'error', bind(this, this.errback));
                        } else if (this.events.error) {
                            // No direct errback on this module, but something
                            // else is listening for errors, so be sure to
                            // propagate the error correctly.
                            on(depMap, 'error', bind(this, function(err) {
                                this.emit('error', err);
                            }));
                        }
                    }

                    id = depMap.id;
                    mod = registry[id];

                    //Skip special modules like 'require', 'exports', 'module'
                    //Also, don't call enable if it is already enabled,
                    //important in circular dependency cases.
                    if (!hasProp(handlers, id) && mod && !mod.enabled) {
                        context.enable(depMap, this);
                    }
                }));

                //Enable each plugin that is used in
                //a dependency
                eachProp(this.pluginMaps, bind(this, function (pluginMap) {
                    var mod = getOwn(registry, pluginMap.id);
                    if (mod && !mod.enabled) {
                        context.enable(pluginMap, this);
                    }
                }));

                this.enabling = false;

                this.check();
            },

            on: function (name, cb) {
                var cbs = this.events[name];
                if (!cbs) {
                    cbs = this.events[name] = [];
                }
                cbs.push(cb);
            },

            emit: function (name, evt) {
                each(this.events[name], function (cb) {
                    cb(evt);
                });
                if (name === 'error') {
                    //Now that the error handler was triggered, remove
                    //the listeners, since this broken Module instance
                    //can stay around for a while in the registry.
                    delete this.events[name];
                }
            }
        };

        function callGetModule(args) {
            //Skip modules already defined.
            if (!hasProp(defined, args[0])) {
                getModule(makeModuleMap(args[0], null, true)).init(args[1], args[2]);
            }
        }

        function removeListener(node, func, name, ieName) {
            //Favor detachEvent because of IE9
            //issue, see attachEvent/addEventListener comment elsewhere
            //in this file.
            if (node.detachEvent && !isOpera) {
                //Probably IE. If not it will throw an error, which will be
                //useful to know.
                if (ieName) {
                    node.detachEvent(ieName, func);
                }
            } else {
                node.removeEventListener(name, func, false);
            }
        }

        /**
         * Given an event from a script node, get the requirejs info from it,
         * and then removes the event listeners on the node.
         * @param {Event} evt
         * @returns {Object}
         */
        function getScriptData(evt) {
            //Using currentTarget instead of target for Firefox 2.0's sake. Not
            //all old browsers will be supported, but this one was easy enough
            //to support and still makes sense.
            var node = evt.currentTarget || evt.srcElement;

            //Remove the listeners once here.
            removeListener(node, context.onScriptLoad, 'load', 'onreadystatechange');
            removeListener(node, context.onScriptError, 'error');

            return {
                node: node,
                id: node && node.getAttribute('data-requiremodule')
            };
        }

        function intakeDefines() {
            var args;

            //Any defined modules in the global queue, intake them now.
            takeGlobalQueue();

            //Make sure any remaining defQueue items get properly processed.
            while (defQueue.length) {
                args = defQueue.shift();
                if (args[0] === null) {
                    return onError(makeError('mismatch', 'Mismatched anonymous define() module: ' + args[args.length - 1]));
                } else {
                    //args are id, deps, factory. Should be normalized by the
                    //define() function.
                    callGetModule(args);
                }
            }
        }

        context = {
            config: config,
            contextName: contextName,
            registry: registry,
            defined: defined,
            urlFetched: urlFetched,
            defQueue: defQueue,
            Module: Module,
            makeModuleMap: makeModuleMap,
            nextTick: req.nextTick,
            onError: onError,

            /**
             * Set a configuration for the context.
             * @param {Object} cfg config object to integrate.
             */
            configure: function (cfg) {
                //Make sure the baseUrl ends in a slash.
                if (cfg.baseUrl) {
                    if (cfg.baseUrl.charAt(cfg.baseUrl.length - 1) !== '/') {
                        cfg.baseUrl += '/';
                    }
                }

                //Save off the paths since they require special processing,
                //they are additive.
                var shim = config.shim,
                    objs = {
                        paths: true,
                        bundles: true,
                        config: true,
                        map: true
                    };

                eachProp(cfg, function (value, prop) {
                    if (objs[prop]) {
                        if (!config[prop]) {
                            config[prop] = {};
                        }
                        mixin(config[prop], value, true, true);
                    } else {
                        config[prop] = value;
                    }
                });

                //Reverse map the bundles
                if (cfg.bundles) {
                    eachProp(cfg.bundles, function (value, prop) {
                        each(value, function (v) {
                            if (v !== prop) {
                                bundlesMap[v] = prop;
                            }
                        });
                    });
                }

                //Merge shim
                if (cfg.shim) {
                    eachProp(cfg.shim, function (value, id) {
                        //Normalize the structure
                        if (isArray(value)) {
                            value = {
                                deps: value
                            };
                        }
                        if ((value.exports || value.init) && !value.exportsFn) {
                            value.exportsFn = context.makeShimExports(value);
                        }
                        shim[id] = value;
                    });
                    config.shim = shim;
                }

                //Adjust packages if necessary.
                if (cfg.packages) {
                    each(cfg.packages, function (pkgObj) {
                        var location, name;

                        pkgObj = typeof pkgObj === 'string' ? { name: pkgObj } : pkgObj;

                        name = pkgObj.name;
                        location = pkgObj.location;
                        if (location) {
                            config.paths[name] = pkgObj.location;
                        }

                        //Save pointer to main module ID for pkg name.
                        //Remove leading dot in main, so main paths are normalized,
                        //and remove any trailing .js, since different package
                        //envs have different conventions: some use a module name,
                        //some use a file name.
                        config.pkgs[name] = pkgObj.name + '/' + (pkgObj.main || 'main')
                                     .replace(currDirRegExp, '')
                                     .replace(jsSuffixRegExp, '');
                    });
                }

                //If there are any "waiting to execute" modules in the registry,
                //update the maps for them, since their info, like URLs to load,
                //may have changed.
                eachProp(registry, function (mod, id) {
                    //If module already has init called, since it is too
                    //late to modify them, and ignore unnormalized ones
                    //since they are transient.
                    if (!mod.inited && !mod.map.unnormalized) {
                        mod.map = makeModuleMap(id);
                    }
                });

                //If a deps array or a config callback is specified, then call
                //require with those args. This is useful when require is defined as a
                //config object before require.js is loaded.
                if (cfg.deps || cfg.callback) {
                    context.require(cfg.deps || [], cfg.callback);
                }
            },

            makeShimExports: function (value) {
                function fn() {
                    var ret;
                    if (value.init) {
                        ret = value.init.apply(global, arguments);
                    }
                    return ret || (value.exports && getGlobal(value.exports));
                }
                return fn;
            },

            makeRequire: function (relMap, options) {
                options = options || {};

                function localRequire(deps, callback, errback) {
                    var id, map, requireMod;

                    if (options.enableBuildCallback && callback && isFunction(callback)) {
                        callback.__requireJsBuild = true;
                    }

                    if (typeof deps === 'string') {
                        if (isFunction(callback)) {
                            //Invalid call
                            return onError(makeError('requireargs', 'Invalid require call'), errback);
                        }

                        //If require|exports|module are requested, get the
                        //value for them from the special handlers. Caveat:
                        //this only works while module is being defined.
                        if (relMap && hasProp(handlers, deps)) {
                            return handlers[deps](registry[relMap.id]);
                        }

                        //Synchronous access to one module. If require.get is
                        //available (as in the Node adapter), prefer that.
                        if (req.get) {
                            return req.get(context, deps, relMap, localRequire);
                        }

                        //Normalize module name, if it contains . or ..
                        map = makeModuleMap(deps, relMap, false, true);
                        id = map.id;

                        if (!hasProp(defined, id)) {
                            return onError(makeError('notloaded', 'Module name "' +
                                        id +
                                        '" has not been loaded yet for context: ' +
                                        contextName +
                                        (relMap ? '' : '. Use require([])')));
                        }
                        return defined[id];
                    }

                    //Grab defines waiting in the global queue.
                    intakeDefines();

                    //Mark all the dependencies as needing to be loaded.
                    context.nextTick(function () {
                        //Some defines could have been added since the
                        //require call, collect them.
                        intakeDefines();

                        requireMod = getModule(makeModuleMap(null, relMap));

                        //Store if map config should be applied to this require
                        //call for dependencies.
                        requireMod.skipMap = options.skipMap;

                        requireMod.init(deps, callback, errback, {
                            enabled: true
                        });

                        checkLoaded();
                    });

                    return localRequire;
                }

                mixin(localRequire, {
                    isBrowser: isBrowser,

                    /**
                     * Converts a module name + .extension into an URL path.
                     * *Requires* the use of a module name. It does not support using
                     * plain URLs like nameToUrl.
                     */
                    toUrl: function (moduleNamePlusExt) {
                        var ext,
                            index = moduleNamePlusExt.lastIndexOf('.'),
                            segment = moduleNamePlusExt.split('/')[0],
                            isRelative = segment === '.' || segment === '..';

                        //Have a file extension alias, and it is not the
                        //dots from a relative path.
                        if (index !== -1 && (!isRelative || index > 1)) {
                            ext = moduleNamePlusExt.substring(index, moduleNamePlusExt.length);
                            moduleNamePlusExt = moduleNamePlusExt.substring(0, index);
                        }

                        return context.nameToUrl(normalize(moduleNamePlusExt,
                                                relMap && relMap.id, true), ext,  true);
                    },

                    defined: function (id) {
                        return hasProp(defined, makeModuleMap(id, relMap, false, true).id);
                    },

                    specified: function (id) {
                        id = makeModuleMap(id, relMap, false, true).id;
                        return hasProp(defined, id) || hasProp(registry, id);
                    }
                });

                //Only allow undef on top level require calls
                if (!relMap) {
                    localRequire.undef = function (id) {
                        //Bind any waiting define() calls to this context,
                        //fix for #408
                        takeGlobalQueue();

                        var map = makeModuleMap(id, relMap, true),
                            mod = getOwn(registry, id);

                        removeScript(id);

                        delete defined[id];
                        delete urlFetched[map.url];
                        delete undefEvents[id];

                        //Clean queued defines too. Go backwards
                        //in array so that the splices do not
                        //mess up the iteration.
                        eachReverse(defQueue, function(args, i) {
                            if(args[0] === id) {
                                defQueue.splice(i, 1);
                            }
                        });

                        if (mod) {
                            //Hold on to listeners in case the
                            //module will be attempted to be reloaded
                            //using a different config.
                            if (mod.events.defined) {
                                undefEvents[id] = mod.events;
                            }

                            cleanRegistry(id);
                        }
                    };
                }

                return localRequire;
            },

            /**
             * Called to enable a module if it is still in the registry
             * awaiting enablement. A second arg, parent, the parent module,
             * is passed in for context, when this method is overridden by
             * the optimizer. Not shown here to keep code compact.
             */
            enable: function (depMap) {
                var mod = getOwn(registry, depMap.id);
                if (mod) {
                    getModule(depMap).enable();
                }
            },

            /**
             * Internal method used by environment adapters to complete a load event.
             * A load event could be a script load or just a load pass from a synchronous
             * load call.
             * @param {String} moduleName the name of the module to potentially complete.
             */
            completeLoad: function (moduleName) {
                var found, args, mod,
                    shim = getOwn(config.shim, moduleName) || {},
                    shExports = shim.exports;

                takeGlobalQueue();

                while (defQueue.length) {
                    args = defQueue.shift();
                    if (args[0] === null) {
                        args[0] = moduleName;
                        //If already found an anonymous module and bound it
                        //to this name, then this is some other anon module
                        //waiting for its completeLoad to fire.
                        if (found) {
                            break;
                        }
                        found = true;
                    } else if (args[0] === moduleName) {
                        //Found matching define call for this script!
                        found = true;
                    }

                    callGetModule(args);
                }

                //Do this after the cycle of callGetModule in case the result
                //of those calls/init calls changes the registry.
                mod = getOwn(registry, moduleName);

                if (!found && !hasProp(defined, moduleName) && mod && !mod.inited) {
                    if (config.enforceDefine && (!shExports || !getGlobal(shExports))) {
                        if (hasPathFallback(moduleName)) {
                            return;
                        } else {
                            return onError(makeError('nodefine',
                                             'No define call for ' + moduleName,
                                             null,
                                             [moduleName]));
                        }
                    } else {
                        //A script that does not call define(), so just simulate
                        //the call for it.
                        callGetModule([moduleName, (shim.deps || []), shim.exportsFn]);
                    }
                }

                checkLoaded();
            },

            /**
             * Converts a module name to a file path. Supports cases where
             * moduleName may actually be just an URL.
             * Note that it **does not** call normalize on the moduleName,
             * it is assumed to have already been normalized. This is an
             * internal API, not a public one. Use toUrl for the public API.
             */
            nameToUrl: function (moduleName, ext, skipExt) {
                var paths, syms, i, parentModule, url,
                    parentPath, bundleId,
                    pkgMain = getOwn(config.pkgs, moduleName);

                if (pkgMain) {
                    moduleName = pkgMain;
                }

                bundleId = getOwn(bundlesMap, moduleName);

                if (bundleId) {
                    return context.nameToUrl(bundleId, ext, skipExt);
                }

                //If a colon is in the URL, it indicates a protocol is used and it is just
                //an URL to a file, or if it starts with a slash, contains a query arg (i.e. ?)
                //or ends with .js, then assume the user meant to use an url and not a module id.
                //The slash is important for protocol-less URLs as well as full paths.
                if (req.jsExtRegExp.test(moduleName)) {
                    //Just a plain path, not module name lookup, so just return it.
                    //Add extension if it is included. This is a bit wonky, only non-.js things pass
                    //an extension, this method probably needs to be reworked.
                    url = moduleName + (ext || '');
                } else {
                    //A module that needs to be converted to a path.
                    paths = config.paths;

                    syms = moduleName.split('/');
                    //For each module name segment, see if there is a path
                    //registered for it. Start with most specific name
                    //and work up from it.
                    for (i = syms.length; i > 0; i -= 1) {
                        parentModule = syms.slice(0, i).join('/');

                        parentPath = getOwn(paths, parentModule);
                        if (parentPath) {
                            //If an array, it means there are a few choices,
                            //Choose the one that is desired
                            if (isArray(parentPath)) {
                                parentPath = parentPath[0];
                            }
                            syms.splice(0, i, parentPath);
                            break;
                        }
                    }

                    //Join the path parts together, then figure out if baseUrl is needed.
                    url = syms.join('/');
                    url += (ext || (/^data\:|\?/.test(url) || skipExt ? '' : '.js'));
                    url = (url.charAt(0) === '/' || url.match(/^[\w\+\.\-]+:/) ? '' : config.baseUrl) + url;
                }

                return config.urlArgs ? url +
                                        ((url.indexOf('?') === -1 ? '?' : '&') +
                                         config.urlArgs) : url;
            },

            //Delegates to req.load. Broken out as a separate function to
            //allow overriding in the optimizer.
            load: function (id, url) {
                req.load(context, id, url);
            },

            /**
             * Executes a module callback function. Broken out as a separate function
             * solely to allow the build system to sequence the files in the built
             * layer in the right sequence.
             *
             * @private
             */
            execCb: function (name, callback, args, exports) {
                return callback.apply(exports, args);
            },

            /**
             * callback for script loads, used to check status of loading.
             *
             * @param {Event} evt the event from the browser for the script
             * that was loaded.
             */
            onScriptLoad: function (evt) {
                //Using currentTarget instead of target for Firefox 2.0's sake. Not
                //all old browsers will be supported, but this one was easy enough
                //to support and still makes sense.
                if (evt.type === 'load' ||
                        (readyRegExp.test((evt.currentTarget || evt.srcElement).readyState))) {
                    //Reset interactive script so a script node is not held onto for
                    //to long.
                    interactiveScript = null;

                    //Pull out the name of the module and the context.
                    var data = getScriptData(evt);
                    context.completeLoad(data.id);
                }
            },

            /**
             * Callback for script errors.
             */
            onScriptError: function (evt) {
                var data = getScriptData(evt);
                if (!hasPathFallback(data.id)) {
                    return onError(makeError('scripterror', 'Script error for: ' + data.id, evt, [data.id]));
                }
            }
        };

        context.require = context.makeRequire();
        return context;
    }

    /**
     * Main entry point.
     *
     * If the only argument to require is a string, then the module that
     * is represented by that string is fetched for the appropriate context.
     *
     * If the first argument is an array, then it will be treated as an array
     * of dependency string names to fetch. An optional function callback can
     * be specified to execute when all of those dependencies are available.
     *
     * Make a local req variable to help Caja compliance (it assumes things
     * on a require that are not standardized), and to give a short
     * name for minification/local scope use.
     */
    req = requirejs = function (deps, callback, errback, optional) {

        //Find the right context, use default
        var context, config,
            contextName = defContextName;

        // Determine if have config object in the call.
        if (!isArray(deps) && typeof deps !== 'string') {
            // deps is a config object
            config = deps;
            if (isArray(callback)) {
                // Adjust args if there are dependencies
                deps = callback;
                callback = errback;
                errback = optional;
            } else {
                deps = [];
            }
        }

        if (config && config.context) {
            contextName = config.context;
        }

        context = getOwn(contexts, contextName);
        if (!context) {
            context = contexts[contextName] = req.s.newContext(contextName);
        }

        if (config) {
            context.configure(config);
        }

        return context.require(deps, callback, errback);
    };

    /**
     * Support require.config() to make it easier to cooperate with other
     * AMD loaders on globally agreed names.
     */
    req.config = function (config) {
        return req(config);
    };

    /**
     * Execute something after the current tick
     * of the event loop. Override for other envs
     * that have a better solution than setTimeout.
     * @param  {Function} fn function to execute later.
     */
    req.nextTick = typeof setTimeout !== 'undefined' ? function (fn) {
        setTimeout(fn, 4);
    } : function (fn) { fn(); };

    /**
     * Export require as a global, but only if it does not already exist.
     */
    if (!require) {
        require = req;
    }

    req.version = version;

    //Used to filter out dependencies that are already paths.
    req.jsExtRegExp = /^\/|:|\?|\.js$/;
    req.isBrowser = isBrowser;
    s = req.s = {
        contexts: contexts,
        newContext: newContext
    };

    //Create default context.
    req({});

    //Exports some context-sensitive methods on global require.
    each([
        'toUrl',
        'undef',
        'defined',
        'specified'
    ], function (prop) {
        //Reference from contexts instead of early binding to default context,
        //so that during builds, the latest instance of the default context
        //with its config gets used.
        req[prop] = function () {
            var ctx = contexts[defContextName];
            return ctx.require[prop].apply(ctx, arguments);
        };
    });

    if (isBrowser) {
        head = s.head = document.getElementsByTagName('head')[0];
        //If BASE tag is in play, using appendChild is a problem for IE6.
        //When that browser dies, this can be removed. Details in this jQuery bug:
        //http://dev.jquery.com/ticket/2709
        baseElement = document.getElementsByTagName('base')[0];
        if (baseElement) {
            head = s.head = baseElement.parentNode;
        }
    }

    /**
     * Any errors that require explicitly generates will be passed to this
     * function. Intercept/override it if you want custom error handling.
     * @param {Error} err the error object.
     */
    req.onError = defaultOnError;

    /**
     * Creates the node for the load command. Only used in browser envs.
     */
    req.createNode = function (config, moduleName, url) {
        var node = config.xhtml ?
                document.createElementNS('http://www.w3.org/1999/xhtml', 'html:script') :
                document.createElement('script');
        node.type = config.scriptType || 'text/javascript';
        node.charset = 'utf-8';
        node.async = true;
        return node;
    };

    /**
     * Does the request to load a module for the browser case.
     * Make this a separate function to allow other environments
     * to override it.
     *
     * @param {Object} context the require context to find state.
     * @param {String} moduleName the name of the module.
     * @param {Object} url the URL to the module.
     */
    req.load = function (context, moduleName, url) {
        var config = (context && context.config) || {},
            node;
        if (isBrowser) {
            //In the browser so use a script tag
            node = req.createNode(config, moduleName, url);

            node.setAttribute('data-requirecontext', context.contextName);
            node.setAttribute('data-requiremodule', moduleName);

            //Set up load listener. Test attachEvent first because IE9 has
            //a subtle issue in its addEventListener and script onload firings
            //that do not match the behavior of all other browsers with
            //addEventListener support, which fire the onload event for a
            //script right after the script execution. See:
            //https://connect.microsoft.com/IE/feedback/details/648057/script-onload-event-is-not-fired-immediately-after-script-execution
            //UNFORTUNATELY Opera implements attachEvent but does not follow the script
            //script execution mode.
            if (node.attachEvent &&
                    //Check if node.attachEvent is artificially added by custom script or
                    //natively supported by browser
                    //read https://github.com/jrburke/requirejs/issues/187
                    //if we can NOT find [native code] then it must NOT natively supported.
                    //in IE8, node.attachEvent does not have toString()
                    //Note the test for "[native code" with no closing brace, see:
                    //https://github.com/jrburke/requirejs/issues/273
                    !(node.attachEvent.toString && node.attachEvent.toString().indexOf('[native code') < 0) &&
                    !isOpera) {
                //Probably IE. IE (at least 6-8) do not fire
                //script onload right after executing the script, so
                //we cannot tie the anonymous define call to a name.
                //However, IE reports the script as being in 'interactive'
                //readyState at the time of the define call.
                useInteractive = true;

                node.attachEvent('onreadystatechange', context.onScriptLoad);
                //It would be great to add an error handler here to catch
                //404s in IE9+. However, onreadystatechange will fire before
                //the error handler, so that does not help. If addEventListener
                //is used, then IE will fire error before load, but we cannot
                //use that pathway given the connect.microsoft.com issue
                //mentioned above about not doing the 'script execute,
                //then fire the script load event listener before execute
                //next script' that other browsers do.
                //Best hope: IE10 fixes the issues,
                //and then destroys all installs of IE 6-9.
                //node.attachEvent('onerror', context.onScriptError);
            } else {
                node.addEventListener('load', context.onScriptLoad, false);
                node.addEventListener('error', context.onScriptError, false);
            }
            node.src = url;

            //For some cache cases in IE 6-8, the script executes before the end
            //of the appendChild execution, so to tie an anonymous define
            //call to the module name (which is stored on the node), hold on
            //to a reference to this node, but clear after the DOM insertion.
            currentlyAddingScript = node;
            if (baseElement) {
                head.insertBefore(node, baseElement);
            } else {
                head.appendChild(node);
            }
            currentlyAddingScript = null;

            return node;
        } else if (isWebWorker) {
            try {
                //In a web worker, use importScripts. This is not a very
                //efficient use of importScripts, importScripts will block until
                //its script is downloaded and evaluated. However, if web workers
                //are in play, the expectation that a build has been done so that
                //only one script needs to be loaded anyway. This may need to be
                //reevaluated if other use cases become common.
                importScripts(url);

                //Account for anonymous modules
                context.completeLoad(moduleName);
            } catch (e) {
                context.onError(makeError('importscripts',
                                'importScripts failed for ' +
                                    moduleName + ' at ' + url,
                                e,
                                [moduleName]));
            }
        }
    };

    function getInteractiveScript() {
        if (interactiveScript && interactiveScript.readyState === 'interactive') {
            return interactiveScript;
        }

        eachReverse(scripts(), function (script) {
            if (script.readyState === 'interactive') {
                return (interactiveScript = script);
            }
        });
        return interactiveScript;
    }

    //Look for a data-main script attribute, which could also adjust the baseUrl.
    if (isBrowser && !cfg.skipDataMain) {
        //Figure out baseUrl. Get it from the script tag with require.js in it.
        eachReverse(scripts(), function (script) {
            //Set the 'head' where we can append children by
            //using the script's parent.
            if (!head) {
                head = script.parentNode;
            }

            //Look for a data-main attribute to set main script for the page
            //to load. If it is there, the path to data main becomes the
            //baseUrl, if it is not already set.
            dataMain = script.getAttribute('data-main');
            if (dataMain) {
                //Preserve dataMain in case it is a path (i.e. contains '?')
                mainScript = dataMain;

                //Set final baseUrl if there is not already an explicit one.
                if (!cfg.baseUrl) {
                    //Pull off the directory of data-main for use as the
                    //baseUrl.
                    src = mainScript.split('/');
                    mainScript = src.pop();
                    subPath = src.length ? src.join('/')  + '/' : './';

                    cfg.baseUrl = subPath;
                }

                //Strip off any trailing .js since mainScript is now
                //like a module name.
                mainScript = mainScript.replace(jsSuffixRegExp, '');

                 //If mainScript is still a path, fall back to dataMain
                if (req.jsExtRegExp.test(mainScript)) {
                    mainScript = dataMain;
                }

                //Put the data-main script in the files to load.
                cfg.deps = cfg.deps ? cfg.deps.concat(mainScript) : [mainScript];

                return true;
            }
        });
    }

    /**
     * The function that handles definitions of modules. Differs from
     * require() in that a string for the module should be the first argument,
     * and the function to execute after dependencies are loaded should
     * return a value to define the module corresponding to the first argument's
     * name.
     */
    define = function (name, deps, callback) {
        var node, context;

        //Allow for anonymous modules
        if (typeof name !== 'string') {
            //Adjust args appropriately
            callback = deps;
            deps = name;
            name = null;
        }

        //This module may not have dependencies
        if (!isArray(deps)) {
            callback = deps;
            deps = null;
        }

        //If no name, and callback is a function, then figure out if it a
        //CommonJS thing with dependencies.
        if (!deps && isFunction(callback)) {
            deps = [];
            //Remove comments from the callback string,
            //look for require calls, and pull them into the dependencies,
            //but only if there are function args.
            if (callback.length) {
                callback
                    .toString()
                    .replace(commentRegExp, '')
                    .replace(cjsRequireRegExp, function (match, dep) {
                        deps.push(dep);
                    });

                //May be a CommonJS thing even without require calls, but still
                //could use exports, and module. Avoid doing exports and module
                //work though if it just needs require.
                //REQUIRES the function to expect the CommonJS variables in the
                //order listed below.
                deps = (callback.length === 1 ? ['require'] : ['require', 'exports', 'module']).concat(deps);
            }
        }

        //If in IE 6-8 and hit an anonymous define() call, do the interactive
        //work.
        if (useInteractive) {
            node = currentlyAddingScript || getInteractiveScript();
            if (node) {
                if (!name) {
                    name = node.getAttribute('data-requiremodule');
                }
                context = contexts[node.getAttribute('data-requirecontext')];
            }
        }

        //Always save off evaluating the def call until the script onload handler.
        //This allows multiple modules to be in a file without prematurely
        //tracing dependencies, and allows for anonymous module support,
        //where the module name is not known until the script onload event
        //occurs. If no context, use the global queue, and get it processed
        //in the onscript load callback.
        (context ? context.defQueue : globalDefQueue).push([name, deps, callback]);
    };

    define.amd = {
        jQuery: true
    };


    /**
     * Executes the text. Normally just uses eval, but can be modified
     * to use a better, environment-specific call. Only used for transpiling
     * loader plugins, not for plain JS modules.
     * @param {String} text the text to execute/evaluate.
     */
    req.exec = function (text) {
        /*jslint evil: true */
        return eval(text);
    };

    //Set up with config info.
    req(cfg);
}(this));

define("requireLib", function(){});

/**
 * Exports a singleton {@link module:core/Timer~Timer|Timer}.
 * @module core/Timer
 */
define(
  'core/Timer',[],function() {

    /**
     * @class Timer
     */
    var Timer = function() {

      /**
       * Current time.
       * @memberOf module:core/Timer~Timer
       * @instance
       * @type {number}
       * @name time
       */
      this.time = 0;

      /**
       * @memberOf module:core/Timer~Timer
       * @instance
       * @type {number}
       * @name lastTime
       */
      this.lastTime = 0;

      /**
       * @memberOf module:core/Timer~Timer
       * @instance
       * @type {number}
       * @name lastFrameTime
       */
      this.lastFrameTime = 0;

      /**
       * Tick counter.
       * @memberOf module:core/Timer~Timer
       * @instance
       * @type {number}
       * @name frameTicks
       */
      this.frameTicks = 0;

      /**
       * Current frames per second, calculated by Timer.tick().
       * @memberOf module:core/Timer~Timer
       * @instance
       * @type {number}
       * @name fps
       */
      this.fps = 60;
    };

    /**
     * 1second / 60frames = 0.016666666667
     * @constant
     * @memberOf module:core/Timer~Timer
     * @type {number}
     */
    Timer.FRAME_RATE_60FPS = 0.016666666667; // 1.0 second / 60.0 frames

    /**
     * Calculates the rate of frames per second the engine is running.
     * It is called on each cycle of engine update.
     * @memberOf module:core/Timer~Timer
     * @instance
     */
    Timer.prototype.tick = function() {
      var now = Date.now();

      this.time += now - this.lastTime;
      this.lastTime = now;

      // Initiates lastFrameTime for first cycle
      if( this.lastFrameTime == 0 ) {
        this.lastFrameTime = this.time;
      }

      var frameDelta = this.time - this.lastFrameTime;

      if( frameDelta >= 1000 ) {
        // Gets the stored frame ticks for 1 second (FPS)
        this.fps = this.frameTicks;
        this.frameTicks = 0;
        this.lastFrameTime = this.time;
      }

      // Frame counting
      this.frameTicks++;
    };

    var instance = null;

    /**
     * Gets the singleton instance of {@link module:core/Timer~Timer|Timer}.
     * @memberOf module:core/Timer
     * @returns module:core/Timer~Timer|Timer
     */
    function getInstance() {
      if( instance === null ) {
        instance = new Timer();
      }
      return instance;
    }

    return getInstance();
  }
);

// File:src/Three.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

var THREE = { REVISION: '69' };

// browserify support

if ( typeof module === 'object' ) {

	module.exports = THREE;

}

// polyfills

if ( Math.sign === undefined ) {

	Math.sign = function ( x ) {

		return ( x < 0 ) ? - 1 : ( x > 0 ) ? 1 : 0;

	};

}

// https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent.button

THREE.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2 };

// GL STATE CONSTANTS

THREE.CullFaceNone = 0;
THREE.CullFaceBack = 1;
THREE.CullFaceFront = 2;
THREE.CullFaceFrontBack = 3;

THREE.FrontFaceDirectionCW = 0;
THREE.FrontFaceDirectionCCW = 1;

// SHADOWING TYPES

THREE.BasicShadowMap = 0;
THREE.PCFShadowMap = 1;
THREE.PCFSoftShadowMap = 2;

// MATERIAL CONSTANTS

// side

THREE.FrontSide = 0;
THREE.BackSide = 1;
THREE.DoubleSide = 2;

// shading

THREE.NoShading = 0;
THREE.FlatShading = 1;
THREE.SmoothShading = 2;

// colors

THREE.NoColors = 0;
THREE.FaceColors = 1;
THREE.VertexColors = 2;

// blending modes

THREE.NoBlending = 0;
THREE.NormalBlending = 1;
THREE.AdditiveBlending = 2;
THREE.SubtractiveBlending = 3;
THREE.MultiplyBlending = 4;
THREE.CustomBlending = 5;

// custom blending equations
// (numbers start from 100 not to clash with other
//  mappings to OpenGL constants defined in Texture.js)

THREE.AddEquation = 100;
THREE.SubtractEquation = 101;
THREE.ReverseSubtractEquation = 102;
THREE.MinEquation = 103;
THREE.MaxEquation = 104;

// custom blending destination factors

THREE.ZeroFactor = 200;
THREE.OneFactor = 201;
THREE.SrcColorFactor = 202;
THREE.OneMinusSrcColorFactor = 203;
THREE.SrcAlphaFactor = 204;
THREE.OneMinusSrcAlphaFactor = 205;
THREE.DstAlphaFactor = 206;
THREE.OneMinusDstAlphaFactor = 207;

// custom blending source factors

//THREE.ZeroFactor = 200;
//THREE.OneFactor = 201;
//THREE.SrcAlphaFactor = 204;
//THREE.OneMinusSrcAlphaFactor = 205;
//THREE.DstAlphaFactor = 206;
//THREE.OneMinusDstAlphaFactor = 207;
THREE.DstColorFactor = 208;
THREE.OneMinusDstColorFactor = 209;
THREE.SrcAlphaSaturateFactor = 210;


// TEXTURE CONSTANTS

THREE.MultiplyOperation = 0;
THREE.MixOperation = 1;
THREE.AddOperation = 2;

// Mapping modes

THREE.UVMapping = function () {};

THREE.CubeReflectionMapping = function () {};
THREE.CubeRefractionMapping = function () {};

THREE.SphericalReflectionMapping = function () {};
THREE.SphericalRefractionMapping = function () {};

// Wrapping modes

THREE.RepeatWrapping = 1000;
THREE.ClampToEdgeWrapping = 1001;
THREE.MirroredRepeatWrapping = 1002;

// Filters

THREE.NearestFilter = 1003;
THREE.NearestMipMapNearestFilter = 1004;
THREE.NearestMipMapLinearFilter = 1005;
THREE.LinearFilter = 1006;
THREE.LinearMipMapNearestFilter = 1007;
THREE.LinearMipMapLinearFilter = 1008;

// Data types

THREE.UnsignedByteType = 1009;
THREE.ByteType = 1010;
THREE.ShortType = 1011;
THREE.UnsignedShortType = 1012;
THREE.IntType = 1013;
THREE.UnsignedIntType = 1014;
THREE.FloatType = 1015;

// Pixel types

//THREE.UnsignedByteType = 1009;
THREE.UnsignedShort4444Type = 1016;
THREE.UnsignedShort5551Type = 1017;
THREE.UnsignedShort565Type = 1018;

// Pixel formats

THREE.AlphaFormat = 1019;
THREE.RGBFormat = 1020;
THREE.RGBAFormat = 1021;
THREE.LuminanceFormat = 1022;
THREE.LuminanceAlphaFormat = 1023;

// DDS / ST3C Compressed texture formats

THREE.RGB_S3TC_DXT1_Format = 2001;
THREE.RGBA_S3TC_DXT1_Format = 2002;
THREE.RGBA_S3TC_DXT3_Format = 2003;
THREE.RGBA_S3TC_DXT5_Format = 2004;


// PVRTC compressed texture formats

THREE.RGB_PVRTC_4BPPV1_Format = 2100;
THREE.RGB_PVRTC_2BPPV1_Format = 2101;
THREE.RGBA_PVRTC_4BPPV1_Format = 2102;
THREE.RGBA_PVRTC_2BPPV1_Format = 2103;


// File:src/math/Color.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Color = function ( color ) {

	if ( arguments.length === 3 ) {

		return this.setRGB( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] );

	}

	return this.set( color )

};

THREE.Color.prototype = {

	constructor: THREE.Color,

	r: 1, g: 1, b: 1,

	set: function ( value ) {

		if ( value instanceof THREE.Color ) {

			this.copy( value );

		} else if ( typeof value === 'number' ) {

			this.setHex( value );

		} else if ( typeof value === 'string' ) {

			this.setStyle( value );

		}

		return this;

	},

	setHex: function ( hex ) {

		hex = Math.floor( hex );

		this.r = ( hex >> 16 & 255 ) / 255;
		this.g = ( hex >> 8 & 255 ) / 255;
		this.b = ( hex & 255 ) / 255;

		return this;

	},

	setRGB: function ( r, g, b ) {

		this.r = r;
		this.g = g;
		this.b = b;

		return this;

	},

	setHSL: function ( h, s, l ) {

		// h,s,l ranges are in 0.0 - 1.0

		if ( s === 0 ) {

			this.r = this.g = this.b = l;

		} else {

			var hue2rgb = function ( p, q, t ) {

				if ( t < 0 ) t += 1;
				if ( t > 1 ) t -= 1;
				if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
				if ( t < 1 / 2 ) return q;
				if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
				return p;

			};

			var p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
			var q = ( 2 * l ) - p;

			this.r = hue2rgb( q, p, h + 1 / 3 );
			this.g = hue2rgb( q, p, h );
			this.b = hue2rgb( q, p, h - 1 / 3 );

		}

		return this;

	},

	setStyle: function ( style ) {

		// rgb(255,0,0)

		if ( /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.test( style ) ) {

			var color = /^rgb\((\d+), ?(\d+), ?(\d+)\)$/i.exec( style );

			this.r = Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255;
			this.g = Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255;
			this.b = Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255;

			return this;

		}

		// rgb(100%,0%,0%)

		if ( /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.test( style ) ) {

			var color = /^rgb\((\d+)\%, ?(\d+)\%, ?(\d+)\%\)$/i.exec( style );

			this.r = Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100;
			this.g = Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100;
			this.b = Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100;

			return this;

		}

		// #ff0000

		if ( /^\#([0-9a-f]{6})$/i.test( style ) ) {

			var color = /^\#([0-9a-f]{6})$/i.exec( style );

			this.setHex( parseInt( color[ 1 ], 16 ) );

			return this;

		}

		// #f00

		if ( /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test( style ) ) {

			var color = /^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec( style );

			this.setHex( parseInt( color[ 1 ] + color[ 1 ] + color[ 2 ] + color[ 2 ] + color[ 3 ] + color[ 3 ], 16 ) );

			return this;

		}

		// red

		if ( /^(\w+)$/i.test( style ) ) {

			this.setHex( THREE.ColorKeywords[ style ] );

			return this;

		}


	},

	copy: function ( color ) {

		this.r = color.r;
		this.g = color.g;
		this.b = color.b;

		return this;

	},

	copyGammaToLinear: function ( color ) {

		this.r = color.r * color.r;
		this.g = color.g * color.g;
		this.b = color.b * color.b;

		return this;

	},

	copyLinearToGamma: function ( color ) {

		this.r = Math.sqrt( color.r );
		this.g = Math.sqrt( color.g );
		this.b = Math.sqrt( color.b );

		return this;

	},

	convertGammaToLinear: function () {

		var r = this.r, g = this.g, b = this.b;

		this.r = r * r;
		this.g = g * g;
		this.b = b * b;

		return this;

	},

	convertLinearToGamma: function () {

		this.r = Math.sqrt( this.r );
		this.g = Math.sqrt( this.g );
		this.b = Math.sqrt( this.b );

		return this;

	},

	getHex: function () {

		return ( this.r * 255 ) << 16 ^ ( this.g * 255 ) << 8 ^ ( this.b * 255 ) << 0;

	},

	getHexString: function () {

		return ( '000000' + this.getHex().toString( 16 ) ).slice( - 6 );

	},

	getHSL: function ( optionalTarget ) {

		// h,s,l ranges are in 0.0 - 1.0

		var hsl = optionalTarget || { h: 0, s: 0, l: 0 };

		var r = this.r, g = this.g, b = this.b;

		var max = Math.max( r, g, b );
		var min = Math.min( r, g, b );

		var hue, saturation;
		var lightness = ( min + max ) / 2.0;

		if ( min === max ) {

			hue = 0;
			saturation = 0;

		} else {

			var delta = max - min;

			saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

			switch ( max ) {

				case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
				case g: hue = ( b - r ) / delta + 2; break;
				case b: hue = ( r - g ) / delta + 4; break;

			}

			hue /= 6;

		}

		hsl.h = hue;
		hsl.s = saturation;
		hsl.l = lightness;

		return hsl;

	},

	getStyle: function () {

		return 'rgb(' + ( ( this.r * 255 ) | 0 ) + ',' + ( ( this.g * 255 ) | 0 ) + ',' + ( ( this.b * 255 ) | 0 ) + ')';

	},

	offsetHSL: function ( h, s, l ) {

		var hsl = this.getHSL();

		hsl.h += h; hsl.s += s; hsl.l += l;

		this.setHSL( hsl.h, hsl.s, hsl.l );

		return this;

	},

	add: function ( color ) {

		this.r += color.r;
		this.g += color.g;
		this.b += color.b;

		return this;

	},

	addColors: function ( color1, color2 ) {

		this.r = color1.r + color2.r;
		this.g = color1.g + color2.g;
		this.b = color1.b + color2.b;

		return this;

	},

	addScalar: function ( s ) {

		this.r += s;
		this.g += s;
		this.b += s;

		return this;

	},

	multiply: function ( color ) {

		this.r *= color.r;
		this.g *= color.g;
		this.b *= color.b;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.r *= s;
		this.g *= s;
		this.b *= s;

		return this;

	},

	lerp: function ( color, alpha ) {

		this.r += ( color.r - this.r ) * alpha;
		this.g += ( color.g - this.g ) * alpha;
		this.b += ( color.b - this.b ) * alpha;

		return this;

	},

	equals: function ( c ) {

		return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

	},

	fromArray: function ( array ) {

		this.r = array[ 0 ];
		this.g = array[ 1 ];
		this.b = array[ 2 ];

		return this;

	},

	toArray: function () {

		return [ this.r, this.g, this.b ];

	},

	clone: function () {

		return new THREE.Color().setRGB( this.r, this.g, this.b );

	}

};

THREE.ColorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

// File:src/math/Quaternion.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Quaternion = function ( x, y, z, w ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._w = ( w !== undefined ) ? w : 1;

};

THREE.Quaternion.prototype = {

	constructor: THREE.Quaternion,

	_x: 0,_y: 0, _z: 0, _w: 0,

	get x () {

		return this._x;

	},

	set x ( value ) {

		this._x = value;
		this.onChangeCallback();

	},

	get y () {

		return this._y;

	},

	set y ( value ) {

		this._y = value;
		this.onChangeCallback();

	},

	get z () {

		return this._z;

	},

	set z ( value ) {

		this._z = value;
		this.onChangeCallback();

	},

	get w () {

		return this._w;

	},

	set w ( value ) {

		this._w = value;
		this.onChangeCallback();

	},

	set: function ( x, y, z, w ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._w = w;

		this.onChangeCallback();

		return this;

	},

	copy: function ( quaternion ) {

		this._x = quaternion.x;
		this._y = quaternion.y;
		this._z = quaternion.z;
		this._w = quaternion.w;

		this.onChangeCallback();

		return this;

	},

	setFromEuler: function ( euler, update ) {

		if ( euler instanceof THREE.Euler === false ) {

			throw new Error( 'THREE.Quaternion: .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );
		}

		// http://www.mathworks.com/matlabcentral/fileexchange/
		// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
		//	content/SpinCalc.m

		var c1 = Math.cos( euler._x / 2 );
		var c2 = Math.cos( euler._y / 2 );
		var c3 = Math.cos( euler._z / 2 );
		var s1 = Math.sin( euler._x / 2 );
		var s2 = Math.sin( euler._y / 2 );
		var s3 = Math.sin( euler._z / 2 );

		if ( euler.order === 'XYZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'YXZ' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( euler.order === 'ZXY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'ZYX' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		} else if ( euler.order === 'YZX' ) {

			this._x = s1 * c2 * c3 + c1 * s2 * s3;
			this._y = c1 * s2 * c3 + s1 * c2 * s3;
			this._z = c1 * c2 * s3 - s1 * s2 * c3;
			this._w = c1 * c2 * c3 - s1 * s2 * s3;

		} else if ( euler.order === 'XZY' ) {

			this._x = s1 * c2 * c3 - c1 * s2 * s3;
			this._y = c1 * s2 * c3 - s1 * c2 * s3;
			this._z = c1 * c2 * s3 + s1 * s2 * c3;
			this._w = c1 * c2 * c3 + s1 * s2 * s3;

		}

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	setFromAxisAngle: function ( axis, angle ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

		// assumes axis is normalized

		var halfAngle = angle / 2, s = Math.sin( halfAngle );

		this._x = axis.x * s;
		this._y = axis.y * s;
		this._z = axis.z * s;
		this._w = Math.cos( halfAngle );

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

			trace = m11 + m22 + m33,
			s;

		if ( trace > 0 ) {

			s = 0.5 / Math.sqrt( trace + 1.0 );

			this._w = 0.25 / s;
			this._x = ( m32 - m23 ) * s;
			this._y = ( m13 - m31 ) * s;
			this._z = ( m21 - m12 ) * s;

		} else if ( m11 > m22 && m11 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

			this._w = ( m32 - m23 ) / s;
			this._x = 0.25 * s;
			this._y = ( m12 + m21 ) / s;
			this._z = ( m13 + m31 ) / s;

		} else if ( m22 > m33 ) {

			s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

			this._w = ( m13 - m31 ) / s;
			this._x = ( m12 + m21 ) / s;
			this._y = 0.25 * s;
			this._z = ( m23 + m32 ) / s;

		} else {

			s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

			this._w = ( m21 - m12 ) / s;
			this._x = ( m13 + m31 ) / s;
			this._y = ( m23 + m32 ) / s;
			this._z = 0.25 * s;

		}

		this.onChangeCallback();

		return this;

	},

	setFromUnitVectors: function () {

		// http://lolengine.net/blog/2014/02/24/quaternion-from-two-vectors-final

		// assumes direction vectors vFrom and vTo are normalized

		var v1, r;

		var EPS = 0.000001;

		return function ( vFrom, vTo ) {

			if ( v1 === undefined ) v1 = new THREE.Vector3();

			r = vFrom.dot( vTo ) + 1;

			if ( r < EPS ) {

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					v1.set( - vFrom.y, vFrom.x, 0 );

				} else {

					v1.set( 0, - vFrom.z, vFrom.y );

				}

			} else {

				v1.crossVectors( vFrom, vTo );

			}

			this._x = v1.x;
			this._y = v1.y;
			this._z = v1.z;
			this._w = r;

			this.normalize();

			return this;

		}

	}(),

	inverse: function () {

		this.conjugate().normalize();

		return this;

	},

	conjugate: function () {

		this._x *= - 1;
		this._y *= - 1;
		this._z *= - 1;

		this.onChangeCallback();

		return this;

	},

	dot: function ( v ) {

		return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

	},

	lengthSq: function () {

		return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

	},

	length: function () {

		return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

	},

	normalize: function () {

		var l = this.length();

		if ( l === 0 ) {

			this._x = 0;
			this._y = 0;
			this._z = 0;
			this._w = 1;

		} else {

			l = 1 / l;

			this._x = this._x * l;
			this._y = this._y * l;
			this._z = this._z * l;
			this._w = this._w * l;

		}

		this.onChangeCallback();

		return this;

	},

	multiply: function ( q, p ) {

		if ( p !== undefined ) {

			console.warn( 'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.' );
			return this.multiplyQuaternions( q, p );

		}

		return this.multiplyQuaternions( this, q );

	},

	multiplyQuaternions: function ( a, b ) {

		// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

		var qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
		var qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

		this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
		this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
		this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
		this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

		this.onChangeCallback();

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.' );
		return vector.applyQuaternion( this );

	},

	slerp: function ( qb, t ) {

		if ( t === 0 ) return this;
		if ( t === 1 ) return this.copy( qb );

		var x = this._x, y = this._y, z = this._z, w = this._w;

		// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

		var cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

		if ( cosHalfTheta < 0 ) {

			this._w = - qb._w;
			this._x = - qb._x;
			this._y = - qb._y;
			this._z = - qb._z;

			cosHalfTheta = - cosHalfTheta;

		} else {

			this.copy( qb );

		}

		if ( cosHalfTheta >= 1.0 ) {

			this._w = w;
			this._x = x;
			this._y = y;
			this._z = z;

			return this;

		}

		var halfTheta = Math.acos( cosHalfTheta );
		var sinHalfTheta = Math.sqrt( 1.0 - cosHalfTheta * cosHalfTheta );

		if ( Math.abs( sinHalfTheta ) < 0.001 ) {

			this._w = 0.5 * ( w + this._w );
			this._x = 0.5 * ( x + this._x );
			this._y = 0.5 * ( y + this._y );
			this._z = 0.5 * ( z + this._z );

			return this;

		}

		var ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
		ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

		this._w = ( w * ratioA + this._w * ratioB );
		this._x = ( x * ratioA + this._x * ratioB );
		this._y = ( y * ratioA + this._y * ratioB );
		this._z = ( z * ratioA + this._z * ratioB );

		this.onChangeCallback();

		return this;

	},

	equals: function ( quaternion ) {

		return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this._x = array[ offset ];
		this._y = array[ offset + 1 ];
		this._z = array[ offset + 2 ];
		this._w = array[ offset + 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this._x;
		array[ offset + 1 ] = this._y;
		array[ offset + 2 ] = this._z;
		array[ offset + 3 ] = this._w;

		return array;

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {},

	clone: function () {

		return new THREE.Quaternion( this._x, this._y, this._z, this._w );

	}

};

THREE.Quaternion.slerp = function ( qa, qb, qm, t ) {

	return qm.copy( qa ).slerp( qb, t );

}

// File:src/math/Vector2.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author philogb / http://blog.thejit.org/
 * @author egraether / http://egraether.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.Vector2 = function ( x, y ) {

	this.x = x || 0;
	this.y = y || 0;

};

THREE.Vector2.prototype = {

	constructor: THREE.Vector2,

	set: function ( x, y ) {

		this.x = x;
		this.y = y;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;

		return this;

	},

	multiply: function ( v ) {

		this.x *= v.x;
		this.y *= v.y;

		return this;

	},

	multiplyScalar: function ( s ) {

		this.x *= s;
		this.y *= s;

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;

		}

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		return this;
	},

	clampScalar: ( function () {

		var min, max;

		return function ( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new THREE.Vector2();
				max = new THREE.Vector2();

			}

			min.set( minVal, minVal );
			max.set( maxVal, maxVal );

			return this.clamp( min, max );

		};

	} )(),

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x, dy = this.y - v.y;
		return dx * dx + dy * dy;

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;

		return array;

	},

	clone: function () {

		return new THREE.Vector2( this.x, this.y );

	}

};

// File:src/math/Vector3.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author *kile / http://kile.stravaganza.org/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector3 = function ( x, y, z ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;

};

THREE.Vector3.prototype = {

	constructor: THREE.Vector3,

	set: function ( x, y, z ) {

		this.x = x;
		this.y = y;
		this.z = z;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;

		return this;

	},

	multiply: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.' );
			return this.multiplyVectors( v, w );

		}

		this.x *= v.x;
		this.y *= v.y;
		this.z *= v.z;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;

		return this;

	},

	multiplyVectors: function ( a, b ) {

		this.x = a.x * b.x;
		this.y = a.y * b.y;
		this.z = a.z * b.z;

		return this;

	},

	applyEuler: function () {

		var quaternion;

		return function ( euler ) {

			if ( euler instanceof THREE.Euler === false ) {

				console.error( 'THREE.Vector3: .applyEuler() now expects a Euler rotation rather than a Vector3 and order.' );

			}

			if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

			this.applyQuaternion( quaternion.setFromEuler( euler ) );

			return this;

		};

	}(),

	applyAxisAngle: function () {

		var quaternion;

		return function ( axis, angle ) {

			if ( quaternion === undefined ) quaternion = new THREE.Quaternion();

			this.applyQuaternion( quaternion.setFromAxisAngle( axis, angle ) );

			return this;

		};

	}(),

	applyMatrix3: function ( m ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;

		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
		this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
		this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

		return this;

	},

	applyMatrix4: function ( m ) {

		// input: THREE.Matrix4 affine matrix

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ];
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ];
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ];

		return this;

	},

	applyProjection: function ( m ) {

		// input: THREE.Matrix4 projection matrix

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;
		var d = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] ); // perspective divide

		this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z + e[ 12 ] ) * d;
		this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z + e[ 13 ] ) * d;
		this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * d;

		return this;

	},

	applyQuaternion: function ( q ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;

		var qx = q.x;
		var qy = q.y;
		var qz = q.z;
		var qw = q.w;

		// calculate quat * vector

		var ix =  qw * x + qy * z - qz * y;
		var iy =  qw * y + qz * x - qx * z;
		var iz =  qw * z + qx * y - qy * x;
		var iw = - qx * x - qy * y - qz * z;

		// calculate result * inverse quat

		this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
		this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
		this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

		return this;

	},

	project: function () {

		var matrix;

		return function ( camera ) {

			if ( matrix === undefined ) matrix = new THREE.Matrix4();

			matrix.multiplyMatrices( camera.projectionMatrix, matrix.getInverse( camera.matrixWorld ) );
			return this.applyProjection( matrix );

		};

	}(),

	unproject: function () {

		var matrix;

		return function ( camera ) {

			if ( matrix === undefined ) matrix = new THREE.Matrix4();

			matrix.multiplyMatrices( camera.matrixWorld, matrix.getInverse( camera.projectionMatrix ) );
			return this.applyProjection( matrix );

		};

	}(),

	transformDirection: function ( m ) {

		// input: THREE.Matrix4 affine matrix
		// vector interpreted as a direction

		var x = this.x, y = this.y, z = this.z;

		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ]  * z;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ]  * z;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

		this.normalize();

		return this;

	},

	divide: function ( v ) {

		this.x /= v.x;
		this.y /= v.y;
		this.z /= v.z;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;
			this.z *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;

		}

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		return this;

	},

	clampScalar: ( function () {

		var min, max;

		return function ( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new THREE.Vector3();
				max = new THREE.Vector3();

			}

			min.set( minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	} )(),

	floor: function () {

		this.x = Math.floor( this.x );
		this.y = Math.floor( this.y );
		this.z = Math.floor( this.z );

		return this;

	},

	ceil: function () {

		this.x = Math.ceil( this.x );
		this.y = Math.ceil( this.y );
		this.z = Math.ceil( this.z );

		return this;

	},

	round: function () {

		this.x = Math.round( this.x );
		this.y = Math.round( this.y );
		this.z = Math.round( this.z );

		return this;

	},

	roundToZero: function () {

		this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
		this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
		this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );

		return this;

	},

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength  ) {

			this.multiplyScalar( l / oldLength );
		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;

		return this;

	},

	cross: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.' );
			return this.crossVectors( v, w );

		}

		var x = this.x, y = this.y, z = this.z;

		this.x = y * v.z - z * v.y;
		this.y = z * v.x - x * v.z;
		this.z = x * v.y - y * v.x;

		return this;

	},

	crossVectors: function ( a, b ) {

		var ax = a.x, ay = a.y, az = a.z;
		var bx = b.x, by = b.y, bz = b.z;

		this.x = ay * bz - az * by;
		this.y = az * bx - ax * bz;
		this.z = ax * by - ay * bx;

		return this;

	},

	projectOnVector: function () {

		var v1, dot;

		return function ( vector ) {

			if ( v1 === undefined ) v1 = new THREE.Vector3();

			v1.copy( vector ).normalize();

			dot = this.dot( v1 );

			return this.copy( v1 ).multiplyScalar( dot );

		};

	}(),

	projectOnPlane: function () {

		var v1;

		return function ( planeNormal ) {

			if ( v1 === undefined ) v1 = new THREE.Vector3();

			v1.copy( this ).projectOnVector( planeNormal );

			return this.sub( v1 );

		}

	}(),

	reflect: function () {

		// reflect incident vector off plane orthogonal to normal
		// normal is assumed to have unit length

		var v1;

		return function ( normal ) {

			if ( v1 === undefined ) v1 = new THREE.Vector3();

			return this.sub( v1.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		}

	}(),

	angleTo: function ( v ) {

		var theta = this.dot( v ) / ( this.length() * v.length() );

		// clamp, to handle numerical problems

		return Math.acos( THREE.Math.clamp( theta, - 1, 1 ) );

	},

	distanceTo: function ( v ) {

		return Math.sqrt( this.distanceToSquared( v ) );

	},

	distanceToSquared: function ( v ) {

		var dx = this.x - v.x;
		var dy = this.y - v.y;
		var dz = this.z - v.z;

		return dx * dx + dy * dy + dz * dz;

	},

	setEulerFromRotationMatrix: function ( m, order ) {

		console.error( 'THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.' );

	},

	setEulerFromQuaternion: function ( q, order ) {

		console.error( 'THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.' );

	},

	getPositionFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().' );

		return this.setFromMatrixPosition( m );

	},

	getScaleFromMatrix: function ( m ) {

		console.warn( 'THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().' );

		return this.setFromMatrixScale( m );
	},

	getColumnFromMatrix: function ( index, matrix ) {

		console.warn( 'THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().' );

		return this.setFromMatrixColumn( index, matrix );

	},

	setFromMatrixPosition: function ( m ) {

		this.x = m.elements[ 12 ];
		this.y = m.elements[ 13 ];
		this.z = m.elements[ 14 ];

		return this;

	},

	setFromMatrixScale: function ( m ) {

		var sx = this.set( m.elements[ 0 ], m.elements[ 1 ], m.elements[  2 ] ).length();
		var sy = this.set( m.elements[ 4 ], m.elements[ 5 ], m.elements[  6 ] ).length();
		var sz = this.set( m.elements[ 8 ], m.elements[ 9 ], m.elements[ 10 ] ).length();

		this.x = sx;
		this.y = sy;
		this.z = sz;

		return this;
	},

	setFromMatrixColumn: function ( index, matrix ) {

		var offset = index * 4;

		var me = matrix.elements;

		this.x = me[ offset ];
		this.y = me[ offset + 1 ];
		this.z = me[ offset + 2 ];

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;

		return array;

	},

	clone: function () {

		return new THREE.Vector3( this.x, this.y, this.z );

	}

};

// File:src/math/Vector4.js

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author mikael emtinger / http://gomo.se/
 * @author egraether / http://egraether.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Vector4 = function ( x, y, z, w ) {

	this.x = x || 0;
	this.y = y || 0;
	this.z = z || 0;
	this.w = ( w !== undefined ) ? w : 1;

};

THREE.Vector4.prototype = {

	constructor: THREE.Vector4,

	set: function ( x, y, z, w ) {

		this.x = x;
		this.y = y;
		this.z = z;
		this.w = w;

		return this;

	},

	setX: function ( x ) {

		this.x = x;

		return this;

	},

	setY: function ( y ) {

		this.y = y;

		return this;

	},

	setZ: function ( z ) {

		this.z = z;

		return this;

	},

	setW: function ( w ) {

		this.w = w;

		return this;

	},

	setComponent: function ( index, value ) {

		switch ( index ) {

			case 0: this.x = value; break;
			case 1: this.y = value; break;
			case 2: this.z = value; break;
			case 3: this.w = value; break;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	getComponent: function ( index ) {

		switch ( index ) {

			case 0: return this.x;
			case 1: return this.y;
			case 2: return this.z;
			case 3: return this.w;
			default: throw new Error( 'index is out of range: ' + index );

		}

	},

	copy: function ( v ) {

		this.x = v.x;
		this.y = v.y;
		this.z = v.z;
		this.w = ( v.w !== undefined ) ? v.w : 1;

		return this;

	},

	add: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.' );
			return this.addVectors( v, w );

		}

		this.x += v.x;
		this.y += v.y;
		this.z += v.z;
		this.w += v.w;

		return this;

	},

	addScalar: function ( s ) {

		this.x += s;
		this.y += s;
		this.z += s;
		this.w += s;

		return this;

	},

	addVectors: function ( a, b ) {

		this.x = a.x + b.x;
		this.y = a.y + b.y;
		this.z = a.z + b.z;
		this.w = a.w + b.w;

		return this;

	},

	sub: function ( v, w ) {

		if ( w !== undefined ) {

			console.warn( 'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.' );
			return this.subVectors( v, w );

		}

		this.x -= v.x;
		this.y -= v.y;
		this.z -= v.z;
		this.w -= v.w;

		return this;

	},

	subVectors: function ( a, b ) {

		this.x = a.x - b.x;
		this.y = a.y - b.y;
		this.z = a.z - b.z;
		this.w = a.w - b.w;

		return this;

	},

	multiplyScalar: function ( scalar ) {

		this.x *= scalar;
		this.y *= scalar;
		this.z *= scalar;
		this.w *= scalar;

		return this;

	},

	applyMatrix4: function ( m ) {

		var x = this.x;
		var y = this.y;
		var z = this.z;
		var w = this.w;

		var e = m.elements;

		this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
		this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
		this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
		this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

		return this;

	},

	divideScalar: function ( scalar ) {

		if ( scalar !== 0 ) {

			var invScalar = 1 / scalar;

			this.x *= invScalar;
			this.y *= invScalar;
			this.z *= invScalar;
			this.w *= invScalar;

		} else {

			this.x = 0;
			this.y = 0;
			this.z = 0;
			this.w = 1;

		}

		return this;

	},

	setAxisAngleFromQuaternion: function ( q ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

		// q is assumed to be normalized

		this.w = 2 * Math.acos( q.w );

		var s = Math.sqrt( 1 - q.w * q.w );

		if ( s < 0.0001 ) {

			 this.x = 1;
			 this.y = 0;
			 this.z = 0;

		} else {

			 this.x = q.x / s;
			 this.y = q.y / s;
			 this.z = q.z / s;

		}

		return this;

	},

	setAxisAngleFromRotationMatrix: function ( m ) {

		// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var angle, x, y, z,		// variables for result
			epsilon = 0.01,		// margin to allow for rounding errors
			epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

			te = m.elements,

			m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
			m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
			m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		if ( ( Math.abs( m12 - m21 ) < epsilon )
		   && ( Math.abs( m13 - m31 ) < epsilon )
		   && ( Math.abs( m23 - m32 ) < epsilon ) ) {

			// singularity found
			// first check for identity matrix which must have +1 for all terms
			// in leading diagonal and zero in other terms

			if ( ( Math.abs( m12 + m21 ) < epsilon2 )
			   && ( Math.abs( m13 + m31 ) < epsilon2 )
			   && ( Math.abs( m23 + m32 ) < epsilon2 )
			   && ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

				// this singularity is identity matrix so angle = 0

				this.set( 1, 0, 0, 0 );

				return this; // zero angle, arbitrary axis

			}

			// otherwise this singularity is angle = 180

			angle = Math.PI;

			var xx = ( m11 + 1 ) / 2;
			var yy = ( m22 + 1 ) / 2;
			var zz = ( m33 + 1 ) / 2;
			var xy = ( m12 + m21 ) / 4;
			var xz = ( m13 + m31 ) / 4;
			var yz = ( m23 + m32 ) / 4;

			if ( ( xx > yy ) && ( xx > zz ) ) { // m11 is the largest diagonal term

				if ( xx < epsilon ) {

					x = 0;
					y = 0.707106781;
					z = 0.707106781;

				} else {

					x = Math.sqrt( xx );
					y = xy / x;
					z = xz / x;

				}

			} else if ( yy > zz ) { // m22 is the largest diagonal term

				if ( yy < epsilon ) {

					x = 0.707106781;
					y = 0;
					z = 0.707106781;

				} else {

					y = Math.sqrt( yy );
					x = xy / y;
					z = yz / y;

				}

			} else { // m33 is the largest diagonal term so base result on this

				if ( zz < epsilon ) {

					x = 0.707106781;
					y = 0.707106781;
					z = 0;

				} else {

					z = Math.sqrt( zz );
					x = xz / z;
					y = yz / z;

				}

			}

			this.set( x, y, z, angle );

			return this; // return 180 deg rotation

		}

		// as we have reached here there are no singularities so we can handle normally

		var s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 )
						  + ( m13 - m31 ) * ( m13 - m31 )
						  + ( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

		if ( Math.abs( s ) < 0.001 ) s = 1;

		// prevent divide by zero, should not happen if matrix is orthogonal and should be
		// caught by singularity test above, but I've left it in just in case

		this.x = ( m32 - m23 ) / s;
		this.y = ( m13 - m31 ) / s;
		this.z = ( m21 - m12 ) / s;
		this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

		return this;

	},

	min: function ( v ) {

		if ( this.x > v.x ) {

			this.x = v.x;

		}

		if ( this.y > v.y ) {

			this.y = v.y;

		}

		if ( this.z > v.z ) {

			this.z = v.z;

		}

		if ( this.w > v.w ) {

			this.w = v.w;

		}

		return this;

	},

	max: function ( v ) {

		if ( this.x < v.x ) {

			this.x = v.x;

		}

		if ( this.y < v.y ) {

			this.y = v.y;

		}

		if ( this.z < v.z ) {

			this.z = v.z;

		}

		if ( this.w < v.w ) {

			this.w = v.w;

		}

		return this;

	},

	clamp: function ( min, max ) {

		// This function assumes min < max, if this assumption isn't true it will not operate correctly

		if ( this.x < min.x ) {

			this.x = min.x;

		} else if ( this.x > max.x ) {

			this.x = max.x;

		}

		if ( this.y < min.y ) {

			this.y = min.y;

		} else if ( this.y > max.y ) {

			this.y = max.y;

		}

		if ( this.z < min.z ) {

			this.z = min.z;

		} else if ( this.z > max.z ) {

			this.z = max.z;

		}

		if ( this.w < min.w ) {

			this.w = min.w;

		} else if ( this.w > max.w ) {

			this.w = max.w;

		}

		return this;

	},

	clampScalar: ( function () {

		var min, max;

		return function ( minVal, maxVal ) {

			if ( min === undefined ) {

				min = new THREE.Vector4();
				max = new THREE.Vector4();

			}

			min.set( minVal, minVal, minVal, minVal );
			max.set( maxVal, maxVal, maxVal, maxVal );

			return this.clamp( min, max );

		};

	} )(),

    floor: function () {

        this.x = Math.floor( this.x );
        this.y = Math.floor( this.y );
        this.z = Math.floor( this.z );
        this.w = Math.floor( this.w );

        return this;

    },

    ceil: function () {

        this.x = Math.ceil( this.x );
        this.y = Math.ceil( this.y );
        this.z = Math.ceil( this.z );
        this.w = Math.ceil( this.w );

        return this;

    },

    round: function () {

        this.x = Math.round( this.x );
        this.y = Math.round( this.y );
        this.z = Math.round( this.z );
        this.w = Math.round( this.w );

        return this;

    },

    roundToZero: function () {

        this.x = ( this.x < 0 ) ? Math.ceil( this.x ) : Math.floor( this.x );
        this.y = ( this.y < 0 ) ? Math.ceil( this.y ) : Math.floor( this.y );
        this.z = ( this.z < 0 ) ? Math.ceil( this.z ) : Math.floor( this.z );
        this.w = ( this.w < 0 ) ? Math.ceil( this.w ) : Math.floor( this.w );

        return this;

    },

	negate: function () {

		this.x = - this.x;
		this.y = - this.y;
		this.z = - this.z;
		this.w = - this.w;

		return this;

	},

	dot: function ( v ) {

		return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

	},

	lengthSq: function () {

		return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

	},

	length: function () {

		return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

	},

	lengthManhattan: function () {

		return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

	},

	normalize: function () {

		return this.divideScalar( this.length() );

	},

	setLength: function ( l ) {

		var oldLength = this.length();

		if ( oldLength !== 0 && l !== oldLength ) {

			this.multiplyScalar( l / oldLength );

		}

		return this;

	},

	lerp: function ( v, alpha ) {

		this.x += ( v.x - this.x ) * alpha;
		this.y += ( v.y - this.y ) * alpha;
		this.z += ( v.z - this.z ) * alpha;
		this.w += ( v.w - this.w ) * alpha;

		return this;

	},

	equals: function ( v ) {

		return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

	},

	fromArray: function ( array, offset ) {

		if ( offset === undefined ) offset = 0;

		this.x = array[ offset ];
		this.y = array[ offset + 1 ];
		this.z = array[ offset + 2 ];
		this.w = array[ offset + 3 ];

		return this;

	},

	toArray: function ( array, offset ) {

		if ( array === undefined ) array = [];
		if ( offset === undefined ) offset = 0;

		array[ offset ] = this.x;
		array[ offset + 1 ] = this.y;
		array[ offset + 2 ] = this.z;
		array[ offset + 3 ] = this.w;

		return array;

	},

	clone: function () {

		return new THREE.Vector4( this.x, this.y, this.z, this.w );

	}

};

// File:src/math/Euler.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Euler = function ( x, y, z, order ) {

	this._x = x || 0;
	this._y = y || 0;
	this._z = z || 0;
	this._order = order || THREE.Euler.DefaultOrder;

};

THREE.Euler.RotationOrders = [ 'XYZ', 'YZX', 'ZXY', 'XZY', 'YXZ', 'ZYX' ];

THREE.Euler.DefaultOrder = 'XYZ';

THREE.Euler.prototype = {

	constructor: THREE.Euler,

	_x: 0, _y: 0, _z: 0, _order: THREE.Euler.DefaultOrder,

	get x () {

		return this._x;

	},

	set x ( value ) {

		this._x = value;
		this.onChangeCallback();

	},

	get y () {

		return this._y;

	},

	set y ( value ) {

		this._y = value;
		this.onChangeCallback();

	},

	get z () {

		return this._z;

	},

	set z ( value ) {

		this._z = value;
		this.onChangeCallback();

	},

	get order () {

		return this._order;

	},

	set order ( value ) {

		this._order = value;
		this.onChangeCallback();

	},

	set: function ( x, y, z, order ) {

		this._x = x;
		this._y = y;
		this._z = z;
		this._order = order || this._order;

		this.onChangeCallback();

		return this;

	},

	copy: function ( euler ) {

		this._x = euler._x;
		this._y = euler._y;
		this._z = euler._z;
		this._order = euler._order;

		this.onChangeCallback();

		return this;

	},

	setFromRotationMatrix: function ( m, order ) {

		var clamp = THREE.Math.clamp;

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		var te = m.elements;
		var m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
		var m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
		var m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._y = Math.asin( clamp( m13, - 1, 1 ) );

			if ( Math.abs( m13 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m33 );
				this._z = Math.atan2( - m12, m11 );

			} else {

				this._x = Math.atan2( m32, m22 );
				this._z = 0;

			}

		} else if ( order === 'YXZ' ) {

			this._x = Math.asin( - clamp( m23, - 1, 1 ) );

			if ( Math.abs( m23 ) < 0.99999 ) {

				this._y = Math.atan2( m13, m33 );
				this._z = Math.atan2( m21, m22 );

			} else {

				this._y = Math.atan2( - m31, m11 );
				this._z = 0;

			}

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin( clamp( m32, - 1, 1 ) );

			if ( Math.abs( m32 ) < 0.99999 ) {

				this._y = Math.atan2( - m31, m33 );
				this._z = Math.atan2( - m12, m22 );

			} else {

				this._y = 0;
				this._z = Math.atan2( m21, m11 );

			}

		} else if ( order === 'ZYX' ) {

			this._y = Math.asin( - clamp( m31, - 1, 1 ) );

			if ( Math.abs( m31 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m33 );
				this._z = Math.atan2( m21, m11 );

			} else {

				this._x = 0;
				this._z = Math.atan2( - m12, m22 );

			}

		} else if ( order === 'YZX' ) {

			this._z = Math.asin( clamp( m21, - 1, 1 ) );

			if ( Math.abs( m21 ) < 0.99999 ) {

				this._x = Math.atan2( - m23, m22 );
				this._y = Math.atan2( - m31, m11 );

			} else {

				this._x = 0;
				this._y = Math.atan2( m13, m33 );

			}

		} else if ( order === 'XZY' ) {

			this._z = Math.asin( - clamp( m12, - 1, 1 ) );

			if ( Math.abs( m12 ) < 0.99999 ) {

				this._x = Math.atan2( m32, m22 );
				this._y = Math.atan2( m13, m11 );

			} else {

				this._x = Math.atan2( - m23, m33 );
				this._y = 0;

			}

		} else {

			console.warn( 'THREE.Euler: .setFromRotationMatrix() given unsupported order: ' + order )

		}

		this._order = order;

		this.onChangeCallback();

		return this;

	},

	setFromQuaternion: function ( q, order, update ) {

		var clamp = THREE.Math.clamp;

		// q is assumed to be normalized

		// http://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/content/SpinCalc.m

		var sqx = q.x * q.x;
		var sqy = q.y * q.y;
		var sqz = q.z * q.z;
		var sqw = q.w * q.w;

		order = order || this._order;

		if ( order === 'XYZ' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w - q.y * q.z ), ( sqw - sqx - sqy + sqz ) );
			this._y = Math.asin(  clamp( 2 * ( q.x * q.z + q.y * q.w ), - 1, 1 ) );
			this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order ===  'YXZ' ) {

			this._x = Math.asin(  clamp( 2 * ( q.x * q.w - q.y * q.z ), - 1, 1 ) );
			this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw - sqx - sqy + sqz ) );
			this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZXY' ) {

			this._x = Math.asin(  clamp( 2 * ( q.x * q.w + q.y * q.z ), - 1, 1 ) );
			this._y = Math.atan2( 2 * ( q.y * q.w - q.z * q.x ), ( sqw - sqx - sqy + sqz ) );
			this._z = Math.atan2( 2 * ( q.z * q.w - q.x * q.y ), ( sqw - sqx + sqy - sqz ) );

		} else if ( order === 'ZYX' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w + q.z * q.y ), ( sqw - sqx - sqy + sqz ) );
			this._y = Math.asin(  clamp( 2 * ( q.y * q.w - q.x * q.z ), - 1, 1 ) );
			this._z = Math.atan2( 2 * ( q.x * q.y + q.z * q.w ), ( sqw + sqx - sqy - sqz ) );

		} else if ( order === 'YZX' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w - q.z * q.y ), ( sqw - sqx + sqy - sqz ) );
			this._y = Math.atan2( 2 * ( q.y * q.w - q.x * q.z ), ( sqw + sqx - sqy - sqz ) );
			this._z = Math.asin(  clamp( 2 * ( q.x * q.y + q.z * q.w ), - 1, 1 ) );

		} else if ( order === 'XZY' ) {

			this._x = Math.atan2( 2 * ( q.x * q.w + q.y * q.z ), ( sqw - sqx + sqy - sqz ) );
			this._y = Math.atan2( 2 * ( q.x * q.z + q.y * q.w ), ( sqw + sqx - sqy - sqz ) );
			this._z = Math.asin(  clamp( 2 * ( q.z * q.w - q.x * q.y ), - 1, 1 ) );

		} else {

			console.warn( 'THREE.Euler: .setFromQuaternion() given unsupported order: ' + order )

		}

		this._order = order;

		if ( update !== false ) this.onChangeCallback();

		return this;

	},

	reorder: function () {

		// WARNING: this discards revolution information -bhouston

		var q = new THREE.Quaternion();

		return function ( newOrder ) {

			q.setFromEuler( this );
			this.setFromQuaternion( q, newOrder );

		};


	}(),

	equals: function ( euler ) {

		return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

	},

	fromArray: function ( array ) {

		this._x = array[ 0 ];
		this._y = array[ 1 ];
		this._z = array[ 2 ];
		if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

		this.onChangeCallback();

		return this;

	},

	toArray: function () {

		return [ this._x, this._y, this._z, this._order ];

	},

	onChange: function ( callback ) {

		this.onChangeCallback = callback;

		return this;

	},

	onChangeCallback: function () {},

	clone: function () {

		return new THREE.Euler( this._x, this._y, this._z, this._order );

	}

};

// File:src/math/Line3.js

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Line3 = function ( start, end ) {

	this.start = ( start !== undefined ) ? start : new THREE.Vector3();
	this.end = ( end !== undefined ) ? end : new THREE.Vector3();

};

THREE.Line3.prototype = {

	constructor: THREE.Line3,

	set: function ( start, end ) {

		this.start.copy( start );
		this.end.copy( end );

		return this;

	},

	copy: function ( line ) {

		this.start.copy( line.start );
		this.end.copy( line.end );

		return this;

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.start, this.end ).multiplyScalar( 0.5 );

	},

	delta: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.subVectors( this.end, this.start );

	},

	distanceSq: function () {

		return this.start.distanceToSquared( this.end );

	},

	distance: function () {

		return this.start.distanceTo( this.end );

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	closestPointToPointParameter: function () {

		var startP = new THREE.Vector3();
		var startEnd = new THREE.Vector3();

		return function ( point, clampToLine ) {

			startP.subVectors( point, this.start );
			startEnd.subVectors( this.end, this.start );

			var startEnd2 = startEnd.dot( startEnd );
			var startEnd_startP = startEnd.dot( startP );

			var t = startEnd_startP / startEnd2;

			if ( clampToLine ) {

				t = THREE.Math.clamp( t, 0, 1 );

			}

			return t;

		};

	}(),

	closestPointToPoint: function ( point, clampToLine, optionalTarget ) {

		var t = this.closestPointToPointParameter( point, clampToLine );

		var result = optionalTarget || new THREE.Vector3();

		return this.delta( result ).multiplyScalar( t ).add( this.start );

	},

	applyMatrix4: function ( matrix ) {

		this.start.applyMatrix4( matrix );
		this.end.applyMatrix4( matrix );

		return this;

	},

	equals: function ( line ) {

		return line.start.equals( this.start ) && line.end.equals( this.end );

	},

	clone: function () {

		return new THREE.Line3().copy( this );

	}

};

// File:src/math/Box2.js

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Box2 = function ( min, max ) {

	this.min = ( min !== undefined ) ? min : new THREE.Vector2( Infinity, Infinity );
	this.max = ( max !== undefined ) ? max : new THREE.Vector2( - Infinity, - Infinity );

};

THREE.Box2.prototype = {

	constructor: THREE.Box2,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] )

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new THREE.Vector2();

		return function ( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );
			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = Infinity;
		this.max.x = this.max.y = - Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;
	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;
	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;
	},

	containsPoint: function ( point ) {

		if ( point.x < this.min.x || point.x > this.max.x ||
		     point.y < this.min.y || point.y > this.max.y ) {

			return false;

		}

		return true;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
		     ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new THREE.Vector2();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
		     box.max.y < this.min.y || box.min.y > this.max.y ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector2();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new THREE.Vector2();

		return function ( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box2().copy( this );

	}

};

// File:src/math/Box3.js

/**
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Box3 = function ( min, max ) {

	this.min = ( min !== undefined ) ? min : new THREE.Vector3( Infinity, Infinity, Infinity );
	this.max = ( max !== undefined ) ? max : new THREE.Vector3( - Infinity, - Infinity, - Infinity );

};

THREE.Box3.prototype = {

	constructor: THREE.Box3,

	set: function ( min, max ) {

		this.min.copy( min );
		this.max.copy( max );

		return this;

	},

	setFromPoints: function ( points ) {

		this.makeEmpty();

		for ( var i = 0, il = points.length; i < il; i ++ ) {

			this.expandByPoint( points[ i ] )

		}

		return this;

	},

	setFromCenterAndSize: function () {

		var v1 = new THREE.Vector3();

		return function ( center, size ) {

			var halfSize = v1.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		};

	}(),

	setFromObject: function () {

		// Computes the world-axis-aligned bounding box of an object (including its children),
		// accounting for both the object's, and childrens', world transforms

		var v1 = new THREE.Vector3();

		return function ( object ) {

			var scope = this;

			object.updateMatrixWorld( true );

			this.makeEmpty();

			object.traverse( function ( node ) {

				var geometry = node.geometry;

				if ( geometry !== undefined ) {

					if ( geometry instanceof THREE.Geometry ) {

						var vertices = geometry.vertices;

						for ( var i = 0, il = vertices.length; i < il; i ++ ) {

							v1.copy( vertices[ i ] );

							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					} else if ( geometry instanceof THREE.BufferGeometry && geometry.attributes[ 'position' ] !== undefined ) {

						var positions = geometry.attributes[ 'position' ].array;

						for ( var i = 0, il = positions.length; i < il; i += 3 ) {

							v1.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );

							v1.applyMatrix4( node.matrixWorld );

							scope.expandByPoint( v1 );

						}

					}

				}

			} );

			return this;

		};

	}(),

	copy: function ( box ) {

		this.min.copy( box.min );
		this.max.copy( box.max );

		return this;

	},

	makeEmpty: function () {

		this.min.x = this.min.y = this.min.z = Infinity;
		this.max.x = this.max.y = this.max.z = - Infinity;

		return this;

	},

	empty: function () {

		// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

		return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

	},

	center: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

	},

	size: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.subVectors( this.max, this.min );

	},

	expandByPoint: function ( point ) {

		this.min.min( point );
		this.max.max( point );

		return this;

	},

	expandByVector: function ( vector ) {

		this.min.sub( vector );
		this.max.add( vector );

		return this;

	},

	expandByScalar: function ( scalar ) {

		this.min.addScalar( - scalar );
		this.max.addScalar( scalar );

		return this;

	},

	containsPoint: function ( point ) {

		if ( point.x < this.min.x || point.x > this.max.x ||
		     point.y < this.min.y || point.y > this.max.y ||
		     point.z < this.min.z || point.z > this.max.z ) {

			return false;

		}

		return true;

	},

	containsBox: function ( box ) {

		if ( ( this.min.x <= box.min.x ) && ( box.max.x <= this.max.x ) &&
			 ( this.min.y <= box.min.y ) && ( box.max.y <= this.max.y ) &&
			 ( this.min.z <= box.min.z ) && ( box.max.z <= this.max.z ) ) {

			return true;

		}

		return false;

	},

	getParameter: function ( point, optionalTarget ) {

		// This can potentially have a divide by zero if the box
		// has a size dimension of 0.

		var result = optionalTarget || new THREE.Vector3();

		return result.set(
			( point.x - this.min.x ) / ( this.max.x - this.min.x ),
			( point.y - this.min.y ) / ( this.max.y - this.min.y ),
			( point.z - this.min.z ) / ( this.max.z - this.min.z )
		);

	},

	isIntersectionBox: function ( box ) {

		// using 6 splitting planes to rule out intersections.

		if ( box.max.x < this.min.x || box.min.x > this.max.x ||
		     box.max.y < this.min.y || box.min.y > this.max.y ||
		     box.max.z < this.min.z || box.min.z > this.max.z ) {

			return false;

		}

		return true;

	},

	clampPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( point ).clamp( this.min, this.max );

	},

	distanceToPoint: function () {

		var v1 = new THREE.Vector3();

		return function ( point ) {

			var clampedPoint = v1.copy( point ).clamp( this.min, this.max );
			return clampedPoint.sub( point ).length();

		};

	}(),

	getBoundingSphere: function () {

		var v1 = new THREE.Vector3();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Sphere();

			result.center = this.center();
			result.radius = this.size( v1 ).length() * 0.5;

			return result;

		};

	}(),

	intersect: function ( box ) {

		this.min.max( box.min );
		this.max.min( box.max );

		return this;

	},

	union: function ( box ) {

		this.min.min( box.min );
		this.max.max( box.max );

		return this;

	},

	applyMatrix4: function () {

		var points = [
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3(),
			new THREE.Vector3()
		];

		return function ( matrix ) {

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix );  // 111

			this.makeEmpty();
			this.setFromPoints( points );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.min.add( offset );
		this.max.add( offset );

		return this;

	},

	equals: function ( box ) {

		return box.min.equals( this.min ) && box.max.equals( this.max );

	},

	clone: function () {

		return new THREE.Box3().copy( this );

	}

};

// File:src/math/Matrix3.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 * @author bhouston / http://exocortex.com
 */

THREE.Matrix3 = function () {

	this.elements = new Float32Array( [

		1, 0, 0,
		0, 1, 0,
		0, 0, 1

	] );

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.' );

	}

};

THREE.Matrix3.prototype = {

	constructor: THREE.Matrix3,

	set: function ( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 3 ] = n12; te[ 6 ] = n13;
		te[ 1 ] = n21; te[ 4 ] = n22; te[ 7 ] = n23;
		te[ 2 ] = n31; te[ 5 ] = n32; te[ 8 ] = n33;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0,
			0, 1, 0,
			0, 0, 1

		);

		return this;

	},

	copy: function ( m ) {

		var me = m.elements;

		this.set(

			me[ 0 ], me[ 3 ], me[ 6 ],
			me[ 1 ], me[ 4 ], me[ 7 ],
			me[ 2 ], me[ 5 ], me[ 8 ]

		);

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.' );
		return vector.applyMatrix3( this );

	},

	multiplyVector3Array: function ( a ) {

		console.warn( 'THREE.Matrix3: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
		return this.applyToVector3Array( a );

	},

	applyToVector3Array: function () {

		var v1 = new THREE.Vector3();

		return function ( array, offset, length ) {

			if ( offset === undefined ) offset = 0;
			if ( length === undefined ) length = array.length;

			for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {

				v1.x = array[ j ];
				v1.y = array[ j + 1 ];
				v1.z = array[ j + 2 ];

				v1.applyMatrix3( this );

				array[ j ]     = v1.x;
				array[ j + 1 ] = v1.y;
				array[ j + 2 ] = v1.z;

			}

			return array;

		};

	}(),

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
		te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
		te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

		return this;

	},

	determinant: function () {

		var te = this.elements;

		var a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
			d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
			g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

		return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

	},

	getInverse: function ( matrix, throwOnInvertible ) {

		// input: THREE.Matrix4
		// ( based on http://code.google.com/p/webgl-mjs/ )

		var me = matrix.elements;
		var te = this.elements;

		te[ 0 ] =   me[ 10 ] * me[ 5 ] - me[ 6 ] * me[ 9 ];
		te[ 1 ] = - me[ 10 ] * me[ 1 ] + me[ 2 ] * me[ 9 ];
		te[ 2 ] =   me[ 6 ] * me[ 1 ] - me[ 2 ] * me[ 5 ];
		te[ 3 ] = - me[ 10 ] * me[ 4 ] + me[ 6 ] * me[ 8 ];
		te[ 4 ] =   me[ 10 ] * me[ 0 ] - me[ 2 ] * me[ 8 ];
		te[ 5 ] = - me[ 6 ] * me[ 0 ] + me[ 2 ] * me[ 4 ];
		te[ 6 ] =   me[ 9 ] * me[ 4 ] - me[ 5 ] * me[ 8 ];
		te[ 7 ] = - me[ 9 ] * me[ 0 ] + me[ 1 ] * me[ 8 ];
		te[ 8 ] =   me[ 5 ] * me[ 0 ] - me[ 1 ] * me[ 4 ];

		var det = me[ 0 ] * te[ 0 ] + me[ 1 ] * te[ 3 ] + me[ 2 ] * te[ 6 ];

		// no inverse

		if ( det === 0 ) {

			var msg = "Matrix3.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnInvertible || false ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			this.identity();

			return this;

		}

		this.multiplyScalar( 1.0 / det );

		return this;

	},

	transpose: function () {

		var tmp, m = this.elements;

		tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
		tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
		tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

		return this;

	},

	flattenToArrayOffset: function ( array, offset ) {

		var te = this.elements;

		array[ offset     ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];

		array[ offset + 3 ] = te[ 3 ];
		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];

		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];
		array[ offset + 8 ]  = te[ 8 ];

		return array;

	},

	getNormalMatrix: function ( m ) {

		// input: THREE.Matrix4

		this.getInverse( m ).transpose();

		return this;

	},

	transposeIntoArray: function ( r ) {

		var m = this.elements;

		r[ 0 ] = m[ 0 ];
		r[ 1 ] = m[ 3 ];
		r[ 2 ] = m[ 6 ];
		r[ 3 ] = m[ 1 ];
		r[ 4 ] = m[ 4 ];
		r[ 5 ] = m[ 7 ];
		r[ 6 ] = m[ 2 ];
		r[ 7 ] = m[ 5 ];
		r[ 8 ] = m[ 8 ];

		return this;

	},

	fromArray: function ( array ) {

		this.elements.set( array );

		return this;

	},

	toArray: function () {

		var te = this.elements;

		return [
			te[ 0 ], te[ 1 ], te[ 2 ],
			te[ 3 ], te[ 4 ], te[ 5 ],
			te[ 6 ], te[ 7 ], te[ 8 ]
		];

	},

	clone: function () {

		return new THREE.Matrix3().fromArray( this.elements );

	}

};

// File:src/math/Matrix4.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author philogb / http://blog.thejit.org/
 * @author jordi_ros / http://plattsoft.com
 * @author D1plo1d / http://github.com/D1plo1d
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author timknip / http://www.floorplanner.com/
 * @author bhouston / http://exocortex.com
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Matrix4 = function () {

	this.elements = new Float32Array( [

		1, 0, 0, 0,
		0, 1, 0, 0,
		0, 0, 1, 0,
		0, 0, 0, 1

	] );

	if ( arguments.length > 0 ) {

		console.error( 'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.' );

	}

};

THREE.Matrix4.prototype = {

	constructor: THREE.Matrix4,

	set: function ( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

		var te = this.elements;

		te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
		te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
		te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
		te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

		return this;

	},

	identity: function () {

		this.set(

			1, 0, 0, 0,
			0, 1, 0, 0,
			0, 0, 1, 0,
			0, 0, 0, 1

		);

		return this;

	},

	copy: function ( m ) {

		this.elements.set( m.elements );

		return this;

	},

	extractPosition: function ( m ) {

		console.warn( 'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().' );
		return this.copyPosition( m );

	},

	copyPosition: function ( m ) {

		var te = this.elements;
		var me = m.elements;

		te[ 12 ] = me[ 12 ];
		te[ 13 ] = me[ 13 ];
		te[ 14 ] = me[ 14 ];

		return this;

	},

	extractRotation: function () {

		var v1 = new THREE.Vector3();

		return function ( m ) {

			var te = this.elements;
			var me = m.elements;

			var scaleX = 1 / v1.set( me[ 0 ], me[ 1 ], me[ 2 ] ).length();
			var scaleY = 1 / v1.set( me[ 4 ], me[ 5 ], me[ 6 ] ).length();
			var scaleZ = 1 / v1.set( me[ 8 ], me[ 9 ], me[ 10 ] ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;

			return this;

		};

	}(),

	makeRotationFromEuler: function ( euler ) {

		if ( euler instanceof THREE.Euler === false ) {

			console.error( 'THREE.Matrix: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.' );

		}

		var te = this.elements;

		var x = euler.x, y = euler.y, z = euler.z;
		var a = Math.cos( x ), b = Math.sin( x );
		var c = Math.cos( y ), d = Math.sin( y );
		var e = Math.cos( z ), f = Math.sin( z );

		if ( euler.order === 'XYZ' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = - c * f;
			te[ 8 ] = d;

			te[ 1 ] = af + be * d;
			te[ 5 ] = ae - bf * d;
			te[ 9 ] = - b * c;

			te[ 2 ] = bf - ae * d;
			te[ 6 ] = be + af * d;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YXZ' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce + df * b;
			te[ 4 ] = de * b - cf;
			te[ 8 ] = a * d;

			te[ 1 ] = a * f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b;

			te[ 2 ] = cf * b - de;
			te[ 6 ] = df + ce * b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZXY' ) {

			var ce = c * e, cf = c * f, de = d * e, df = d * f;

			te[ 0 ] = ce - df * b;
			te[ 4 ] = - a * f;
			te[ 8 ] = de + cf * b;

			te[ 1 ] = cf + de * b;
			te[ 5 ] = a * e;
			te[ 9 ] = df - ce * b;

			te[ 2 ] = - a * d;
			te[ 6 ] = b;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'ZYX' ) {

			var ae = a * e, af = a * f, be = b * e, bf = b * f;

			te[ 0 ] = c * e;
			te[ 4 ] = be * d - af;
			te[ 8 ] = ae * d + bf;

			te[ 1 ] = c * f;
			te[ 5 ] = bf * d + ae;
			te[ 9 ] = af * d - be;

			te[ 2 ] = - d;
			te[ 6 ] = b * c;
			te[ 10 ] = a * c;

		} else if ( euler.order === 'YZX' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = bd - ac * f;
			te[ 8 ] = bc * f + ad;

			te[ 1 ] = f;
			te[ 5 ] = a * e;
			te[ 9 ] = - b * e;

			te[ 2 ] = - d * e;
			te[ 6 ] = ad * f + bc;
			te[ 10 ] = ac - bd * f;

		} else if ( euler.order === 'XZY' ) {

			var ac = a * c, ad = a * d, bc = b * c, bd = b * d;

			te[ 0 ] = c * e;
			te[ 4 ] = - f;
			te[ 8 ] = d * e;

			te[ 1 ] = ac * f + bd;
			te[ 5 ] = a * e;
			te[ 9 ] = ad * f - bc;

			te[ 2 ] = bc * f - ad;
			te[ 6 ] = b * e;
			te[ 10 ] = bd * f + ac;

		}

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	setRotationFromQuaternion: function ( q ) {

		console.warn( 'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().' );

		return this.makeRotationFromQuaternion( q );

	},

	makeRotationFromQuaternion: function ( q ) {

		var te = this.elements;

		var x = q.x, y = q.y, z = q.z, w = q.w;
		var x2 = x + x, y2 = y + y, z2 = z + z;
		var xx = x * x2, xy = x * y2, xz = x * z2;
		var yy = y * y2, yz = y * z2, zz = z * z2;
		var wx = w * x2, wy = w * y2, wz = w * z2;

		te[ 0 ] = 1 - ( yy + zz );
		te[ 4 ] = xy - wz;
		te[ 8 ] = xz + wy;

		te[ 1 ] = xy + wz;
		te[ 5 ] = 1 - ( xx + zz );
		te[ 9 ] = yz - wx;

		te[ 2 ] = xz - wy;
		te[ 6 ] = yz + wx;
		te[ 10 ] = 1 - ( xx + yy );

		// last column
		te[ 3 ] = 0;
		te[ 7 ] = 0;
		te[ 11 ] = 0;

		// bottom row
		te[ 12 ] = 0;
		te[ 13 ] = 0;
		te[ 14 ] = 0;
		te[ 15 ] = 1;

		return this;

	},

	lookAt: function () {

		var x = new THREE.Vector3();
		var y = new THREE.Vector3();
		var z = new THREE.Vector3();

		return function ( eye, target, up ) {

			var te = this.elements;

			z.subVectors( eye, target ).normalize();

			if ( z.length() === 0 ) {

				z.z = 1;

			}

			x.crossVectors( up, z ).normalize();

			if ( x.length() === 0 ) {

				z.x += 0.0001;
				x.crossVectors( up, z ).normalize();

			}

			y.crossVectors( z, x );


			te[ 0 ] = x.x; te[ 4 ] = y.x; te[ 8 ] = z.x;
			te[ 1 ] = x.y; te[ 5 ] = y.y; te[ 9 ] = z.y;
			te[ 2 ] = x.z; te[ 6 ] = y.z; te[ 10 ] = z.z;

			return this;

		};

	}(),

	multiply: function ( m, n ) {

		if ( n !== undefined ) {

			console.warn( 'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.' );
			return this.multiplyMatrices( m, n );

		}

		return this.multiplyMatrices( this, m );

	},

	multiplyMatrices: function ( a, b ) {

		var ae = a.elements;
		var be = b.elements;
		var te = this.elements;

		var a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
		var a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
		var a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
		var a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

		var b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
		var b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
		var b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
		var b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

		te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

		te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

		te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

		te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

		return this;

	},

	multiplyToArray: function ( a, b, r ) {

		var te = this.elements;

		this.multiplyMatrices( a, b );

		r[ 0 ] = te[ 0 ]; r[ 1 ] = te[ 1 ]; r[ 2 ] = te[ 2 ]; r[ 3 ] = te[ 3 ];
		r[ 4 ] = te[ 4 ]; r[ 5 ] = te[ 5 ]; r[ 6 ] = te[ 6 ]; r[ 7 ] = te[ 7 ];
		r[ 8 ]  = te[ 8 ]; r[ 9 ]  = te[ 9 ]; r[ 10 ] = te[ 10 ]; r[ 11 ] = te[ 11 ];
		r[ 12 ] = te[ 12 ]; r[ 13 ] = te[ 13 ]; r[ 14 ] = te[ 14 ]; r[ 15 ] = te[ 15 ];

		return this;

	},

	multiplyScalar: function ( s ) {

		var te = this.elements;

		te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
		te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
		te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
		te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

		return this;

	},

	multiplyVector3: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.' );
		return vector.applyProjection( this );

	},

	multiplyVector4: function ( vector ) {

		console.warn( 'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},

	multiplyVector3Array: function ( a ) {

		console.warn( 'THREE.Matrix4: .multiplyVector3Array() has been renamed. Use matrix.applyToVector3Array( array ) instead.' );
		return this.applyToVector3Array( a );

	},

	applyToVector3Array: function () {

		var v1 = new THREE.Vector3();

		return function ( array, offset, length ) {

			if ( offset === undefined ) offset = 0;
			if ( length === undefined ) length = array.length;

			for ( var i = 0, j = offset, il; i < length; i += 3, j += 3 ) {

				v1.x = array[ j ];
				v1.y = array[ j + 1 ];
				v1.z = array[ j + 2 ];

				v1.applyMatrix4( this );

				array[ j ]     = v1.x;
				array[ j + 1 ] = v1.y;
				array[ j + 2 ] = v1.z;

			}

			return array;

		};

	}(),

	rotateAxis: function ( v ) {

		console.warn( 'THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.' );

		v.transformDirection( this );

	},

	crossVector: function ( vector ) {

		console.warn( 'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.' );
		return vector.applyMatrix4( this );

	},

	determinant: function () {

		var te = this.elements;

		var n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
		var n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
		var n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
		var n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

		//TODO: make this more efficient
		//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

		return (
			n41 * (
				+ n14 * n23 * n32
				 - n13 * n24 * n32
				 - n14 * n22 * n33
				 + n12 * n24 * n33
				 + n13 * n22 * n34
				 - n12 * n23 * n34
			) +
			n42 * (
				+ n11 * n23 * n34
				 - n11 * n24 * n33
				 + n14 * n21 * n33
				 - n13 * n21 * n34
				 + n13 * n24 * n31
				 - n14 * n23 * n31
			) +
			n43 * (
				+ n11 * n24 * n32
				 - n11 * n22 * n34
				 - n14 * n21 * n32
				 + n12 * n21 * n34
				 + n14 * n22 * n31
				 - n12 * n24 * n31
			) +
			n44 * (
				- n13 * n22 * n31
				 - n11 * n23 * n32
				 + n11 * n22 * n33
				 + n13 * n21 * n32
				 - n12 * n21 * n33
				 + n12 * n23 * n31
			)

		);

	},

	transpose: function () {

		var te = this.elements;
		var tmp;

		tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
		tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
		tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

		tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
		tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
		tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

		return this;

	},

	flattenToArrayOffset: function ( array, offset ) {

		var te = this.elements;

		array[ offset     ] = te[ 0 ];
		array[ offset + 1 ] = te[ 1 ];
		array[ offset + 2 ] = te[ 2 ];
		array[ offset + 3 ] = te[ 3 ];

		array[ offset + 4 ] = te[ 4 ];
		array[ offset + 5 ] = te[ 5 ];
		array[ offset + 6 ] = te[ 6 ];
		array[ offset + 7 ] = te[ 7 ];

		array[ offset + 8 ]  = te[ 8 ];
		array[ offset + 9 ]  = te[ 9 ];
		array[ offset + 10 ] = te[ 10 ];
		array[ offset + 11 ] = te[ 11 ];

		array[ offset + 12 ] = te[ 12 ];
		array[ offset + 13 ] = te[ 13 ];
		array[ offset + 14 ] = te[ 14 ];
		array[ offset + 15 ] = te[ 15 ];

		return array;

	},

	getPosition: function () {

		var v1 = new THREE.Vector3();

		return function () {

			console.warn( 'THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.' );

			var te = this.elements;
			return v1.set( te[ 12 ], te[ 13 ], te[ 14 ] );

		};

	}(),

	setPosition: function ( v ) {

		var te = this.elements;

		te[ 12 ] = v.x;
		te[ 13 ] = v.y;
		te[ 14 ] = v.z;

		return this;

	},

	getInverse: function ( m, throwOnInvertible ) {

		// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
		var te = this.elements;
		var me = m.elements;

		var n11 = me[ 0 ], n12 = me[ 4 ], n13 = me[ 8 ], n14 = me[ 12 ];
		var n21 = me[ 1 ], n22 = me[ 5 ], n23 = me[ 9 ], n24 = me[ 13 ];
		var n31 = me[ 2 ], n32 = me[ 6 ], n33 = me[ 10 ], n34 = me[ 14 ];
		var n41 = me[ 3 ], n42 = me[ 7 ], n43 = me[ 11 ], n44 = me[ 15 ];

		te[ 0 ] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
		te[ 4 ] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
		te[ 8 ] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
		te[ 12 ] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
		te[ 1 ] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;
		te[ 5 ] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;
		te[ 9 ] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;
		te[ 13 ] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;
		te[ 2 ] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;
		te[ 6 ] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;
		te[ 10 ] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;
		te[ 14 ] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;
		te[ 3 ] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;
		te[ 7 ] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;
		te[ 11 ] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;
		te[ 15 ] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;

		var det = n11 * te[ 0 ] + n21 * te[ 4 ] + n31 * te[ 8 ] + n41 * te[ 12 ];

		if ( det == 0 ) {

			var msg = "Matrix4.getInverse(): can't invert matrix, determinant is 0";

			if ( throwOnInvertible || false ) {

				throw new Error( msg );

			} else {

				console.warn( msg );

			}

			this.identity();

			return this;
		}

		this.multiplyScalar( 1 / det );

		return this;

	},

	translate: function ( v ) {

		console.warn( 'THREE.Matrix4: .translate() has been removed.' );

	},

	rotateX: function ( angle ) {

		console.warn( 'THREE.Matrix4: .rotateX() has been removed.' );

	},

	rotateY: function ( angle ) {

		console.warn( 'THREE.Matrix4: .rotateY() has been removed.' );

	},

	rotateZ: function ( angle ) {

		console.warn( 'THREE.Matrix4: .rotateZ() has been removed.' );

	},

	rotateByAxis: function ( axis, angle ) {

		console.warn( 'THREE.Matrix4: .rotateByAxis() has been removed.' );

	},

	scale: function ( v ) {

		var te = this.elements;
		var x = v.x, y = v.y, z = v.z;

		te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
		te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
		te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
		te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

		return this;

	},

	getMaxScaleOnAxis: function () {

		var te = this.elements;

		var scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
		var scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
		var scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

		return Math.sqrt( Math.max( scaleXSq, Math.max( scaleYSq, scaleZSq ) ) );

	},

	makeTranslation: function ( x, y, z ) {

		this.set(

			1, 0, 0, x,
			0, 1, 0, y,
			0, 0, 1, z,
			0, 0, 0, 1

		);

		return this;

	},

	makeRotationX: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			1, 0,  0, 0,
			0, c, - s, 0,
			0, s,  c, 0,
			0, 0,  0, 1

		);

		return this;

	},

	makeRotationY: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			 c, 0, s, 0,
			 0, 1, 0, 0,
			- s, 0, c, 0,
			 0, 0, 0, 1

		);

		return this;

	},

	makeRotationZ: function ( theta ) {

		var c = Math.cos( theta ), s = Math.sin( theta );

		this.set(

			c, - s, 0, 0,
			s,  c, 0, 0,
			0,  0, 1, 0,
			0,  0, 0, 1

		);

		return this;

	},

	makeRotationAxis: function ( axis, angle ) {

		// Based on http://www.gamedev.net/reference/articles/article1199.asp

		var c = Math.cos( angle );
		var s = Math.sin( angle );
		var t = 1 - c;
		var x = axis.x, y = axis.y, z = axis.z;
		var tx = t * x, ty = t * y;

		this.set(

			tx * x + c, tx * y - s * z, tx * z + s * y, 0,
			tx * y + s * z, ty * y + c, ty * z - s * x, 0,
			tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
			0, 0, 0, 1

		);

		 return this;

	},

	makeScale: function ( x, y, z ) {

		this.set(

			x, 0, 0, 0,
			0, y, 0, 0,
			0, 0, z, 0,
			0, 0, 0, 1

		);

		return this;

	},

	compose: function ( position, quaternion, scale ) {

		this.makeRotationFromQuaternion( quaternion );
		this.scale( scale );
		this.setPosition( position );

		return this;

	},

	decompose: function () {

		var vector = new THREE.Vector3();
		var matrix = new THREE.Matrix4();

		return function ( position, quaternion, scale ) {

			var te = this.elements;

			var sx = vector.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			var sy = vector.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			var sz = vector.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			var det = this.determinant();
			if ( det < 0 ) {
				sx = - sx;
			}

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part

			matrix.elements.set( this.elements ); // at this point matrix is incomplete so we can't use .copy()

			var invSX = 1 / sx;
			var invSY = 1 / sy;
			var invSZ = 1 / sz;

			matrix.elements[ 0 ] *= invSX;
			matrix.elements[ 1 ] *= invSX;
			matrix.elements[ 2 ] *= invSX;

			matrix.elements[ 4 ] *= invSY;
			matrix.elements[ 5 ] *= invSY;
			matrix.elements[ 6 ] *= invSY;

			matrix.elements[ 8 ] *= invSZ;
			matrix.elements[ 9 ] *= invSZ;
			matrix.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( matrix );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		};

	}(),

	makeFrustum: function ( left, right, bottom, top, near, far ) {

		var te = this.elements;
		var x = 2 * near / ( right - left );
		var y = 2 * near / ( top - bottom );

		var a = ( right + left ) / ( right - left );
		var b = ( top + bottom ) / ( top - bottom );
		var c = - ( far + near ) / ( far - near );
		var d = - 2 * far * near / ( far - near );

		te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a;	te[ 12 ] = 0;
		te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b;	te[ 13 ] = 0;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c;	te[ 14 ] = d;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

		return this;

	},

	makePerspective: function ( fov, aspect, near, far ) {

		var ymax = near * Math.tan( THREE.Math.degToRad( fov * 0.5 ) );
		var ymin = - ymax;
		var xmin = ymin * aspect;
		var xmax = ymax * aspect;

		return this.makeFrustum( xmin, xmax, ymin, ymax, near, far );

	},

	makeOrthographic: function ( left, right, top, bottom, near, far ) {

		var te = this.elements;
		var w = right - left;
		var h = top - bottom;
		var p = far - near;

		var x = ( right + left ) / w;
		var y = ( top + bottom ) / h;
		var z = ( far + near ) / p;

		te[ 0 ] = 2 / w;	te[ 4 ] = 0;	te[ 8 ] = 0;	te[ 12 ] = - x;
		te[ 1 ] = 0;	te[ 5 ] = 2 / h;	te[ 9 ] = 0;	te[ 13 ] = - y;
		te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = - 2 / p;	te[ 14 ] = - z;
		te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = 0;	te[ 15 ] = 1;

		return this;

	},

	fromArray: function ( array ) {

		this.elements.set( array );

		return this;

	},

	toArray: function () {

		var te = this.elements;

		return [
			te[ 0 ], te[ 1 ], te[ 2 ], te[ 3 ],
			te[ 4 ], te[ 5 ], te[ 6 ], te[ 7 ],
			te[ 8 ], te[ 9 ], te[ 10 ], te[ 11 ],
			te[ 12 ], te[ 13 ], te[ 14 ], te[ 15 ]
		];

	},

	clone: function () {

		return new THREE.Matrix4().fromArray( this.elements );

	}

};

// File:src/math/Ray.js

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Ray = function ( origin, direction ) {

	this.origin = ( origin !== undefined ) ? origin : new THREE.Vector3();
	this.direction = ( direction !== undefined ) ? direction : new THREE.Vector3();

};

THREE.Ray.prototype = {

	constructor: THREE.Ray,

	set: function ( origin, direction ) {

		this.origin.copy( origin );
		this.direction.copy( direction );

		return this;

	},

	copy: function ( ray ) {

		this.origin.copy( ray.origin );
		this.direction.copy( ray.direction );

		return this;

	},

	at: function ( t, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		return result.copy( this.direction ).multiplyScalar( t ).add( this.origin );

	},

	recast: function () {

		var v1 = new THREE.Vector3();

		return function ( t ) {

			this.origin.copy( this.at( t, v1 ) );

			return this;

		};

	}(),

	closestPointToPoint: function ( point, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		result.subVectors( point, this.origin );
		var directionDistance = result.dot( this.direction );

		if ( directionDistance < 0 ) {

			return result.copy( this.origin );

		}

		return result.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

	},

	distanceToPoint: function () {

		var v1 = new THREE.Vector3();

		return function ( point ) {

			var directionDistance = v1.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceTo( point );

			}

			v1.copy( this.direction ).multiplyScalar( directionDistance ).add( this.origin );

			return v1.distanceTo( point );

		};

	}(),

	distanceSqToSegment: function ( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

		// from http://www.geometrictools.com/LibMathematics/Distance/Wm5DistRay3Segment3.cpp
		// It returns the min distance between the ray and the segment
		// defined by v0 and v1
		// It can also set two optional targets :
		// - The closest point on the ray
		// - The closest point on the segment

		var segCenter = v0.clone().add( v1 ).multiplyScalar( 0.5 );
		var segDir = v1.clone().sub( v0 ).normalize();
		var segExtent = v0.distanceTo( v1 ) * 0.5;
		var diff = this.origin.clone().sub( segCenter );
		var a01 = - this.direction.dot( segDir );
		var b0 = diff.dot( this.direction );
		var b1 = - diff.dot( segDir );
		var c = diff.lengthSq();
		var det = Math.abs( 1 - a01 * a01 );
		var s0, s1, sqrDist, extDet;

		if ( det >= 0 ) {

			// The ray and segment are not parallel.

			s0 = a01 * b1 - b0;
			s1 = a01 * b0 - b1;
			extDet = segExtent * det;

			if ( s0 >= 0 ) {

				if ( s1 >= - extDet ) {

					if ( s1 <= extDet ) {

						// region 0
						// Minimum at interior points of ray and segment.

						var invDet = 1 / det;
						s0 *= invDet;
						s1 *= invDet;
						sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

					} else {

						// region 1

						s1 = segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					// region 5

					s1 = - segExtent;
					s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			} else {

				if ( s1 <= - extDet ) {

					// region 4

					s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				} else if ( s1 <= extDet ) {

					// region 3

					s0 = 0;
					s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = s1 * ( s1 + 2 * b1 ) + c;

				} else {

					// region 2

					s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
					s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
					sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

				}

			}

		} else {

			// Ray and segment are parallel.

			s1 = ( a01 > 0 ) ? - segExtent : segExtent;
			s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
			sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

		}

		if ( optionalPointOnRay ) {

			optionalPointOnRay.copy( this.direction.clone().multiplyScalar( s0 ).add( this.origin ) );

		}

		if ( optionalPointOnSegment ) {

			optionalPointOnSegment.copy( segDir.clone().multiplyScalar( s1 ).add( segCenter ) );

		}

		return sqrDist;

	},

	isIntersectionSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) <= sphere.radius;

	},

	intersectSphere: function () {

		// from http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-sphere-intersection/

		var v1 = new THREE.Vector3();

		return function ( sphere, optionalTarget ) {

			v1.subVectors( sphere.center, this.origin );

			var tca = v1.dot( this.direction );

			var d2 = v1.dot( v1 ) - tca * tca;

			var radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			var thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			var t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			var t1 = tca + thc;

			// test to see if both t0 and t1 are behind the ray - if so, return null
			if ( t0 < 0 && t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, optionalTarget );

			// else t0 is in front of the ray, so return the first collision point scaled by t0 
			return this.at( t0, optionalTarget );

		}

	}(),

	isIntersectionPlane: function ( plane ) {

		// check if the ray lies on the plane first

		var distToPoint = plane.distanceToPoint( this.origin );

		if ( distToPoint === 0 ) {

			return true;

		}

		var denominator = plane.normal.dot( this.direction );

		if ( denominator * distToPoint < 0 ) {

			return true;

		}

		// ray origin is behind the plane (and is pointing behind it)

		return false;

	},

	distanceToPlane: function ( plane ) {

		var denominator = plane.normal.dot( this.direction );
		if ( denominator == 0 ) {

			// line is coplanar, return origin
			if ( plane.distanceToPoint( this.origin ) == 0 ) {

				return 0;

			}

			// Null is preferable to undefined since undefined means.... it is undefined

			return null;

		}

		var t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

		// Return if the ray never intersects the plane

		return t >= 0 ? t :  null;

	},

	intersectPlane: function ( plane, optionalTarget ) {

		var t = this.distanceToPlane( plane );

		if ( t === null ) {

			return null;
		}

		return this.at( t, optionalTarget );

	},

	isIntersectionBox: function () {

		var v = new THREE.Vector3();

		return function ( box ) {

			return this.intersectBox( box, v ) !== null;

		};

	}(),

	intersectBox: function ( box , optionalTarget ) {

		// http://www.scratchapixel.com/lessons/3d-basic-lessons/lesson-7-intersecting-simple-shapes/ray-box-intersection/

		var tmin,tmax,tymin,tymax,tzmin,tzmax;

		var invdirx = 1 / this.direction.x,
			invdiry = 1 / this.direction.y,
			invdirz = 1 / this.direction.z;

		var origin = this.origin;

		if ( invdirx >= 0 ) {

			tmin = ( box.min.x - origin.x ) * invdirx;
			tmax = ( box.max.x - origin.x ) * invdirx;

		} else {

			tmin = ( box.max.x - origin.x ) * invdirx;
			tmax = ( box.min.x - origin.x ) * invdirx;
		}

		if ( invdiry >= 0 ) {

			tymin = ( box.min.y - origin.y ) * invdiry;
			tymax = ( box.max.y - origin.y ) * invdiry;

		} else {

			tymin = ( box.max.y - origin.y ) * invdiry;
			tymax = ( box.min.y - origin.y ) * invdiry;
		}

		if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

		// These lines also handle the case where tmin or tmax is NaN
		// (result of 0 * Infinity). x !== x returns true if x is NaN

		if ( tymin > tmin || tmin !== tmin ) tmin = tymin;

		if ( tymax < tmax || tmax !== tmax ) tmax = tymax;

		if ( invdirz >= 0 ) {

			tzmin = ( box.min.z - origin.z ) * invdirz;
			tzmax = ( box.max.z - origin.z ) * invdirz;

		} else {

			tzmin = ( box.max.z - origin.z ) * invdirz;
			tzmax = ( box.min.z - origin.z ) * invdirz;
		}

		if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

		if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

		if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

		//return point closest to the ray (positive side)

		if ( tmax < 0 ) return null;

		return this.at( tmin >= 0 ? tmin : tmax, optionalTarget );

	},

	intersectTriangle: function () {

		// Compute the offset origin, edges, and normal.
		var diff = new THREE.Vector3();
		var edge1 = new THREE.Vector3();
		var edge2 = new THREE.Vector3();
		var normal = new THREE.Vector3();

		return function ( a, b, c, backfaceCulling, optionalTarget ) {

			// from http://www.geometrictools.com/LibMathematics/Intersection/Wm5IntrRay3Triangle3.cpp

			edge1.subVectors( b, a );
			edge2.subVectors( c, a );
			normal.crossVectors( edge1, edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			var DdN = this.direction.dot( normal );
			var sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			diff.subVectors( this.origin, a );
			var DdQxE2 = sign * this.direction.dot( edge2.crossVectors( diff, edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			var DdE1xQ = sign * this.direction.dot( edge1.cross( diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			var QdN = - sign * diff.dot( normal );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, optionalTarget );

		};

	}(),

	applyMatrix4: function ( matrix4 ) {

		this.direction.add( this.origin ).applyMatrix4( matrix4 );
		this.origin.applyMatrix4( matrix4 );
		this.direction.sub( this.origin );
		this.direction.normalize();

		return this;
	},

	equals: function ( ray ) {

		return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

	},

	clone: function () {

		return new THREE.Ray().copy( this );

	}

};

// File:src/math/Sphere.js

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Sphere = function ( center, radius ) {

	this.center = ( center !== undefined ) ? center : new THREE.Vector3();
	this.radius = ( radius !== undefined ) ? radius : 0;

};

THREE.Sphere.prototype = {

	constructor: THREE.Sphere,

	set: function ( center, radius ) {

		this.center.copy( center );
		this.radius = radius;

		return this;
	},

	setFromPoints: function () {

		var box = new THREE.Box3();

		return function ( points, optionalCenter )  {

			var center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				box.setFromPoints( points ).center( center );

			}

			var maxRadiusSq = 0;

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

 		};

	}(),

	copy: function ( sphere ) {

		this.center.copy( sphere.center );
		this.radius = sphere.radius;

		return this;

	},

	empty: function () {

		return ( this.radius <= 0 );

	},

	containsPoint: function ( point ) {

		return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

	},

	distanceToPoint: function ( point ) {

		return ( point.distanceTo( this.center ) - this.radius );

	},

	intersectsSphere: function ( sphere ) {

		var radiusSum = this.radius + sphere.radius;

		return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

	},

	clampPoint: function ( point, optionalTarget ) {

		var deltaLengthSq = this.center.distanceToSquared( point );

		var result = optionalTarget || new THREE.Vector3();
		result.copy( point );

		if ( deltaLengthSq > ( this.radius * this.radius ) ) {

			result.sub( this.center ).normalize();
			result.multiplyScalar( this.radius ).add( this.center );

		}

		return result;

	},

	getBoundingBox: function ( optionalTarget ) {

		var box = optionalTarget || new THREE.Box3();

		box.set( this.center, this.center );
		box.expandByScalar( this.radius );

		return box;

	},

	applyMatrix4: function ( matrix ) {

		this.center.applyMatrix4( matrix );
		this.radius = this.radius * matrix.getMaxScaleOnAxis();

		return this;

	},

	translate: function ( offset ) {

		this.center.add( offset );

		return this;

	},

	equals: function ( sphere ) {

		return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

	},

	clone: function () {

		return new THREE.Sphere().copy( this );

	}

};

// File:src/math/Frustum.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author bhouston / http://exocortex.com
 */

THREE.Frustum = function ( p0, p1, p2, p3, p4, p5 ) {

	this.planes = [

		( p0 !== undefined ) ? p0 : new THREE.Plane(),
		( p1 !== undefined ) ? p1 : new THREE.Plane(),
		( p2 !== undefined ) ? p2 : new THREE.Plane(),
		( p3 !== undefined ) ? p3 : new THREE.Plane(),
		( p4 !== undefined ) ? p4 : new THREE.Plane(),
		( p5 !== undefined ) ? p5 : new THREE.Plane()

	];

};

THREE.Frustum.prototype = {

	constructor: THREE.Frustum,

	set: function ( p0, p1, p2, p3, p4, p5 ) {

		var planes = this.planes;

		planes[ 0 ].copy( p0 );
		planes[ 1 ].copy( p1 );
		planes[ 2 ].copy( p2 );
		planes[ 3 ].copy( p3 );
		planes[ 4 ].copy( p4 );
		planes[ 5 ].copy( p5 );

		return this;

	},

	copy: function ( frustum ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			planes[ i ].copy( frustum.planes[ i ] );

		}

		return this;

	},

	setFromMatrix: function ( m ) {

		var planes = this.planes;
		var me = m.elements;
		var me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
		var me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
		var me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
		var me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

		planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
		planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
		planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
		planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
		planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();
		planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

		return this;

	},

	intersectsObject: function () {

		var sphere = new THREE.Sphere();

		return function ( object ) {

			var geometry = object.geometry;

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			sphere.copy( geometry.boundingSphere );
			sphere.applyMatrix4( object.matrixWorld );

			return this.intersectsSphere( sphere );

		};

	}(),

	intersectsSphere: function ( sphere ) {

		var planes = this.planes;
		var center = sphere.center;
		var negRadius = - sphere.radius;

		for ( var i = 0; i < 6; i ++ ) {

			var distance = planes[ i ].distanceToPoint( center );

			if ( distance < negRadius ) {

				return false;

			}

		}

		return true;

	},

	intersectsBox: function () {

		var p1 = new THREE.Vector3(),
			p2 = new THREE.Vector3();

		return function ( box ) {

			var planes = this.planes;

			for ( var i = 0; i < 6 ; i ++ ) {

				var plane = planes[ i ];

				p1.x = plane.normal.x > 0 ? box.min.x : box.max.x;
				p2.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				p1.y = plane.normal.y > 0 ? box.min.y : box.max.y;
				p2.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				p1.z = plane.normal.z > 0 ? box.min.z : box.max.z;
				p2.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				var d1 = plane.distanceToPoint( p1 );
				var d2 = plane.distanceToPoint( p2 );

				// if both outside plane, no intersection

				if ( d1 < 0 && d2 < 0 ) {

					return false;

				}
			}

			return true;
		};

	}(),


	containsPoint: function ( point ) {

		var planes = this.planes;

		for ( var i = 0; i < 6; i ++ ) {

			if ( planes[ i ].distanceToPoint( point ) < 0 ) {

				return false;

			}

		}

		return true;

	},

	clone: function () {

		return new THREE.Frustum().copy( this );

	}

};

// File:src/math/Plane.js

/**
 * @author bhouston / http://exocortex.com
 */

THREE.Plane = function ( normal, constant ) {

	this.normal = ( normal !== undefined ) ? normal : new THREE.Vector3( 1, 0, 0 );
	this.constant = ( constant !== undefined ) ? constant : 0;

};

THREE.Plane.prototype = {

	constructor: THREE.Plane,

	set: function ( normal, constant ) {

		this.normal.copy( normal );
		this.constant = constant;

		return this;

	},

	setComponents: function ( x, y, z, w ) {

		this.normal.set( x, y, z );
		this.constant = w;

		return this;

	},

	setFromNormalAndCoplanarPoint: function ( normal, point ) {

		this.normal.copy( normal );
		this.constant = - point.dot( this.normal );	// must be this.normal, not normal, as this.normal is normalized

		return this;

	},

	setFromCoplanarPoints: function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();

		return function ( a, b, c ) {

			var normal = v1.subVectors( c, b ).cross( v2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		};

	}(),


	copy: function ( plane ) {

		this.normal.copy( plane.normal );
		this.constant = plane.constant;

		return this;

	},

	normalize: function () {

		// Note: will lead to a divide by zero if the plane is invalid.

		var inverseNormalLength = 1.0 / this.normal.length();
		this.normal.multiplyScalar( inverseNormalLength );
		this.constant *= inverseNormalLength;

		return this;

	},

	negate: function () {

		this.constant *= - 1;
		this.normal.negate();

		return this;

	},

	distanceToPoint: function ( point ) {

		return this.normal.dot( point ) + this.constant;

	},

	distanceToSphere: function ( sphere ) {

		return this.distanceToPoint( sphere.center ) - sphere.radius;

	},

	projectPoint: function ( point, optionalTarget ) {

		return this.orthoPoint( point, optionalTarget ).sub( point ).negate();

	},

	orthoPoint: function ( point, optionalTarget ) {

		var perpendicularMagnitude = this.distanceToPoint( point );

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( perpendicularMagnitude );

	},

	isIntersectionLine: function ( line ) {

		// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

		var startSign = this.distanceToPoint( line.start );
		var endSign = this.distanceToPoint( line.end );

		return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

	},

	intersectLine: function () {

		var v1 = new THREE.Vector3();

		return function ( line, optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			var direction = line.delta( v1 );

			var denominator = this.normal.dot( direction );

			if ( denominator == 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) == 0 ) {

					return result.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return undefined;

			}

			var t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return undefined;

			}

			return result.copy( direction ).multiplyScalar( t ).add( line.start );

		};

	}(),


	coplanarPoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.copy( this.normal ).multiplyScalar( - this.constant );

	},

	applyMatrix4: function () {

		var v1 = new THREE.Vector3();
		var v2 = new THREE.Vector3();
		var m1 = new THREE.Matrix3();

		return function ( matrix, optionalNormalMatrix ) {

			// compute new normal based on theory here:
			// http://www.songho.ca/opengl/gl_normaltransform.html
			var normalMatrix = optionalNormalMatrix || m1.getNormalMatrix( matrix );
			var newNormal = v1.copy( this.normal ).applyMatrix3( normalMatrix );

			var newCoplanarPoint = this.coplanarPoint( v2 );
			newCoplanarPoint.applyMatrix4( matrix );

			this.setFromNormalAndCoplanarPoint( newNormal, newCoplanarPoint );

			return this;

		};

	}(),

	translate: function ( offset ) {

		this.constant = this.constant - offset.dot( this.normal );

		return this;

	},

	equals: function ( plane ) {

		return plane.normal.equals( this.normal ) && ( plane.constant == this.constant );

	},

	clone: function () {

		return new THREE.Plane().copy( this );

	}

};

// File:src/math/Math.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Math = {

	generateUUID: function () {

		// http://www.broofa.com/Tools/Math.uuid.htm

		var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split( '' );
		var uuid = new Array( 36 );
		var rnd = 0, r;

		return function () {

			for ( var i = 0; i < 36; i ++ ) {

				if ( i == 8 || i == 13 || i == 18 || i == 23 ) {

					uuid[ i ] = '-';

				} else if ( i == 14 ) {

					uuid[ i ] = '4';

				} else {

					if ( rnd <= 0x02 ) rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;
					r = rnd & 0xf;
					rnd = rnd >> 4;
					uuid[ i ] = chars[ ( i == 19 ) ? ( r & 0x3 ) | 0x8 : r ];

				}
			}

			return uuid.join( '' );

		};

	}(),

	// Clamp value to range <a, b>

	clamp: function ( x, a, b ) {

		return ( x < a ) ? a : ( ( x > b ) ? b : x );

	},

	// Clamp value to range <a, inf)

	clampBottom: function ( x, a ) {

		return x < a ? a : x;

	},

	// Linear mapping from range <a1, a2> to range <b1, b2>

	mapLinear: function ( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	},

	// http://en.wikipedia.org/wiki/Smoothstep

	smoothstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	},

	smootherstep: function ( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	},

	// Random float from <0, 1> with 16 bits of randomness
	// (standard Math.random() creates repetitive patterns when applied over larger space)

	random16: function () {

		return ( 65280 * Math.random() + 255 * Math.random() ) / 65535;

	},

	// Random integer from <low, high> interval

	randInt: function ( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	},

	// Random float from <low, high> interval

	randFloat: function ( low, high ) {

		return low + Math.random() * ( high - low );

	},

	// Random float from <-range/2, range/2> interval

	randFloatSpread: function ( range ) {

		return range * ( 0.5 - Math.random() );

	},

	degToRad: function () {

		var degreeToRadiansFactor = Math.PI / 180;

		return function ( degrees ) {

			return degrees * degreeToRadiansFactor;

		};

	}(),

	radToDeg: function () {

		var radianToDegreesFactor = 180 / Math.PI;

		return function ( radians ) {

			return radians * radianToDegreesFactor;

		};

	}(),

	isPowerOfTwo: function ( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	}

};

// File:src/math/Spline.js

/**
 * Spline from Tween.js, slightly optimized (and trashed)
 * http://sole.github.com/tween.js/examples/05_spline.html
 *
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Spline = function ( points ) {

	this.points = points;

	var c = [], v3 = { x: 0, y: 0, z: 0 },
	point, intPoint, weight, w2, w3,
	pa, pb, pc, pd;

	this.initFromArray = function ( a ) {

		this.points = [];

		for ( var i = 0; i < a.length; i ++ ) {

			this.points[ i ] = { x: a[ i ][ 0 ], y: a[ i ][ 1 ], z: a[ i ][ 2 ] };

		}

	};

	this.getPoint = function ( k ) {

		point = ( this.points.length - 1 ) * k;
		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint  > this.points.length - 2 ? this.points.length - 1 : intPoint + 1;
		c[ 3 ] = intPoint  > this.points.length - 3 ? this.points.length - 1 : intPoint + 2;

		pa = this.points[ c[ 0 ] ];
		pb = this.points[ c[ 1 ] ];
		pc = this.points[ c[ 2 ] ];
		pd = this.points[ c[ 3 ] ];

		w2 = weight * weight;
		w3 = weight * w2;

		v3.x = interpolate( pa.x, pb.x, pc.x, pd.x, weight, w2, w3 );
		v3.y = interpolate( pa.y, pb.y, pc.y, pd.y, weight, w2, w3 );
		v3.z = interpolate( pa.z, pb.z, pc.z, pd.z, weight, w2, w3 );

		return v3;

	};

	this.getControlPointsArray = function () {

		var i, p, l = this.points.length,
			coords = [];

		for ( i = 0; i < l; i ++ ) {

			p = this.points[ i ];
			coords[ i ] = [ p.x, p.y, p.z ];

		}

		return coords;

	};

	// approximate length by summing linear segments

	this.getLength = function ( nSubDivisions ) {

		var i, index, nSamples, position,
			point = 0, intPoint = 0, oldIntPoint = 0,
			oldPosition = new THREE.Vector3(),
			tmpVec = new THREE.Vector3(),
			chunkLengths = [],
			totalLength = 0;

		// first point has 0 length

		chunkLengths[ 0 ] = 0;

		if ( ! nSubDivisions ) nSubDivisions = 100;

		nSamples = this.points.length * nSubDivisions;

		oldPosition.copy( this.points[ 0 ] );

		for ( i = 1; i < nSamples; i ++ ) {

			index = i / nSamples;

			position = this.getPoint( index );
			tmpVec.copy( position );

			totalLength += tmpVec.distanceTo( oldPosition );

			oldPosition.copy( position );

			point = ( this.points.length - 1 ) * index;
			intPoint = Math.floor( point );

			if ( intPoint != oldIntPoint ) {

				chunkLengths[ intPoint ] = totalLength;
				oldIntPoint = intPoint;

			}

		}

		// last point ends with total length

		chunkLengths[ chunkLengths.length ] = totalLength;

		return { chunks: chunkLengths, total: totalLength };

	};

	this.reparametrizeByArcLength = function ( samplingCoef ) {

		var i, j,
			index, indexCurrent, indexNext,
			linearDistance, realDistance,
			sampling, position,
			newpoints = [],
			tmpVec = new THREE.Vector3(),
			sl = this.getLength();

		newpoints.push( tmpVec.copy( this.points[ 0 ] ).clone() );

		for ( i = 1; i < this.points.length; i ++ ) {

			//tmpVec.copy( this.points[ i - 1 ] );
			//linearDistance = tmpVec.distanceTo( this.points[ i ] );

			realDistance = sl.chunks[ i ] - sl.chunks[ i - 1 ];

			sampling = Math.ceil( samplingCoef * realDistance / sl.total );

			indexCurrent = ( i - 1 ) / ( this.points.length - 1 );
			indexNext = i / ( this.points.length - 1 );

			for ( j = 1; j < sampling - 1; j ++ ) {

				index = indexCurrent + j * ( 1 / sampling ) * ( indexNext - indexCurrent );

				position = this.getPoint( index );
				newpoints.push( tmpVec.copy( position ).clone() );

			}

			newpoints.push( tmpVec.copy( this.points[ i ] ).clone() );

		}

		this.points = newpoints;

	};

	// Catmull-Rom

	function interpolate( p0, p1, p2, p3, t, t2, t3 ) {

		var v0 = ( p2 - p0 ) * 0.5,
			v1 = ( p3 - p1 ) * 0.5;

		return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	};

};

// File:src/math/Triangle.js

/**
 * @author bhouston / http://exocortex.com
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Triangle = function ( a, b, c ) {

	this.a = ( a !== undefined ) ? a : new THREE.Vector3();
	this.b = ( b !== undefined ) ? b : new THREE.Vector3();
	this.c = ( c !== undefined ) ? c : new THREE.Vector3();

};

THREE.Triangle.normal = function () {

	var v0 = new THREE.Vector3();

	return function ( a, b, c, optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		result.subVectors( c, b );
		v0.subVectors( a, b );
		result.cross( v0 );

		var resultLengthSq = result.lengthSq();
		if ( resultLengthSq > 0 ) {

			return result.multiplyScalar( 1 / Math.sqrt( resultLengthSq ) );

		}

		return result.set( 0, 0, 0 );

	};

}();

// static/instance method to calculate barycoordinates
// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
THREE.Triangle.barycoordFromPoint = function () {

	var v0 = new THREE.Vector3();
	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();

	return function ( point, a, b, c, optionalTarget ) {

		v0.subVectors( c, a );
		v1.subVectors( b, a );
		v2.subVectors( point, a );

		var dot00 = v0.dot( v0 );
		var dot01 = v0.dot( v1 );
		var dot02 = v0.dot( v2 );
		var dot11 = v1.dot( v1 );
		var dot12 = v1.dot( v2 );

		var denom = ( dot00 * dot11 - dot01 * dot01 );

		var result = optionalTarget || new THREE.Vector3();

		// colinear or singular triangle
		if ( denom == 0 ) {
			// arbitrary location outside of triangle?
			// not sure if this is the best idea, maybe should be returning undefined
			return result.set( - 2, - 1, - 1 );
		}

		var invDenom = 1 / denom;
		var u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
		var v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

		// barycoordinates must always sum to 1
		return result.set( 1 - u - v, v, u );

	};

}();

THREE.Triangle.containsPoint = function () {

	var v1 = new THREE.Vector3();

	return function ( point, a, b, c ) {

		var result = THREE.Triangle.barycoordFromPoint( point, a, b, c, v1 );

		return ( result.x >= 0 ) && ( result.y >= 0 ) && ( ( result.x + result.y ) <= 1 );

	};

}();

THREE.Triangle.prototype = {

	constructor: THREE.Triangle,

	set: function ( a, b, c ) {

		this.a.copy( a );
		this.b.copy( b );
		this.c.copy( c );

		return this;

	},

	setFromPointsAndIndices: function ( points, i0, i1, i2 ) {

		this.a.copy( points[ i0 ] );
		this.b.copy( points[ i1 ] );
		this.c.copy( points[ i2 ] );

		return this;

	},

	copy: function ( triangle ) {

		this.a.copy( triangle.a );
		this.b.copy( triangle.b );
		this.c.copy( triangle.c );

		return this;

	},

	area: function () {

		var v0 = new THREE.Vector3();
		var v1 = new THREE.Vector3();

		return function () {

			v0.subVectors( this.c, this.b );
			v1.subVectors( this.a, this.b );

			return v0.cross( v1 ).length() * 0.5;

		};

	}(),

	midpoint: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();
		return result.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

	},

	normal: function ( optionalTarget ) {

		return THREE.Triangle.normal( this.a, this.b, this.c, optionalTarget );

	},

	plane: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Plane();

		return result.setFromCoplanarPoints( this.a, this.b, this.c );

	},

	barycoordFromPoint: function ( point, optionalTarget ) {

		return THREE.Triangle.barycoordFromPoint( point, this.a, this.b, this.c, optionalTarget );

	},

	containsPoint: function ( point ) {

		return THREE.Triangle.containsPoint( point, this.a, this.b, this.c );

	},

	equals: function ( triangle ) {

		return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

	},

	clone: function () {

		return new THREE.Triangle().copy( this );

	}

};

// File:src/core/Clock.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Clock = function ( autoStart ) {

	this.autoStart = ( autoStart !== undefined ) ? autoStart : true;

	this.startTime = 0;
	this.oldTime = 0;
	this.elapsedTime = 0;

	this.running = false;

};

THREE.Clock.prototype = {

	constructor: THREE.Clock,

	start: function () {

		this.startTime = self.performance !== undefined && self.performance.now !== undefined
					 ? self.performance.now()
					 : Date.now();

		this.oldTime = this.startTime;
		this.running = true;
	},

	stop: function () {

		this.getElapsedTime();
		this.running = false;

	},

	getElapsedTime: function () {

		this.getDelta();
		return this.elapsedTime;

	},

	getDelta: function () {

		var diff = 0;

		if ( this.autoStart && ! this.running ) {

			this.start();

		}

		if ( this.running ) {

			var newTime = self.performance !== undefined && self.performance.now !== undefined
					 ? self.performance.now()
					 : Date.now();

			diff = 0.001 * ( newTime - this.oldTime );
			this.oldTime = newTime;

			this.elapsedTime += diff;

		}

		return diff;

	}

};

// File:src/core/EventDispatcher.js

/**
 * https://github.com/mrdoob/eventdispatcher.js/
 */

THREE.EventDispatcher = function () {}

THREE.EventDispatcher.prototype = {

	constructor: THREE.EventDispatcher,

	apply: function ( object ) {

		object.addEventListener = THREE.EventDispatcher.prototype.addEventListener;
		object.hasEventListener = THREE.EventDispatcher.prototype.hasEventListener;
		object.removeEventListener = THREE.EventDispatcher.prototype.removeEventListener;
		object.dispatchEvent = THREE.EventDispatcher.prototype.dispatchEvent;

	},

	addEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) this._listeners = {};

		var listeners = this._listeners;

		if ( listeners[ type ] === undefined ) {

			listeners[ type ] = [];

		}

		if ( listeners[ type ].indexOf( listener ) === - 1 ) {

			listeners[ type ].push( listener );

		}

	},

	hasEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return false;

		var listeners = this._listeners;

		if ( listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1 ) {

			return true;

		}

		return false;

	},

	removeEventListener: function ( type, listener ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ type ];

		if ( listenerArray !== undefined ) {

			var index = listenerArray.indexOf( listener );

			if ( index !== - 1 ) {

				listenerArray.splice( index, 1 );

			}

		}

	},

	dispatchEvent: function ( event ) {

		if ( this._listeners === undefined ) return;

		var listeners = this._listeners;
		var listenerArray = listeners[ event.type ];

		if ( listenerArray !== undefined ) {

			event.target = this;

			var array = [];
			var length = listenerArray.length;

			for ( var i = 0; i < length; i ++ ) {

				array[ i ] = listenerArray[ i ];

			}

			for ( var i = 0; i < length; i ++ ) {

				array[ i ].call( this, event );

			}

		}

	}

};

// File:src/core/Raycaster.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author bhouston / http://exocortex.com/
 * @author stephomi / http://stephaneginier.com/
 */

( function ( THREE ) {

	THREE.Raycaster = function ( origin, direction, near, far ) {

		this.ray = new THREE.Ray( origin, direction );
		// direction is assumed to be normalized (for accurate distance calculations)

		this.near = near || 0;
		this.far = far || Infinity;

		this.params = {
			Sprite: {},
			Mesh: {},
			PointCloud: { threshold: 1 },
			LOD: {},
			Line: {}
		};

	};

	var descSort = function ( a, b ) {

		return a.distance - b.distance;

	};

	var intersectObject = function ( object, raycaster, intersects, recursive ) {

		object.raycast( raycaster, intersects );

		if ( recursive === true ) {

			var children = object.children;

			for ( var i = 0, l = children.length; i < l; i ++ ) {

				intersectObject( children[ i ], raycaster, intersects, true );

			}

		}

	};

	//

	THREE.Raycaster.prototype = {

		constructor: THREE.Raycaster,

		precision: 0.0001,
		linePrecision: 1,

		set: function ( origin, direction ) {

			this.ray.set( origin, direction );
			// direction is assumed to be normalized (for accurate distance calculations)

		},

		intersectObject: function ( object, recursive ) {

			var intersects = [];

			intersectObject( object, this, intersects, recursive );

			intersects.sort( descSort );

			return intersects;

		},

		intersectObjects: function ( objects, recursive ) {

			var intersects = [];

			if ( objects instanceof Array === false ) {

				console.log( 'THREE.Raycaster.intersectObjects: objects is not an Array.' );
				return intersects;

			}

			for ( var i = 0, l = objects.length; i < l; i ++ ) {

				intersectObject( objects[ i ], this, intersects, recursive );

			}

			intersects.sort( descSort );

			return intersects;

		}

	};

}( THREE ) );

// File:src/core/Object3D.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.Object3D = function () {

	Object.defineProperty( this, 'id', { value: THREE.Object3DIdCount ++ } );

	this.uuid = THREE.Math.generateUUID();

	this.name = '';
	this.type = 'Object3D';

	this.parent = undefined;
	this.children = [];

	this.up = THREE.Object3D.DefaultUp.clone();

	var scope = this;

	var position = new THREE.Vector3();
	var rotation = new THREE.Euler();
	var quaternion = new THREE.Quaternion();
	var scale = new THREE.Vector3( 1, 1, 1 );

	var onRotationChange = function () {
		quaternion.setFromEuler( rotation, false );
	};

	var onQuaternionChange = function () {
		rotation.setFromQuaternion( quaternion, undefined, false );
	};

	rotation.onChange( onRotationChange );
	quaternion.onChange( onQuaternionChange );

	Object.defineProperties( this, {
		position: {
			enumerable: true,
			value: position
		},
		rotation: {
			enumerable: true,
			value: rotation
		},
		quaternion: {
			enumerable: true,
			value: quaternion
		},
		scale: {
			enumerable: true,
			value: scale
		},
	} );

	this.renderDepth = null;

	this.rotationAutoUpdate = true;

	this.matrix = new THREE.Matrix4();
	this.matrixWorld = new THREE.Matrix4();

	this.matrixAutoUpdate = true;
	this.matrixWorldNeedsUpdate = false;

	this.visible = true;

	this.castShadow = false;
	this.receiveShadow = false;

	this.frustumCulled = true;

	this.userData = {};

};

THREE.Object3D.DefaultUp = new THREE.Vector3( 0, 1, 0 );

THREE.Object3D.prototype = {

	constructor: THREE.Object3D,

	get eulerOrder () {

		console.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );

		return this.rotation.order;

	},

	set eulerOrder ( value ) {

		console.warn( 'THREE.Object3D: .eulerOrder has been moved to .rotation.order.' );

		this.rotation.order = value;

	},

	get useQuaternion () {

		console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

	},

	set useQuaternion ( value ) {

		console.warn( 'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.' );

	},

	applyMatrix: function ( matrix ) {

		this.matrix.multiplyMatrices( matrix, this.matrix );

		this.matrix.decompose( this.position, this.quaternion, this.scale );

	},

	setRotationFromAxisAngle: function ( axis, angle ) {

		// assumes axis is normalized

		this.quaternion.setFromAxisAngle( axis, angle );

	},

	setRotationFromEuler: function ( euler ) {

		this.quaternion.setFromEuler( euler, true );

	},

	setRotationFromMatrix: function ( m ) {

		// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

		this.quaternion.setFromRotationMatrix( m );

	},

	setRotationFromQuaternion: function ( q ) {

		// assumes q is normalized

		this.quaternion.copy( q );

	},

	rotateOnAxis: function () {

		// rotate object on axis in object space
		// axis is assumed to be normalized

		var q1 = new THREE.Quaternion();

		return function ( axis, angle ) {

			q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( q1 );

			return this;

		}

	}(),

	rotateX: function () {

		var v1 = new THREE.Vector3( 1, 0, 0 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateY: function () {

		var v1 = new THREE.Vector3( 0, 1, 0 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	rotateZ: function () {

		var v1 = new THREE.Vector3( 0, 0, 1 );

		return function ( angle ) {

			return this.rotateOnAxis( v1, angle );

		};

	}(),

	translateOnAxis: function () {

		// translate object by distance along axis in object space
		// axis is assumed to be normalized

		var v1 = new THREE.Vector3();

		return function ( axis, distance ) {

			v1.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( v1.multiplyScalar( distance ) );

			return this;

		}

	}(),

	translate: function ( distance, axis ) {

		console.warn( 'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.' );
		return this.translateOnAxis( axis, distance );

	},

	translateX: function () {

		var v1 = new THREE.Vector3( 1, 0, 0 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateY: function () {

		var v1 = new THREE.Vector3( 0, 1, 0 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	translateZ: function () {

		var v1 = new THREE.Vector3( 0, 0, 1 );

		return function ( distance ) {

			return this.translateOnAxis( v1, distance );

		};

	}(),

	localToWorld: function ( vector ) {

		return vector.applyMatrix4( this.matrixWorld );

	},

	worldToLocal: function () {

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			return vector.applyMatrix4( m1.getInverse( this.matrixWorld ) );

		};

	}(),

	lookAt: function () {

		// This routine does not support objects with rotated and/or translated parent(s)

		var m1 = new THREE.Matrix4();

		return function ( vector ) {

			m1.lookAt( vector, this.position, this.up );

			this.quaternion.setFromRotationMatrix( m1 );

		};

	}(),

	add: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i++ ) {

				this.add( arguments[ i ] );

			}

			return this;

		};

		if ( object === this ) {

			console.error( "THREE.Object3D.add:", object, "can't be added as a child of itself." );
			return this;

		}

		if ( object instanceof THREE.Object3D ) {

			if ( object.parent !== undefined ) {

				object.parent.remove( object );

			}

			object.parent = this;
			object.dispatchEvent( { type: 'added' } );

			this.children.push( object );

		} else {

			console.error( "THREE.Object3D.add:", object, "is not an instance of THREE.Object3D." );

		}

		return this;

	},

	remove: function ( object ) {

		if ( arguments.length > 1 ) {

			for ( var i = 0; i < arguments.length; i++ ) {

				this.remove( arguments[ i ] );

			}

		};

		var index = this.children.indexOf( object );

		if ( index !== - 1 ) {

			object.parent = undefined;

			object.dispatchEvent( { type: 'removed' } );

			this.children.splice( index, 1 );

		}

	},

	getChildByName: function ( name, recursive ) {

		console.warn( 'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().' );
		return this.getObjectByName( name, recursive );

	},

	getObjectById: function ( id, recursive ) {

		if ( this.id === id ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectById( id, recursive );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getObjectByName: function ( name, recursive ) {

		if ( this.name === name ) return this;

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			var child = this.children[ i ];
			var object = child.getObjectByName( name, recursive );

			if ( object !== undefined ) {

				return object;

			}

		}

		return undefined;

	},

	getWorldPosition: function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		this.updateMatrixWorld( true );

		return result.setFromMatrixPosition( this.matrixWorld );

	},

	getWorldQuaternion: function () {

		var position = new THREE.Vector3();
		var scale = new THREE.Vector3();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Quaternion();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, result, scale );

			return result;

		}

	}(),

	getWorldRotation: function () {

		var quaternion = new THREE.Quaternion();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Euler();

			this.getWorldQuaternion( quaternion );

			return result.setFromQuaternion( quaternion, this.rotation.order, false );

		}

	}(),

	getWorldScale: function () {

		var position = new THREE.Vector3();
		var quaternion = new THREE.Quaternion();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.updateMatrixWorld( true );

			this.matrixWorld.decompose( position, quaternion, result );

			return result;

		}

	}(),

	getWorldDirection: function () {

		var quaternion = new THREE.Quaternion();

		return function ( optionalTarget ) {

			var result = optionalTarget || new THREE.Vector3();

			this.getWorldQuaternion( quaternion );

			return result.set( 0, 0, 1 ).applyQuaternion( quaternion );

		}

	}(),

	raycast: function () {},

	traverse: function ( callback ) {

		callback( this );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].traverse( callback );

		}

	},

	traverseVisible: function ( callback ) {

		if ( this.visible === false ) return;

		callback( this );

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].traverseVisible( callback );

		}

	},

	updateMatrix: function () {

		this.matrix.compose( this.position, this.quaternion, this.scale );

		this.matrixWorldNeedsUpdate = true;

	},

	updateMatrixWorld: function ( force ) {

		if ( this.matrixAutoUpdate === true ) this.updateMatrix();

		if ( this.matrixWorldNeedsUpdate === true || force === true ) {

			if ( this.parent === undefined ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].updateMatrixWorld( force );

		}

	},

	toJSON: function () {

		var output = {
			metadata: {
				version: 4.3,
				type: 'Object',
				generator: 'ObjectExporter'
			}
		};

		//

		var geometries = {};

		var parseGeometry = function ( geometry ) {

			if ( output.geometries === undefined ) {

				output.geometries = [];

			}

			if ( geometries[ geometry.uuid ] === undefined ) {

				var json = geometry.toJSON();

				delete json.metadata;

				geometries[ geometry.uuid ] = json;

				output.geometries.push( json );

			}

			return geometry.uuid;

		};

		//

		var materials = {};

		var parseMaterial = function ( material ) {

			if ( output.materials === undefined ) {

				output.materials = [];

			}

			if ( materials[ material.uuid ] === undefined ) {

				var json = material.toJSON();

				delete json.metadata;

				materials[ material.uuid ] = json;

				output.materials.push( json );

			}

			return material.uuid;

		};

		//

		var parseObject = function ( object ) {

			var data = {};

			data.uuid = object.uuid;
			data.type = object.type;

			if ( object.name !== '' ) data.name = object.name;
			if ( JSON.stringify( object.userData ) !== '{}' ) data.userData = object.userData;
			if ( object.visible !== true ) data.visible = object.visible;

			if ( object instanceof THREE.PerspectiveCamera ) {

				data.fov = object.fov;
				data.aspect = object.aspect;
				data.near = object.near;
				data.far = object.far;

			} else if ( object instanceof THREE.OrthographicCamera ) {

				data.left = object.left;
				data.right = object.right;
				data.top = object.top;
				data.bottom = object.bottom;
				data.near = object.near;
				data.far = object.far;

			} else if ( object instanceof THREE.AmbientLight ) {

				data.color = object.color.getHex();

			} else if ( object instanceof THREE.DirectionalLight ) {

				data.color = object.color.getHex();
				data.intensity = object.intensity;

			} else if ( object instanceof THREE.PointLight ) {

				data.color = object.color.getHex();
				data.intensity = object.intensity;
				data.distance = object.distance;

			} else if ( object instanceof THREE.SpotLight ) {

				data.color = object.color.getHex();
				data.intensity = object.intensity;
				data.distance = object.distance;
				data.angle = object.angle;
				data.exponent = object.exponent;

			} else if ( object instanceof THREE.HemisphereLight ) {

				data.color = object.color.getHex();
				data.groundColor = object.groundColor.getHex();

			} else if ( object instanceof THREE.Mesh ) {

				data.geometry = parseGeometry( object.geometry );
				data.material = parseMaterial( object.material );

			} else if ( object instanceof THREE.Line ) {

				data.geometry = parseGeometry( object.geometry );
				data.material = parseMaterial( object.material );

			} else if ( object instanceof THREE.Sprite ) {

				data.material = parseMaterial( object.material );

			}

			data.matrix = object.matrix.toArray();

			if ( object.children.length > 0 ) {

				data.children = [];

				for ( var i = 0; i < object.children.length; i ++ ) {

					data.children.push( parseObject( object.children[ i ] ) );

				}

			}

			return data;

		}

		output.object = parseObject( this );

		return output;

	},

	clone: function ( object, recursive ) {

		if ( object === undefined ) object = new THREE.Object3D();
		if ( recursive === undefined ) recursive = true;

		object.name = this.name;

		object.up.copy( this.up );

		object.position.copy( this.position );
		object.quaternion.copy( this.quaternion );
		object.scale.copy( this.scale );

		object.renderDepth = this.renderDepth;

		object.rotationAutoUpdate = this.rotationAutoUpdate;

		object.matrix.copy( this.matrix );
		object.matrixWorld.copy( this.matrixWorld );

		object.matrixAutoUpdate = this.matrixAutoUpdate;
		object.matrixWorldNeedsUpdate = this.matrixWorldNeedsUpdate;

		object.visible = this.visible;

		object.castShadow = this.castShadow;
		object.receiveShadow = this.receiveShadow;

		object.frustumCulled = this.frustumCulled;

		object.userData = JSON.parse( JSON.stringify( this.userData ) );

		if ( recursive === true ) {

			for ( var i = 0; i < this.children.length; i ++ ) {

				var child = this.children[ i ];
				object.add( child.clone() );

			}

		}

		return object;

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Object3D.prototype );

THREE.Object3DIdCount = 0;

// File:src/core/Projector.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Projector = function () {

	console.warn( 'THREE.Projector has been moved to /examples/renderers/Projector.js.' );

	this.projectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .projectVector() is now vector.project().' );
		vector.project( camera );

	};

	this.unprojectVector = function ( vector, camera ) {

		console.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );
		vector.unproject( camera );

	};

	this.pickingRay = function ( vector, camera ) {

		console.error( 'THREE.Projector: .pickingRay() has been removed.' );

	};

};

// File:src/core/Face3.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Face3 = function ( a, b, c, normal, color, materialIndex ) {

	this.a = a;
	this.b = b;
	this.c = c;

	this.normal = normal instanceof THREE.Vector3 ? normal : new THREE.Vector3();
	this.vertexNormals = normal instanceof Array ? normal : [];

	this.color = color instanceof THREE.Color ? color : new THREE.Color();
	this.vertexColors = color instanceof Array ? color : [];

	this.vertexTangents = [];

	this.materialIndex = materialIndex !== undefined ? materialIndex : 0;

};

THREE.Face3.prototype = {

	constructor: THREE.Face3,

	clone: function () {

		var face = new THREE.Face3( this.a, this.b, this.c );

		face.normal.copy( this.normal );
		face.color.copy( this.color );

		face.materialIndex = this.materialIndex;

		for ( var i = 0, il = this.vertexNormals.length; i < il; i ++ ) {

			face.vertexNormals[ i ] = this.vertexNormals[ i ].clone();

		}

		for ( var i = 0, il = this.vertexColors.length; i < il; i ++ ) {

			face.vertexColors[ i ] = this.vertexColors[ i ].clone();

		}

		for ( var i = 0, il = this.vertexTangents.length; i < il; i ++ ) {

			face.vertexTangents[ i ] = this.vertexTangents[ i ].clone();

		}

		return face;

	}

};

// File:src/core/Face4.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Face4 = function ( a, b, c, d, normal, color, materialIndex ) {

	console.warn( 'THREE.Face4 has been removed. A THREE.Face3 will be created instead.' )
	return new THREE.Face3( a, b, c, normal, color, materialIndex );

};

// File:src/core/BufferAttribute.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferAttribute = function ( array, itemSize ) {

	this.array = array;
	this.itemSize = itemSize;

	this.needsUpdate = false;

};

THREE.BufferAttribute.prototype = {

	constructor: THREE.BufferAttribute,

	get length () {

		return this.array.length;

	},

	copyAt: function ( index1, attribute, index2 ) {

		index1 *= this.itemSize;
		index2 *= attribute.itemSize;

		for ( var i = 0, l = this.itemSize; i < l; i ++ ) {

			this.array[ index1 + i ] = attribute.array[ index2 + i ];

		}

	},

	set: function ( value ) {

		this.array.set( value );

		return this;

	},

	setX: function ( index, x ) {

		this.array[ index * this.itemSize ] = x;

		return this;

	},

	setY: function ( index, y ) {

		this.array[ index * this.itemSize + 1 ] = y;

		return this;

	},

	setZ: function ( index, z ) {

		this.array[ index * this.itemSize + 2 ] = z;

		return this;

	},

	setXY: function ( index, x, y ) {

		index *= this.itemSize;

		this.array[ index     ] = x;
		this.array[ index + 1 ] = y;

		return this;

	},

	setXYZ: function ( index, x, y, z ) {

		index *= this.itemSize;

		this.array[ index     ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;

		return this;

	},

	setXYZW: function ( index, x, y, z, w ) {

		index *= this.itemSize;

		this.array[ index     ] = x;
		this.array[ index + 1 ] = y;
		this.array[ index + 2 ] = z;
		this.array[ index + 3 ] = w;

		return this;

	},

	clone: function () {

		return new THREE.BufferAttribute( new this.array.constructor( this.array ), this.itemSize );

	}

};

//

THREE.Int8Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Int8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Uint8Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Uint8Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Uint8ClampedAttribute = function ( data, itemSize ) {

	console.warn( 'THREE.Uint8ClampedAttribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );


};

THREE.Int16Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Int16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Uint16Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Uint16Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Int32Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Int32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Uint32Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Uint32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Float32Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Float32Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

THREE.Float64Attribute = function ( data, itemSize ) {

	console.warn( 'THREE.Float64Attribute has been removed. Use THREE.BufferAttribute( array, itemSize ) instead.' );
	return new THREE.BufferAttribute( data, itemSize );

};

// File:src/core/BufferGeometry.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferGeometry = function () {

	Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

	this.uuid = THREE.Math.generateUUID();

	this.name = '';
	this.type = 'BufferGeometry';

	this.attributes = {};
	this.attributesKeys = [];

	this.drawcalls = [];
	this.offsets = this.drawcalls; // backwards compatibility

	this.boundingBox = null;
	this.boundingSphere = null;

};

THREE.BufferGeometry.prototype = {

	constructor: THREE.BufferGeometry,

	addAttribute: function ( name, attribute ) {

		if ( attribute instanceof THREE.BufferAttribute === false ) {

			console.warn( 'THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).' );

			this.attributes[ name ] = { array: arguments[ 1 ], itemSize: arguments[ 2 ] };

			return;

		}

		this.attributes[ name ] = attribute;
		this.attributesKeys = Object.keys( this.attributes );

	},

	getAttribute: function ( name ) {

		return this.attributes[ name ];

	},

	addDrawCall: function ( start, count, indexOffset ) {

		this.drawcalls.push( {

			start: start,
			count: count,
			index: indexOffset !== undefined ? indexOffset : 0

		} );

	},

	applyMatrix: function ( matrix ) {

		var position = this.attributes.position;

		if ( position !== undefined ) {

			matrix.applyToVector3Array( position.array );
			position.needsUpdate = true;

		}

		var normal = this.attributes.normal;

		if ( normal !== undefined ) {

			var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

			normalMatrix.applyToVector3Array( normal.array );
			normal.needsUpdate = true;

		}

	},

	center: function () {

		// TODO

	},

	fromGeometry: function ( geometry, settings ) {

		settings = settings || { 'vertexColors': THREE.NoColors };

		var vertices = geometry.vertices;
		var faces = geometry.faces;
		var faceVertexUvs = geometry.faceVertexUvs;
		var vertexColors = settings.vertexColors;
		var hasFaceVertexUv = faceVertexUvs[ 0 ].length > 0;
		var hasFaceVertexNormals = faces[ 0 ].vertexNormals.length == 3;

		var positions = new Float32Array( faces.length * 3 * 3 );
		this.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );

		var normals = new Float32Array( faces.length * 3 * 3 );
		this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );

		if ( vertexColors !== THREE.NoColors ) {

			var colors = new Float32Array( faces.length * 3 * 3 );
			this.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

		}

		if ( hasFaceVertexUv === true ) {

			var uvs = new Float32Array( faces.length * 3 * 2 );
			this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

		}

		for ( var i = 0, i2 = 0, i3 = 0; i < faces.length; i ++, i2 += 6, i3 += 9 ) {

			var face = faces[ i ];

			var a = vertices[ face.a ];
			var b = vertices[ face.b ];
			var c = vertices[ face.c ];

			positions[ i3     ] = a.x;
			positions[ i3 + 1 ] = a.y;
			positions[ i3 + 2 ] = a.z;

			positions[ i3 + 3 ] = b.x;
			positions[ i3 + 4 ] = b.y;
			positions[ i3 + 5 ] = b.z;

			positions[ i3 + 6 ] = c.x;
			positions[ i3 + 7 ] = c.y;
			positions[ i3 + 8 ] = c.z;

			if ( hasFaceVertexNormals === true ) {

				var na = face.vertexNormals[ 0 ];
				var nb = face.vertexNormals[ 1 ];
				var nc = face.vertexNormals[ 2 ];

				normals[ i3     ] = na.x;
				normals[ i3 + 1 ] = na.y;
				normals[ i3 + 2 ] = na.z;

				normals[ i3 + 3 ] = nb.x;
				normals[ i3 + 4 ] = nb.y;
				normals[ i3 + 5 ] = nb.z;

				normals[ i3 + 6 ] = nc.x;
				normals[ i3 + 7 ] = nc.y;
				normals[ i3 + 8 ] = nc.z;

			} else {

				var n = face.normal;

				normals[ i3     ] = n.x;
				normals[ i3 + 1 ] = n.y;
				normals[ i3 + 2 ] = n.z;

				normals[ i3 + 3 ] = n.x;
				normals[ i3 + 4 ] = n.y;
				normals[ i3 + 5 ] = n.z;

				normals[ i3 + 6 ] = n.x;
				normals[ i3 + 7 ] = n.y;
				normals[ i3 + 8 ] = n.z;

			}

			if ( vertexColors === THREE.FaceColors ) {

				var fc = face.color;

				colors[ i3     ] = fc.r;
				colors[ i3 + 1 ] = fc.g;
				colors[ i3 + 2 ] = fc.b;

				colors[ i3 + 3 ] = fc.r;
				colors[ i3 + 4 ] = fc.g;
				colors[ i3 + 5 ] = fc.b;

				colors[ i3 + 6 ] = fc.r;
				colors[ i3 + 7 ] = fc.g;
				colors[ i3 + 8 ] = fc.b;

			} else if ( vertexColors === THREE.VertexColors ) {

				var vca = face.vertexColors[ 0 ];
				var vcb = face.vertexColors[ 1 ];
				var vcc = face.vertexColors[ 2 ];

				colors[ i3     ] = vca.r;
				colors[ i3 + 1 ] = vca.g;
				colors[ i3 + 2 ] = vca.b;

				colors[ i3 + 3 ] = vcb.r;
				colors[ i3 + 4 ] = vcb.g;
				colors[ i3 + 5 ] = vcb.b;

				colors[ i3 + 6 ] = vcc.r;
				colors[ i3 + 7 ] = vcc.g;
				colors[ i3 + 8 ] = vcc.b;

			}

			if ( hasFaceVertexUv === true ) {

				var uva = faceVertexUvs[ 0 ][ i ][ 0 ];
				var uvb = faceVertexUvs[ 0 ][ i ][ 1 ];
				var uvc = faceVertexUvs[ 0 ][ i ][ 2 ];

				uvs[ i2     ] = uva.x;
				uvs[ i2 + 1 ] = uva.y;

				uvs[ i2 + 2 ] = uvb.x;
				uvs[ i2 + 3 ] = uvb.y;

				uvs[ i2 + 4 ] = uvc.x;
				uvs[ i2 + 5 ] = uvc.y;

			}

		}

		this.computeBoundingSphere()

		return this;

	},

	computeBoundingBox: function () {

		var vector = new THREE.Vector3();

		return function () {

			if ( this.boundingBox === null ) {

				this.boundingBox = new THREE.Box3();

			}

			var positions = this.attributes.position.array;

			if ( positions ) {

				var bb = this.boundingBox;
				bb.makeEmpty();

				for ( var i = 0, il = positions.length; i < il; i += 3 ) {

					vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
					bb.expandByPoint( vector );

				}

			}

			if ( positions === undefined || positions.length === 0 ) {

				this.boundingBox.min.set( 0, 0, 0 );
				this.boundingBox.max.set( 0, 0, 0 );

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox: Computed min/max have NaN values. The "position" attribute is likely to have NaN values.' );

			}

		}

	}(),

	computeBoundingSphere: function () {

		var box = new THREE.Box3();
		var vector = new THREE.Vector3();

		return function () {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new THREE.Sphere();

			}

			var positions = this.attributes.position.array;

			if ( positions ) {

				box.makeEmpty();

				var center = this.boundingSphere.center;

				for ( var i = 0, il = positions.length; i < il; i += 3 ) {

					vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
					box.expandByPoint( vector );

				}

				box.center( center );

				// hoping to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox:  sqrt(3) smaller in the best case

				var maxRadiusSq = 0;

				for ( var i = 0, il = positions.length; i < il; i += 3 ) {

					vector.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );
					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( vector ) );

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.' );

				}

			}

		}

	}(),

	computeFaceNormals: function () {

		// backwards compatibility

	},

	computeVertexNormals: function () {

		var attributes = this.attributes;

		if ( attributes.position ) {

			var positions = attributes.position.array;

			if ( attributes.normal === undefined ) {

				this.addAttribute( 'normal', new THREE.BufferAttribute( new Float32Array( positions.length ), 3 ) );

			} else {

				// reset existing normals to zero

				var normals = attributes.normal.array;

				for ( var i = 0, il = normals.length; i < il; i ++ ) {

					normals[ i ] = 0;

				}

			}

			var normals = attributes.normal.array;

			var vA, vB, vC,

			pA = new THREE.Vector3(),
			pB = new THREE.Vector3(),
			pC = new THREE.Vector3(),

			cb = new THREE.Vector3(),
			ab = new THREE.Vector3();

			// indexed elements

			if ( attributes.index ) {

				var indices = attributes.index.array;

				var offsets = ( this.offsets.length > 0 ? this.offsets : [ { start: 0, count: indices.length, index: 0 } ] );

				for ( var j = 0, jl = offsets.length; j < jl; ++ j ) {

					var start = offsets[ j ].start;
					var count = offsets[ j ].count;
					var index = offsets[ j ].index;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						vA = ( index + indices[ i     ] ) * 3;
						vB = ( index + indices[ i + 1 ] ) * 3;
						vC = ( index + indices[ i + 2 ] ) * 3;

						pA.fromArray( positions, vA );
						pB.fromArray( positions, vB );
						pC.fromArray( positions, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normals[ vA     ] += cb.x;
						normals[ vA + 1 ] += cb.y;
						normals[ vA + 2 ] += cb.z;

						normals[ vB     ] += cb.x;
						normals[ vB + 1 ] += cb.y;
						normals[ vB + 2 ] += cb.z;

						normals[ vC     ] += cb.x;
						normals[ vC + 1 ] += cb.y;
						normals[ vC + 2 ] += cb.z;

					}

				}

			} else {

				// non-indexed elements (unconnected triangle soup)

				for ( var i = 0, il = positions.length; i < il; i += 9 ) {

					pA.fromArray( positions, i );
					pB.fromArray( positions, i + 3 );
					pC.fromArray( positions, i + 6 );

					cb.subVectors( pC, pB );
					ab.subVectors( pA, pB );
					cb.cross( ab );

					normals[ i     ] = cb.x;
					normals[ i + 1 ] = cb.y;
					normals[ i + 2 ] = cb.z;

					normals[ i + 3 ] = cb.x;
					normals[ i + 4 ] = cb.y;
					normals[ i + 5 ] = cb.z;

					normals[ i + 6 ] = cb.x;
					normals[ i + 7 ] = cb.y;
					normals[ i + 8 ] = cb.z;

				}

			}

			this.normalizeNormals();

			attributes.normal.needsUpdate = true;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// (per vertex tangents)

		if ( this.attributes.index === undefined ||
			 this.attributes.position === undefined ||
			 this.attributes.normal === undefined ||
			 this.attributes.uv === undefined ) {

			console.warn( 'Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );
			return;

		}

		var indices = this.attributes.index.array;
		var positions = this.attributes.position.array;
		var normals = this.attributes.normal.array;
		var uvs = this.attributes.uv.array;

		var nVertices = positions.length / 3;

		if ( this.attributes.tangent === undefined ) {

			this.addAttribute( 'tangent', new THREE.BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );

		}

		var tangents = this.attributes.tangent.array;

		var tan1 = [], tan2 = [];

		for ( var k = 0; k < nVertices; k ++ ) {

			tan1[ k ] = new THREE.Vector3();
			tan2[ k ] = new THREE.Vector3();

		}

		var vA = new THREE.Vector3(),
			vB = new THREE.Vector3(),
			vC = new THREE.Vector3(),

			uvA = new THREE.Vector2(),
			uvB = new THREE.Vector2(),
			uvC = new THREE.Vector2(),

			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r;

		var sdir = new THREE.Vector3(), tdir = new THREE.Vector3();

		function handleTriangle( a, b, c ) {

			vA.fromArray( positions, a * 3 );
			vB.fromArray( positions, b * 3 );
			vC.fromArray( positions, c * 3 );

			uvA.fromArray( uvs, a * 2 );
			uvB.fromArray( uvs, b * 2 );
			uvC.fromArray( uvs, c * 2 );

			x1 = vB.x - vA.x;
			x2 = vC.x - vA.x;

			y1 = vB.y - vA.y;
			y2 = vC.y - vA.y;

			z1 = vB.z - vA.z;
			z2 = vC.z - vA.z;

			s1 = uvB.x - uvA.x;
			s2 = uvC.x - uvA.x;

			t1 = uvB.y - uvA.y;
			t2 = uvC.y - uvA.y;

			r = 1.0 / ( s1 * t2 - s2 * t1 );

			sdir.set(
				( t2 * x1 - t1 * x2 ) * r,
				( t2 * y1 - t1 * y2 ) * r,
				( t2 * z1 - t1 * z2 ) * r
			);

			tdir.set(
				( s1 * x2 - s2 * x1 ) * r,
				( s1 * y2 - s2 * y1 ) * r,
				( s1 * z2 - s2 * z1 ) * r
			);

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		var i, il;
		var j, jl;
		var iA, iB, iC;

		if ( this.drawcalls.length === 0 ) {

			this.addDrawCall( 0, indices.length, 0 );

		}

		var drawcalls = this.drawcalls;

		for ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {

			var start = drawcalls[ j ].start;
			var count = drawcalls[ j ].count;
			var index = drawcalls[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleTriangle( iA, iB, iC );

			}

		}

		var tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3();
		var n = new THREE.Vector3(), n2 = new THREE.Vector3();
		var w, t, test;

		function handleVertex( v ) {

			n.fromArray( normals, v * 3 );
			n2.copy( n );

			t = tan1[ v ];

			// Gram-Schmidt orthogonalize

			tmp.copy( t );
			tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

			// Calculate handedness

			tmp2.crossVectors( n2, t );
			test = tmp2.dot( tan2[ v ] );
			w = ( test < 0.0 ) ? - 1.0 : 1.0;

			tangents[ v * 4     ] = tmp.x;
			tangents[ v * 4 + 1 ] = tmp.y;
			tangents[ v * 4 + 2 ] = tmp.z;
			tangents[ v * 4 + 3 ] = w;

		}

		for ( j = 0, jl = drawcalls.length; j < jl; ++ j ) {

			var start = drawcalls[ j ].start;
			var count = drawcalls[ j ].count;
			var index = drawcalls[ j ].index;

			for ( i = start, il = start + count; i < il; i += 3 ) {

				iA = index + indices[ i ];
				iB = index + indices[ i + 1 ];
				iC = index + indices[ i + 2 ];

				handleVertex( iA );
				handleVertex( iB );
				handleVertex( iC );

			}

		}

	},

	/*
		computeOffsets
		Compute the draw offset for large models by chunking the index buffer into chunks of 65k addressable vertices.
		This method will effectively rewrite the index buffer and remap all attributes to match the new indices.
		WARNING: This method will also expand the vertex count to prevent sprawled triangles across draw offsets.
		indexBufferSize - Defaults to 65535, but allows for larger or smaller chunks.
	*/
	computeOffsets: function ( indexBufferSize ) {

		var size = indexBufferSize;
		if ( indexBufferSize === undefined )
			size = 65535; //WebGL limits type of index buffer values to 16-bit.

		var s = Date.now();

		var indices = this.attributes.index.array;
		var vertices = this.attributes.position.array;

		var verticesCount = ( vertices.length / 3 );
		var facesCount = ( indices.length / 3 );

		/*
		console.log("Computing buffers in offsets of "+size+" -> indices:"+indices.length+" vertices:"+vertices.length);
		console.log("Faces to process: "+(indices.length/3));
		console.log("Reordering "+verticesCount+" vertices.");
		*/

		var sortedIndices = new Uint16Array( indices.length ); //16-bit buffers
		var indexPtr = 0;
		var vertexPtr = 0;

		var offsets = [ { start:0, count:0, index:0 } ];
		var offset = offsets[ 0 ];

		var duplicatedVertices = 0;
		var newVerticeMaps = 0;
		var faceVertices = new Int32Array( 6 );
		var vertexMap = new Int32Array( vertices.length );
		var revVertexMap = new Int32Array( vertices.length );
		for ( var j = 0; j < vertices.length; j ++ ) { vertexMap[ j ] = - 1; revVertexMap[ j ] = - 1; }

		/*
			Traverse every face and reorder vertices in the proper offsets of 65k.
			We can have more than 65k entries in the index buffer per offset, but only reference 65k values.
		*/
		for ( var findex = 0; findex < facesCount; findex ++ ) {
			newVerticeMaps = 0;

			for ( var vo = 0; vo < 3; vo ++ ) {
				var vid = indices[ findex * 3 + vo ];
				if ( vertexMap[ vid ] == - 1 ) {
					//Unmapped vertice
					faceVertices[ vo * 2 ] = vid;
					faceVertices[ vo * 2 + 1 ] = - 1;
					newVerticeMaps ++;
				} else if ( vertexMap[ vid ] < offset.index ) {
					//Reused vertices from previous block (duplicate)
					faceVertices[ vo * 2 ] = vid;
					faceVertices[ vo * 2 + 1 ] = - 1;
					duplicatedVertices ++;
				} else {
					//Reused vertice in the current block
					faceVertices[ vo * 2 ] = vid;
					faceVertices[ vo * 2 + 1 ] = vertexMap[ vid ];
				}
			}

			var faceMax = vertexPtr + newVerticeMaps;
			if ( faceMax > ( offset.index + size ) ) {
				var new_offset = { start:indexPtr, count:0, index:vertexPtr };
				offsets.push( new_offset );
				offset = new_offset;

				//Re-evaluate reused vertices in light of new offset.
				for ( var v = 0; v < 6; v += 2 ) {
					var new_vid = faceVertices[ v + 1 ];
					if ( new_vid > - 1 && new_vid < offset.index )
						faceVertices[ v + 1 ] = - 1;
				}
			}

			//Reindex the face.
			for ( var v = 0; v < 6; v += 2 ) {
				var vid = faceVertices[ v ];
				var new_vid = faceVertices[ v + 1 ];

				if ( new_vid === - 1 )
					new_vid = vertexPtr ++;

				vertexMap[ vid ] = new_vid;
				revVertexMap[ new_vid ] = vid;
				sortedIndices[ indexPtr ++ ] = new_vid - offset.index; //XXX overflows at 16bit
				offset.count ++;
			}
		}

		/* Move all attribute values to map to the new computed indices , also expand the vertice stack to match our new vertexPtr. */
		this.reorderBuffers( sortedIndices, revVertexMap, vertexPtr );
		this.offsets = offsets;

		/*
		var orderTime = Date.now();
		console.log("Reorder time: "+(orderTime-s)+"ms");
		console.log("Duplicated "+duplicatedVertices+" vertices.");
		console.log("Compute Buffers time: "+(Date.now()-s)+"ms");
		console.log("Draw offsets: "+offsets.length);
		*/

		return offsets;
	},

	merge: function () {

		console.log( 'BufferGeometry.merge(): TODO' );

	},

	normalizeNormals: function () {

		var normals = this.attributes.normal.array;

		var x, y, z, n;

		for ( var i = 0, il = normals.length; i < il; i += 3 ) {

			x = normals[ i ];
			y = normals[ i + 1 ];
			z = normals[ i + 2 ];

			n = 1.0 / Math.sqrt( x * x + y * y + z * z );

			normals[ i     ] *= n;
			normals[ i + 1 ] *= n;
			normals[ i + 2 ] *= n;

		}

	},

	/*
		reoderBuffers:
		Reorder attributes based on a new indexBuffer and indexMap.
		indexBuffer - Uint16Array of the new ordered indices.
		indexMap - Int32Array where the position is the new vertex ID and the value the old vertex ID for each vertex.
		vertexCount - Amount of total vertices considered in this reordering (in case you want to grow the vertice stack).
	*/
	reorderBuffers: function ( indexBuffer, indexMap, vertexCount ) {

		/* Create a copy of all attributes for reordering. */
		var sortedAttributes = {};
		for ( var attr in this.attributes ) {
			if ( attr == 'index' )
				continue;
			var sourceArray = this.attributes[ attr ].array;
			sortedAttributes[ attr ] = new sourceArray.constructor( this.attributes[ attr ].itemSize * vertexCount );
		}

		/* Move attribute positions based on the new index map */
		for ( var new_vid = 0; new_vid < vertexCount; new_vid ++ ) {
			var vid = indexMap[ new_vid ];
			for ( var attr in this.attributes ) {
				if ( attr == 'index' )
					continue;
				var attrArray = this.attributes[ attr ].array;
				var attrSize = this.attributes[ attr ].itemSize;
				var sortedAttr = sortedAttributes[ attr ];
				for ( var k = 0; k < attrSize; k ++ )
					sortedAttr[ new_vid * attrSize + k ] = attrArray[ vid * attrSize + k ];
			}
		}

		/* Carry the new sorted buffers locally */
		this.attributes[ 'index' ].array = indexBuffer;
		for ( var attr in this.attributes ) {
			if ( attr == 'index' )
				continue;
			this.attributes[ attr ].array = sortedAttributes[ attr ];
			this.attributes[ attr ].numItems = this.attributes[ attr ].itemSize * vertexCount;
		}
	},

	toJSON: function () {

		var output = {
			metadata: {
				version: 4.0,
				type: 'BufferGeometry',
				generator: 'BufferGeometryExporter'
			},
			uuid: this.uuid,
			type: this.type,
			data: {
				attributes: {}
			}
		};

		var attributes = this.attributes;
		var offsets = this.offsets;
		var boundingSphere = this.boundingSphere;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];

			var array = [], typeArray = attribute.array;

			for ( var i = 0, l = typeArray.length; i < l; i ++ ) {

				array[ i ] = typeArray[ i ];

			}

			output.data.attributes[ key ] = {
				itemSize: attribute.itemSize,
				type: attribute.array.constructor.name,
				array: array
			}

		}

		if ( offsets.length > 0 ) {

			output.data.offsets = JSON.parse( JSON.stringify( offsets ) );

		}

		if ( boundingSphere !== null ) {

			output.data.boundingSphere = {
				center: boundingSphere.center.toArray(),
				radius: boundingSphere.radius
			}

		}

		return output;

	},

	clone: function () {

		var geometry = new THREE.BufferGeometry();

		for ( var attr in this.attributes ) {

			var sourceAttr = this.attributes[ attr ];
			geometry.addAttribute( attr, sourceAttr.clone() );

		}

		for ( var i = 0, il = this.offsets.length; i < il; i ++ ) {

			var offset = this.offsets[ i ];

			geometry.offsets.push( {

				start: offset.start,
				index: offset.index,
				count: offset.count

			} );

		}

		return geometry;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.BufferGeometry.prototype );

// File:src/core/Geometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author kile / http://kile.stravaganza.org/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author bhouston / http://exocortex.com
 */

THREE.Geometry = function () {

	Object.defineProperty( this, 'id', { value: THREE.GeometryIdCount ++ } );

	this.uuid = THREE.Math.generateUUID();

	this.name = '';
	this.type = 'Geometry';

	this.vertices = [];
	this.colors = [];  // one-to-one vertex colors, used in Points and Line

	this.faces = [];

	this.faceVertexUvs = [ [] ];

	this.morphTargets = [];
	this.morphColors = [];
	this.morphNormals = [];

	this.skinWeights = [];
	this.skinIndices = [];

	this.lineDistances = [];

	this.boundingBox = null;
	this.boundingSphere = null;

	this.hasTangents = false;

	this.dynamic = true; // the intermediate typed arrays will be deleted when set to false

	// update flags

	this.verticesNeedUpdate = false;
	this.elementsNeedUpdate = false;
	this.uvsNeedUpdate = false;
	this.normalsNeedUpdate = false;
	this.tangentsNeedUpdate = false;
	this.colorsNeedUpdate = false;
	this.lineDistancesNeedUpdate = false;

	this.groupsNeedUpdate = false;

};

THREE.Geometry.prototype = {

	constructor: THREE.Geometry,

	applyMatrix: function ( matrix ) {

		var normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

		for ( var i = 0, il = this.vertices.length; i < il; i ++ ) {

			var vertex = this.vertices[ i ];
			vertex.applyMatrix4( matrix );

		}

		for ( var i = 0, il = this.faces.length; i < il; i ++ ) {

			var face = this.faces[ i ];
			face.normal.applyMatrix3( normalMatrix ).normalize();

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				face.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();

			}

		}

		if ( this.boundingBox instanceof THREE.Box3 ) {

			this.computeBoundingBox();

		}

		if ( this.boundingSphere instanceof THREE.Sphere ) {

			this.computeBoundingSphere();

		}

	},

	fromBufferGeometry: function ( geometry ) {

		var scope = this;

		var attributes = geometry.attributes;

		var vertices = attributes.position.array;
		var indices = attributes.index !== undefined ? attributes.index.array : undefined;
		var normals = attributes.normal !== undefined ? attributes.normal.array : undefined;
		var colors = attributes.color !== undefined ? attributes.color.array : undefined;
		var uvs = attributes.uv !== undefined ? attributes.uv.array : undefined;

		var tempNormals = [];
		var tempUVs = [];

		for ( var i = 0, j = 0; i < vertices.length; i += 3, j += 2 ) {

			scope.vertices.push( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

			if ( normals !== undefined ) {

				tempNormals.push( new THREE.Vector3( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] ) );

			}

			if ( colors !== undefined ) {

				scope.colors.push( new THREE.Color( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] ) );

			}

			if ( uvs !== undefined ) {

				tempUVs.push( new THREE.Vector2( uvs[ j ], uvs[ j + 1 ] ) );

			}

		}

		var addFace = function ( a, b, c ) {

			var vertexNormals = normals !== undefined ? [ tempNormals[ a ].clone(), tempNormals[ b ].clone(), tempNormals[ c ].clone() ] : [];
			var vertexColors = colors !== undefined ? [ scope.colors[ a ].clone(), scope.colors[ b ].clone(), scope.colors[ c ].clone() ] : [];

			scope.faces.push( new THREE.Face3( a, b, c, vertexNormals, vertexColors ) );
			scope.faceVertexUvs[ 0 ].push( [ tempUVs[ a ], tempUVs[ b ], tempUVs[ c ] ] );

		};

		if ( indices !== undefined ) {

			for ( var i = 0; i < indices.length; i += 3 ) {

				addFace( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );

			}

		} else {

			for ( var i = 0; i < vertices.length / 3; i += 3 ) {

				addFace( i, i + 1, i + 2 );

			}

		}
		
		this.computeFaceNormals();

		if ( geometry.boundingBox !== null ) {

			this.boundingBox = geometry.boundingBox.clone();

		}

		if ( geometry.boundingSphere !== null ) {

			this.boundingSphere = geometry.boundingSphere.clone();

		}

		return this;

	},

	center: function () {

		this.computeBoundingBox();

		var offset = new THREE.Vector3();

		offset.addVectors( this.boundingBox.min, this.boundingBox.max );
		offset.multiplyScalar( - 0.5 );

		this.applyMatrix( new THREE.Matrix4().makeTranslation( offset.x, offset.y, offset.z ) );
		this.computeBoundingBox();

		return offset;

	},

	computeFaceNormals: function () {

		var cb = new THREE.Vector3(), ab = new THREE.Vector3();

		for ( var f = 0, fl = this.faces.length; f < fl; f ++ ) {

			var face = this.faces[ f ];

			var vA = this.vertices[ face.a ];
			var vB = this.vertices[ face.b ];
			var vC = this.vertices[ face.c ];

			cb.subVectors( vC, vB );
			ab.subVectors( vA, vB );
			cb.cross( ab );

			cb.normalize();

			face.normal.copy( cb );

		}

	},

	computeVertexNormals: function ( areaWeighted ) {

		var v, vl, f, fl, face, vertices;

		vertices = new Array( this.vertices.length );

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ] = new THREE.Vector3();

		}

		if ( areaWeighted ) {

			// vertex normals weighted by triangle areas
			// http://www.iquilezles.org/www/articles/normals/normals.htm

			var vA, vB, vC, vD;
			var cb = new THREE.Vector3(), ab = new THREE.Vector3(),
				db = new THREE.Vector3(), dc = new THREE.Vector3(), bc = new THREE.Vector3();

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vA = this.vertices[ face.a ];
				vB = this.vertices[ face.b ];
				vC = this.vertices[ face.c ];

				cb.subVectors( vC, vB );
				ab.subVectors( vA, vB );
				cb.cross( ab );

				vertices[ face.a ].add( cb );
				vertices[ face.b ].add( cb );
				vertices[ face.c ].add( cb );

			}

		} else {

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				vertices[ face.a ].add( face.normal );
				vertices[ face.b ].add( face.normal );
				vertices[ face.c ].add( face.normal );

			}

		}

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			vertices[ v ].normalize();

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.vertexNormals[ 0 ] = vertices[ face.a ].clone();
			face.vertexNormals[ 1 ] = vertices[ face.b ].clone();
			face.vertexNormals[ 2 ] = vertices[ face.c ].clone();

		}

	},

	computeMorphNormals: function () {

		var i, il, f, fl, face;

		// save original normals
		// - create temp variables on first access
		//   otherwise just copy (for faster repeated calls)

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			if ( ! face.__originalFaceNormal ) {

				face.__originalFaceNormal = face.normal.clone();

			} else {

				face.__originalFaceNormal.copy( face.normal );

			}

			if ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];

			for ( i = 0, il = face.vertexNormals.length; i < il; i ++ ) {

				if ( ! face.__originalVertexNormals[ i ] ) {

					face.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();

				} else {

					face.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );

				}

			}

		}

		// use temp geometry to compute face and vertex normals for each morph

		var tmpGeo = new THREE.Geometry();
		tmpGeo.faces = this.faces;

		for ( i = 0, il = this.morphTargets.length; i < il; i ++ ) {

			// create on first access

			if ( ! this.morphNormals[ i ] ) {

				this.morphNormals[ i ] = {};
				this.morphNormals[ i ].faceNormals = [];
				this.morphNormals[ i ].vertexNormals = [];

				var dstNormalsFace = this.morphNormals[ i ].faceNormals;
				var dstNormalsVertex = this.morphNormals[ i ].vertexNormals;

				var faceNormal, vertexNormals;

				for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

					faceNormal = new THREE.Vector3();
					vertexNormals = { a: new THREE.Vector3(), b: new THREE.Vector3(), c: new THREE.Vector3() };

					dstNormalsFace.push( faceNormal );
					dstNormalsVertex.push( vertexNormals );

				}

			}

			var morphNormals = this.morphNormals[ i ];

			// set vertices to morph target

			tmpGeo.vertices = this.morphTargets[ i ].vertices;

			// compute morph normals

			tmpGeo.computeFaceNormals();
			tmpGeo.computeVertexNormals();

			// store morph normals

			var faceNormal, vertexNormals;

			for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

				face = this.faces[ f ];

				faceNormal = morphNormals.faceNormals[ f ];
				vertexNormals = morphNormals.vertexNormals[ f ];

				faceNormal.copy( face.normal );

				vertexNormals.a.copy( face.vertexNormals[ 0 ] );
				vertexNormals.b.copy( face.vertexNormals[ 1 ] );
				vertexNormals.c.copy( face.vertexNormals[ 2 ] );

			}

		}

		// restore original normals

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			face.normal = face.__originalFaceNormal;
			face.vertexNormals = face.__originalVertexNormals;

		}

	},

	computeTangents: function () {

		// based on http://www.terathon.com/code/tangent.html
		// tangents go to vertices

		var f, fl, v, vl, i, il, vertexIndex,
			face, uv, vA, vB, vC, uvA, uvB, uvC,
			x1, x2, y1, y2, z1, z2,
			s1, s2, t1, t2, r, t, test,
			tan1 = [], tan2 = [],
			sdir = new THREE.Vector3(), tdir = new THREE.Vector3(),
			tmp = new THREE.Vector3(), tmp2 = new THREE.Vector3(),
			n = new THREE.Vector3(), w;

		for ( v = 0, vl = this.vertices.length; v < vl; v ++ ) {

			tan1[ v ] = new THREE.Vector3();
			tan2[ v ] = new THREE.Vector3();

		}

		function handleTriangle( context, a, b, c, ua, ub, uc ) {

			vA = context.vertices[ a ];
			vB = context.vertices[ b ];
			vC = context.vertices[ c ];

			uvA = uv[ ua ];
			uvB = uv[ ub ];
			uvC = uv[ uc ];

			x1 = vB.x - vA.x;
			x2 = vC.x - vA.x;
			y1 = vB.y - vA.y;
			y2 = vC.y - vA.y;
			z1 = vB.z - vA.z;
			z2 = vC.z - vA.z;

			s1 = uvB.x - uvA.x;
			s2 = uvC.x - uvA.x;
			t1 = uvB.y - uvA.y;
			t2 = uvC.y - uvA.y;

			r = 1.0 / ( s1 * t2 - s2 * t1 );
			sdir.set( ( t2 * x1 - t1 * x2 ) * r,
					  ( t2 * y1 - t1 * y2 ) * r,
					  ( t2 * z1 - t1 * z2 ) * r );
			tdir.set( ( s1 * x2 - s2 * x1 ) * r,
					  ( s1 * y2 - s2 * y1 ) * r,
					  ( s1 * z2 - s2 * z1 ) * r );

			tan1[ a ].add( sdir );
			tan1[ b ].add( sdir );
			tan1[ c ].add( sdir );

			tan2[ a ].add( tdir );
			tan2[ b ].add( tdir );
			tan2[ c ].add( tdir );

		}

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];
			uv = this.faceVertexUvs[ 0 ][ f ]; // use UV layer 0 for tangents

			handleTriangle( this, face.a, face.b, face.c, 0, 1, 2 );

		}

		var faceIndex = [ 'a', 'b', 'c', 'd' ];

		for ( f = 0, fl = this.faces.length; f < fl; f ++ ) {

			face = this.faces[ f ];

			for ( i = 0; i < Math.min( face.vertexNormals.length, 3 ); i ++ ) {

				n.copy( face.vertexNormals[ i ] );

				vertexIndex = face[ faceIndex[ i ] ];

				t = tan1[ vertexIndex ];

				// Gram-Schmidt orthogonalize

				tmp.copy( t );
				tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

				// Calculate handedness

				tmp2.crossVectors( face.vertexNormals[ i ], t );
				test = tmp2.dot( tan2[ vertexIndex ] );
				w = ( test < 0.0 ) ? - 1.0 : 1.0;

				face.vertexTangents[ i ] = new THREE.Vector4( tmp.x, tmp.y, tmp.z, w );

			}

		}

		this.hasTangents = true;

	},

	computeLineDistances: function () {

		var d = 0;
		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			if ( i > 0 ) {

				d += vertices[ i ].distanceTo( vertices[ i - 1 ] );

			}

			this.lineDistances[ i ] = d;

		}

	},

	computeBoundingBox: function () {

		if ( this.boundingBox === null ) {

			this.boundingBox = new THREE.Box3();

		}

		this.boundingBox.setFromPoints( this.vertices );

	},

	computeBoundingSphere: function () {

		if ( this.boundingSphere === null ) {

			this.boundingSphere = new THREE.Sphere();

		}

		this.boundingSphere.setFromPoints( this.vertices );

	},

	merge: function ( geometry, matrix, materialIndexOffset ) {

		if ( geometry instanceof THREE.Geometry === false ) {

			console.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );
			return;

		}

		var normalMatrix,
		vertexOffset = this.vertices.length,
		vertices1 = this.vertices,
		vertices2 = geometry.vertices,
		faces1 = this.faces,
		faces2 = geometry.faces,
		uvs1 = this.faceVertexUvs[ 0 ],
		uvs2 = geometry.faceVertexUvs[ 0 ];

		if ( materialIndexOffset === undefined ) materialIndexOffset = 0;

		if ( matrix !== undefined ) {

			normalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );

		}

		// vertices

		for ( var i = 0, il = vertices2.length; i < il; i ++ ) {

			var vertex = vertices2[ i ];

			var vertexCopy = vertex.clone();

			if ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );

			vertices1.push( vertexCopy );

		}

		// faces

		for ( i = 0, il = faces2.length; i < il; i ++ ) {

			var face = faces2[ i ], faceCopy, normal, color,
			faceVertexNormals = face.vertexNormals,
			faceVertexColors = face.vertexColors;

			faceCopy = new THREE.Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );
			faceCopy.normal.copy( face.normal );

			if ( normalMatrix !== undefined ) {

				faceCopy.normal.applyMatrix3( normalMatrix ).normalize();

			}

			for ( var j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {

				normal = faceVertexNormals[ j ].clone();

				if ( normalMatrix !== undefined ) {

					normal.applyMatrix3( normalMatrix ).normalize();

				}

				faceCopy.vertexNormals.push( normal );

			}

			faceCopy.color.copy( face.color );

			for ( var j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {

				color = faceVertexColors[ j ];
				faceCopy.vertexColors.push( color.clone() );

			}

			faceCopy.materialIndex = face.materialIndex + materialIndexOffset;

			faces1.push( faceCopy );

		}

		// uvs

		for ( i = 0, il = uvs2.length; i < il; i ++ ) {

			var uv = uvs2[ i ], uvCopy = [];

			if ( uv === undefined ) {

				continue;

			}

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			uvs1.push( uvCopy );

		}

	},

	/*
	 * Checks for duplicate vertices with hashmap.
	 * Duplicated vertices are removed
	 * and faces' vertices are updated.
	 */

	mergeVertices: function () {

		var verticesMap = {}; // Hashmap for looking up vertice by position coordinates (and making sure they are unique)
		var unique = [], changes = [];

		var v, key;
		var precisionPoints = 4; // number of decimal points, eg. 4 for epsilon of 0.0001
		var precision = Math.pow( 10, precisionPoints );
		var i,il, face;
		var indices, k, j, jl, u;

		for ( i = 0, il = this.vertices.length; i < il; i ++ ) {

			v = this.vertices[ i ];
			key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );

			if ( verticesMap[ key ] === undefined ) {

				verticesMap[ key ] = i;
				unique.push( this.vertices[ i ] );
				changes[ i ] = unique.length - 1;

			} else {

				//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);
				changes[ i ] = changes[ verticesMap[ key ] ];

			}

		};


		// if faces are completely degenerate after merging vertices, we
		// have to remove them from the geometry.
		var faceIndicesToRemove = [];

		for ( i = 0, il = this.faces.length; i < il; i ++ ) {

			face = this.faces[ i ];

			face.a = changes[ face.a ];
			face.b = changes[ face.b ];
			face.c = changes[ face.c ];

			indices = [ face.a, face.b, face.c ];

			var dupIndex = - 1;

			// if any duplicate vertices are found in a Face3
			// we have to remove the face as nothing can be saved
			for ( var n = 0; n < 3; n ++ ) {
				if ( indices[ n ] == indices[ ( n + 1 ) % 3 ] ) {

					dupIndex = n;
					faceIndicesToRemove.push( i );
					break;

				}
			}

		}

		for ( i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {
			var idx = faceIndicesToRemove[ i ];

			this.faces.splice( idx, 1 );

			for ( j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {

				this.faceVertexUvs[ j ].splice( idx, 1 );

			}

		}

		// Use unique set of vertices

		var diff = this.vertices.length - unique.length;
		this.vertices = unique;
		return diff;

	},

	toJSON: function () {

		var output = {
			metadata: {
				version: 4.0,
				type: 'BufferGeometry',
				generator: 'BufferGeometryExporter'
			},
			uuid: this.uuid,
			type: this.type
		};

		if ( this.name !== "" ) output.name = this.name;

		if ( this.parameters !== undefined ) {

			var parameters = this.parameters;

			for ( var key in parameters ) {

				if ( parameters[ key ] !== undefined ) output[ key ] = parameters[ key ];

			}

			return output;

		}

		var vertices = [];

		for ( var i = 0; i < this.vertices.length; i ++ ) {

			var vertex = this.vertices[ i ];
			vertices.push( vertex.x, vertex.y, vertex.z );

		}

		var faces = [];
		var normals = [];
		var normalsHash = {};
		var colors = [];
		var colorsHash = {};
		var uvs = [];
		var uvsHash = {};

		for ( var i = 0; i < this.faces.length; i ++ ) {

			var face = this.faces[ i ];

			var hasMaterial = false; // face.materialIndex !== undefined;
			var hasFaceUv = false; // deprecated
			var hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;
			var hasFaceNormal = face.normal.length() > 0;
			var hasFaceVertexNormal = face.vertexNormals.length > 0;
			var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;
			var hasFaceVertexColor = face.vertexColors.length > 0;

			var faceType = 0;

			faceType = setBit( faceType, 0, 0 );
			faceType = setBit( faceType, 1, hasMaterial );
			faceType = setBit( faceType, 2, hasFaceUv );
			faceType = setBit( faceType, 3, hasFaceVertexUv );
			faceType = setBit( faceType, 4, hasFaceNormal );
			faceType = setBit( faceType, 5, hasFaceVertexNormal );
			faceType = setBit( faceType, 6, hasFaceColor );
			faceType = setBit( faceType, 7, hasFaceVertexColor );

			faces.push( faceType );
			faces.push( face.a, face.b, face.c );


			/*
			if ( hasMaterial ) {

				faces.push( face.materialIndex );

			}
			*/

			if ( hasFaceVertexUv ) {

				var faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];

				faces.push(
					getUvIndex( faceVertexUvs[ 0 ] ),
					getUvIndex( faceVertexUvs[ 1 ] ),
					getUvIndex( faceVertexUvs[ 2 ] )
				);

			}

			if ( hasFaceNormal ) {

				faces.push( getNormalIndex( face.normal ) );

			}

			if ( hasFaceVertexNormal ) {

				var vertexNormals = face.vertexNormals;

				faces.push(
					getNormalIndex( vertexNormals[ 0 ] ),
					getNormalIndex( vertexNormals[ 1 ] ),
					getNormalIndex( vertexNormals[ 2 ] )
				);

			}

			if ( hasFaceColor ) {

				faces.push( getColorIndex( face.color ) );

			}

			if ( hasFaceVertexColor ) {

				var vertexColors = face.vertexColors;

				faces.push(
					getColorIndex( vertexColors[ 0 ] ),
					getColorIndex( vertexColors[ 1 ] ),
					getColorIndex( vertexColors[ 2 ] )
				);

			}

		}

		function setBit( value, position, enabled ) {

			return enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position) );

		}

		function getNormalIndex( normal ) {

			var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();

			if ( normalsHash[ hash ] !== undefined ) {

				return normalsHash[ hash ];

			}

			normalsHash[ hash ] = normals.length / 3;
			normals.push( normal.x, normal.y, normal.z );

			return normalsHash[ hash ];

		}

		function getColorIndex( color ) {

			var hash = color.r.toString() + color.g.toString() + color.b.toString();

			if ( colorsHash[ hash ] !== undefined ) {

				return colorsHash[ hash ];

			}

			colorsHash[ hash ] = colors.length;
			colors.push( color.getHex() );

			return colorsHash[ hash ];

		}

		function getUvIndex( uv ) {

			var hash = uv.x.toString() + uv.y.toString();

			if ( uvsHash[ hash ] !== undefined ) {

				return uvsHash[ hash ];

			}

			uvsHash[ hash ] = uvs.length / 2;
			uvs.push( uv.x, uv.y );

			return uvsHash[ hash ];

		}

		output.data = {};

		output.data.vertices = vertices;
		output.data.normals = normals;
		if ( colors.length > 0 ) output.data.colors = colors;
		if ( uvs.length > 0 ) output.data.uvs = [ uvs ]; // temporal backward compatibility
		output.data.faces = faces;

		//

		return output;

	},

	clone: function () {

		var geometry = new THREE.Geometry();

		var vertices = this.vertices;

		for ( var i = 0, il = vertices.length; i < il; i ++ ) {

			geometry.vertices.push( vertices[ i ].clone() );

		}

		var faces = this.faces;

		for ( var i = 0, il = faces.length; i < il; i ++ ) {

			geometry.faces.push( faces[ i ].clone() );

		}

		var uvs = this.faceVertexUvs[ 0 ];

		for ( var i = 0, il = uvs.length; i < il; i ++ ) {

			var uv = uvs[ i ], uvCopy = [];

			for ( var j = 0, jl = uv.length; j < jl; j ++ ) {

				uvCopy.push( new THREE.Vector2( uv[ j ].x, uv[ j ].y ) );

			}

			geometry.faceVertexUvs[ 0 ].push( uvCopy );

		}

		return geometry;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Geometry.prototype );

THREE.GeometryIdCount = 0;

// File:src/cameras/Camera.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.Camera = function () {

	THREE.Object3D.call( this );

	this.type = 'Camera';

	this.matrixWorldInverse = new THREE.Matrix4();
	this.projectionMatrix = new THREE.Matrix4();

};

THREE.Camera.prototype = Object.create( THREE.Object3D.prototype );

THREE.Camera.prototype.getWorldDirection = function () {

	var quaternion = new THREE.Quaternion();

	return function ( optionalTarget ) {

		var result = optionalTarget || new THREE.Vector3();

		this.getWorldQuaternion( quaternion );

		return result.set( 0, 0, - 1 ).applyQuaternion( quaternion );

	}

}();

THREE.Camera.prototype.lookAt = function () {

	// This routine does not support cameras with rotated and/or translated parent(s)

	var m1 = new THREE.Matrix4();

	return function ( vector ) {

		m1.lookAt( this.position, vector, this.up );

		this.quaternion.setFromRotationMatrix( m1 );

	};

}();

THREE.Camera.prototype.clone = function ( camera ) {

	if ( camera === undefined ) camera = new THREE.Camera();

	THREE.Object3D.prototype.clone.call( this, camera );

	camera.matrixWorldInverse.copy( this.matrixWorldInverse );
	camera.projectionMatrix.copy( this.projectionMatrix );

	return camera;
};

// File:src/cameras/CubeCamera.js

/**
 * Camera for rendering cube maps
 *	- renders scene into axis-aligned cube
 *
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CubeCamera = function ( near, far, cubeResolution ) {

	THREE.Object3D.call( this );

	this.type = 'CubeCamera';

	var fov = 90, aspect = 1;

	var cameraPX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPX.up.set( 0, - 1, 0 );
	cameraPX.lookAt( new THREE.Vector3( 1, 0, 0 ) );
	this.add( cameraPX );

	var cameraNX = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNX.up.set( 0, - 1, 0 );
	cameraNX.lookAt( new THREE.Vector3( - 1, 0, 0 ) );
	this.add( cameraNX );

	var cameraPY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPY.up.set( 0, 0, 1 );
	cameraPY.lookAt( new THREE.Vector3( 0, 1, 0 ) );
	this.add( cameraPY );

	var cameraNY = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNY.up.set( 0, 0, - 1 );
	cameraNY.lookAt( new THREE.Vector3( 0, - 1, 0 ) );
	this.add( cameraNY );

	var cameraPZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraPZ.up.set( 0, - 1, 0 );
	cameraPZ.lookAt( new THREE.Vector3( 0, 0, 1 ) );
	this.add( cameraPZ );

	var cameraNZ = new THREE.PerspectiveCamera( fov, aspect, near, far );
	cameraNZ.up.set( 0, - 1, 0 );
	cameraNZ.lookAt( new THREE.Vector3( 0, 0, - 1 ) );
	this.add( cameraNZ );

	this.renderTarget = new THREE.WebGLRenderTargetCube( cubeResolution, cubeResolution, { format: THREE.RGBFormat, magFilter: THREE.LinearFilter, minFilter: THREE.LinearFilter } );

	this.updateCubeMap = function ( renderer, scene ) {

		var renderTarget = this.renderTarget;
		var generateMipmaps = renderTarget.generateMipmaps;

		renderTarget.generateMipmaps = false;

		renderTarget.activeCubeFace = 0;
		renderer.render( scene, cameraPX, renderTarget );

		renderTarget.activeCubeFace = 1;
		renderer.render( scene, cameraNX, renderTarget );

		renderTarget.activeCubeFace = 2;
		renderer.render( scene, cameraPY, renderTarget );

		renderTarget.activeCubeFace = 3;
		renderer.render( scene, cameraNY, renderTarget );

		renderTarget.activeCubeFace = 4;
		renderer.render( scene, cameraPZ, renderTarget );

		renderTarget.generateMipmaps = generateMipmaps;

		renderTarget.activeCubeFace = 5;
		renderer.render( scene, cameraNZ, renderTarget );

	};

};

THREE.CubeCamera.prototype = Object.create( THREE.Object3D.prototype );

// File:src/cameras/OrthographicCamera.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.OrthographicCamera = function ( left, right, top, bottom, near, far ) {

	THREE.Camera.call( this );

	this.type = 'OrthographicCamera';

	this.zoom = 1;

	this.left = left;
	this.right = right;
	this.top = top;
	this.bottom = bottom;

	this.near = ( near !== undefined ) ? near : 0.1;
	this.far = ( far !== undefined ) ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.OrthographicCamera.prototype = Object.create( THREE.Camera.prototype );

THREE.OrthographicCamera.prototype.updateProjectionMatrix = function () {

	var dx = ( this.right - this.left ) / ( 2 * this.zoom );
	var dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
	var cx = ( this.right + this.left ) / 2;
	var cy = ( this.top + this.bottom ) / 2;

	this.projectionMatrix.makeOrthographic( cx - dx, cx + dx, cy + dy, cy - dy, this.near, this.far );

};

THREE.OrthographicCamera.prototype.clone = function () {

	var camera = new THREE.OrthographicCamera();

	THREE.Camera.prototype.clone.call( this, camera );

	camera.zoom = this.zoom;

	camera.left = this.left;
	camera.right = this.right;
	camera.top = this.top;
	camera.bottom = this.bottom;

	camera.near = this.near;
	camera.far = this.far;

	camera.projectionMatrix.copy( this.projectionMatrix );

	return camera;
};

// File:src/cameras/PerspectiveCamera.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author greggman / http://games.greggman.com/
 * @author zz85 / http://www.lab4games.net/zz85/blog
 */

THREE.PerspectiveCamera = function ( fov, aspect, near, far ) {

	THREE.Camera.call( this );

	this.type = 'PerspectiveCamera';

	this.zoom = 1;

	this.fov = fov !== undefined ? fov : 50;
	this.aspect = aspect !== undefined ? aspect : 1;
	this.near = near !== undefined ? near : 0.1;
	this.far = far !== undefined ? far : 2000;

	this.updateProjectionMatrix();

};

THREE.PerspectiveCamera.prototype = Object.create( THREE.Camera.prototype );


/**
 * Uses Focal Length (in mm) to estimate and set FOV
 * 35mm (fullframe) camera is used if frame size is not specified;
 * Formula based on http://www.bobatkins.com/photography/technical/field_of_view.html
 */

THREE.PerspectiveCamera.prototype.setLens = function ( focalLength, frameHeight ) {

	if ( frameHeight === undefined ) frameHeight = 24;

	this.fov = 2 * THREE.Math.radToDeg( Math.atan( frameHeight / ( focalLength * 2 ) ) );
	this.updateProjectionMatrix();

}


/**
 * Sets an offset in a larger frustum. This is useful for multi-window or
 * multi-monitor/multi-machine setups.
 *
 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
 * the monitors are in grid like this
 *
 *   +---+---+---+
 *   | A | B | C |
 *   +---+---+---+
 *   | D | E | F |
 *   +---+---+---+
 *
 * then for each monitor you would call it like this
 *
 *   var w = 1920;
 *   var h = 1080;
 *   var fullWidth = w * 3;
 *   var fullHeight = h * 2;
 *
 *   --A--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
 *   --B--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
 *   --C--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
 *   --D--
 *   camera.setOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
 *   --E--
 *   camera.setOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
 *   --F--
 *   camera.setOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
 *
 *   Note there is no reason monitors have to be the same size or in a grid.
 */

THREE.PerspectiveCamera.prototype.setViewOffset = function ( fullWidth, fullHeight, x, y, width, height ) {

	this.fullWidth = fullWidth;
	this.fullHeight = fullHeight;
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;

	this.updateProjectionMatrix();

};


THREE.PerspectiveCamera.prototype.updateProjectionMatrix = function () {

	var fov = THREE.Math.radToDeg( 2 * Math.atan( Math.tan( THREE.Math.degToRad( this.fov ) * 0.5 ) / this.zoom ) );

	if ( this.fullWidth ) {

		var aspect = this.fullWidth / this.fullHeight;
		var top = Math.tan( THREE.Math.degToRad( fov * 0.5 ) ) * this.near;
		var bottom = - top;
		var left = aspect * bottom;
		var right = aspect * top;
		var width = Math.abs( right - left );
		var height = Math.abs( top - bottom );

		this.projectionMatrix.makeFrustum(
			left + this.x * width / this.fullWidth,
			left + ( this.x + this.width ) * width / this.fullWidth,
			top - ( this.y + this.height ) * height / this.fullHeight,
			top - this.y * height / this.fullHeight,
			this.near,
			this.far
		);

	} else {

		this.projectionMatrix.makePerspective( fov, this.aspect, this.near, this.far );

	}

};

THREE.PerspectiveCamera.prototype.clone = function () {

	var camera = new THREE.PerspectiveCamera();

	THREE.Camera.prototype.clone.call( this, camera );

	camera.zoom = this.zoom;

	camera.fov = this.fov;
	camera.aspect = this.aspect;
	camera.near = this.near;
	camera.far = this.far;

	camera.projectionMatrix.copy( this.projectionMatrix );

	return camera;

};

// File:src/lights/Light.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Light = function ( color ) {

	THREE.Object3D.call( this );

	this.type = 'Light';
	
	this.color = new THREE.Color( color );

};

THREE.Light.prototype = Object.create( THREE.Object3D.prototype );

THREE.Light.prototype.clone = function ( light ) {

	if ( light === undefined ) light = new THREE.Light();

	THREE.Object3D.prototype.clone.call( this, light );

	light.color.copy( this.color );

	return light;

};

// File:src/lights/AmbientLight.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AmbientLight = function ( color ) {

	THREE.Light.call( this, color );

	this.type = 'AmbientLight';

};

THREE.AmbientLight.prototype = Object.create( THREE.Light.prototype );

THREE.AmbientLight.prototype.clone = function () {

	var light = new THREE.AmbientLight();

	THREE.Light.prototype.clone.call( this, light );

	return light;

};

// File:src/lights/AreaLight.js

/**
 * @author MPanknin / http://www.redplant.de/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.AreaLight = function ( color, intensity ) {

	THREE.Light.call( this, color );

	this.type = 'AreaLight';

	this.normal = new THREE.Vector3( 0, - 1, 0 );
	this.right = new THREE.Vector3( 1, 0, 0 );

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.width = 1.0;
	this.height = 1.0;

	this.constantAttenuation = 1.5;
	this.linearAttenuation = 0.5;
	this.quadraticAttenuation = 0.1;

};

THREE.AreaLight.prototype = Object.create( THREE.Light.prototype );


// File:src/lights/DirectionalLight.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DirectionalLight = function ( color, intensity ) {

	THREE.Light.call( this, color );

	this.type = 'DirectionalLight';

	this.position.set( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;

	this.shadowCameraLeft = - 500;
	this.shadowCameraRight = 500;
	this.shadowCameraTop = 500;
	this.shadowCameraBottom = - 500;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowCascade = false;

	this.shadowCascadeOffset = new THREE.Vector3( 0, 0, - 1000 );
	this.shadowCascadeCount = 2;

	this.shadowCascadeBias = [ 0, 0, 0 ];
	this.shadowCascadeWidth = [ 512, 512, 512 ];
	this.shadowCascadeHeight = [ 512, 512, 512 ];

	this.shadowCascadeNearZ = [ - 1.000, 0.990, 0.998 ];
	this.shadowCascadeFarZ  = [  0.990, 0.998, 1.000 ];

	this.shadowCascadeArray = [];

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.DirectionalLight.prototype = Object.create( THREE.Light.prototype );

THREE.DirectionalLight.prototype.clone = function () {

	var light = new THREE.DirectionalLight();

	THREE.Light.prototype.clone.call( this, light );

	light.target = this.target.clone();

	light.intensity = this.intensity;

	light.castShadow = this.castShadow;
	light.onlyShadow = this.onlyShadow;

	//

	light.shadowCameraNear = this.shadowCameraNear;
	light.shadowCameraFar = this.shadowCameraFar;

	light.shadowCameraLeft = this.shadowCameraLeft;
	light.shadowCameraRight = this.shadowCameraRight;
	light.shadowCameraTop = this.shadowCameraTop;
	light.shadowCameraBottom = this.shadowCameraBottom;

	light.shadowCameraVisible = this.shadowCameraVisible;

	light.shadowBias = this.shadowBias;
	light.shadowDarkness = this.shadowDarkness;

	light.shadowMapWidth = this.shadowMapWidth;
	light.shadowMapHeight = this.shadowMapHeight;

	//

	light.shadowCascade = this.shadowCascade;

	light.shadowCascadeOffset.copy( this.shadowCascadeOffset );
	light.shadowCascadeCount = this.shadowCascadeCount;

	light.shadowCascadeBias = this.shadowCascadeBias.slice( 0 );
	light.shadowCascadeWidth = this.shadowCascadeWidth.slice( 0 );
	light.shadowCascadeHeight = this.shadowCascadeHeight.slice( 0 );

	light.shadowCascadeNearZ = this.shadowCascadeNearZ.slice( 0 );
	light.shadowCascadeFarZ  = this.shadowCascadeFarZ.slice( 0 );

	return light;

};

// File:src/lights/HemisphereLight.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.HemisphereLight = function ( skyColor, groundColor, intensity ) {

	THREE.Light.call( this, skyColor );

	this.type = 'HemisphereLight';

	this.position.set( 0, 100, 0 );

	this.groundColor = new THREE.Color( groundColor );
	this.intensity = ( intensity !== undefined ) ? intensity : 1;

};

THREE.HemisphereLight.prototype = Object.create( THREE.Light.prototype );

THREE.HemisphereLight.prototype.clone = function () {

	var light = new THREE.HemisphereLight();

	THREE.Light.prototype.clone.call( this, light );

	light.groundColor.copy( this.groundColor );
	light.intensity = this.intensity;

	return light;

};

// File:src/lights/PointLight.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLight = function ( color, intensity, distance ) {

	THREE.Light.call( this, color );

	this.type = 'PointLight';

	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;

};

THREE.PointLight.prototype = Object.create( THREE.Light.prototype );

THREE.PointLight.prototype.clone = function () {

	var light = new THREE.PointLight();

	THREE.Light.prototype.clone.call( this, light );

	light.intensity = this.intensity;
	light.distance = this.distance;

	return light;

};

// File:src/lights/SpotLight.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpotLight = function ( color, intensity, distance, angle, exponent ) {

	THREE.Light.call( this, color );

	this.type = 'SpotLight';

	this.position.set( 0, 1, 0 );
	this.target = new THREE.Object3D();

	this.intensity = ( intensity !== undefined ) ? intensity : 1;
	this.distance = ( distance !== undefined ) ? distance : 0;
	this.angle = ( angle !== undefined ) ? angle : Math.PI / 3;
	this.exponent = ( exponent !== undefined ) ? exponent : 10;

	this.castShadow = false;
	this.onlyShadow = false;

	//

	this.shadowCameraNear = 50;
	this.shadowCameraFar = 5000;
	this.shadowCameraFov = 50;

	this.shadowCameraVisible = false;

	this.shadowBias = 0;
	this.shadowDarkness = 0.5;

	this.shadowMapWidth = 512;
	this.shadowMapHeight = 512;

	//

	this.shadowMap = null;
	this.shadowMapSize = null;
	this.shadowCamera = null;
	this.shadowMatrix = null;

};

THREE.SpotLight.prototype = Object.create( THREE.Light.prototype );

THREE.SpotLight.prototype.clone = function () {

	var light = new THREE.SpotLight();

	THREE.Light.prototype.clone.call( this, light );

	light.target = this.target.clone();

	light.intensity = this.intensity;
	light.distance = this.distance;
	light.angle = this.angle;
	light.exponent = this.exponent;

	light.castShadow = this.castShadow;
	light.onlyShadow = this.onlyShadow;

	//

	light.shadowCameraNear = this.shadowCameraNear;
	light.shadowCameraFar = this.shadowCameraFar;
	light.shadowCameraFov = this.shadowCameraFov;

	light.shadowCameraVisible = this.shadowCameraVisible;

	light.shadowBias = this.shadowBias;
	light.shadowDarkness = this.shadowDarkness;

	light.shadowMapWidth = this.shadowMapWidth;
	light.shadowMapHeight = this.shadowMapHeight;

	return light;

};

// File:src/loaders/Cache.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Cache = function () {

	this.files = {};

};

THREE.Cache.prototype = {

	constructor: THREE.Cache,

	add: function ( key, file ) {

		// console.log( 'THREE.Cache', 'Adding key:', key );

		this.files[ key ] = file;

	},

	get: function ( key ) {

		// console.log( 'THREE.Cache', 'Checking key:', key );

		return this.files[ key ];

	},

	remove: function ( key ) {

		delete this.files[ key ];

	},

	clear: function () {

		this.files = {}

	}

};

// File:src/loaders/Loader.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Loader = function ( showStatus ) {

	this.showStatus = showStatus;
	this.statusDomElement = showStatus ? THREE.Loader.prototype.addStatusElement() : null;

	this.imageLoader = new THREE.ImageLoader();

	this.onLoadStart = function () {};
	this.onLoadProgress = function () {};
	this.onLoadComplete = function () {};

};

THREE.Loader.prototype = {

	constructor: THREE.Loader,

	crossOrigin: undefined,

	addStatusElement: function () {

		var e = document.createElement( 'div' );

		e.style.position = 'absolute';
		e.style.right = '0px';
		e.style.top = '0px';
		e.style.fontSize = '0.8em';
		e.style.textAlign = 'left';
		e.style.background = 'rgba(0,0,0,0.25)';
		e.style.color = '#fff';
		e.style.width = '120px';
		e.style.padding = '0.5em 0.5em 0.5em 0.5em';
		e.style.zIndex = 1000;

		e.innerHTML = 'Loading ...';

		return e;

	},

	updateProgress: function ( progress ) {

		var message = 'Loaded ';

		if ( progress.total ) {

			message += ( 100 * progress.loaded / progress.total ).toFixed( 0 ) + '%';


		} else {

			message += ( progress.loaded / 1024 ).toFixed( 2 ) + ' KB';

		}

		this.statusDomElement.innerHTML = message;

	},

	extractUrlBase: function ( url ) {

		var parts = url.split( '/' );

		if ( parts.length === 1 ) return './';

		parts.pop();

		return parts.join( '/' ) + '/';

	},

	initMaterials: function ( materials, texturePath ) {

		var array = [];

		for ( var i = 0; i < materials.length; ++ i ) {

			array[ i ] = this.createMaterial( materials[ i ], texturePath );

		}

		return array;

	},

	needsTangents: function ( materials ) {

		for ( var i = 0, il = materials.length; i < il; i ++ ) {

			var m = materials[ i ];

			if ( m instanceof THREE.ShaderMaterial ) return true;

		}

		return false;

	},

	createMaterial: function ( m, texturePath ) {

		var scope = this;

		function nearest_pow2( n ) {

			var l = Math.log( n ) / Math.LN2;
			return Math.pow( 2, Math.round(  l ) );

		}

		function create_texture( where, name, sourceFile, repeat, offset, wrap, anisotropy ) {

			var fullPath = texturePath + sourceFile;

			var texture;

			var loader = THREE.Loader.Handlers.get( fullPath );

			if ( loader !== null ) {

				texture = loader.load( fullPath );

			} else {

				texture = new THREE.Texture();

				loader = scope.imageLoader;
				loader.crossOrigin = scope.crossOrigin;
				loader.load( fullPath, function ( image ) {

					if ( THREE.Math.isPowerOfTwo( image.width ) === false ||
						 THREE.Math.isPowerOfTwo( image.height ) === false ) {

						var width = nearest_pow2( image.width );
						var height = nearest_pow2( image.height );

						var canvas = document.createElement( 'canvas' );
						canvas.width = width;
						canvas.height = height;

						var context = canvas.getContext( '2d' );
						context.drawImage( image, 0, 0, width, height );

						texture.image = canvas;

					} else {

						texture.image = image;

					}

					texture.needsUpdate = true;

				} );

			}

			texture.sourceFile = sourceFile;

			if ( repeat ) {

				texture.repeat.set( repeat[ 0 ], repeat[ 1 ] );

				if ( repeat[ 0 ] !== 1 ) texture.wrapS = THREE.RepeatWrapping;
				if ( repeat[ 1 ] !== 1 ) texture.wrapT = THREE.RepeatWrapping;

			}

			if ( offset ) {

				texture.offset.set( offset[ 0 ], offset[ 1 ] );

			}

			if ( wrap ) {

				var wrapMap = {
					'repeat': THREE.RepeatWrapping,
					'mirror': THREE.MirroredRepeatWrapping
				}

				if ( wrapMap[ wrap[ 0 ] ] !== undefined ) texture.wrapS = wrapMap[ wrap[ 0 ] ];
				if ( wrapMap[ wrap[ 1 ] ] !== undefined ) texture.wrapT = wrapMap[ wrap[ 1 ] ];

			}

			if ( anisotropy ) {

				texture.anisotropy = anisotropy;

			}

			where[ name ] = texture;

		}

		function rgb2hex( rgb ) {

			return ( rgb[ 0 ] * 255 << 16 ) + ( rgb[ 1 ] * 255 << 8 ) + rgb[ 2 ] * 255;

		}

		// defaults

		var mtype = 'MeshLambertMaterial';
		var mpars = { color: 0xeeeeee, opacity: 1.0, map: null, lightMap: null, normalMap: null, bumpMap: null, wireframe: false };

		// parameters from model file

		if ( m.shading ) {

			var shading = m.shading.toLowerCase();

			if ( shading === 'phong' ) mtype = 'MeshPhongMaterial';
			else if ( shading === 'basic' ) mtype = 'MeshBasicMaterial';

		}

		if ( m.blending !== undefined && THREE[ m.blending ] !== undefined ) {

			mpars.blending = THREE[ m.blending ];

		}

		if ( m.transparent !== undefined || m.opacity < 1.0 ) {

			mpars.transparent = m.transparent;

		}

		if ( m.depthTest !== undefined ) {

			mpars.depthTest = m.depthTest;

		}

		if ( m.depthWrite !== undefined ) {

			mpars.depthWrite = m.depthWrite;

		}

		if ( m.visible !== undefined ) {

			mpars.visible = m.visible;

		}

		if ( m.flipSided !== undefined ) {

			mpars.side = THREE.BackSide;

		}

		if ( m.doubleSided !== undefined ) {

			mpars.side = THREE.DoubleSide;

		}

		if ( m.wireframe !== undefined ) {

			mpars.wireframe = m.wireframe;

		}

		if ( m.vertexColors !== undefined ) {

			if ( m.vertexColors === 'face' ) {

				mpars.vertexColors = THREE.FaceColors;

			} else if ( m.vertexColors ) {

				mpars.vertexColors = THREE.VertexColors;

			}

		}

		// colors

		if ( m.colorDiffuse ) {

			mpars.color = rgb2hex( m.colorDiffuse );

		} else if ( m.DbgColor ) {

			mpars.color = m.DbgColor;

		}

		if ( m.colorSpecular ) {

			mpars.specular = rgb2hex( m.colorSpecular );

		}

		if ( m.colorAmbient ) {

			mpars.ambient = rgb2hex( m.colorAmbient );

		}

		if ( m.colorEmissive ) {

			mpars.emissive = rgb2hex( m.colorEmissive );

		}

		// modifiers

		if ( m.transparency ) {

			mpars.opacity = m.transparency;

		}

		if ( m.specularCoef ) {

			mpars.shininess = m.specularCoef;

		}

		// textures

		if ( m.mapDiffuse && texturePath ) {

			create_texture( mpars, 'map', m.mapDiffuse, m.mapDiffuseRepeat, m.mapDiffuseOffset, m.mapDiffuseWrap, m.mapDiffuseAnisotropy );

		}

		if ( m.mapLight && texturePath ) {

			create_texture( mpars, 'lightMap', m.mapLight, m.mapLightRepeat, m.mapLightOffset, m.mapLightWrap, m.mapLightAnisotropy );

		}

		if ( m.mapBump && texturePath ) {

			create_texture( mpars, 'bumpMap', m.mapBump, m.mapBumpRepeat, m.mapBumpOffset, m.mapBumpWrap, m.mapBumpAnisotropy );

		}

		if ( m.mapNormal && texturePath ) {

			create_texture( mpars, 'normalMap', m.mapNormal, m.mapNormalRepeat, m.mapNormalOffset, m.mapNormalWrap, m.mapNormalAnisotropy );

		}

		if ( m.mapSpecular && texturePath ) {

			create_texture( mpars, 'specularMap', m.mapSpecular, m.mapSpecularRepeat, m.mapSpecularOffset, m.mapSpecularWrap, m.mapSpecularAnisotropy );

		}

		if ( m.mapAlpha && texturePath ) {

			create_texture( mpars, 'alphaMap', m.mapAlpha, m.mapAlphaRepeat, m.mapAlphaOffset, m.mapAlphaWrap, m.mapAlphaAnisotropy );

		}

		//

		if ( m.mapBumpScale ) {

			mpars.bumpScale = m.mapBumpScale;

		}

		// special case for normal mapped material

		if ( m.mapNormal ) {

			var shader = THREE.ShaderLib[ 'normalmap' ];
			var uniforms = THREE.UniformsUtils.clone( shader.uniforms );

			uniforms[ 'tNormal' ].value = mpars.normalMap;

			if ( m.mapNormalFactor ) {

				uniforms[ 'uNormalScale' ].value.set( m.mapNormalFactor, m.mapNormalFactor );

			}

			if ( mpars.map ) {

				uniforms[ 'tDiffuse' ].value = mpars.map;
				uniforms[ 'enableDiffuse' ].value = true;

			}

			if ( mpars.specularMap ) {

				uniforms[ 'tSpecular' ].value = mpars.specularMap;
				uniforms[ 'enableSpecular' ].value = true;

			}

			if ( mpars.lightMap ) {

				uniforms[ 'tAO' ].value = mpars.lightMap;
				uniforms[ 'enableAO' ].value = true;

			}

			// for the moment don't handle displacement texture

			uniforms[ 'diffuse' ].value.setHex( mpars.color );
			uniforms[ 'specular' ].value.setHex( mpars.specular );
			uniforms[ 'ambient' ].value.setHex( mpars.ambient );

			uniforms[ 'shininess' ].value = mpars.shininess;

			if ( mpars.opacity !== undefined ) {

				uniforms[ 'opacity' ].value = mpars.opacity;

			}

			var parameters = { fragmentShader: shader.fragmentShader, vertexShader: shader.vertexShader, uniforms: uniforms, lights: true, fog: true };
			var material = new THREE.ShaderMaterial( parameters );

			if ( mpars.transparent ) {

				material.transparent = true;

			}

		} else {

			var material = new THREE[ mtype ]( mpars );

		}

		if ( m.DbgName !== undefined ) material.name = m.DbgName;

		return material;

	}

};

THREE.Loader.Handlers = {

	handlers: [],

	add: function ( regex, loader ) {

		this.handlers.push( regex, loader );

	},

	get: function ( file ) {

		for ( var i = 0, l = this.handlers.length; i < l; i += 2 ) {

			var regex = this.handlers[ i ];
			var loader  = this.handlers[ i + 1 ];

			if ( regex.test( file ) ) {

				return loader;

			}

		}

		return null;

	}

};

// File:src/loaders/XHRLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.XHRLoader = function ( manager ) {

	this.cache = new THREE.Cache();
	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.XHRLoader.prototype = {

	constructor: THREE.XHRLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var cached = scope.cache.get( url );

		if ( cached !== undefined ) {

			if ( onLoad ) onLoad( cached );
			return;

		}

		var request = new XMLHttpRequest();
		request.open( 'GET', url, true );

		request.addEventListener( 'load', function ( event ) {

			scope.cache.add( url, this.response );

			if ( onLoad ) onLoad( this.response );

			scope.manager.itemEnd( url );

		}, false );

		if ( onProgress !== undefined ) {

			request.addEventListener( 'progress', function ( event ) {

				onProgress( event );

			}, false );

		}

		if ( onError !== undefined ) {

			request.addEventListener( 'error', function ( event ) {

				onError( event );

			}, false );

		}

		if ( this.crossOrigin !== undefined ) request.crossOrigin = this.crossOrigin;
		if ( this.responseType !== undefined ) request.responseType = this.responseType;

		request.send( null );

		scope.manager.itemStart( url );

	},

	setResponseType: function ( value ) {

		this.responseType = value;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

};

// File:src/loaders/ImageLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ImageLoader = function ( manager ) {

	this.cache = new THREE.Cache();
	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ImageLoader.prototype = {

	constructor: THREE.ImageLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var cached = scope.cache.get( url );

		if ( cached !== undefined ) {

			onLoad( cached );
			return;

		}

		var image = document.createElement( 'img' );

		if ( onLoad !== undefined ) {

			image.addEventListener( 'load', function ( event ) {

				scope.cache.add( url, this );

				onLoad( this );
				scope.manager.itemEnd( url );

			}, false );

		}

		if ( onProgress !== undefined ) {

			image.addEventListener( 'progress', function ( event ) {

				onProgress( event );

			}, false );

		}

		if ( onError !== undefined ) {

			image.addEventListener( 'error', function ( event ) {

				onError( event );

			}, false );

		}

		if ( this.crossOrigin !== undefined ) image.crossOrigin = this.crossOrigin;

		image.src = url;

		scope.manager.itemStart( url );

		return image;

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

}

// File:src/loaders/JSONLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.JSONLoader = function ( showStatus ) {

	THREE.Loader.call( this, showStatus );

	this.withCredentials = false;

};

THREE.JSONLoader.prototype = Object.create( THREE.Loader.prototype );

THREE.JSONLoader.prototype.load = function ( url, callback, texturePath ) {

	var scope = this;

	// todo: unify load API to for easier SceneLoader use

	texturePath = texturePath && ( typeof texturePath === 'string' ) ? texturePath : this.extractUrlBase( url );

	this.onLoadStart();
	this.loadAjaxJSON( this, url, callback, texturePath );

};

THREE.JSONLoader.prototype.loadAjaxJSON = function ( context, url, callback, texturePath, callbackProgress ) {

	var xhr = new XMLHttpRequest();

	var length = 0;

	xhr.onreadystatechange = function () {

		if ( xhr.readyState === xhr.DONE ) {

			if ( xhr.status === 200 || xhr.status === 0 ) {

				if ( xhr.responseText ) {

					var json = JSON.parse( xhr.responseText );

					if ( json.metadata !== undefined && json.metadata.type === 'scene' ) {

						console.error( 'THREE.JSONLoader: "' + url + '" seems to be a Scene. Use THREE.SceneLoader instead.' );
						return;

					}

					var result = context.parse( json, texturePath );
					callback( result.geometry, result.materials );

				} else {

					console.error( 'THREE.JSONLoader: "' + url + '" seems to be unreachable or the file is empty.' );

				}

				// in context of more complex asset initialization
				// do not block on single failed file
				// maybe should go even one more level up

				context.onLoadComplete();

			} else {

				console.error( 'THREE.JSONLoader: Couldn\'t load "' + url + '" (' + xhr.status + ')' );

			}

		} else if ( xhr.readyState === xhr.LOADING ) {

			if ( callbackProgress ) {

				if ( length === 0 ) {

					length = xhr.getResponseHeader( 'Content-Length' );

				}

				callbackProgress( { total: length, loaded: xhr.responseText.length } );

			}

		} else if ( xhr.readyState === xhr.HEADERS_RECEIVED ) {

			if ( callbackProgress !== undefined ) {

				length = xhr.getResponseHeader( 'Content-Length' );

			}

		}

	};

	xhr.open( 'GET', url, true );
	xhr.withCredentials = this.withCredentials;
	xhr.send( null );

};

THREE.JSONLoader.prototype.parse = function ( json, texturePath ) {

	var scope = this,
	geometry = new THREE.Geometry(),
	scale = ( json.scale !== undefined ) ? 1.0 / json.scale : 1.0;

	parseModel( scale );

	parseSkin();
	parseMorphing( scale );

	geometry.computeFaceNormals();
	geometry.computeBoundingSphere();

	function parseModel( scale ) {

		function isBitSet( value, position ) {

			return value & ( 1 << position );

		}

		var i, j, fi,

		offset, zLength,

		colorIndex, normalIndex, uvIndex, materialIndex,

		type,
		isQuad,
		hasMaterial,
		hasFaceVertexUv,
		hasFaceNormal, hasFaceVertexNormal,
		hasFaceColor, hasFaceVertexColor,

		vertex, face, faceA, faceB, color, hex, normal,

		uvLayer, uv, u, v,

		faces = json.faces,
		vertices = json.vertices,
		normals = json.normals,
		colors = json.colors,

		nUvLayers = 0;

		if ( json.uvs !== undefined ) {

			// disregard empty arrays

			for ( i = 0; i < json.uvs.length; i ++ ) {

				if ( json.uvs[ i ].length ) nUvLayers ++;

			}

			for ( i = 0; i < nUvLayers; i ++ ) {

				geometry.faceVertexUvs[ i ] = [];

			}

		}

		offset = 0;
		zLength = vertices.length;

		while ( offset < zLength ) {

			vertex = new THREE.Vector3();

			vertex.x = vertices[ offset ++ ] * scale;
			vertex.y = vertices[ offset ++ ] * scale;
			vertex.z = vertices[ offset ++ ] * scale;

			geometry.vertices.push( vertex );

		}

		offset = 0;
		zLength = faces.length;

		while ( offset < zLength ) {

			type = faces[ offset ++ ];


			isQuad              = isBitSet( type, 0 );
			hasMaterial         = isBitSet( type, 1 );
			hasFaceVertexUv     = isBitSet( type, 3 );
			hasFaceNormal       = isBitSet( type, 4 );
			hasFaceVertexNormal = isBitSet( type, 5 );
			hasFaceColor	     = isBitSet( type, 6 );
			hasFaceVertexColor  = isBitSet( type, 7 );

			// console.log("type", type, "bits", isQuad, hasMaterial, hasFaceVertexUv, hasFaceNormal, hasFaceVertexNormal, hasFaceColor, hasFaceVertexColor);

			if ( isQuad ) {

				faceA = new THREE.Face3();
				faceA.a = faces[ offset ];
				faceA.b = faces[ offset + 1 ];
				faceA.c = faces[ offset + 3 ];

				faceB = new THREE.Face3();
				faceB.a = faces[ offset + 1 ];
				faceB.b = faces[ offset + 2 ];
				faceB.c = faces[ offset + 3 ];

				offset += 4;

				if ( hasMaterial ) {

					materialIndex = faces[ offset ++ ];
					faceA.materialIndex = materialIndex;
					faceB.materialIndex = materialIndex;

				}

				// to get face <=> uv index correspondence

				fi = geometry.faces.length;

				if ( hasFaceVertexUv ) {

					for ( i = 0; i < nUvLayers; i ++ ) {

						uvLayer = json.uvs[ i ];

						geometry.faceVertexUvs[ i ][ fi ] = [];
						geometry.faceVertexUvs[ i ][ fi + 1 ] = []

						for ( j = 0; j < 4; j ++ ) {

							uvIndex = faces[ offset ++ ];

							u = uvLayer[ uvIndex * 2 ];
							v = uvLayer[ uvIndex * 2 + 1 ];

							uv = new THREE.Vector2( u, v );

							if ( j !== 2 ) geometry.faceVertexUvs[ i ][ fi ].push( uv );
							if ( j !== 0 ) geometry.faceVertexUvs[ i ][ fi + 1 ].push( uv );

						}

					}

				}

				if ( hasFaceNormal ) {

					normalIndex = faces[ offset ++ ] * 3;

					faceA.normal.set(
						normals[ normalIndex ++ ],
						normals[ normalIndex ++ ],
						normals[ normalIndex ]
					);

					faceB.normal.copy( faceA.normal );

				}

				if ( hasFaceVertexNormal ) {

					for ( i = 0; i < 4; i ++ ) {

						normalIndex = faces[ offset ++ ] * 3;

						normal = new THREE.Vector3(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);


						if ( i !== 2 ) faceA.vertexNormals.push( normal );
						if ( i !== 0 ) faceB.vertexNormals.push( normal );

					}

				}


				if ( hasFaceColor ) {

					colorIndex = faces[ offset ++ ];
					hex = colors[ colorIndex ];

					faceA.color.setHex( hex );
					faceB.color.setHex( hex );

				}


				if ( hasFaceVertexColor ) {

					for ( i = 0; i < 4; i ++ ) {

						colorIndex = faces[ offset ++ ];
						hex = colors[ colorIndex ];

						if ( i !== 2 ) faceA.vertexColors.push( new THREE.Color( hex ) );
						if ( i !== 0 ) faceB.vertexColors.push( new THREE.Color( hex ) );

					}

				}

				geometry.faces.push( faceA );
				geometry.faces.push( faceB );

			} else {

				face = new THREE.Face3();
				face.a = faces[ offset ++ ];
				face.b = faces[ offset ++ ];
				face.c = faces[ offset ++ ];

				if ( hasMaterial ) {

					materialIndex = faces[ offset ++ ];
					face.materialIndex = materialIndex;

				}

				// to get face <=> uv index correspondence

				fi = geometry.faces.length;

				if ( hasFaceVertexUv ) {

					for ( i = 0; i < nUvLayers; i ++ ) {

						uvLayer = json.uvs[ i ];

						geometry.faceVertexUvs[ i ][ fi ] = [];

						for ( j = 0; j < 3; j ++ ) {

							uvIndex = faces[ offset ++ ];

							u = uvLayer[ uvIndex * 2 ];
							v = uvLayer[ uvIndex * 2 + 1 ];

							uv = new THREE.Vector2( u, v );

							geometry.faceVertexUvs[ i ][ fi ].push( uv );

						}

					}

				}

				if ( hasFaceNormal ) {

					normalIndex = faces[ offset ++ ] * 3;

					face.normal.set(
						normals[ normalIndex ++ ],
						normals[ normalIndex ++ ],
						normals[ normalIndex ]
					);

				}

				if ( hasFaceVertexNormal ) {

					for ( i = 0; i < 3; i ++ ) {

						normalIndex = faces[ offset ++ ] * 3;

						normal = new THREE.Vector3(
							normals[ normalIndex ++ ],
							normals[ normalIndex ++ ],
							normals[ normalIndex ]
						);

						face.vertexNormals.push( normal );

					}

				}


				if ( hasFaceColor ) {

					colorIndex = faces[ offset ++ ];
					face.color.setHex( colors[ colorIndex ] );

				}


				if ( hasFaceVertexColor ) {

					for ( i = 0; i < 3; i ++ ) {

						colorIndex = faces[ offset ++ ];
						face.vertexColors.push( new THREE.Color( colors[ colorIndex ] ) );

					}

				}

				geometry.faces.push( face );

			}

		}

	};

	function parseSkin() {
		var influencesPerVertex = ( json.influencesPerVertex !== undefined ) ? json.influencesPerVertex : 2;

		if ( json.skinWeights ) {

			for ( var i = 0, l = json.skinWeights.length; i < l; i += influencesPerVertex ) {

				var x =                               json.skinWeights[ i     ];
				var y = ( influencesPerVertex > 1 ) ? json.skinWeights[ i + 1 ] : 0;
				var z = ( influencesPerVertex > 2 ) ? json.skinWeights[ i + 2 ] : 0;
				var w = ( influencesPerVertex > 3 ) ? json.skinWeights[ i + 3 ] : 0;

				geometry.skinWeights.push( new THREE.Vector4( x, y, z, w ) );

			}

		}

		if ( json.skinIndices ) {

			for ( var i = 0, l = json.skinIndices.length; i < l; i += influencesPerVertex ) {

				var a =                               json.skinIndices[ i     ];
				var b = ( influencesPerVertex > 1 ) ? json.skinIndices[ i + 1 ] : 0;
				var c = ( influencesPerVertex > 2 ) ? json.skinIndices[ i + 2 ] : 0;
				var d = ( influencesPerVertex > 3 ) ? json.skinIndices[ i + 3 ] : 0;

				geometry.skinIndices.push( new THREE.Vector4( a, b, c, d ) );

			}

		}

		geometry.bones = json.bones;

		if ( geometry.bones && geometry.bones.length > 0 && ( geometry.skinWeights.length !== geometry.skinIndices.length || geometry.skinIndices.length !== geometry.vertices.length ) ) {

				console.warn( 'When skinning, number of vertices (' + geometry.vertices.length + '), skinIndices (' +
					geometry.skinIndices.length + '), and skinWeights (' + geometry.skinWeights.length + ') should match.' );

		}


		// could change this to json.animations[0] or remove completely

		geometry.animation = json.animation;
		geometry.animations = json.animations;

	};

	function parseMorphing( scale ) {

		if ( json.morphTargets !== undefined ) {

			var i, l, v, vl, dstVertices, srcVertices;

			for ( i = 0, l = json.morphTargets.length; i < l; i ++ ) {

				geometry.morphTargets[ i ] = {};
				geometry.morphTargets[ i ].name = json.morphTargets[ i ].name;
				geometry.morphTargets[ i ].vertices = [];

				dstVertices = geometry.morphTargets[ i ].vertices;
				srcVertices = json.morphTargets [ i ].vertices;

				for ( v = 0, vl = srcVertices.length; v < vl; v += 3 ) {

					var vertex = new THREE.Vector3();
					vertex.x = srcVertices[ v ] * scale;
					vertex.y = srcVertices[ v + 1 ] * scale;
					vertex.z = srcVertices[ v + 2 ] * scale;

					dstVertices.push( vertex );

				}

			}

		}

		if ( json.morphColors !== undefined ) {

			var i, l, c, cl, dstColors, srcColors, color;

			for ( i = 0, l = json.morphColors.length; i < l; i ++ ) {

				geometry.morphColors[ i ] = {};
				geometry.morphColors[ i ].name = json.morphColors[ i ].name;
				geometry.morphColors[ i ].colors = [];

				dstColors = geometry.morphColors[ i ].colors;
				srcColors = json.morphColors [ i ].colors;

				for ( c = 0, cl = srcColors.length; c < cl; c += 3 ) {

					color = new THREE.Color( 0xffaa00 );
					color.setRGB( srcColors[ c ], srcColors[ c + 1 ], srcColors[ c + 2 ] );
					dstColors.push( color );

				}

			}

		}

	};

	if ( json.materials === undefined || json.materials.length === 0 ) {

		return { geometry: geometry };

	} else {

		var materials = this.initMaterials( json.materials, texturePath );

		if ( this.needsTangents( materials ) ) {

			geometry.computeTangents();

		}

		return { geometry: geometry, materials: materials };

	}

};

// File:src/loaders/LoadingManager.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LoadingManager = function ( onLoad, onProgress, onError ) {

	var scope = this;

	var loaded = 0, total = 0;

	this.onLoad = onLoad;
	this.onProgress = onProgress;
	this.onError = onError;

	this.itemStart = function ( url ) {

		total ++;

	};

	this.itemEnd = function ( url ) {

		loaded ++;

		if ( scope.onProgress !== undefined ) {

			scope.onProgress( url, loaded, total );

		}

		if ( loaded === total && scope.onLoad !== undefined ) {

			scope.onLoad();

		}

	};

};

THREE.DefaultLoadingManager = new THREE.LoadingManager();

// File:src/loaders/BufferGeometryLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BufferGeometryLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.BufferGeometryLoader.prototype = {

	constructor: THREE.BufferGeometryLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader();
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var geometry = new THREE.BufferGeometry();

		var attributes = json.attributes;

		for ( var key in attributes ) {

			var attribute = attributes[ key ];
			var typedArray = new self[ attribute.type ]( attribute.array );

			geometry.addAttribute( key, new THREE.BufferAttribute( typedArray, attribute.itemSize ) );

		}

		var offsets = json.offsets;

		if ( offsets !== undefined ) {

			geometry.offsets = JSON.parse( JSON.stringify( offsets ) );

		}

		var boundingSphere = json.boundingSphere;

		if ( boundingSphere !== undefined ) {

			var center = new THREE.Vector3();

			if ( boundingSphere.center !== undefined ) {

				center.fromArray( boundingSphere.center );

			}

			geometry.boundingSphere = new THREE.Sphere( center, boundingSphere.radius );

		}

		return geometry;

	}

};

// File:src/loaders/MaterialLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MaterialLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.MaterialLoader.prototype = {

	constructor: THREE.MaterialLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader();
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var material = new THREE[ json.type ];

		if ( json.color !== undefined ) material.color.setHex( json.color );
		if ( json.ambient !== undefined ) material.ambient.setHex( json.ambient );
		if ( json.emissive !== undefined ) material.emissive.setHex( json.emissive );
		if ( json.specular !== undefined ) material.specular.setHex( json.specular );
		if ( json.shininess !== undefined ) material.shininess = json.shininess;
		if ( json.uniforms !== undefined ) material.uniforms = json.uniforms;
		if ( json.vertexShader !== undefined ) material.vertexShader = json.vertexShader;
		if ( json.fragmentShader !== undefined ) material.fragmentShader = json.fragmentShader;		
		if ( json.vertexColors !== undefined ) material.vertexColors = json.vertexColors;
		if ( json.shading !== undefined ) material.shading = json.shading;
		if ( json.blending !== undefined ) material.blending = json.blending;
		if ( json.side !== undefined ) material.side = json.side;
		if ( json.opacity !== undefined ) material.opacity = json.opacity;
		if ( json.transparent !== undefined ) material.transparent = json.transparent;
		if ( json.wireframe !== undefined ) material.wireframe = json.wireframe;

		if ( json.materials !== undefined ) {

			for ( var i = 0, l = json.materials.length; i < l; i ++ ) {

				material.materials.push( this.parse( json.materials[ i ] ) );

			}

		}

		return material;

	}

};

// File:src/loaders/ObjectLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.ObjectLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.ObjectLoader.prototype = {

	constructor: THREE.ObjectLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.XHRLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( text ) {

			onLoad( scope.parse( JSON.parse( text ) ) );

		}, onProgress, onError );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	},

	parse: function ( json ) {

		var geometries = this.parseGeometries( json.geometries );
		var materials = this.parseMaterials( json.materials );
		var object = this.parseObject( json.object, geometries, materials );

		return object;

	},

	parseGeometries: function ( json ) {

		var geometries = {};

		if ( json !== undefined ) {

			var geometryLoader = new THREE.JSONLoader();
			var bufferGeometryLoader = new THREE.BufferGeometryLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var geometry;
				var data = json[ i ];

				switch ( data.type ) {

					case 'PlaneGeometry':

						geometry = new THREE.PlaneGeometry(
							data.width,
							data.height,
							data.widthSegments,
							data.heightSegments
						);

						break;

					case 'BoxGeometry':
					case 'CubeGeometry': // backwards compatible

						geometry = new THREE.BoxGeometry(
							data.width,
							data.height,
							data.depth,
							data.widthSegments,
							data.heightSegments,
							data.depthSegments
						);

						break;

					case 'CircleGeometry':

						geometry = new THREE.CircleGeometry(
							data.radius,
							data.segments
						);

						break;

					case 'CylinderGeometry':

						geometry = new THREE.CylinderGeometry(
							data.radiusTop,
							data.radiusBottom,
							data.height,
							data.radialSegments,
							data.heightSegments,
							data.openEnded
						);

						break;

					case 'SphereGeometry':

						geometry = new THREE.SphereGeometry(
							data.radius,
							data.widthSegments,
							data.heightSegments,
							data.phiStart,
							data.phiLength,
							data.thetaStart,
							data.thetaLength
						);

						break;

					case 'IcosahedronGeometry':

						geometry = new THREE.IcosahedronGeometry(
							data.radius,
							data.detail
						);

						break;

					case 'TorusGeometry':

						geometry = new THREE.TorusGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.arc
						);

						break;

					case 'TorusKnotGeometry':

						geometry = new THREE.TorusKnotGeometry(
							data.radius,
							data.tube,
							data.radialSegments,
							data.tubularSegments,
							data.p,
							data.q,
							data.heightScale
						);

						break;

					case 'BufferGeometry':

						geometry = bufferGeometryLoader.parse( data.data );

						break;

					case 'Geometry':

						geometry = geometryLoader.parse( data.data ).geometry;

						break;

				}

				geometry.uuid = data.uuid;

				if ( data.name !== undefined ) geometry.name = data.name;

				geometries[ data.uuid ] = geometry;

			}

		}

		return geometries;

	},

	parseMaterials: function ( json ) {

		var materials = {};

		if ( json !== undefined ) {

			var loader = new THREE.MaterialLoader();

			for ( var i = 0, l = json.length; i < l; i ++ ) {

				var data = json[ i ];
				var material = loader.parse( data );

				material.uuid = data.uuid;

				if ( data.name !== undefined ) material.name = data.name;

				materials[ data.uuid ] = material;

			}

		}

		return materials;

	},

	parseObject: function () {

		var matrix = new THREE.Matrix4();

		return function ( data, geometries, materials ) {

			var object;

			switch ( data.type ) {

				case 'Scene':

					object = new THREE.Scene();

					break;

				case 'PerspectiveCamera':

					object = new THREE.PerspectiveCamera( data.fov, data.aspect, data.near, data.far );

					break;

				case 'OrthographicCamera':

					object = new THREE.OrthographicCamera( data.left, data.right, data.top, data.bottom, data.near, data.far );

					break;

				case 'AmbientLight':

					object = new THREE.AmbientLight( data.color );

					break;

				case 'DirectionalLight':

					object = new THREE.DirectionalLight( data.color, data.intensity );

					break;

				case 'PointLight':

					object = new THREE.PointLight( data.color, data.intensity, data.distance );

					break;

				case 'SpotLight':

					object = new THREE.SpotLight( data.color, data.intensity, data.distance, data.angle, data.exponent );

					break;

				case 'HemisphereLight':

					object = new THREE.HemisphereLight( data.color, data.groundColor, data.intensity );

					break;

				case 'Mesh':

					var geometry = geometries[ data.geometry ];
					var material = materials[ data.material ];

					if ( geometry === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );

					}

					if ( material === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', data.material );

					}

					object = new THREE.Mesh( geometry, material );

					break;

				case 'Line':

					var geometry = geometries[ data.geometry ];
					var material = materials[ data.material ];

					if ( geometry === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined geometry', data.geometry );

					}

					if ( material === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', data.material );

					}

					object = new THREE.Line( geometry, material );

					break;

				case 'Sprite':

					var material = materials[ data.material ];

					if ( material === undefined ) {

						console.warn( 'THREE.ObjectLoader: Undefined material', data.material );

					}

					object = new THREE.Sprite( material );

					break;

				case 'Group':

					object = new THREE.Group();

					break;

				default:

					object = new THREE.Object3D();

			}

			object.uuid = data.uuid;

			if ( data.name !== undefined ) object.name = data.name;
			if ( data.matrix !== undefined ) {

				matrix.fromArray( data.matrix );
				matrix.decompose( object.position, object.quaternion, object.scale );

			} else {

				if ( data.position !== undefined ) object.position.fromArray( data.position );
				if ( data.rotation !== undefined ) object.rotation.fromArray( data.rotation );
				if ( data.scale !== undefined ) object.scale.fromArray( data.scale );

			}

			if ( data.visible !== undefined ) object.visible = data.visible;
			if ( data.userData !== undefined ) object.userData = data.userData;

			if ( data.children !== undefined ) {

				for ( var child in data.children ) {

					object.add( this.parseObject( data.children[ child ], geometries, materials ) );

				}

			}

			return object;

		}

	}()

};

// File:src/loaders/TextureLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.TextureLoader = function ( manager ) {

	this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;

};

THREE.TextureLoader.prototype = {

	constructor: THREE.TextureLoader,

	load: function ( url, onLoad, onProgress, onError ) {

		var scope = this;

		var loader = new THREE.ImageLoader( scope.manager );
		loader.setCrossOrigin( this.crossOrigin );
		loader.load( url, function ( image ) {

			var texture = new THREE.Texture( image );
			texture.needsUpdate = true;

			if ( onLoad !== undefined ) {

				onLoad( texture );

			}

		}, onProgress, onError );

	},

	setCrossOrigin: function ( value ) {

		this.crossOrigin = value;

	}

};

// File:src/loaders/CompressedTextureLoader.js

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * Abstract Base class to block based textures loader (dds, pvr, ...)
 */

THREE.CompressedTextureLoader = function () {

	// override in sub classes
	this._parser = null;

};


THREE.CompressedTextureLoader.prototype = {

	constructor: THREE.CompressedTextureLoader,

	load: function ( url, onLoad, onError ) {

		var scope = this;

		var images = [];

		var texture = new THREE.CompressedTexture();
		texture.image = images;

		var loader = new THREE.XHRLoader();
		loader.setResponseType( 'arraybuffer' );

		if ( url instanceof Array ) {

			var loaded = 0;

			var loadTexture = function ( i ) {

				loader.load( url[ i ], function ( buffer ) {

					var texDatas = scope._parser( buffer, true );

					images[ i ] = {
						width: texDatas.width,
						height: texDatas.height,
						format: texDatas.format,
						mipmaps: texDatas.mipmaps
					};

					loaded += 1;

					if ( loaded === 6 ) {

 						if (texDatas.mipmapCount == 1)
 							texture.minFilter = THREE.LinearFilter;

						texture.format = texDatas.format;
						texture.needsUpdate = true;

						if ( onLoad ) onLoad( texture );

					}

				} );

			};

			for ( var i = 0, il = url.length; i < il; ++ i ) {

				loadTexture( i );

			}

		} else {

			// compressed cubemap texture stored in a single DDS file

			loader.load( url, function ( buffer ) {

				var texDatas = scope._parser( buffer, true );

				if ( texDatas.isCubemap ) {

					var faces = texDatas.mipmaps.length / texDatas.mipmapCount;

					for ( var f = 0; f < faces; f ++ ) {

						images[ f ] = { mipmaps : [] };

						for ( var i = 0; i < texDatas.mipmapCount; i ++ ) {

							images[ f ].mipmaps.push( texDatas.mipmaps[ f * texDatas.mipmapCount + i ] );
							images[ f ].format = texDatas.format;
							images[ f ].width = texDatas.width;
							images[ f ].height = texDatas.height;

						}

					}

				} else {

					texture.image.width = texDatas.width;
					texture.image.height = texDatas.height;
					texture.mipmaps = texDatas.mipmaps;

				}

				if ( texDatas.mipmapCount === 1 ) {

					texture.minFilter = THREE.LinearFilter;

				}

				texture.format = texDatas.format;
				texture.needsUpdate = true;

				if ( onLoad ) onLoad( texture );

			} );

		}

		return texture;

	}

};

// File:src/materials/Material.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Material = function () {

	Object.defineProperty( this, 'id', { value: THREE.MaterialIdCount ++ } );

	this.uuid = THREE.Math.generateUUID();

	this.name = '';
	this.type = 'Material';

	this.side = THREE.FrontSide;

	this.opacity = 1;
	this.transparent = false;

	this.blending = THREE.NormalBlending;

	this.blendSrc = THREE.SrcAlphaFactor;
	this.blendDst = THREE.OneMinusSrcAlphaFactor;
	this.blendEquation = THREE.AddEquation;

	this.depthTest = true;
	this.depthWrite = true;

	this.polygonOffset = false;
	this.polygonOffsetFactor = 0;
	this.polygonOffsetUnits = 0;

	this.alphaTest = 0;

	this.overdraw = 0; // Overdrawn pixels (typically between 0 and 1) for fixing antialiasing gaps in CanvasRenderer

	this.visible = true;

	this.needsUpdate = true;

};

THREE.Material.prototype = {

	constructor: THREE.Material,

	setValues: function ( values ) {

		if ( values === undefined ) return;

		for ( var key in values ) {

			var newValue = values[ key ];

			if ( newValue === undefined ) {

				console.warn( "THREE.Material: '" + key + "' parameter is undefined." );
				continue;

			}

			if ( key in this ) {

				var currentValue = this[ key ];

				if ( currentValue instanceof THREE.Color ) {

					currentValue.set( newValue );

				} else if ( currentValue instanceof THREE.Vector3 && newValue instanceof THREE.Vector3 ) {

					currentValue.copy( newValue );

				} else if ( key == 'overdraw' ) {

					// ensure overdraw is backwards-compatable with legacy boolean type
					this[ key ] = Number( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		}

	},

	toJSON: function () {

		var output = {
			metadata: {
				version: 4.2,
				type: 'material',
				generator: 'MaterialExporter'
			},
			uuid: this.uuid,
			type: this.type
		};

		if ( this.name !== "" ) output.name = this.name;

		if ( this instanceof THREE.MeshBasicMaterial ) {

			output.color = this.color.getHex();
			if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
			if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
			if ( this.side !== THREE.FrontSide ) output.side = this.side;

		} else if ( this instanceof THREE.MeshLambertMaterial ) {

			output.color = this.color.getHex();
			output.ambient = this.ambient.getHex();
			output.emissive = this.emissive.getHex();
			if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
			if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
			if ( this.side !== THREE.FrontSide ) output.side = this.side;

		} else if ( this instanceof THREE.MeshPhongMaterial ) {

			output.color = this.color.getHex();
			output.ambient = this.ambient.getHex();
			output.emissive = this.emissive.getHex();
			output.specular = this.specular.getHex();
			output.shininess = this.shininess;
			if ( this.vertexColors !== THREE.NoColors ) output.vertexColors = this.vertexColors;
			if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
			if ( this.side !== THREE.FrontSide ) output.side = this.side;

		} else if ( this instanceof THREE.MeshNormalMaterial ) {

			if ( this.shading !== THREE.FlatShading ) output.shading = this.shading;
			if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
			if ( this.side !== THREE.FrontSide ) output.side = this.side;

		} else if ( this instanceof THREE.MeshDepthMaterial ) {

			if ( this.blending !== THREE.NormalBlending ) output.blending = this.blending;
			if ( this.side !== THREE.FrontSide ) output.side = this.side;

		} else if ( this instanceof THREE.ShaderMaterial ) {

			output.uniforms = this.uniforms;
			output.vertexShader = this.vertexShader;
			output.fragmentShader = this.fragmentShader;

		} else if ( this instanceof THREE.SpriteMaterial ) {

			output.color = this.color.getHex();

		}

		if ( this.opacity < 1 ) output.opacity = this.opacity;
		if ( this.transparent !== false ) output.transparent = this.transparent;
		if ( this.wireframe !== false ) output.wireframe = this.wireframe;

		return output;

	},

	clone: function ( material ) {

		if ( material === undefined ) material = new THREE.Material();

		material.name = this.name;

		material.side = this.side;

		material.opacity = this.opacity;
		material.transparent = this.transparent;

		material.blending = this.blending;

		material.blendSrc = this.blendSrc;
		material.blendDst = this.blendDst;
		material.blendEquation = this.blendEquation;

		material.depthTest = this.depthTest;
		material.depthWrite = this.depthWrite;

		material.polygonOffset = this.polygonOffset;
		material.polygonOffsetFactor = this.polygonOffsetFactor;
		material.polygonOffsetUnits = this.polygonOffsetUnits;

		material.alphaTest = this.alphaTest;

		material.overdraw = this.overdraw;

		material.visible = this.visible;

		return material;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Material.prototype );

THREE.MaterialIdCount = 0;

// File:src/materials/LineBasicMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *  linecap: "round",
 *  linejoin: "round",
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'LineBasicMaterial';

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;
	this.linecap = 'round';
	this.linejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineBasicMaterial.prototype.clone = function () {

	var material = new THREE.LineBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;
	material.linecap = this.linecap;
	material.linejoin = this.linejoin;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

// File:src/materials/LineDashedMaterial.js

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  linewidth: <float>,
 *
 *  scale: <float>,
 *  dashSize: <float>,
 *  gapSize: <float>,
 *
 *  vertexColors: <bool>
 *
 *  fog: <bool>
 * }
 */

THREE.LineDashedMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'LineDashedMaterial';

	this.color = new THREE.Color( 0xffffff );

	this.linewidth = 1;

	this.scale = 1;
	this.dashSize = 3;
	this.gapSize = 1;

	this.vertexColors = false;

	this.fog = true;

	this.setValues( parameters );

};

THREE.LineDashedMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.LineDashedMaterial.prototype.clone = function () {

	var material = new THREE.LineDashedMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.linewidth = this.linewidth;

	material.scale = this.scale;
	material.dashSize = this.dashSize;
	material.gapSize = this.gapSize;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

// File:src/materials/MeshBasicMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.MeshBasicMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'MeshBasicMaterial';

	this.color = new THREE.Color( 0xffffff ); // emissive

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;

	this.setValues( parameters );

};

THREE.MeshBasicMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshBasicMaterial.prototype.clone = function () {

	var material = new THREE.MeshBasicMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.alphaMap = this.alphaMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;

	return material;

};

// File:src/materials/MeshLambertMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshLambertMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'MeshLambertMaterial';

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshLambertMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshLambertMaterial.prototype.clone = function () {

	var material = new THREE.MeshLambertMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.specularMap = this.specularMap;

	material.alphaMap = this.alphaMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

// File:src/materials/MeshPhongMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  ambient: <hex>,
 *  emissive: <hex>,
 *  specular: <hex>,
 *  shininess: <float>,
 *  opacity: <float>,
 *
 *  map: new THREE.Texture( <Image> ),
 *
 *  lightMap: new THREE.Texture( <Image> ),
 *
 *  bumpMap: new THREE.Texture( <Image> ),
 *  bumpScale: <float>,
 *
 *  normalMap: new THREE.Texture( <Image> ),
 *  normalScale: <Vector2>,
 *
 *  specularMap: new THREE.Texture( <Image> ),
 *
 *  alphaMap: new THREE.Texture( <Image> ),
 *
 *  envMap: new THREE.TextureCube( [posx, negx, posy, negy, posz, negz] ),
 *  combine: THREE.Multiply,
 *  reflectivity: <float>,
 *  refractionRatio: <float>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.MeshPhongMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'MeshPhongMaterial';

	this.color = new THREE.Color( 0xffffff ); // diffuse
	this.ambient = new THREE.Color( 0xffffff );
	this.emissive = new THREE.Color( 0x000000 );
	this.specular = new THREE.Color( 0x111111 );
	this.shininess = 30;

	this.metal = false;

	this.wrapAround = false;
	this.wrapRGB = new THREE.Vector3( 1, 1, 1 );

	this.map = null;

	this.lightMap = null;

	this.bumpMap = null;
	this.bumpScale = 1;

	this.normalMap = null;
	this.normalScale = new THREE.Vector2( 1, 1 );

	this.specularMap = null;

	this.alphaMap = null;

	this.envMap = null;
	this.combine = THREE.MultiplyOperation;
	this.reflectivity = 1;
	this.refractionRatio = 0.98;

	this.fog = true;

	this.shading = THREE.SmoothShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;
	this.wireframeLinecap = 'round';
	this.wireframeLinejoin = 'round';

	this.vertexColors = THREE.NoColors;

	this.skinning = false;
	this.morphTargets = false;
	this.morphNormals = false;

	this.setValues( parameters );

};

THREE.MeshPhongMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshPhongMaterial.prototype.clone = function () {

	var material = new THREE.MeshPhongMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.ambient.copy( this.ambient );
	material.emissive.copy( this.emissive );
	material.specular.copy( this.specular );
	material.shininess = this.shininess;

	material.metal = this.metal;

	material.wrapAround = this.wrapAround;
	material.wrapRGB.copy( this.wrapRGB );

	material.map = this.map;

	material.lightMap = this.lightMap;

	material.bumpMap = this.bumpMap;
	material.bumpScale = this.bumpScale;

	material.normalMap = this.normalMap;
	material.normalScale.copy( this.normalScale );

	material.specularMap = this.specularMap;

	material.alphaMap = this.alphaMap;

	material.envMap = this.envMap;
	material.combine = this.combine;
	material.reflectivity = this.reflectivity;
	material.refractionRatio = this.refractionRatio;

	material.fog = this.fog;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;
	material.wireframeLinecap = this.wireframeLinecap;
	material.wireframeLinejoin = this.wireframeLinejoin;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;
	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

// File:src/materials/MeshDepthMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshDepthMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'MeshDepthMaterial';

	this.morphTargets = false;
	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.setValues( parameters );

};

THREE.MeshDepthMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshDepthMaterial.prototype.clone = function () {

	var material = new THREE.MeshDepthMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};

// File:src/materials/MeshNormalMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 *
 * parameters = {
 *  opacity: <float>,
 *
 *  shading: THREE.FlatShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>
 * }
 */

THREE.MeshNormalMaterial = function ( parameters ) {

	THREE.Material.call( this, parameters );

	this.type = 'MeshNormalMaterial';

	this.shading = THREE.FlatShading;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.morphTargets = false;

	this.setValues( parameters );

};

THREE.MeshNormalMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.MeshNormalMaterial.prototype.clone = function () {

	var material = new THREE.MeshNormalMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	return material;

};

// File:src/materials/MeshFaceMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.MeshFaceMaterial = function ( materials ) {

	this.uuid = THREE.Math.generateUUID();

	this.type = 'MeshFaceMaterial';
	
	this.materials = materials instanceof Array ? materials : [];

};

THREE.MeshFaceMaterial.prototype = {

	constructor: THREE.MeshFaceMaterial,

	toJSON: function () {

		var output = {
			metadata: {
				version: 4.2,
				type: 'material',
				generator: 'MaterialExporter'
			},
			uuid: this.uuid,
			type: this.type,
			materials: []
		};

		for ( var i = 0, l = this.materials.length; i < l; i ++ ) {

			output.materials.push( this.materials[ i ].toJSON() );

		}

		return output;

	},

	clone: function () {

		var material = new THREE.MeshFaceMaterial();

		for ( var i = 0; i < this.materials.length; i ++ ) {

			material.materials.push( this.materials[ i ].clone() );

		}

		return material;

	}

};

// File:src/materials/PointCloudMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  size: <float>,
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  vertexColors: <bool>,
 *
 *  fog: <bool>
 * }
 */

THREE.PointCloudMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'PointCloudMaterial';

	this.color = new THREE.Color( 0xffffff );

	this.map = null;

	this.size = 1;
	this.sizeAttenuation = true;

	this.vertexColors = THREE.NoColors;

	this.fog = true;

	this.setValues( parameters );

};

THREE.PointCloudMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.PointCloudMaterial.prototype.clone = function () {

	var material = new THREE.PointCloudMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );

	material.map = this.map;

	material.size = this.size;
	material.sizeAttenuation = this.sizeAttenuation;

	material.vertexColors = this.vertexColors;

	material.fog = this.fog;

	return material;

};

// backwards compatibility

THREE.ParticleBasicMaterial = function ( parameters ) {

	console.warn( 'THREE.ParticleBasicMaterial has been renamed to THREE.PointCloudMaterial.' );
	return new THREE.PointCloudMaterial( parameters );

};

THREE.ParticleSystemMaterial = function ( parameters ) {

	console.warn( 'THREE.ParticleSystemMaterial has been renamed to THREE.PointCloudMaterial.' );
	return new THREE.PointCloudMaterial( parameters );

};

// File:src/materials/ShaderMaterial.js

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  defines: { "label" : "value" },
 *  uniforms: { "parameter1": { type: "f", value: 1.0 }, "parameter2": { type: "i" value2: 2 } },
 *
 *  fragmentShader: <string>,
 *  vertexShader: <string>,
 *
 *  shading: THREE.SmoothShading,
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *  wireframe: <boolean>,
 *  wireframeLinewidth: <float>,
 *
 *  lights: <bool>,
 *
 *  vertexColors: THREE.NoColors / THREE.VertexColors / THREE.FaceColors,
 *
 *  skinning: <bool>,
 *  morphTargets: <bool>,
 *  morphNormals: <bool>,
 *
 *	fog: <bool>
 * }
 */

THREE.ShaderMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'ShaderMaterial';

	this.defines = {};
	this.uniforms = {};
	this.attributes = null;

	this.vertexShader = 'void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}';
	this.fragmentShader = 'void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}';

	this.shading = THREE.SmoothShading;

	this.linewidth = 1;

	this.wireframe = false;
	this.wireframeLinewidth = 1;

	this.fog = false; // set to use scene fog

	this.lights = false; // set to use scene lights

	this.vertexColors = THREE.NoColors; // set to use "color" attribute stream

	this.skinning = false; // set to use skinning attribute streams

	this.morphTargets = false; // set to use morph targets
	this.morphNormals = false; // set to use morph normals

	// When rendered geometry doesn't include these attributes but the material does,
	// use these default values in WebGL. This avoids errors when buffer data is missing.
	this.defaultAttributeValues = {
		'color': [ 1, 1, 1 ],
		'uv': [ 0, 0 ],
		'uv2': [ 0, 0 ]
	};

	this.index0AttributeName = undefined;

	this.setValues( parameters );

};

THREE.ShaderMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.ShaderMaterial.prototype.clone = function () {

	var material = new THREE.ShaderMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.fragmentShader = this.fragmentShader;
	material.vertexShader = this.vertexShader;

	material.uniforms = THREE.UniformsUtils.clone( this.uniforms );

	material.attributes = this.attributes;
	material.defines = this.defines;

	material.shading = this.shading;

	material.wireframe = this.wireframe;
	material.wireframeLinewidth = this.wireframeLinewidth;

	material.fog = this.fog;

	material.lights = this.lights;

	material.vertexColors = this.vertexColors;

	material.skinning = this.skinning;

	material.morphTargets = this.morphTargets;
	material.morphNormals = this.morphNormals;

	return material;

};

// File:src/materials/RawShaderMaterial.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.RawShaderMaterial = function ( parameters ) {

	THREE.ShaderMaterial.call( this, parameters );

	this.type = 'RawShaderMaterial';

};

THREE.RawShaderMaterial.prototype = Object.create( THREE.ShaderMaterial.prototype );

THREE.RawShaderMaterial.prototype.clone = function () {

	var material = new THREE.RawShaderMaterial();

	THREE.ShaderMaterial.prototype.clone.call( this, material );

	return material;

};

// File:src/materials/SpriteMaterial.js

/**
 * @author alteredq / http://alteredqualia.com/
 *
 * parameters = {
 *  color: <hex>,
 *  opacity: <float>,
 *  map: new THREE.Texture( <Image> ),
 *
 *  blending: THREE.NormalBlending,
 *  depthTest: <bool>,
 *  depthWrite: <bool>,
 *
 *	uvOffset: new THREE.Vector2(),
 *	uvScale: new THREE.Vector2(),
 *
 *  fog: <bool>
 * }
 */

THREE.SpriteMaterial = function ( parameters ) {

	THREE.Material.call( this );

	this.type = 'SpriteMaterial';

	this.color = new THREE.Color( 0xffffff );
	this.map = null;

	this.rotation = 0;

	this.fog = false;

	// set parameters

	this.setValues( parameters );

};

THREE.SpriteMaterial.prototype = Object.create( THREE.Material.prototype );

THREE.SpriteMaterial.prototype.clone = function () {

	var material = new THREE.SpriteMaterial();

	THREE.Material.prototype.clone.call( this, material );

	material.color.copy( this.color );
	material.map = this.map;

	material.rotation = this.rotation;

	material.fog = this.fog;

	return material;

};

// File:src/textures/Texture.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.Texture = function ( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	Object.defineProperty( this, 'id', { value: THREE.TextureIdCount ++ } );

	this.uuid = THREE.Math.generateUUID();

	this.name = '';

	this.image = image !== undefined ? image : THREE.Texture.DEFAULT_IMAGE;
	this.mipmaps = [];

	this.mapping = mapping !== undefined ? mapping : THREE.Texture.DEFAULT_MAPPING;

	this.wrapS = wrapS !== undefined ? wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = wrapT !== undefined ? wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = magFilter !== undefined ? magFilter : THREE.LinearFilter;
	this.minFilter = minFilter !== undefined ? minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = anisotropy !== undefined ? anisotropy : 1;

	this.format = format !== undefined ? format : THREE.RGBAFormat;
	this.type = type !== undefined ? type : THREE.UnsignedByteType;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.generateMipmaps = true;
	this.premultiplyAlpha = false;
	this.flipY = true;
	this.unpackAlignment = 4; // valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

	this._needsUpdate = false;
	this.onUpdate = null;

};

THREE.Texture.DEFAULT_IMAGE = undefined;
THREE.Texture.DEFAULT_MAPPING = new THREE.UVMapping();

THREE.Texture.prototype = {

	constructor: THREE.Texture,

	get needsUpdate () {

		return this._needsUpdate;

	},

	set needsUpdate ( value ) {

		if ( value === true ) this.update();

		this._needsUpdate = value;

	},

	clone: function ( texture ) {

		if ( texture === undefined ) texture = new THREE.Texture();

		texture.image = this.image;
		texture.mipmaps = this.mipmaps.slice( 0 );

		texture.mapping = this.mapping;

		texture.wrapS = this.wrapS;
		texture.wrapT = this.wrapT;

		texture.magFilter = this.magFilter;
		texture.minFilter = this.minFilter;

		texture.anisotropy = this.anisotropy;

		texture.format = this.format;
		texture.type = this.type;

		texture.offset.copy( this.offset );
		texture.repeat.copy( this.repeat );

		texture.generateMipmaps = this.generateMipmaps;
		texture.premultiplyAlpha = this.premultiplyAlpha;
		texture.flipY = this.flipY;
		texture.unpackAlignment = this.unpackAlignment;

		return texture;

	},

	update: function () {

		this.dispatchEvent( { type: 'update' } );

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.Texture.prototype );

THREE.TextureIdCount = 0;

// File:src/textures/CubeTexture.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CubeTexture = function ( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	THREE.Texture.call( this, images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.images = images;

};

THREE.CubeTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.CubeTexture.clone = function ( texture ) {

	if ( texture === undefined ) texture = new THREE.CubeTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	texture.images = this.images;

	return texture;

};

// File:src/textures/CompressedTexture.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.CompressedTexture = function ( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { width: width, height: height };
	this.mipmaps = mipmaps;

	// no flipping for cube textures
	// (also flipping doesn't work for compressed textures )

	this.flipY = false;

	// can't generate mipmaps for compressed textures
	// mips must be embedded in DDS files

	this.generateMipmaps = false;

};

THREE.CompressedTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.CompressedTexture.prototype.clone = function () {

	var texture = new THREE.CompressedTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};

// File:src/textures/DataTexture.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.DataTexture = function ( data, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy ) {

	THREE.Texture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.image = { data: data, width: width, height: height };

};

THREE.DataTexture.prototype = Object.create( THREE.Texture.prototype );

THREE.DataTexture.prototype.clone = function () {

	var texture = new THREE.DataTexture();

	THREE.Texture.prototype.clone.call( this, texture );

	return texture;

};

// File:src/textures/VideoTexture.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.VideoTexture = function ( video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy ) {

	THREE.Texture.call( this, video, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

	this.generateMipmaps = false;

	var scope = this;

	var update = function () {

		requestAnimationFrame( update );

		if ( video.readyState === video.HAVE_ENOUGH_DATA ) {

			scope.needsUpdate = true;

		}

	};

	update();

};

THREE.VideoTexture.prototype = Object.create( THREE.Texture.prototype );

// File:src/objects/Group.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Group = function () {

	THREE.Object3D.call( this );

	this.type = 'Group';

};

THREE.Group.prototype = Object.create( THREE.Object3D.prototype );

// File:src/objects/PointCloud.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.PointCloud = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.type = 'PointCloud';

	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.PointCloudMaterial( { color: Math.random() * 0xffffff } );

	this.sortParticles = false;

};

THREE.PointCloud.prototype = Object.create( THREE.Object3D.prototype );

THREE.PointCloud.prototype.raycast = ( function () {

	var inverseMatrix = new THREE.Matrix4();
	var ray = new THREE.Ray();

	return function ( raycaster, intersects ) {

		var object = this;
		var geometry = object.geometry;
		var threshold = raycaster.params.PointCloud.threshold;

		inverseMatrix.getInverse( this.matrixWorld );
		ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

		if ( geometry.boundingBox !== null ) {

			if ( ray.isIntersectionBox( geometry.boundingBox ) === false ) {

				return;

			}

		}

		var localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
		var position = new THREE.Vector3();

		var testPoint = function ( point, index ) {

			var rayPointDistance = ray.distanceToPoint( point );

			if ( rayPointDistance < localThreshold ) {

				var intersectPoint = ray.closestPointToPoint( point );
				intersectPoint.applyMatrix4( object.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectPoint );

				intersects.push( {

					distance: distance,
					distanceToRay: rayPointDistance,
					point: intersectPoint.clone(),
					index: index,
					face: null,
					object: object

				} );

			}

		};

		if ( geometry instanceof THREE.BufferGeometry ) {

			var attributes = geometry.attributes;
			var positions = attributes.position.array;

			if ( attributes.index !== undefined ) {

				var indices = attributes.index.array;
				var offsets = geometry.offsets;

				if ( offsets.length === 0 ) {

					var offset = {
						start: 0,
						count: indices.length,
						index: 0
					};

					offsets = [ offset ];

				}

				for ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {

					var start = offsets[ oi ].start;
					var count = offsets[ oi ].count;
					var index = offsets[ oi ].index;

					for ( var i = start, il = start + count; i < il; i ++ ) {

						var a = index + indices[ i ];

						position.fromArray( positions, a * 3 );

						testPoint( position, a );

					}

				}

			} else {

				var pointCount = positions.length / 3;

				for ( var i = 0; i < pointCount; i ++ ) {

					position.set(
						positions[ 3 * i ],
						positions[ 3 * i + 1 ],
						positions[ 3 * i + 2 ]
					);

					testPoint( position, i );

				}

			}

		} else {

			var vertices = this.geometry.vertices;

			for ( var i = 0; i < vertices.length; i ++ ) {

				testPoint( vertices[ i ], i );

			}

		}

	};

}() );

THREE.PointCloud.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.PointCloud( this.geometry, this.material );

	object.sortParticles = this.sortParticles;

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

// Backwards compatibility

THREE.ParticleSystem = function ( geometry, material ) {

	console.warn( 'THREE.ParticleSystem has been renamed to THREE.PointCloud.' );
	return new THREE.PointCloud( geometry, material );

};

// File:src/objects/Line.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Line = function ( geometry, material, mode ) {

	THREE.Object3D.call( this );

	this.type = 'Line';

	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.LineBasicMaterial( { color: Math.random() * 0xffffff } );

	this.mode = ( mode !== undefined ) ? mode : THREE.LineStrip;

};

THREE.LineStrip = 0;
THREE.LinePieces = 1;

THREE.Line.prototype = Object.create( THREE.Object3D.prototype );

THREE.Line.prototype.raycast = ( function () {

	var inverseMatrix = new THREE.Matrix4();
	var ray = new THREE.Ray();
	var sphere = new THREE.Sphere();

	return function ( raycaster, intersects ) {

		var precision = raycaster.linePrecision;
		var precisionSq = precision * precision;

		var geometry = this.geometry;

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		// Checking boundingSphere distance to ray

		sphere.copy( geometry.boundingSphere );
		sphere.applyMatrix4( this.matrixWorld );

		if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

			return;

		}

		inverseMatrix.getInverse( this.matrixWorld );
		ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

		/* if ( geometry instanceof THREE.BufferGeometry ) {

		} else */ if ( geometry instanceof THREE.Geometry ) {

			var vertices = geometry.vertices;
			var nbVertices = vertices.length;
			var interSegment = new THREE.Vector3();
			var interRay = new THREE.Vector3();
			var step = this.mode === THREE.LineStrip ? 1 : 2;

			for ( var i = 0; i < nbVertices - 1; i = i + step ) {

				var distSq = ray.distanceSqToSegment( vertices[ i ], vertices[ i + 1 ], interRay, interSegment );

				if ( distSq > precisionSq ) continue;

				var distance = ray.origin.distanceTo( interRay );

				if ( distance < raycaster.near || distance > raycaster.far ) continue;

				intersects.push( {

					distance: distance,
					// What do we want? intersection point on the ray or on the segment??
					// point: raycaster.ray.at( distance ),
					point: interSegment.clone().applyMatrix4( this.matrixWorld ),
					face: null,
					faceIndex: null,
					object: this

				} );

			}

		}

	};

}() );

THREE.Line.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Line( this.geometry, this.material, this.mode );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

// File:src/objects/Mesh.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author mikael emtinger / http://gomo.se/
 * @author jonobr1 / http://jonobr1.com/
 */

THREE.Mesh = function ( geometry, material ) {

	THREE.Object3D.call( this );

	this.type = 'Mesh';
	
	this.geometry = geometry !== undefined ? geometry : new THREE.Geometry();
	this.material = material !== undefined ? material : new THREE.MeshBasicMaterial( { color: Math.random() * 0xffffff } );

	this.updateMorphTargets();

};

THREE.Mesh.prototype = Object.create( THREE.Object3D.prototype );

THREE.Mesh.prototype.updateMorphTargets = function () {

	if ( this.geometry.morphTargets !== undefined && this.geometry.morphTargets.length > 0 ) {

		this.morphTargetBase = - 1;
		this.morphTargetForcedOrder = [];
		this.morphTargetInfluences = [];
		this.morphTargetDictionary = {};

		for ( var m = 0, ml = this.geometry.morphTargets.length; m < ml; m ++ ) {

			this.morphTargetInfluences.push( 0 );
			this.morphTargetDictionary[ this.geometry.morphTargets[ m ].name ] = m;

		}

	}

};

THREE.Mesh.prototype.getMorphTargetIndexByName = function ( name ) {

	if ( this.morphTargetDictionary[ name ] !== undefined ) {

		return this.morphTargetDictionary[ name ];

	}

	console.log( 'THREE.Mesh.getMorphTargetIndexByName: morph target ' + name + ' does not exist. Returning 0.' );

	return 0;

};


THREE.Mesh.prototype.raycast = ( function () {

	var inverseMatrix = new THREE.Matrix4();
	var ray = new THREE.Ray();
	var sphere = new THREE.Sphere();

	var vA = new THREE.Vector3();
	var vB = new THREE.Vector3();
	var vC = new THREE.Vector3();

	return function ( raycaster, intersects ) {

		var geometry = this.geometry;

		// Checking boundingSphere distance to ray

		if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

		sphere.copy( geometry.boundingSphere );
		sphere.applyMatrix4( this.matrixWorld );

		if ( raycaster.ray.isIntersectionSphere( sphere ) === false ) {

			return;

		}

		// Check boundingBox before continuing

		inverseMatrix.getInverse( this.matrixWorld );
		ray.copy( raycaster.ray ).applyMatrix4( inverseMatrix );

		if ( geometry.boundingBox !== null ) {

			if ( ray.isIntersectionBox( geometry.boundingBox ) === false )  {

				return;

			}

		}

		if ( geometry instanceof THREE.BufferGeometry ) {

			var material = this.material;

			if ( material === undefined ) return;

			var attributes = geometry.attributes;

			var a, b, c;
			var precision = raycaster.precision;

			if ( attributes.index !== undefined ) {

				var indices = attributes.index.array;
				var positions = attributes.position.array;
				var offsets = geometry.offsets;

				if ( offsets.length === 0 ) {

					offsets = [ { start: 0, count: indices.length, index: 0 } ];

				}

				for ( var oi = 0, ol = offsets.length; oi < ol; ++oi ) {

					var start = offsets[ oi ].start;
					var count = offsets[ oi ].count;
					var index = offsets[ oi ].index;

					for ( var i = start, il = start + count; i < il; i += 3 ) {

						a = index + indices[ i ];
						b = index + indices[ i + 1 ];
						c = index + indices[ i + 2 ];

						vA.fromArray( positions, a * 3 );
						vB.fromArray( positions, b * 3 );
						vC.fromArray( positions, c * 3 );

						if ( material.side === THREE.BackSide ) {

							var intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );

						} else {

							var intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

						}

						if ( intersectionPoint === null ) continue;

						intersectionPoint.applyMatrix4( this.matrixWorld );

						var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

						if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

						intersects.push( {

							distance: distance,
							point: intersectionPoint,
							face: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),
							faceIndex: null,
							object: this

						} );

					}

				}

			} else {

				var positions = attributes.position.array;

				for ( var i = 0, j = 0, il = positions.length; i < il; i += 3, j += 9 ) {

					a = i;
					b = i + 1;
					c = i + 2;

					vA.fromArray( positions, j );
					vB.fromArray( positions, j + 3 );
					vC.fromArray( positions, j + 6 );

					if ( material.side === THREE.BackSide ) {

						var intersectionPoint = ray.intersectTriangle( vC, vB, vA, true );

					} else {

						var intersectionPoint = ray.intersectTriangle( vA, vB, vC, material.side !== THREE.DoubleSide );

					}

					if ( intersectionPoint === null ) continue;

					intersectionPoint.applyMatrix4( this.matrixWorld );

					var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

					if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						point: intersectionPoint,
						face: new THREE.Face3( a, b, c, THREE.Triangle.normal( vA, vB, vC ) ),
						faceIndex: null,
						object: this

					} );

				}

			}

		} else if ( geometry instanceof THREE.Geometry ) {

			var isFaceMaterial = this.material instanceof THREE.MeshFaceMaterial;
			var objectMaterials = isFaceMaterial === true ? this.material.materials : null;

			var a, b, c, d;
			var precision = raycaster.precision;

			var vertices = geometry.vertices;

			for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

				var face = geometry.faces[ f ];

				var material = isFaceMaterial === true ? objectMaterials[ face.materialIndex ] : this.material;

				if ( material === undefined ) continue;

				a = vertices[ face.a ];
				b = vertices[ face.b ];
				c = vertices[ face.c ];

				if ( material.morphTargets === true ) {

					var morphTargets = geometry.morphTargets;
					var morphInfluences = this.morphTargetInfluences;

					vA.set( 0, 0, 0 );
					vB.set( 0, 0, 0 );
					vC.set( 0, 0, 0 );

					for ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {

						var influence = morphInfluences[ t ];

						if ( influence === 0 ) continue;

						var targets = morphTargets[ t ].vertices;

						vA.x += ( targets[ face.a ].x - a.x ) * influence;
						vA.y += ( targets[ face.a ].y - a.y ) * influence;
						vA.z += ( targets[ face.a ].z - a.z ) * influence;

						vB.x += ( targets[ face.b ].x - b.x ) * influence;
						vB.y += ( targets[ face.b ].y - b.y ) * influence;
						vB.z += ( targets[ face.b ].z - b.z ) * influence;

						vC.x += ( targets[ face.c ].x - c.x ) * influence;
						vC.y += ( targets[ face.c ].y - c.y ) * influence;
						vC.z += ( targets[ face.c ].z - c.z ) * influence;

					}

					vA.add( a );
					vB.add( b );
					vC.add( c );

					a = vA;
					b = vB;
					c = vC;

				}

				if ( material.side === THREE.BackSide ) {

					var intersectionPoint = ray.intersectTriangle( c, b, a, true );

				} else {

					var intersectionPoint = ray.intersectTriangle( a, b, c, material.side !== THREE.DoubleSide );

				}

				if ( intersectionPoint === null ) continue;

				intersectionPoint.applyMatrix4( this.matrixWorld );

				var distance = raycaster.ray.origin.distanceTo( intersectionPoint );

				if ( distance < precision || distance < raycaster.near || distance > raycaster.far ) continue;

				intersects.push( {

					distance: distance,
					point: intersectionPoint,
					face: face,
					faceIndex: f,
					object: this

				} );

			}

		}

	};

}() );

THREE.Mesh.prototype.clone = function ( object, recursive ) {

	if ( object === undefined ) object = new THREE.Mesh( this.geometry, this.material );

	THREE.Object3D.prototype.clone.call( this, object, recursive );

	return object;

};

// File:src/objects/Bone.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

THREE.Bone = function ( belongsToSkin ) {

	THREE.Object3D.call( this );

	this.skin = belongsToSkin;

};

THREE.Bone.prototype = Object.create( THREE.Object3D.prototype );


// File:src/objects/Skeleton.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author michael guerrero / http://realitymeltdown.com
 * @author ikerr / http://verold.com
 */

THREE.Skeleton = function ( bones, boneInverses, useVertexTexture ) {

	this.useVertexTexture = useVertexTexture !== undefined ? useVertexTexture : true;

	this.identityMatrix = new THREE.Matrix4();

	// copy the bone array

	bones = bones || [];

	this.bones = bones.slice( 0 );

	// create a bone texture or an array of floats

	if ( this.useVertexTexture ) {

		// layout (1 matrix = 4 pixels)
		//      RGBA RGBA RGBA RGBA (=> column1, column2, column3, column4)
		//  with  8x8  pixel texture max   16 bones  (8 * 8  / 4)
		//       16x16 pixel texture max   64 bones (16 * 16 / 4)
		//       32x32 pixel texture max  256 bones (32 * 32 / 4)
		//       64x64 pixel texture max 1024 bones (64 * 64 / 4)

		var size;

		if ( this.bones.length > 256 )
			size = 64;
		else if ( this.bones.length > 64 )
			size = 32;
		else if ( this.bones.length > 16 )
			size = 16;
		else
			size = 8;

		this.boneTextureWidth = size;
		this.boneTextureHeight = size;

		this.boneMatrices = new Float32Array( this.boneTextureWidth * this.boneTextureHeight * 4 ); // 4 floats per RGBA pixel
		this.boneTexture = new THREE.DataTexture( this.boneMatrices, this.boneTextureWidth, this.boneTextureHeight, THREE.RGBAFormat, THREE.FloatType );
		this.boneTexture.minFilter = THREE.NearestFilter;
		this.boneTexture.magFilter = THREE.NearestFilter;
		this.boneTexture.generateMipmaps = false;
		this.boneTexture.flipY = false;

	} else {

		this.boneMatrices = new Float32Array( 16 * this.bones.length );

	}

	// use the supplied bone inverses or calculate the inverses

	if ( boneInverses === undefined ) {

		this.calculateInverses();

	} else {

		if ( this.bones.length === boneInverses.length ) {

			this.boneInverses = boneInverses.slice( 0 );

		} else {

			console.warn( 'THREE.Skeleton bonInverses is the wrong length.' );

			this.boneInverses = [];

			for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

				this.boneInverses.push( new THREE.Matrix4() );

			}

		}

	}

};

THREE.Skeleton.prototype.calculateInverses = function () {

	this.boneInverses = [];

	for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

		var inverse = new THREE.Matrix4();

		if ( this.bones[ b ] ) {

			inverse.getInverse( this.bones[ b ].matrixWorld );

		}

		this.boneInverses.push( inverse );

	}

};

THREE.Skeleton.prototype.pose = function () {

	var bone;

	// recover the bind-time world matrices

	for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

		bone = this.bones[ b ];

		if ( bone ) {

			bone.matrixWorld.getInverse( this.boneInverses[ b ] );

		}

	}

	// compute the local matrices, positions, rotations and scales

	for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

		bone = this.bones[ b ];

		if ( bone ) {

			if ( bone.parent ) {

				bone.matrix.getInverse( bone.parent.matrixWorld );
				bone.matrix.multiply( bone.matrixWorld );

			} else {

				bone.matrix.copy( bone.matrixWorld );

			}

			bone.matrix.decompose( bone.position, bone.quaternion, bone.scale );

		}

	}

};

THREE.Skeleton.prototype.update = ( function () {

	var offsetMatrix = new THREE.Matrix4();
	
	return function () {

		// flatten bone matrices to array

		for ( var b = 0, bl = this.bones.length; b < bl; b ++ ) {

			// compute the offset between the current and the original transform

			var matrix = this.bones[ b ] ? this.bones[ b ].matrixWorld : this.identityMatrix;

			offsetMatrix.multiplyMatrices( matrix, this.boneInverses[ b ] );
			offsetMatrix.flattenToArrayOffset( this.boneMatrices, b * 16 );

		}

		if ( this.useVertexTexture ) {

			this.boneTexture.needsUpdate = true;

		}
		
	};

} )();


// File:src/objects/SkinnedMesh.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author ikerr / http://verold.com
 */

THREE.SkinnedMesh = function ( geometry, material, useVertexTexture ) {

	THREE.Mesh.call( this, geometry, material );

	this.type = 'SkinnedMesh';

	this.bindMode = "attached";
	this.bindMatrix = new THREE.Matrix4();
	this.bindMatrixInverse = new THREE.Matrix4();

	// init bones

	// TODO: remove bone creation as there is no reason (other than
	// convenience) for THREE.SkinnedMesh to do this.

	var bones = [];

	if ( this.geometry && this.geometry.bones !== undefined ) {

		var bone, gbone, p, q, s;

		for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {

			gbone = this.geometry.bones[ b ];

			p = gbone.pos;
			q = gbone.rotq;
			s = gbone.scl;

			bone = new THREE.Bone( this );
			bones.push( bone );

			bone.name = gbone.name;
			bone.position.set( p[ 0 ], p[ 1 ], p[ 2 ] );
			bone.quaternion.set( q[ 0 ], q[ 1 ], q[ 2 ], q[ 3 ] );

			if ( s !== undefined ) {

				bone.scale.set( s[ 0 ], s[ 1 ], s[ 2 ] );

			} else {

				bone.scale.set( 1, 1, 1 );

			}

		}

		for ( var b = 0, bl = this.geometry.bones.length; b < bl; ++b ) {

			gbone = this.geometry.bones[ b ];

			if ( gbone.parent !== - 1 ) {

				bones[ gbone.parent ].add( bones[ b ] );

			} else {

				this.add( bones[ b ] );

			}

		}

	}

	this.normalizeSkinWeights();

	this.updateMatrixWorld( true );
	this.bind( new THREE.Skeleton( bones, undefined, useVertexTexture ) );

};


THREE.SkinnedMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.SkinnedMesh.prototype.bind = function( skeleton, bindMatrix ) {

	this.skeleton = skeleton;

	if ( bindMatrix === undefined ) {

		this.updateMatrixWorld( true );

		bindMatrix = this.matrixWorld;

	}

	this.bindMatrix.copy( bindMatrix );
	this.bindMatrixInverse.getInverse( bindMatrix );

};

THREE.SkinnedMesh.prototype.pose = function () {

	this.skeleton.pose();

};

THREE.SkinnedMesh.prototype.normalizeSkinWeights = function () {

	if ( this.geometry instanceof THREE.Geometry ) {

		for ( var i = 0; i < this.geometry.skinIndices.length; i ++ ) {

			var sw = this.geometry.skinWeights[ i ];

			var scale = 1.0 / sw.lengthManhattan();

			if ( scale !== Infinity ) {

				sw.multiplyScalar( scale );

			} else {

				sw.set( 1 ); // this will be normalized by the shader anyway

			}

		}

	} else {

		// skinning weights assumed to be normalized for THREE.BufferGeometry

	}

};

THREE.SkinnedMesh.prototype.updateMatrixWorld = function( force ) {

	THREE.Mesh.prototype.updateMatrixWorld.call( this, true );

	if ( this.bindMode === "attached" ) {

		this.bindMatrixInverse.getInverse( this.matrixWorld );

	} else if ( this.bindMode === "detached" ) {

		this.bindMatrixInverse.getInverse( this.bindMatrix );

	} else {

		console.warn( 'THREE.SkinnedMesh unreckognized bindMode: ' + this.bindMode );

	}

};

THREE.SkinnedMesh.prototype.clone = function( object ) {

	if ( object === undefined ) {

		object = new THREE.SkinnedMesh( this.geometry, this.material, this.useVertexTexture );

	}

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};


// File:src/objects/MorphAnimMesh.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphAnimMesh = function ( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	this.type = 'MorphAnimMesh';

	// API

	this.duration = 1000; // milliseconds
	this.mirroredLoop = false;
	this.time = 0;

	// internals

	this.lastKeyframe = 0;
	this.currentKeyframe = 0;

	this.direction = 1;
	this.directionBackwards = false;

	this.setFrameRange( 0, this.geometry.morphTargets.length - 1 );

};

THREE.MorphAnimMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphAnimMesh.prototype.setFrameRange = function ( start, end ) {

	this.startKeyframe = start;
	this.endKeyframe = end;

	this.length = this.endKeyframe - this.startKeyframe + 1;

};

THREE.MorphAnimMesh.prototype.setDirectionForward = function () {

	this.direction = 1;
	this.directionBackwards = false;

};

THREE.MorphAnimMesh.prototype.setDirectionBackward = function () {

	this.direction = - 1;
	this.directionBackwards = true;

};

THREE.MorphAnimMesh.prototype.parseAnimations = function () {

	var geometry = this.geometry;

	if ( ! geometry.animations ) geometry.animations = {};

	var firstAnimation, animations = geometry.animations;

	var pattern = /([a-z]+)_?(\d+)/;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var parts = morph.name.match( pattern );

		if ( parts && parts.length > 1 ) {

			var label = parts[ 1 ];
			var num = parts[ 2 ];

			if ( ! animations[ label ] ) animations[ label ] = { start: Infinity, end: - Infinity };

			var animation = animations[ label ];

			if ( i < animation.start ) animation.start = i;
			if ( i > animation.end ) animation.end = i;

			if ( ! firstAnimation ) firstAnimation = label;

		}

	}

	geometry.firstAnimation = firstAnimation;

};

THREE.MorphAnimMesh.prototype.setAnimationLabel = function ( label, start, end ) {

	if ( ! this.geometry.animations ) this.geometry.animations = {};

	this.geometry.animations[ label ] = { start: start, end: end };

};

THREE.MorphAnimMesh.prototype.playAnimation = function ( label, fps ) {

	var animation = this.geometry.animations[ label ];

	if ( animation ) {

		this.setFrameRange( animation.start, animation.end );
		this.duration = 1000 * ( ( animation.end - animation.start ) / fps );
		this.time = 0;

	} else {

		console.warn( 'animation[' + label + '] undefined' );

	}

};

THREE.MorphAnimMesh.prototype.updateAnimation = function ( delta ) {

	var frameTime = this.duration / this.length;

	this.time += this.direction * delta;

	if ( this.mirroredLoop ) {

		if ( this.time > this.duration || this.time < 0 ) {

			this.direction *= - 1;

			if ( this.time > this.duration ) {

				this.time = this.duration;
				this.directionBackwards = true;

			}

			if ( this.time < 0 ) {

				this.time = 0;
				this.directionBackwards = false;

			}

		}

	} else {

		this.time = this.time % this.duration;

		if ( this.time < 0 ) this.time += this.duration;

	}

	var keyframe = this.startKeyframe + THREE.Math.clamp( Math.floor( this.time / frameTime ), 0, this.length - 1 );

	if ( keyframe !== this.currentKeyframe ) {

		this.morphTargetInfluences[ this.lastKeyframe ] = 0;
		this.morphTargetInfluences[ this.currentKeyframe ] = 1;

		this.morphTargetInfluences[ keyframe ] = 0;

		this.lastKeyframe = this.currentKeyframe;
		this.currentKeyframe = keyframe;

	}

	var mix = ( this.time % frameTime ) / frameTime;

	if ( this.directionBackwards ) {

		mix = 1 - mix;

	}

	this.morphTargetInfluences[ this.currentKeyframe ] = mix;
	this.morphTargetInfluences[ this.lastKeyframe ] = 1 - mix;

};

THREE.MorphAnimMesh.prototype.interpolateTargets = function ( a, b, t ) {

	var influences = this.morphTargetInfluences;

	for ( var i = 0, l = influences.length; i < l; i ++ ) {

		influences[ i ] = 0;

	}

	if ( a > -1 ) influences[ a ] = 1 - t;
	if ( b > -1 ) influences[ b ] = t;

};

THREE.MorphAnimMesh.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.MorphAnimMesh( this.geometry, this.material );

	object.duration = this.duration;
	object.mirroredLoop = this.mirroredLoop;
	object.time = this.time;

	object.lastKeyframe = this.lastKeyframe;
	object.currentKeyframe = this.currentKeyframe;

	object.direction = this.direction;
	object.directionBackwards = this.directionBackwards;

	THREE.Mesh.prototype.clone.call( this, object );

	return object;

};

// File:src/objects/LOD.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.LOD = function () {

	THREE.Object3D.call( this );

	this.objects = [];

};


THREE.LOD.prototype = Object.create( THREE.Object3D.prototype );

THREE.LOD.prototype.addLevel = function ( object, distance ) {

	if ( distance === undefined ) distance = 0;

	distance = Math.abs( distance );

	for ( var l = 0; l < this.objects.length; l ++ ) {

		if ( distance < this.objects[ l ].distance ) {

			break;

		}

	}

	this.objects.splice( l, 0, { distance: distance, object: object } );
	this.add( object );

};

THREE.LOD.prototype.getObjectForDistance = function ( distance ) {

	for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

		if ( distance < this.objects[ i ].distance ) {

			break;

		}

	}

	return this.objects[ i - 1 ].object;

};

THREE.LOD.prototype.raycast = ( function () {

	var matrixPosition = new THREE.Vector3();

	return function ( raycaster, intersects ) {

		matrixPosition.setFromMatrixPosition( this.matrixWorld );

		var distance = raycaster.ray.origin.distanceTo( matrixPosition );

		this.getObjectForDistance( distance ).raycast( raycaster, intersects );

	};

}() );

THREE.LOD.prototype.update = function () {

	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();

	return function ( camera ) {

		if ( this.objects.length > 1 ) {

			v1.setFromMatrixPosition( camera.matrixWorld );
			v2.setFromMatrixPosition( this.matrixWorld );

			var distance = v1.distanceTo( v2 );

			this.objects[ 0 ].object.visible = true;

			for ( var i = 1, l = this.objects.length; i < l; i ++ ) {

				if ( distance >= this.objects[ i ].distance ) {

					this.objects[ i - 1 ].object.visible = false;
					this.objects[ i     ].object.visible = true;

				} else {

					break;

				}

			}

			for ( ; i < l; i ++ ) {

				this.objects[ i ].object.visible = false;

			}

		}

	};

}();

THREE.LOD.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.LOD();

	THREE.Object3D.prototype.clone.call( this, object );

	for ( var i = 0, l = this.objects.length; i < l; i ++ ) {
		var x = this.objects[ i ].object.clone();
		x.visible = i === 0;
		object.addLevel( x, this.objects[ i ].distance );
	}

	return object;

};

// File:src/objects/Sprite.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Sprite = ( function () {

	var indices = new Uint16Array( [ 0, 1, 2,  0, 2, 3 ] );
	var vertices = new Float32Array( [ - 0.5, - 0.5, 0,   0.5, - 0.5, 0,   0.5, 0.5, 0,   - 0.5, 0.5, 0 ] );
	var uvs = new Float32Array( [ 0, 0,   1, 0,   1, 1,   0, 1 ] );

	var geometry = new THREE.BufferGeometry();
	geometry.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );
	geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

	return function ( material ) {

		THREE.Object3D.call( this );

		this.type = 'Sprite';

		this.geometry = geometry;
		this.material = ( material !== undefined ) ? material : new THREE.SpriteMaterial();

	};

} )();

THREE.Sprite.prototype = Object.create( THREE.Object3D.prototype );

THREE.Sprite.prototype.raycast = ( function () {

	var matrixPosition = new THREE.Vector3();

	return function ( raycaster, intersects ) {

		matrixPosition.setFromMatrixPosition( this.matrixWorld );

		var distance = raycaster.ray.distanceToPoint( matrixPosition );

		if ( distance > this.scale.x ) {

			return;

		}

		intersects.push( {

			distance: distance,
			point: this.position,
			face: null,
			object: this

		} );

	};

}() );

THREE.Sprite.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Sprite( this.material );

	THREE.Object3D.prototype.clone.call( this, object );

	return object;

};

// Backwards compatibility

THREE.Particle = THREE.Sprite;

// File:src/objects/LensFlare.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlare = function ( texture, size, distance, blending, color ) {

	THREE.Object3D.call( this );

	this.lensFlares = [];

	this.positionScreen = new THREE.Vector3();
	this.customUpdateCallback = undefined;

	if( texture !== undefined ) {

		this.add( texture, size, distance, blending, color );

	}

};

THREE.LensFlare.prototype = Object.create( THREE.Object3D.prototype );


/*
 * Add: adds another flare
 */

THREE.LensFlare.prototype.add = function ( texture, size, distance, blending, color, opacity ) {

	if ( size === undefined ) size = - 1;
	if ( distance === undefined ) distance = 0;
	if ( opacity === undefined ) opacity = 1;
	if ( color === undefined ) color = new THREE.Color( 0xffffff );
	if ( blending === undefined ) blending = THREE.NormalBlending;

	distance = Math.min( distance, Math.max( 0, distance ) );

	this.lensFlares.push( {
		texture: texture, 			// THREE.Texture
		size: size, 				// size in pixels (-1 = use texture.width)
		distance: distance, 		// distance (0-1) from light source (0=at light source)
		x: 0, y: 0, z: 0,			// screen position (-1 => 1) z = 0 is ontop z = 1 is back
		scale: 1, 					// scale
		rotation: 1, 				// rotation
		opacity: opacity,			// opacity
		color: color,				// color
		blending: blending			// blending
	} );

};

/*
 * Update lens flares update positions on all flares based on the screen position
 * Set myLensFlare.customUpdateCallback to alter the flares in your project specific way.
 */

THREE.LensFlare.prototype.updateLensFlares = function () {

	var f, fl = this.lensFlares.length;
	var flare;
	var vecX = - this.positionScreen.x * 2;
	var vecY = - this.positionScreen.y * 2;

	for( f = 0; f < fl; f ++ ) {

		flare = this.lensFlares[ f ];

		flare.x = this.positionScreen.x + vecX * flare.distance;
		flare.y = this.positionScreen.y + vecY * flare.distance;

		flare.wantedRotation = flare.x * Math.PI * 0.25;
		flare.rotation += ( flare.wantedRotation - flare.rotation ) * 0.25;

	}

};


// File:src/scenes/Scene.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Scene = function () {

	THREE.Object3D.call( this );

	this.type = 'Scene';

	this.fog = null;
	this.overrideMaterial = null;

	this.autoUpdate = true; // checked by the renderer

};

THREE.Scene.prototype = Object.create( THREE.Object3D.prototype );

THREE.Scene.prototype.clone = function ( object ) {

	if ( object === undefined ) object = new THREE.Scene();

	THREE.Object3D.prototype.clone.call( this, object );

	if ( this.fog !== null ) object.fog = this.fog.clone();
	if ( this.overrideMaterial !== null ) object.overrideMaterial = this.overrideMaterial.clone();

	object.autoUpdate = this.autoUpdate;
	object.matrixAutoUpdate = this.matrixAutoUpdate;

	return object;

};

// File:src/scenes/Fog.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Fog = function ( color, near, far ) {

	this.name = '';

	this.color = new THREE.Color( color );

	this.near = ( near !== undefined ) ? near : 1;
	this.far = ( far !== undefined ) ? far : 1000;

};

THREE.Fog.prototype.clone = function () {

	return new THREE.Fog( this.color.getHex(), this.near, this.far );

};

// File:src/scenes/FogExp2.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.FogExp2 = function ( color, density ) {

	this.name = '';

	this.color = new THREE.Color( color );
	this.density = ( density !== undefined ) ? density : 0.00025;

};

THREE.FogExp2.prototype.clone = function () {

	return new THREE.FogExp2( this.color.getHex(), this.density );

};

// File:src/renderers/shaders/ShaderChunk.js

THREE.ShaderChunk = {};

// File:src/renderers/shaders/ShaderChunk/alphatest_fragment.glsl

THREE.ShaderChunk[ 'alphatest_fragment'] = "#ifdef ALPHATEST\n\n	if ( gl_FragColor.a < ALPHATEST ) discard;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/lights_lambert_vertex.glsl

THREE.ShaderChunk[ 'lights_lambert_vertex'] = "vLightFront = vec3( 0.0 );\n\n#ifdef DOUBLE_SIDED\n\n	vLightBack = vec3( 0.0 );\n\n#endif\n\ntransformedNormal = normalize( transformedNormal );\n\n#if MAX_DIR_LIGHTS > 0\n\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n	vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n	vec3 dirVector = normalize( lDirection.xyz );\n\n	float dotProduct = dot( transformedNormal, dirVector );\n	vec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n	#ifdef DOUBLE_SIDED\n\n		vec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n		#ifdef WRAP_AROUND\n\n			vec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n		#endif\n\n	#endif\n\n	#ifdef WRAP_AROUND\n\n		vec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n		directionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n\n		#ifdef DOUBLE_SIDED\n\n			directionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n\n		#endif\n\n	#endif\n\n	vLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n\n	#ifdef DOUBLE_SIDED\n\n		vLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n\n	#endif\n\n}\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	for( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( pointLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n		float dotProduct = dot( transformedNormal, lVector );\n\n		vec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n		#ifdef DOUBLE_SIDED\n\n			vec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n			#ifdef WRAP_AROUND\n\n				vec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n			#endif\n\n		#endif\n\n		#ifdef WRAP_AROUND\n\n			vec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n			pointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n\n			#ifdef DOUBLE_SIDED\n\n				pointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n\n			#endif\n\n		#endif\n\n		vLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n\n		#endif\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	for( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz - mvPosition.xyz;\n\n		float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n			float lDistance = 1.0;\n			if ( spotLightDistance[ i ] > 0.0 )\n				lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n			lVector = normalize( lVector );\n\n			float dotProduct = dot( transformedNormal, lVector );\n			vec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n\n			#ifdef DOUBLE_SIDED\n\n				vec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n\n				#ifdef WRAP_AROUND\n\n					vec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n\n				#endif\n\n			#endif\n\n			#ifdef WRAP_AROUND\n\n				vec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\n				spotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n\n				#ifdef DOUBLE_SIDED\n\n					spotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n\n				#endif\n\n			#endif\n\n			vLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n\n			#ifdef DOUBLE_SIDED\n\n				vLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n\n			#endif\n\n		}\n\n	}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n		vec3 lVector = normalize( lDirection.xyz );\n\n		float dotProduct = dot( transformedNormal, lVector );\n\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n		float hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\n\n		vLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		#ifdef DOUBLE_SIDED\n\n			vLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n\n		#endif\n\n	}\n\n#endif\n\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n\n#ifdef DOUBLE_SIDED\n\n	vLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/map_particle_pars_fragment.glsl

THREE.ShaderChunk[ 'map_particle_pars_fragment'] = "#ifdef USE_MAP\n\n	uniform sampler2D map;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/default_vertex.glsl

THREE.ShaderChunk[ 'default_vertex'] = "vec4 mvPosition;\n\n#ifdef USE_SKINNING\n\n	mvPosition = modelViewMatrix * skinned;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\n\n	mvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\n\n	mvPosition = modelViewMatrix * vec4( position, 1.0 );\n\n#endif\n\ngl_Position = projectionMatrix * mvPosition;";

// File:src/renderers/shaders/ShaderChunk/map_pars_fragment.glsl

THREE.ShaderChunk[ 'map_pars_fragment'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	varying vec2 vUv;\n\n#endif\n\n#ifdef USE_MAP\n\n	uniform sampler2D map;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/skinnormal_vertex.glsl

THREE.ShaderChunk[ 'skinnormal_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix  = bindMatrixInverse * skinMatrix * bindMatrix;\n\n	#ifdef USE_MORPHNORMALS\n\n	vec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n\n	#else\n\n	vec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n\n	#endif\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_vertex.glsl

THREE.ShaderChunk[ 'logdepthbuf_pars_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		varying float vFragDepth;\n\n	#endif\n\n	uniform float logDepthBufFC;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lightmap_pars_vertex.glsl

THREE.ShaderChunk[ 'lightmap_pars_vertex'] = "#ifdef USE_LIGHTMAP\n\n	varying vec2 vUv2;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lights_phong_fragment.glsl

THREE.ShaderChunk[ 'lights_phong_fragment'] = "vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n\n#ifdef DOUBLE_SIDED\n\n	normal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n\n#endif\n\n#ifdef USE_NORMALMAP\n\n	normal = perturbNormal2Arb( -vViewPosition, normal );\n\n#elif defined( USE_BUMPMAP )\n\n	normal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	vec3 pointDiffuse = vec3( 0.0 );\n	vec3 pointSpecular = vec3( 0.0 );\n\n	for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( pointLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n\n				// diffuse\n\n		float dotProduct = dot( normal, lVector );\n\n		#ifdef WRAP_AROUND\n\n			float pointDiffuseWeightFull = max( dotProduct, 0.0 );\n			float pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n			vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n\n		#else\n\n			float pointDiffuseWeight = max( dotProduct, 0.0 );\n\n		#endif\n\n		pointDiffuse += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\n\n				// specular\n\n		vec3 pointHalfVector = normalize( lVector + viewPosition );\n		float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\n		float pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, pointHalfVector ), 0.0 ), 5.0 );\n		pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n\n	}\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	vec3 spotDiffuse = vec3( 0.0 );\n	vec3 spotSpecular = vec3( 0.0 );\n\n	for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n\n		vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\n		vec3 lVector = lPosition.xyz + vViewPosition.xyz;\n\n		float lDistance = 1.0;\n		if ( spotLightDistance[ i ] > 0.0 )\n			lDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\n\n		lVector = normalize( lVector );\n\n		float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\n\n		if ( spotEffect > spotLightAngleCos[ i ] ) {\n\n			spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );\n\n					// diffuse\n\n			float dotProduct = dot( normal, lVector );\n\n			#ifdef WRAP_AROUND\n\n				float spotDiffuseWeightFull = max( dotProduct, 0.0 );\n				float spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n				vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n\n			#else\n\n				float spotDiffuseWeight = max( dotProduct, 0.0 );\n\n			#endif\n\n			spotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\n\n					// specular\n\n			vec3 spotHalfVector = normalize( lVector + viewPosition );\n			float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\n			float spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n\n			float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, spotHalfVector ), 0.0 ), 5.0 );\n			spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n\n		}\n\n	}\n\n#endif\n\n#if MAX_DIR_LIGHTS > 0\n\n	vec3 dirDiffuse = vec3( 0.0 );\n	vec3 dirSpecular = vec3( 0.0 );\n\n	for( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\n		vec3 dirVector = normalize( lDirection.xyz );\n\n				// diffuse\n\n		float dotProduct = dot( normal, dirVector );\n\n		#ifdef WRAP_AROUND\n\n			float dirDiffuseWeightFull = max( dotProduct, 0.0 );\n			float dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\n\n			vec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n\n		#else\n\n			float dirDiffuseWeight = max( dotProduct, 0.0 );\n\n		#endif\n\n		dirDiffuse += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\n\n		// specular\n\n		vec3 dirHalfVector = normalize( dirVector + viewPosition );\n		float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\n		float dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n\n		/*\n		// fresnel term from skin shader\n		const float F0 = 0.128;\n\n		float base = 1.0 - dot( viewPosition, dirHalfVector );\n		float exponential = pow( base, 5.0 );\n\n		float fresnel = exponential + F0 * ( 1.0 - exponential );\n		*/\n\n		/*\n		// fresnel term from fresnel shader\n		const float mFresnelBias = 0.08;\n		const float mFresnelScale = 0.3;\n		const float mFresnelPower = 5.0;\n\n		float fresnel = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( -viewPosition ), normal ), mFresnelPower );\n		*/\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		// 		dirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization * fresnel;\n\n		vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );\n		dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n\n\n	}\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	vec3 hemiDiffuse = vec3( 0.0 );\n	vec3 hemiSpecular = vec3( 0.0 );\n\n	for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\n\n		vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\n		vec3 lVector = normalize( lDirection.xyz );\n\n		// diffuse\n\n		float dotProduct = dot( normal, lVector );\n		float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\n\n		vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n\n		hemiDiffuse += diffuse * hemiColor;\n\n		// specular (sky light)\n\n		vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\n		float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\n		float hemiSpecularWeightSky = specularStrength * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );\n\n		// specular (ground light)\n\n		vec3 lVectorGround = -lVector;\n\n		vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\n		float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\n		float hemiSpecularWeightGround = specularStrength * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );\n\n		float dotProductGround = dot( normal, lVectorGround );\n\n		float specularNormalization = ( shininess + 2.0 ) / 8.0;\n\n		vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );\n		vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );\n		hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n\n	}\n\n#endif\n\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n\n#if MAX_DIR_LIGHTS > 0\n\n	totalDiffuse += dirDiffuse;\n	totalSpecular += dirSpecular;\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	totalDiffuse += hemiDiffuse;\n	totalSpecular += hemiSpecular;\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	totalDiffuse += pointDiffuse;\n	totalSpecular += pointSpecular;\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	totalDiffuse += spotDiffuse;\n	totalSpecular += spotSpecular;\n\n#endif\n\n#ifdef METAL\n\n	gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n\n#else\n\n	gl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/fog_pars_fragment.glsl

THREE.ShaderChunk[ 'fog_pars_fragment'] = "#ifdef USE_FOG\n\n	uniform vec3 fogColor;\n\n	#ifdef FOG_EXP2\n\n		uniform float fogDensity;\n\n	#else\n\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/morphnormal_vertex.glsl

THREE.ShaderChunk[ 'morphnormal_vertex'] = "#ifdef USE_MORPHNORMALS\n\n	vec3 morphedNormal = vec3( 0.0 );\n\n	morphedNormal += ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\n	morphedNormal += ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\n	morphedNormal += ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\n	morphedNormal += ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\n\n	morphedNormal += normal;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/envmap_pars_fragment.glsl

THREE.ShaderChunk[ 'envmap_pars_fragment'] = "#ifdef USE_ENVMAP\n\n	uniform float reflectivity;\n	uniform samplerCube envMap;\n	uniform float flipEnvMap;\n	uniform int combine;\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		uniform bool useRefract;\n		uniform float refractionRatio;\n\n	#else\n\n		varying vec3 vReflect;\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/logdepthbuf_fragment.glsl

THREE.ShaderChunk[ 'logdepthbuf_fragment'] = "#if defined(USE_LOGDEPTHBUF) && defined(USE_LOGDEPTHBUF_EXT)\n\n	gl_FragDepthEXT = log2(vFragDepth) * logDepthBufFC * 0.5;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/normalmap_pars_fragment.glsl

THREE.ShaderChunk[ 'normalmap_pars_fragment'] = "#ifdef USE_NORMALMAP\n\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n\n			// Per-Pixel Tangent Space Normal Mapping\n			// http://hacksoflife.blogspot.ch/2009/11/per-pixel-tangent-space-normal-mapping.html\n\n	vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\n\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( vUv.st );\n		vec2 st1 = dFdy( vUv.st );\n\n		vec3 S = normalize( q0 * st1.t - q1 * st0.t );\n		vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\n		vec3 N = normalize( surf_norm );\n\n		vec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n		mapN.xy = normalScale * mapN.xy;\n		mat3 tsn = mat3( S, T, N );\n		return normalize( tsn * mapN );\n\n	}\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_vertex.glsl

THREE.ShaderChunk[ 'lights_phong_pars_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/lightmap_pars_fragment.glsl

THREE.ShaderChunk[ 'lightmap_pars_fragment'] = "#ifdef USE_LIGHTMAP\n\n	varying vec2 vUv2;\n	uniform sampler2D lightMap;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/shadowmap_vertex.glsl

THREE.ShaderChunk[ 'shadowmap_vertex'] = "#ifdef USE_SHADOWMAP\n\n	for( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n		vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n\n	}\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lights_phong_vertex.glsl

THREE.ShaderChunk[ 'lights_phong_vertex'] = "#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	vWorldPosition = worldPosition.xyz;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/map_fragment.glsl

THREE.ShaderChunk[ 'map_fragment'] = "#ifdef USE_MAP\n\n	vec4 texelColor = texture2D( map, vUv );\n\n	#ifdef GAMMA_INPUT\n\n		texelColor.xyz *= texelColor.xyz;\n\n	#endif\n\n	gl_FragColor = gl_FragColor * texelColor;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lightmap_vertex.glsl

THREE.ShaderChunk[ 'lightmap_vertex'] = "#ifdef USE_LIGHTMAP\n\n	vUv2 = uv2;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/map_particle_fragment.glsl

THREE.ShaderChunk[ 'map_particle_fragment'] = "#ifdef USE_MAP\n\n	gl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/color_pars_fragment.glsl

THREE.ShaderChunk[ 'color_pars_fragment'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/color_vertex.glsl

THREE.ShaderChunk[ 'color_vertex'] = "#ifdef USE_COLOR\n\n	#ifdef GAMMA_INPUT\n\n		vColor = color * color;\n\n	#else\n\n		vColor = color;\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/skinning_vertex.glsl

THREE.ShaderChunk[ 'skinning_vertex'] = "#ifdef USE_SKINNING\n\n	#ifdef USE_MORPHTARGETS\n\n	vec4 skinVertex = bindMatrix * vec4( morphed, 1.0 );\n\n	#else\n\n	vec4 skinVertex = bindMatrix * vec4( position, 1.0 );\n\n	#endif\n\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	skinned  = bindMatrixInverse * skinned;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/envmap_pars_vertex.glsl

THREE.ShaderChunk[ 'envmap_pars_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	varying vec3 vReflect;\n\n	uniform float refractionRatio;\n	uniform bool useRefract;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/linear_to_gamma_fragment.glsl

THREE.ShaderChunk[ 'linear_to_gamma_fragment'] = "#ifdef GAMMA_OUTPUT\n\n	gl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/color_pars_vertex.glsl

THREE.ShaderChunk[ 'color_pars_vertex'] = "#ifdef USE_COLOR\n\n	varying vec3 vColor;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lights_lambert_pars_vertex.glsl

THREE.ShaderChunk[ 'lights_lambert_pars_vertex'] = "uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\n\nuniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#ifdef WRAP_AROUND\n\n	uniform vec3 wrapRGB;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/map_pars_vertex.glsl

THREE.ShaderChunk[ 'map_pars_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	varying vec2 vUv;\n	uniform vec4 offsetRepeat;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/envmap_fragment.glsl

THREE.ShaderChunk[ 'envmap_fragment'] = "#ifdef USE_ENVMAP\n\n	vec3 reflectVec;\n\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\n		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\n\n		// http://en.wikibooks.org/wiki/GLSL_Programming/Applying_Matrix_Transformations\n		// Transforming Normal Vectors with the Inverse Transformation\n\n		vec3 worldNormal = normalize( vec3( vec4( normal, 0.0 ) * viewMatrix ) );\n\n		if ( useRefract ) {\n\n			reflectVec = refract( cameraToVertex, worldNormal, refractionRatio );\n\n		} else { \n\n			reflectVec = reflect( cameraToVertex, worldNormal );\n\n		}\n\n	#else\n\n		reflectVec = vReflect;\n\n	#endif\n\n	#ifdef DOUBLE_SIDED\n\n		float flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n		vec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n	#else\n\n		vec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\n	#endif\n\n	#ifdef GAMMA_INPUT\n\n		cubeColor.xyz *= cubeColor.xyz;\n\n	#endif\n\n	if ( combine == 1 ) {\n\n		gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n\n	} else if ( combine == 2 ) {\n\n		gl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n\n	} else {\n\n		gl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n\n	}\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/specularmap_pars_fragment.glsl

THREE.ShaderChunk[ 'specularmap_pars_fragment'] = "#ifdef USE_SPECULARMAP\n\n	uniform sampler2D specularMap;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/logdepthbuf_vertex.glsl

THREE.ShaderChunk[ 'logdepthbuf_vertex'] = "#ifdef USE_LOGDEPTHBUF\n\n	gl_Position.z = log2(max(1e-6, gl_Position.w + 1.0)) * logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		vFragDepth = 1.0 + gl_Position.w;\n\n#else\n\n		gl_Position.z = (gl_Position.z - 1.0) * gl_Position.w;\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/morphtarget_pars_vertex.glsl

THREE.ShaderChunk[ 'morphtarget_pars_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	#ifndef USE_MORPHNORMALS\n\n	uniform float morphTargetInfluences[ 8 ];\n\n	#else\n\n	uniform float morphTargetInfluences[ 4 ];\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/specularmap_fragment.glsl

THREE.ShaderChunk[ 'specularmap_fragment'] = "float specularStrength;\n\n#ifdef USE_SPECULARMAP\n\n	vec4 texelSpecular = texture2D( specularMap, vUv );\n	specularStrength = texelSpecular.r;\n\n#else\n\n	specularStrength = 1.0;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/fog_fragment.glsl

THREE.ShaderChunk[ 'fog_fragment'] = "#ifdef USE_FOG\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		float depth = gl_FragDepthEXT / gl_FragCoord.w;\n\n	#else\n\n		float depth = gl_FragCoord.z / gl_FragCoord.w;\n\n	#endif\n\n	#ifdef FOG_EXP2\n\n		const float LOG2 = 1.442695;\n		float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\n		fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n\n	#else\n\n		float fogFactor = smoothstep( fogNear, fogFar, depth );\n\n	#endif\n	\n	gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/bumpmap_pars_fragment.glsl

THREE.ShaderChunk[ 'bumpmap_pars_fragment'] = "#ifdef USE_BUMPMAP\n\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n\n			// Derivative maps - bump mapping unparametrized surfaces by Morten Mikkelsen\n			//	http://mmikkelsen3d.blogspot.sk/2011/07/derivative-maps.html\n\n			// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\n\n	vec2 dHdxy_fwd() {\n\n		vec2 dSTdx = dFdx( vUv );\n		vec2 dSTdy = dFdy( vUv );\n\n		float Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\n		return vec2( dBx, dBy );\n\n	}\n\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\n		vec3 vSigmaX = dFdx( surf_pos );\n		vec3 vSigmaY = dFdy( surf_pos );\n		vec3 vN = surf_norm;		// normalized\n\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n\n		float fDet = dot( vSigmaX, R1 );\n\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n\n	}\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/defaultnormal_vertex.glsl

THREE.ShaderChunk[ 'defaultnormal_vertex'] = "vec3 objectNormal;\n\n#ifdef USE_SKINNING\n\n	objectNormal = skinnedNormal.xyz;\n\n#endif\n\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\n\n	objectNormal = morphedNormal;\n\n#endif\n\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\n\n	objectNormal = normal;\n\n#endif\n\n#ifdef FLIP_SIDED\n\n	objectNormal = -objectNormal;\n\n#endif\n\nvec3 transformedNormal = normalMatrix * objectNormal;";

// File:src/renderers/shaders/ShaderChunk/lights_phong_pars_fragment.glsl

THREE.ShaderChunk[ 'lights_phong_pars_fragment'] = "uniform vec3 ambientLightColor;\n\n#if MAX_DIR_LIGHTS > 0\n\n	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\n	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n\n#endif\n\n#if MAX_HEMI_LIGHTS > 0\n\n	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\n	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n\n#endif\n\n#if MAX_POINT_LIGHTS > 0\n\n	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n\n	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\n	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0\n\n	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\n	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\n	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n\n	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n\n#endif\n\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP ) || defined( USE_ENVMAP )\n\n	varying vec3 vWorldPosition;\n\n#endif\n\n#ifdef WRAP_AROUND\n\n	uniform vec3 wrapRGB;\n\n#endif\n\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;";

// File:src/renderers/shaders/ShaderChunk/skinbase_vertex.glsl

THREE.ShaderChunk[ 'skinbase_vertex'] = "#ifdef USE_SKINNING\n\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/map_vertex.glsl

THREE.ShaderChunk[ 'map_vertex'] = "#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP )\n\n	vUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/lightmap_fragment.glsl

THREE.ShaderChunk[ 'lightmap_fragment'] = "#ifdef USE_LIGHTMAP\n\n	gl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_vertex.glsl

THREE.ShaderChunk[ 'shadowmap_pars_vertex'] = "#ifdef USE_SHADOWMAP\n\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n	uniform mat4 shadowMatrix[ MAX_SHADOWS ];\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/color_fragment.glsl

THREE.ShaderChunk[ 'color_fragment'] = "#ifdef USE_COLOR\n\n	gl_FragColor = gl_FragColor * vec4( vColor, 1.0 );\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/morphtarget_vertex.glsl

THREE.ShaderChunk[ 'morphtarget_vertex'] = "#ifdef USE_MORPHTARGETS\n\n	vec3 morphed = vec3( 0.0 );\n	morphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\n	morphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\n	morphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\n	morphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n\n	#ifndef USE_MORPHNORMALS\n\n	morphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\n	morphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\n	morphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\n	morphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n\n	#endif\n\n	morphed += position;\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/envmap_vertex.glsl

THREE.ShaderChunk[ 'envmap_vertex'] = "#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP ) && ! defined( PHONG )\n\n	vec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\n	worldNormal = normalize( worldNormal );\n\n	vec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\n	if ( useRefract ) {\n\n		vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\n	} else {\n\n		vReflect = reflect( cameraToVertex, worldNormal );\n\n	}\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/shadowmap_fragment.glsl

THREE.ShaderChunk[ 'shadowmap_fragment'] = "#ifdef USE_SHADOWMAP\n\n	#ifdef SHADOWMAP_DEBUG\n\n		vec3 frustumColors[3];\n		frustumColors[0] = vec3( 1.0, 0.5, 0.0 );\n		frustumColors[1] = vec3( 0.0, 1.0, 0.8 );\n		frustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n\n	#endif\n\n	#ifdef SHADOWMAP_CASCADE\n\n		int inFrustumCount = 0;\n\n	#endif\n\n	float fDepth;\n	vec3 shadowColor = vec3( 1.0 );\n\n	for( int i = 0; i < MAX_SHADOWS; i ++ ) {\n\n		vec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\n\n				// if ( something && something ) breaks ATI OpenGL shader compiler\n				// if ( all( something, something ) ) using this instead\n\n		bvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n		bool inFrustum = all( inFrustumVec );\n\n				// don't shadow pixels outside of light frustum\n				// use just first frustum (for cascades)\n				// don't shadow pixels behind far plane of light frustum\n\n		#ifdef SHADOWMAP_CASCADE\n\n			inFrustumCount += int( inFrustum );\n			bvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n\n		#else\n\n			bvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\n		#endif\n\n		bool frustumTest = all( frustumTestVec );\n\n		if ( frustumTest ) {\n\n			shadowCoord.z += shadowBias[ i ];\n\n			#if defined( SHADOWMAP_TYPE_PCF )\n\n						// Percentage-close filtering\n						// (9 pixel kernel)\n						// http://fabiensanglard.net/shadowmappingPCF/\n\n				float shadow = 0.0;\n\n		/*\n						// nested loops breaks shader compiler / validator on some ATI cards when using OpenGL\n						// must enroll loop manually\n\n				for ( float y = -1.25; y <= 1.25; y += 1.25 )\n					for ( float x = -1.25; x <= 1.25; x += 1.25 ) {\n\n						vec4 rgbaDepth = texture2D( shadowMap[ i ], vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy );\n\n								// doesn't seem to produce any noticeable visual difference compared to simple texture2D lookup\n								//vec4 rgbaDepth = texture2DProj( shadowMap[ i ], vec4( vShadowCoord[ i ].w * ( vec2( x * xPixelOffset, y * yPixelOffset ) + shadowCoord.xy ), 0.05, vShadowCoord[ i ].w ) );\n\n						float fDepth = unpackDepth( rgbaDepth );\n\n						if ( fDepth < shadowCoord.z )\n							shadow += 1.0;\n\n				}\n\n				shadow /= 9.0;\n\n		*/\n\n				const float shadowDelta = 1.0 / 9.0;\n\n				float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n				float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n				float dx0 = -1.25 * xPixelOffset;\n				float dy0 = -1.25 * yPixelOffset;\n				float dx1 = 1.25 * xPixelOffset;\n				float dy1 = 1.25 * yPixelOffset;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				fDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n				if ( fDepth < shadowCoord.z ) shadow += shadowDelta;\n\n				shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n			#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\n						// Percentage-close filtering\n						// (9 pixel kernel)\n						// http://fabiensanglard.net/shadowmappingPCF/\n\n				float shadow = 0.0;\n\n				float xPixelOffset = 1.0 / shadowMapSize[ i ].x;\n				float yPixelOffset = 1.0 / shadowMapSize[ i ].y;\n\n				float dx0 = -1.0 * xPixelOffset;\n				float dy0 = -1.0 * yPixelOffset;\n				float dx1 = 1.0 * xPixelOffset;\n				float dy1 = 1.0 * yPixelOffset;\n\n				mat3 shadowKernel;\n				mat3 depthKernel;\n\n				depthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\n				depthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\n				depthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\n				depthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\n				depthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\n				depthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\n				depthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\n				depthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\n				depthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\n\n				vec3 shadowZ = vec3( shadowCoord.z );\n				shadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\n				shadowKernel[0] *= vec3(0.25);\n\n				shadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\n				shadowKernel[1] *= vec3(0.25);\n\n				shadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\n				shadowKernel[2] *= vec3(0.25);\n\n				vec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\n\n				shadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\n				shadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\n\n				vec4 shadowValues;\n				shadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\n				shadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\n				shadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\n				shadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\n\n				shadow = dot( shadowValues, vec4( 1.0 ) );\n\n				shadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n\n			#else\n\n				vec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\n				float fDepth = unpackDepth( rgbaDepth );\n\n				if ( fDepth < shadowCoord.z )\n\n		// spot with multiple shadows is darker\n\n					shadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n\n		// spot with multiple shadows has the same color as single shadow spot\n\n		// 					shadowColor = min( shadowColor, vec3( shadowDarkness[ i ] ) );\n\n			#endif\n\n		}\n\n\n		#ifdef SHADOWMAP_DEBUG\n\n			#ifdef SHADOWMAP_CASCADE\n\n				if ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n\n			#else\n\n				if ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n\n			#endif\n\n		#endif\n\n	}\n\n	#ifdef GAMMA_OUTPUT\n\n		shadowColor *= shadowColor;\n\n	#endif\n\n	gl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/worldpos_vertex.glsl

THREE.ShaderChunk[ 'worldpos_vertex'] = "#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n\n	#ifdef USE_SKINNING\n\n		vec4 worldPosition = modelMatrix * skinned;\n\n	#endif\n\n	#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n		vec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n\n	#endif\n\n	#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\n\n		vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/shadowmap_pars_fragment.glsl

THREE.ShaderChunk[ 'shadowmap_pars_fragment'] = "#ifdef USE_SHADOWMAP\n\n	uniform sampler2D shadowMap[ MAX_SHADOWS ];\n	uniform vec2 shadowMapSize[ MAX_SHADOWS ];\n\n	uniform float shadowDarkness[ MAX_SHADOWS ];\n	uniform float shadowBias[ MAX_SHADOWS ];\n\n	varying vec4 vShadowCoord[ MAX_SHADOWS ];\n\n	float unpackDepth( const in vec4 rgba_depth ) {\n\n		const vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\n		float depth = dot( rgba_depth, bit_shift );\n		return depth;\n\n	}\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/skinning_pars_vertex.glsl

THREE.ShaderChunk[ 'skinning_pars_vertex'] = "#ifdef USE_SKINNING\n\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n\n	#ifdef BONE_TEXTURE\n\n		uniform sampler2D boneTexture;\n		uniform int boneTextureWidth;\n		uniform int boneTextureHeight;\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			float j = i * 4.0;\n			float x = mod( j, float( boneTextureWidth ) );\n			float y = floor( j / float( boneTextureWidth ) );\n\n			float dx = 1.0 / float( boneTextureWidth );\n			float dy = 1.0 / float( boneTextureHeight );\n\n			y = dy * ( y + 0.5 );\n\n			vec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n			vec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n			vec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n			vec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\n			mat4 bone = mat4( v1, v2, v3, v4 );\n\n			return bone;\n\n		}\n\n	#else\n\n		uniform mat4 boneGlobalMatrices[ MAX_BONES ];\n\n		mat4 getBoneMatrix( const in float i ) {\n\n			mat4 bone = boneGlobalMatrices[ int(i) ];\n			return bone;\n\n		}\n\n	#endif\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/logdepthbuf_pars_fragment.glsl

THREE.ShaderChunk[ 'logdepthbuf_pars_fragment'] = "#ifdef USE_LOGDEPTHBUF\n\n	uniform float logDepthBufFC;\n\n	#ifdef USE_LOGDEPTHBUF_EXT\n\n		#extension GL_EXT_frag_depth : enable\n		varying float vFragDepth;\n\n	#endif\n\n#endif";

// File:src/renderers/shaders/ShaderChunk/alphamap_fragment.glsl

THREE.ShaderChunk[ 'alphamap_fragment'] = "#ifdef USE_ALPHAMAP\n\n	gl_FragColor.a *= texture2D( alphaMap, vUv ).g;\n\n#endif\n";

// File:src/renderers/shaders/ShaderChunk/alphamap_pars_fragment.glsl

THREE.ShaderChunk[ 'alphamap_pars_fragment'] = "#ifdef USE_ALPHAMAP\n\n	uniform sampler2D alphaMap;\n\n#endif\n";

// File:src/renderers/shaders/UniformsUtils.js

/**
 * Uniform Utilities
 */

THREE.UniformsUtils = {

	merge: function ( uniforms ) {

		var merged = {};

		for ( var u = 0; u < uniforms.length; u ++ ) {

			var tmp = this.clone( uniforms[ u ] );

			for ( var p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	},

	clone: function ( uniforms_src ) {

		var uniforms_dst = {};

		for ( var u in uniforms_src ) {

			uniforms_dst[ u ] = {};

			for ( var p in uniforms_src[ u ] ) {

				var parameter_src = uniforms_src[ u ][ p ];

				if ( parameter_src instanceof THREE.Color ||
					 parameter_src instanceof THREE.Vector2 ||
					 parameter_src instanceof THREE.Vector3 ||
					 parameter_src instanceof THREE.Vector4 ||
					 parameter_src instanceof THREE.Matrix4 ||
					 parameter_src instanceof THREE.Texture ) {

					uniforms_dst[ u ][ p ] = parameter_src.clone();

				} else if ( parameter_src instanceof Array ) {

					uniforms_dst[ u ][ p ] = parameter_src.slice();

				} else {

					uniforms_dst[ u ][ p ] = parameter_src;

				}

			}

		}

		return uniforms_dst;

	}

};

// File:src/renderers/shaders/UniformsLib.js

/**
 * Uniforms library for shared webgl shaders
 */

THREE.UniformsLib = {

	common: {

		"diffuse" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },

		"map" : { type: "t", value: null },
		"offsetRepeat" : { type: "v4", value: new THREE.Vector4( 0, 0, 1, 1 ) },

		"lightMap" : { type: "t", value: null },
		"specularMap" : { type: "t", value: null },
		"alphaMap" : { type: "t", value: null },

		"envMap" : { type: "t", value: null },
		"flipEnvMap" : { type: "f", value: - 1 },
		"useRefract" : { type: "i", value: 0 },
		"reflectivity" : { type: "f", value: 1.0 },
		"refractionRatio" : { type: "f", value: 0.98 },
		"combine" : { type: "i", value: 0 },

		"morphTargetInfluences" : { type: "f", value: 0 }

	},

	bump: {

		"bumpMap" : { type: "t", value: null },
		"bumpScale" : { type: "f", value: 1 }

	},

	normalmap: {

		"normalMap" : { type: "t", value: null },
		"normalScale" : { type: "v2", value: new THREE.Vector2( 1, 1 ) }
	},

	fog : {

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	lights: {

		"ambientLightColor" : { type: "fv", value: [] },

		"directionalLightDirection" : { type: "fv", value: [] },
		"directionalLightColor" : { type: "fv", value: [] },

		"hemisphereLightDirection" : { type: "fv", value: [] },
		"hemisphereLightSkyColor" : { type: "fv", value: [] },
		"hemisphereLightGroundColor" : { type: "fv", value: [] },

		"pointLightColor" : { type: "fv", value: [] },
		"pointLightPosition" : { type: "fv", value: [] },
		"pointLightDistance" : { type: "fv1", value: [] },

		"spotLightColor" : { type: "fv", value: [] },
		"spotLightPosition" : { type: "fv", value: [] },
		"spotLightDirection" : { type: "fv", value: [] },
		"spotLightDistance" : { type: "fv1", value: [] },
		"spotLightAngleCos" : { type: "fv1", value: [] },
		"spotLightExponent" : { type: "fv1", value: [] }

	},

	particle: {

		"psColor" : { type: "c", value: new THREE.Color( 0xeeeeee ) },
		"opacity" : { type: "f", value: 1.0 },
		"size" : { type: "f", value: 1.0 },
		"scale" : { type: "f", value: 1.0 },
		"map" : { type: "t", value: null },

		"fogDensity" : { type: "f", value: 0.00025 },
		"fogNear" : { type: "f", value: 1 },
		"fogFar" : { type: "f", value: 2000 },
		"fogColor" : { type: "c", value: new THREE.Color( 0xffffff ) }

	},

	shadowmap: {

		"shadowMap": { type: "tv", value: [] },
		"shadowMapSize": { type: "v2v", value: [] },

		"shadowBias" : { type: "fv1", value: [] },
		"shadowDarkness": { type: "fv1", value: [] },

		"shadowMatrix" : { type: "m4v", value: [] }

	}

};

// File:src/renderers/shaders/ShaderLib.js

/**
 * Webgl Shader Library for three.js
 *
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author mikael emtinger / http://gomo.se/
 */


THREE.ShaderLib = {

	'basic': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],

			"	#ifdef USE_ENVMAP",

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

			"	#endif",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "alphamap_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],
				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphamap_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],
				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'lambert': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define LAMBERT",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

			"	varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_lambert_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_lambert_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",

			"varying vec3 vLightFront;",

			"#ifdef DOUBLE_SIDED",

			"	varying vec3 vLightBack;",

			"#endif",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "alphamap_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = vec4( vec3( 1.0 ), opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],
				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphamap_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

			"	#ifdef DOUBLE_SIDED",

					//"float isFront = float( gl_FrontFacing );",
					//"gl_FragColor.xyz *= isFront * vLightFront + ( 1.0 - isFront ) * vLightBack;",

			"		if ( gl_FrontFacing )",
			"			gl_FragColor.xyz *= vLightFront;",
			"		else",
			"			gl_FragColor.xyz *= vLightBack;",

			"	#else",

			"		gl_FragColor.xyz *= vLightFront;",

			"	#endif",

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'phong': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "bump" ],
			THREE.UniformsLib[ "normalmap" ],
			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{
				"ambient"  : { type: "c", value: new THREE.Color( 0xffffff ) },
				"emissive" : { type: "c", value: new THREE.Color( 0x000000 ) },
				"specular" : { type: "c", value: new THREE.Color( 0x111111 ) },
				"shininess": { type: "f", value: 30 },
				"wrapRGB"  : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }
			}

		] ),

		vertexShader: [

			"#define PHONG",

			"varying vec3 vViewPosition;",
			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "map_pars_vertex" ],
			THREE.ShaderChunk[ "lightmap_pars_vertex" ],
			THREE.ShaderChunk[ "envmap_pars_vertex" ],
			THREE.ShaderChunk[ "lights_phong_pars_vertex" ],
			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "map_vertex" ],
				THREE.ShaderChunk[ "lightmap_vertex" ],
				THREE.ShaderChunk[ "color_vertex" ],

				THREE.ShaderChunk[ "morphnormal_vertex" ],
				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],
				THREE.ShaderChunk[ "defaultnormal_vertex" ],

			"	vNormal = normalize( transformedNormal );",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"	vViewPosition = -mvPosition.xyz;",

				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "envmap_vertex" ],
				THREE.ShaderChunk[ "lights_phong_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"#define PHONG",

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform vec3 ambient;",
			"uniform vec3 emissive;",
			"uniform vec3 specular;",
			"uniform float shininess;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_pars_fragment" ],
			THREE.ShaderChunk[ "alphamap_pars_fragment" ],
			THREE.ShaderChunk[ "lightmap_pars_fragment" ],
			THREE.ShaderChunk[ "envmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "lights_phong_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "bumpmap_pars_fragment" ],
			THREE.ShaderChunk[ "normalmap_pars_fragment" ],
			THREE.ShaderChunk[ "specularmap_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = vec4( vec3( 1.0 ), opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],
				THREE.ShaderChunk[ "map_fragment" ],
				THREE.ShaderChunk[ "alphamap_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "specularmap_fragment" ],

				THREE.ShaderChunk[ "lights_phong_fragment" ],

				THREE.ShaderChunk[ "lightmap_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "envmap_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],

				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],

				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'particle_basic': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "particle" ],
			THREE.UniformsLib[ "shadowmap" ]

		] ),

		vertexShader: [

			"uniform float size;",
			"uniform float scale;",

			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

			"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",

			"	#ifdef USE_SIZEATTENUATION",
			"		gl_PointSize = size * ( scale / length( mvPosition.xyz ) );",
			"	#else",
			"		gl_PointSize = size;",
			"	#endif",

			"	gl_Position = projectionMatrix * mvPosition;",

				THREE.ShaderChunk[ "logdepthbuf_vertex" ],
				THREE.ShaderChunk[ "worldpos_vertex" ],
				THREE.ShaderChunk[ "shadowmap_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 psColor;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "map_particle_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = vec4( psColor, opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],
				THREE.ShaderChunk[ "map_particle_fragment" ],
				THREE.ShaderChunk[ "alphatest_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "shadowmap_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'dashed': {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "common" ],
			THREE.UniformsLib[ "fog" ],

			{
				"scale"    : { type: "f", value: 1 },
				"dashSize" : { type: "f", value: 1 },
				"totalSize": { type: "f", value: 2 }
			}

		] ),

		vertexShader: [

			"uniform float scale;",
			"attribute float lineDistance;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "color_vertex" ],

			"	vLineDistance = scale * lineDistance;",

			"	vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );",
			"	gl_Position = projectionMatrix * mvPosition;",

				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform vec3 diffuse;",
			"uniform float opacity;",

			"uniform float dashSize;",
			"uniform float totalSize;",

			"varying float vLineDistance;",

			THREE.ShaderChunk[ "color_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	if ( mod( vLineDistance, totalSize ) > dashSize ) {",

			"		discard;",

			"	}",

			"	gl_FragColor = vec4( diffuse, opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],
				THREE.ShaderChunk[ "color_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n")

	},

	'depth': {

		uniforms: {

			"mNear": { type: "f", value: 1.0 },
			"mFar" : { type: "f", value: 2000.0 },
			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float mNear;",
			"uniform float mFar;",
			"uniform float opacity;",

			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],

			"	#ifdef USE_LOGDEPTHBUF_EXT",

			"		float depth = gl_FragDepthEXT / gl_FragCoord.w;",

			"	#else",

			"		float depth = gl_FragCoord.z / gl_FragCoord.w;",

			"	#endif",

			"	float color = 1.0 - smoothstep( mNear, mFar, depth );",
			"	gl_FragColor = vec4( vec3( color ), opacity );",

			"}"

		].join("\n")

	},

	'normal': {

		uniforms: {

			"opacity" : { type: "f", value: 1.0 }

		},

		vertexShader: [

			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

			"	vNormal = normalize( normalMatrix * normal );",

				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform float opacity;",
			"varying vec3 vNormal;",

			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],

			"}"

		].join("\n")

	},

	/* -------------------------------------------------------------------------
	//	Normal map shader
	//		- Blinn-Phong
	//		- normal + diffuse + specular + AO + displacement + reflection + shadow maps
	//		- point and directional lights (use with "lights: true" material option)
	 ------------------------------------------------------------------------- */

	'normalmap' : {

		uniforms: THREE.UniformsUtils.merge( [

			THREE.UniformsLib[ "fog" ],
			THREE.UniformsLib[ "lights" ],
			THREE.UniformsLib[ "shadowmap" ],

			{

			"enableAO"          : { type: "i", value: 0 },
			"enableDiffuse"     : { type: "i", value: 0 },
			"enableSpecular"    : { type: "i", value: 0 },
			"enableReflection"  : { type: "i", value: 0 },
			"enableDisplacement": { type: "i", value: 0 },

			"tDisplacement": { type: "t", value: null }, // must go first as this is vertex texture
			"tDiffuse"     : { type: "t", value: null },
			"tCube"        : { type: "t", value: null },
			"tNormal"      : { type: "t", value: null },
			"tSpecular"    : { type: "t", value: null },
			"tAO"          : { type: "t", value: null },

			"uNormalScale": { type: "v2", value: new THREE.Vector2( 1, 1 ) },

			"uDisplacementBias": { type: "f", value: 0.0 },
			"uDisplacementScale": { type: "f", value: 1.0 },

			"diffuse": { type: "c", value: new THREE.Color( 0xffffff ) },
			"specular": { type: "c", value: new THREE.Color( 0x111111 ) },
			"ambient": { type: "c", value: new THREE.Color( 0xffffff ) },
			"shininess": { type: "f", value: 30 },
			"opacity": { type: "f", value: 1 },

			"useRefract": { type: "i", value: 0 },
			"refractionRatio": { type: "f", value: 0.98 },
			"reflectivity": { type: "f", value: 0.5 },

			"uOffset" : { type: "v2", value: new THREE.Vector2( 0, 0 ) },
			"uRepeat" : { type: "v2", value: new THREE.Vector2( 1, 1 ) },

			"wrapRGB" : { type: "v3", value: new THREE.Vector3( 1, 1, 1 ) }

			}

		] ),

		fragmentShader: [

			"uniform vec3 ambient;",
			"uniform vec3 diffuse;",
			"uniform vec3 specular;",
			"uniform float shininess;",
			"uniform float opacity;",

			"uniform bool enableDiffuse;",
			"uniform bool enableSpecular;",
			"uniform bool enableAO;",
			"uniform bool enableReflection;",

			"uniform sampler2D tDiffuse;",
			"uniform sampler2D tNormal;",
			"uniform sampler2D tSpecular;",
			"uniform sampler2D tAO;",

			"uniform samplerCube tCube;",

			"uniform vec2 uNormalScale;",

			"uniform bool useRefract;",
			"uniform float refractionRatio;",
			"uniform float reflectivity;",

			"varying vec3 vTangent;",
			"varying vec3 vBinormal;",
			"varying vec3 vNormal;",
			"varying vec2 vUv;",

			"uniform vec3 ambientLightColor;",

			"#if MAX_DIR_LIGHTS > 0",

			"	uniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];",
			"	uniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];",

			"#endif",

			"#if MAX_HEMI_LIGHTS > 0",

			"	uniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];",
			"	uniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];",
			"	uniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];",

			"#endif",

			"#if MAX_POINT_LIGHTS > 0",

			"	uniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];",
			"	uniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];",
			"	uniform float pointLightDistance[ MAX_POINT_LIGHTS ];",

			"#endif",

			"#if MAX_SPOT_LIGHTS > 0",

			"	uniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];",
			"	uniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];",
			"	uniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];",
			"	uniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];",
			"	uniform float spotLightExponent[ MAX_SPOT_LIGHTS ];",
			"	uniform float spotLightDistance[ MAX_SPOT_LIGHTS ];",

			"#endif",

			"#ifdef WRAP_AROUND",

			"	uniform vec3 wrapRGB;",

			"#endif",

			"varying vec3 vWorldPosition;",
			"varying vec3 vViewPosition;",

			THREE.ShaderChunk[ "shadowmap_pars_fragment" ],
			THREE.ShaderChunk[ "fog_pars_fragment" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",
				THREE.ShaderChunk[ "logdepthbuf_fragment" ],

			"	gl_FragColor = vec4( vec3( 1.0 ), opacity );",

			"	vec3 specularTex = vec3( 1.0 );",

			"	vec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;",
			"	normalTex.xy *= uNormalScale;",
			"	normalTex = normalize( normalTex );",

			"	if( enableDiffuse ) {",

			"		#ifdef GAMMA_INPUT",

			"			vec4 texelColor = texture2D( tDiffuse, vUv );",
			"			texelColor.xyz *= texelColor.xyz;",

			"			gl_FragColor = gl_FragColor * texelColor;",

			"		#else",

			"			gl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );",

			"		#endif",

			"	}",

			"	if( enableAO ) {",

			"		#ifdef GAMMA_INPUT",

			"			vec4 aoColor = texture2D( tAO, vUv );",
			"			aoColor.xyz *= aoColor.xyz;",

			"			gl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;",

			"		#else",

			"			gl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;",

			"		#endif",

			"	}",
			
			THREE.ShaderChunk[ "alphatest_fragment" ],

			"	if( enableSpecular )",
			"		specularTex = texture2D( tSpecular, vUv ).xyz;",

			"	mat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );",
			"	vec3 finalNormal = tsb * normalTex;",

			"	#ifdef FLIP_SIDED",

			"		finalNormal = -finalNormal;",

			"	#endif",

			"	vec3 normal = normalize( finalNormal );",
			"	vec3 viewPosition = normalize( vViewPosition );",

				// point lights

			"	#if MAX_POINT_LIGHTS > 0",

			"		vec3 pointDiffuse = vec3( 0.0 );",
			"		vec3 pointSpecular = vec3( 0.0 );",

			"		for ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {",

			"			vec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );",
			"			vec3 pointVector = lPosition.xyz + vViewPosition.xyz;",

			"			float pointDistance = 1.0;",
			"			if ( pointLightDistance[ i ] > 0.0 )",
			"				pointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );",

			"			pointVector = normalize( pointVector );",

						// diffuse

			"			#ifdef WRAP_AROUND",

			"				float pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );",
			"				float pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );",

			"				vec3 pointDiffuseWeight = mix( vec3( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );",

			"			#else",

			"				float pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );",

			"			#endif",

			"			pointDiffuse += pointDistance * pointLightColor[ i ] * diffuse * pointDiffuseWeight;",

						// specular

			"			vec3 pointHalfVector = normalize( pointVector + viewPosition );",
			"			float pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );",
			"			float pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, shininess ), 0.0 );",

			"			float specularNormalization = ( shininess + 2.0 ) / 8.0;",

			"			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( pointVector, pointHalfVector ), 0.0 ), 5.0 );",
			"			pointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;",

			"		}",

			"	#endif",

				// spot lights

			"	#if MAX_SPOT_LIGHTS > 0",

			"		vec3 spotDiffuse = vec3( 0.0 );",
			"		vec3 spotSpecular = vec3( 0.0 );",

			"		for ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {",

			"			vec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );",
			"			vec3 spotVector = lPosition.xyz + vViewPosition.xyz;",

			"			float spotDistance = 1.0;",
			"			if ( spotLightDistance[ i ] > 0.0 )",
			"				spotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );",

			"			spotVector = normalize( spotVector );",

			"			float spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );",

			"			if ( spotEffect > spotLightAngleCos[ i ] ) {",

			"				spotEffect = max( pow( max( spotEffect, 0.0 ), spotLightExponent[ i ] ), 0.0 );",

							// diffuse

			"				#ifdef WRAP_AROUND",

			"					float spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );",
			"					float spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );",

			"					vec3 spotDiffuseWeight = mix( vec3( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );",

			"				#else",

			"					float spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );",

			"				#endif",

			"				spotDiffuse += spotDistance * spotLightColor[ i ] * diffuse * spotDiffuseWeight * spotEffect;",

							// specular

			"				vec3 spotHalfVector = normalize( spotVector + viewPosition );",
			"				float spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );",
			"				float spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, shininess ), 0.0 );",

			"				float specularNormalization = ( shininess + 2.0 ) / 8.0;",

			"				vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( spotVector, spotHalfVector ), 0.0 ), 5.0 );",
			"				spotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;",

			"			}",

			"		}",

			"	#endif",

				// directional lights

			"	#if MAX_DIR_LIGHTS > 0",

			"		vec3 dirDiffuse = vec3( 0.0 );",
			"		vec3 dirSpecular = vec3( 0.0 );",

			"		for( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {",

			"			vec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );",
			"			vec3 dirVector = normalize( lDirection.xyz );",

						// diffuse

			"			#ifdef WRAP_AROUND",

			"				float directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );",
			"				float directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );",

			"				vec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );",

			"			#else",

			"				float dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );",

			"			#endif",

			"			dirDiffuse += directionalLightColor[ i ] * diffuse * dirDiffuseWeight;",

						// specular

			"			vec3 dirHalfVector = normalize( dirVector + viewPosition );",
			"			float dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );",
			"			float dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, shininess ), 0.0 );",

			"			float specularNormalization = ( shininess + 2.0 ) / 8.0;",

			"			vec3 schlick = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( dirVector, dirHalfVector ), 0.0 ), 5.0 );",
			"			dirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;",

			"		}",

			"	#endif",

				// hemisphere lights

			"	#if MAX_HEMI_LIGHTS > 0",

			"		vec3 hemiDiffuse = vec3( 0.0 );",
			"		vec3 hemiSpecular = vec3( 0.0 );" ,

			"		for( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {",

			"			vec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );",
			"			vec3 lVector = normalize( lDirection.xyz );",

						// diffuse

			"			float dotProduct = dot( normal, lVector );",
			"			float hemiDiffuseWeight = 0.5 * dotProduct + 0.5;",

			"			vec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );",

			"			hemiDiffuse += diffuse * hemiColor;",

						// specular (sky light)


			"			vec3 hemiHalfVectorSky = normalize( lVector + viewPosition );",
			"			float hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;",
			"			float hemiSpecularWeightSky = specularTex.r * max( pow( max( hemiDotNormalHalfSky, 0.0 ), shininess ), 0.0 );",

						// specular (ground light)

			"			vec3 lVectorGround = -lVector;",

			"			vec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );",
			"			float hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;",
			"			float hemiSpecularWeightGround = specularTex.r * max( pow( max( hemiDotNormalHalfGround, 0.0 ), shininess ), 0.0 );",

			"			float dotProductGround = dot( normal, lVectorGround );",

			"			float specularNormalization = ( shininess + 2.0 ) / 8.0;",

			"			vec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVector, hemiHalfVectorSky ), 0.0 ), 5.0 );",
			"			vec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( max( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 0.0 ), 5.0 );",
			"			hemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );",

			"		}",

			"	#endif",

				// all lights contribution summation

			"	vec3 totalDiffuse = vec3( 0.0 );",
			"	vec3 totalSpecular = vec3( 0.0 );",

			"	#if MAX_DIR_LIGHTS > 0",

			"		totalDiffuse += dirDiffuse;",
			"		totalSpecular += dirSpecular;",

			"	#endif",

			"	#if MAX_HEMI_LIGHTS > 0",

			"		totalDiffuse += hemiDiffuse;",
			"		totalSpecular += hemiSpecular;",

			"	#endif",

			"	#if MAX_POINT_LIGHTS > 0",

			"		totalDiffuse += pointDiffuse;",
			"		totalSpecular += pointSpecular;",

			"	#endif",

			"	#if MAX_SPOT_LIGHTS > 0",

			"		totalDiffuse += spotDiffuse;",
			"		totalSpecular += spotSpecular;",

			"	#endif",

			"	#ifdef METAL",

			"		gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient + totalSpecular );",

			"	#else",

			"		gl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * ambient ) + totalSpecular;",

			"	#endif",

			"	if ( enableReflection ) {",

			"		vec3 vReflect;",
			"		vec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );",

			"		if ( useRefract ) {",

			"			vReflect = refract( cameraToVertex, normal, refractionRatio );",

			"		} else {",

			"			vReflect = reflect( cameraToVertex, normal );",

			"		}",

			"		vec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );",

			"		#ifdef GAMMA_INPUT",

			"			cubeColor.xyz *= cubeColor.xyz;",

			"		#endif",

			"		gl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * reflectivity );",

			"	}",

				THREE.ShaderChunk[ "shadowmap_fragment" ],
				THREE.ShaderChunk[ "linear_to_gamma_fragment" ],
				THREE.ShaderChunk[ "fog_fragment" ],

			"}"

		].join("\n"),

		vertexShader: [

			"attribute vec4 tangent;",

			"uniform vec2 uOffset;",
			"uniform vec2 uRepeat;",

			"uniform bool enableDisplacement;",

			"#ifdef VERTEX_TEXTURES",

			"	uniform sampler2D tDisplacement;",
			"	uniform float uDisplacementScale;",
			"	uniform float uDisplacementBias;",

			"#endif",

			"varying vec3 vTangent;",
			"varying vec3 vBinormal;",
			"varying vec3 vNormal;",
			"varying vec2 vUv;",

			"varying vec3 vWorldPosition;",
			"varying vec3 vViewPosition;",

			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "shadowmap_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "skinnormal_vertex" ],

				// normal, tangent and binormal vectors

			"	#ifdef USE_SKINNING",

			"		vNormal = normalize( normalMatrix * skinnedNormal.xyz );",

			"		vec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );",
			"		vTangent = normalize( normalMatrix * skinnedTangent.xyz );",

			"	#else",

			"		vNormal = normalize( normalMatrix * normal );",
			"		vTangent = normalize( normalMatrix * tangent.xyz );",

			"	#endif",

			"	vBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );",

			"	vUv = uv * uRepeat + uOffset;",

				// displacement mapping

			"	vec3 displacedPosition;",

			"	#ifdef VERTEX_TEXTURES",

			"		if ( enableDisplacement ) {",

			"			vec3 dv = texture2D( tDisplacement, uv ).xyz;",
			"			float df = uDisplacementScale * dv.x + uDisplacementBias;",
			"			displacedPosition = position + normalize( normal ) * df;",

			"		} else {",

			"			#ifdef USE_SKINNING",

			"				vec4 skinVertex = bindMatrix * vec4( position, 1.0 );",

			"				vec4 skinned = vec4( 0.0 );",
			"				skinned += boneMatX * skinVertex * skinWeight.x;",
			"				skinned += boneMatY * skinVertex * skinWeight.y;",
			"				skinned += boneMatZ * skinVertex * skinWeight.z;",
			"				skinned += boneMatW * skinVertex * skinWeight.w;",
			"				skinned  = bindMatrixInverse * skinned;",

			"				displacedPosition = skinned.xyz;",

			"			#else",

			"				displacedPosition = position;",

			"			#endif",

			"		}",

			"	#else",

			"		#ifdef USE_SKINNING",

			"			vec4 skinVertex = bindMatrix * vec4( position, 1.0 );",

			"			vec4 skinned = vec4( 0.0 );",
			"			skinned += boneMatX * skinVertex * skinWeight.x;",
			"			skinned += boneMatY * skinVertex * skinWeight.y;",
			"			skinned += boneMatZ * skinVertex * skinWeight.z;",
			"			skinned += boneMatW * skinVertex * skinWeight.w;",
			"			skinned  = bindMatrixInverse * skinned;",

			"			displacedPosition = skinned.xyz;",

			"		#else",

			"			displacedPosition = position;",

			"		#endif",

			"	#endif",

				//

			"	vec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );",
			"	vec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );",

			"	gl_Position = projectionMatrix * mvPosition;",

				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

				//

			"	vWorldPosition = worldPosition.xyz;",
			"	vViewPosition = -mvPosition.xyz;",

				// shadows

			"	#ifdef USE_SHADOWMAP",

			"		for( int i = 0; i < MAX_SHADOWS; i ++ ) {",

			"			vShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;",

			"		}",

			"	#endif",

			"}"

		].join("\n")

	},

	/* -------------------------------------------------------------------------
	//	Cube map shader
	 ------------------------------------------------------------------------- */

	'cube': {

		uniforms: { "tCube": { type: "t", value: null },
					"tFlip": { type: "f", value: - 1 } },

		vertexShader: [

			"varying vec3 vWorldPosition;",

			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

			"	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );",
			"	vWorldPosition = worldPosition.xyz;",

			"	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );",

				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			"uniform samplerCube tCube;",
			"uniform float tFlip;",

			"varying vec3 vWorldPosition;",

			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"void main() {",

			"	gl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],

			"}"

		].join("\n")

	},

	/* Depth encoding into RGBA texture
	 *
	 * based on SpiderGL shadow map example
	 * http://spidergl.org/example.php?id=6
	 *
	 * originally from
	 * http://www.gamedev.net/topic/442138-packing-a-float-into-a-a8r8g8b8-texture-shader/page__whichpage__1%25EF%25BF%25BD
	 *
	 * see also
	 * http://aras-p.info/blog/2009/07/30/encoding-floats-to-rgba-the-final/
	 */

	'depthRGBA': {

		uniforms: {},

		vertexShader: [

			THREE.ShaderChunk[ "morphtarget_pars_vertex" ],
			THREE.ShaderChunk[ "skinning_pars_vertex" ],
			THREE.ShaderChunk[ "logdepthbuf_pars_vertex" ],

			"void main() {",

				THREE.ShaderChunk[ "skinbase_vertex" ],
				THREE.ShaderChunk[ "morphtarget_vertex" ],
				THREE.ShaderChunk[ "skinning_vertex" ],
				THREE.ShaderChunk[ "default_vertex" ],
				THREE.ShaderChunk[ "logdepthbuf_vertex" ],

			"}"

		].join("\n"),

		fragmentShader: [

			THREE.ShaderChunk[ "logdepthbuf_pars_fragment" ],

			"vec4 pack_depth( const in float depth ) {",

			"	const vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );",
			"	const vec4 bit_mask = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );",
			"	vec4 res = mod( depth * bit_shift * vec4( 255 ), vec4( 256 ) ) / vec4( 255 );", // "	vec4 res = fract( depth * bit_shift );",
			"	res -= res.xxyz * bit_mask;",
			"	return res;",

			"}",

			"void main() {",

				THREE.ShaderChunk[ "logdepthbuf_fragment" ],

			"	#ifdef USE_LOGDEPTHBUF_EXT",

			"		gl_FragData[ 0 ] = pack_depth( gl_FragDepthEXT );",

			"	#else",

			"		gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );",

			"	#endif",

				//"gl_FragData[ 0 ] = pack_depth( gl_FragCoord.z / gl_FragCoord.w );",
				//"float z = ( ( gl_FragCoord.z / gl_FragCoord.w ) - 3.0 ) / ( 4000.0 - 3.0 );",
				//"gl_FragData[ 0 ] = pack_depth( z );",
				//"gl_FragData[ 0 ] = vec4( z, z, z, 1.0 );",

			"}"

		].join("\n")

	}

};

// File:src/renderers/WebGLRenderer.js

/**
 * @author supereggbert / http://www.paulbrunt.co.uk/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author szimek / https://github.com/szimek/
 */

THREE.WebGLRenderer = function ( parameters ) {

	console.log( 'THREE.WebGLRenderer', THREE.REVISION );

	parameters = parameters || {};

	var _canvas = parameters.canvas !== undefined ? parameters.canvas : document.createElement( 'canvas' ),
	_context = parameters.context !== undefined ? parameters.context : null,

	_precision = parameters.precision !== undefined ? parameters.precision : 'highp',

	_alpha = parameters.alpha !== undefined ? parameters.alpha : false,
	_depth = parameters.depth !== undefined ? parameters.depth : true,
	_stencil = parameters.stencil !== undefined ? parameters.stencil : true,
	_antialias = parameters.antialias !== undefined ? parameters.antialias : false,
	_premultipliedAlpha = parameters.premultipliedAlpha !== undefined ? parameters.premultipliedAlpha : true,
	_preserveDrawingBuffer = parameters.preserveDrawingBuffer !== undefined ? parameters.preserveDrawingBuffer : false,
	_logarithmicDepthBuffer = parameters.logarithmicDepthBuffer !== undefined ? parameters.logarithmicDepthBuffer : false,

	_clearColor = new THREE.Color( 0x000000 ),
	_clearAlpha = 0;

	var lights = [];

	var _webglObjects = {};
	var _webglObjectsImmediate = [];

	var opaqueObjects = [];
	var transparentObjects = [];

	var sprites = [];
	var lensFlares = [];

	// public properties

	this.domElement = _canvas;
	this.context = null;
	this.devicePixelRatio = parameters.devicePixelRatio !== undefined
				 ? parameters.devicePixelRatio
				 : self.devicePixelRatio !== undefined
					 ? self.devicePixelRatio
					 : 1;

	// clearing

	this.autoClear = true;
	this.autoClearColor = true;
	this.autoClearDepth = true;
	this.autoClearStencil = true;

	// scene graph

	this.sortObjects = true;

	// physically based shading

	this.gammaInput = false;
	this.gammaOutput = false;

	// shadow map

	this.shadowMapEnabled = false;
	this.shadowMapType = THREE.PCFShadowMap;
	this.shadowMapCullFace = THREE.CullFaceFront;
	this.shadowMapDebug = false;
	this.shadowMapCascade = false;

	// morphs

	this.maxMorphTargets = 8;
	this.maxMorphNormals = 4;

	// flags

	this.autoScaleCubemaps = true;

	// info

	this.info = {

		memory: {

			programs: 0,
			geometries: 0,
			textures: 0

		},

		render: {

			calls: 0,
			vertices: 0,
			faces: 0,
			points: 0

		}

	};

	// internal properties

	var _this = this,

	_programs = [],

	// internal state cache

	_currentProgram = null,
	_currentFramebuffer = null,
	_currentMaterialId = - 1,
	_currentGeometryGroupHash = - 1,
	_currentCamera = null,

	_usedTextureUnits = 0,

	// GL state cache

	_oldDoubleSided = - 1,
	_oldFlipSided = - 1,

	_oldBlending = - 1,

	_oldBlendEquation = - 1,
	_oldBlendSrc = - 1,
	_oldBlendDst = - 1,

	_oldDepthTest = - 1,
	_oldDepthWrite = - 1,

	_oldPolygonOffset = null,
	_oldPolygonOffsetFactor = null,
	_oldPolygonOffsetUnits = null,

	_oldLineWidth = null,

	_viewportX = 0,
	_viewportY = 0,
	_viewportWidth = _canvas.width,
	_viewportHeight = _canvas.height,
	_currentWidth = 0,
	_currentHeight = 0,

	_newAttributes = new Uint8Array( 16 ),
	_enabledAttributes = new Uint8Array( 16 ),

	// frustum

	_frustum = new THREE.Frustum(),

	 // camera matrices cache

	_projScreenMatrix = new THREE.Matrix4(),
	_projScreenMatrixPS = new THREE.Matrix4(),

	_vector3 = new THREE.Vector3(),

	// light arrays cache

	_direction = new THREE.Vector3(),

	_lightsNeedUpdate = true,

	_lights = {

		ambient: [ 0, 0, 0 ],
		directional: { length: 0, colors:[], positions: [] },
		point: { length: 0, colors: [], positions: [], distances: [] },
		spot: { length: 0, colors: [], positions: [], distances: [], directions: [], anglesCos: [], exponents: [] },
		hemi: { length: 0, skyColors: [], groundColors: [], positions: [] }

	};

	// initialize

	var _gl;

	try {

		var attributes = {
			alpha: _alpha,
			depth: _depth,
			stencil: _stencil,
			antialias: _antialias,
			premultipliedAlpha: _premultipliedAlpha,
			preserveDrawingBuffer: _preserveDrawingBuffer
		};

		_gl = _context || _canvas.getContext( 'webgl', attributes ) || _canvas.getContext( 'experimental-webgl', attributes );

		if ( _gl === null ) {

			if ( _canvas.getContext( 'webgl') !== null ) {

				throw 'Error creating WebGL context with your selected attributes.';

			} else {

				throw 'Error creating WebGL context.';

			}

		}

	} catch ( error ) {

		console.error( error );

	}

	if ( _gl.getShaderPrecisionFormat === undefined ) {

		_gl.getShaderPrecisionFormat = function () {

			return {
				'rangeMin': 1,
				'rangeMax': 1,
				'precision': 1
			};

		}

	}

	var extensions = new THREE.WebGLExtensions( _gl );

	extensions.get( 'OES_texture_float' );
	extensions.get( 'OES_texture_float_linear' );
	extensions.get( 'OES_standard_derivatives' );

	if ( _logarithmicDepthBuffer ) {

		extensions.get( 'EXT_frag_depth' );

	}

	//

	function setDefaultGLState() {

		_gl.clearColor( 0, 0, 0, 1 );
		_gl.clearDepth( 1 );
		_gl.clearStencil( 0 );

		_gl.enable( _gl.DEPTH_TEST );
		_gl.depthFunc( _gl.LEQUAL );

		_gl.frontFace( _gl.CCW );
		_gl.cullFace( _gl.BACK );
		_gl.enable( _gl.CULL_FACE );

		_gl.enable( _gl.BLEND );
		_gl.blendEquation( _gl.FUNC_ADD );
		_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA );

		_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	}

	setDefaultGLState();

	this.context = _gl;

	// GPU capabilities

	var _maxTextures = _gl.getParameter( _gl.MAX_TEXTURE_IMAGE_UNITS );
	var _maxVertexTextures = _gl.getParameter( _gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
	var _maxTextureSize = _gl.getParameter( _gl.MAX_TEXTURE_SIZE );
	var _maxCubemapSize = _gl.getParameter( _gl.MAX_CUBE_MAP_TEXTURE_SIZE );

	var _supportsVertexTextures = _maxVertexTextures > 0;
	var _supportsBoneTextures = _supportsVertexTextures && extensions.get( 'OES_texture_float' );

	//

	var _vertexShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.HIGH_FLOAT );
	var _vertexShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.MEDIUM_FLOAT );
	var _vertexShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.VERTEX_SHADER, _gl.LOW_FLOAT );

	var _fragmentShaderPrecisionHighpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.HIGH_FLOAT );
	var _fragmentShaderPrecisionMediumpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.MEDIUM_FLOAT );
	var _fragmentShaderPrecisionLowpFloat = _gl.getShaderPrecisionFormat( _gl.FRAGMENT_SHADER, _gl.LOW_FLOAT );

	var getCompressedTextureFormats = ( function () {

		var array;

		return function () {

			if ( array !== undefined ) {

				return array;

			}

			array = [];

			if ( extensions.get( 'WEBGL_compressed_texture_pvrtc' ) || extensions.get( 'WEBGL_compressed_texture_s3tc' ) ) {

				var formats = _gl.getParameter( _gl.COMPRESSED_TEXTURE_FORMATS );

				for ( var i = 0; i < formats.length; i ++ ){

					array.push( formats[ i ] );

				}

			}
			
			return array;

		};

	} )();

	// clamp precision to maximum available

	var highpAvailable = _vertexShaderPrecisionHighpFloat.precision > 0 && _fragmentShaderPrecisionHighpFloat.precision > 0;
	var mediumpAvailable = _vertexShaderPrecisionMediumpFloat.precision > 0 && _fragmentShaderPrecisionMediumpFloat.precision > 0;

	if ( _precision === 'highp' && ! highpAvailable ) {

		if ( mediumpAvailable ) {

			_precision = 'mediump';
			console.warn( 'THREE.WebGLRenderer: highp not supported, using mediump.' );

		} else {

			_precision = 'lowp';
			console.warn( 'THREE.WebGLRenderer: highp and mediump not supported, using lowp.' );

		}

	}

	if ( _precision === 'mediump' && ! mediumpAvailable ) {

		_precision = 'lowp';
		console.warn( 'THREE.WebGLRenderer: mediump not supported, using lowp.' );

	}

	// Plugins

	var shadowMapPlugin = new THREE.ShadowMapPlugin( this, lights, _webglObjects, _webglObjectsImmediate );

	var spritePlugin = new THREE.SpritePlugin( this, sprites );
	var lensFlarePlugin = new THREE.LensFlarePlugin( this, lensFlares );

	// API

	this.getContext = function () {

		return _gl;

	};

	this.supportsVertexTextures = function () {

		return _supportsVertexTextures;

	};

	this.supportsFloatTextures = function () {

		return extensions.get( 'OES_texture_float' );

	};

	this.supportsStandardDerivatives = function () {

		return extensions.get( 'OES_standard_derivatives' );

	};

	this.supportsCompressedTextureS3TC = function () {

		return extensions.get( 'WEBGL_compressed_texture_s3tc' );

	};

	this.supportsCompressedTexturePVRTC = function () {

		return extensions.get( 'WEBGL_compressed_texture_pvrtc' );

	};

	this.supportsBlendMinMax = function () {

		return extensions.get( 'EXT_blend_minmax' );

	};

	this.getMaxAnisotropy = ( function () {

		var value;

		return function () {

			if ( value !== undefined ) {

				return value;

			}

			var extension = extensions.get( 'EXT_texture_filter_anisotropic' );

			value = extension !== null ? _gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT ) : 0;

			return value;

		}

	} )();

	this.getPrecision = function () {

		return _precision;

	};

	this.setSize = function ( width, height, updateStyle ) {

		_canvas.width = width * this.devicePixelRatio;
		_canvas.height = height * this.devicePixelRatio;

		if ( updateStyle !== false ) {

			_canvas.style.width = width + 'px';
			_canvas.style.height = height + 'px';

		}

		this.setViewport( 0, 0, width, height );

	};

	this.setViewport = function ( x, y, width, height ) {

		_viewportX = x * this.devicePixelRatio;
		_viewportY = y * this.devicePixelRatio;

		_viewportWidth = width * this.devicePixelRatio;
		_viewportHeight = height * this.devicePixelRatio;

		_gl.viewport( _viewportX, _viewportY, _viewportWidth, _viewportHeight );

	};

	this.setScissor = function ( x, y, width, height ) {

		_gl.scissor(
			x * this.devicePixelRatio,
			y * this.devicePixelRatio,
			width * this.devicePixelRatio,
			height * this.devicePixelRatio
		);

	};

	this.enableScissorTest = function ( enable ) {

		enable ? _gl.enable( _gl.SCISSOR_TEST ) : _gl.disable( _gl.SCISSOR_TEST );

	};

	// Clearing

	this.setClearColor = function ( color, alpha ) {

		_clearColor.set( color );
		_clearAlpha = alpha !== undefined ? alpha : 1;

		_gl.clearColor( _clearColor.r, _clearColor.g, _clearColor.b, _clearAlpha );

	};

	this.setClearColorHex = function ( hex, alpha ) {

		console.warn( 'THREE.WebGLRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );
		this.setClearColor( hex, alpha );

	};

	this.getClearColor = function () {

		return _clearColor;

	};

	this.getClearAlpha = function () {

		return _clearAlpha;

	};

	this.clear = function ( color, depth, stencil ) {

		var bits = 0;

		if ( color === undefined || color ) bits |= _gl.COLOR_BUFFER_BIT;
		if ( depth === undefined || depth ) bits |= _gl.DEPTH_BUFFER_BIT;
		if ( stencil === undefined || stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

		_gl.clear( bits );

	};

	this.clearColor = function () {

		_gl.clear( _gl.COLOR_BUFFER_BIT );

	};

	this.clearDepth = function () {

		_gl.clear( _gl.DEPTH_BUFFER_BIT );

	};

	this.clearStencil = function () {

		_gl.clear( _gl.STENCIL_BUFFER_BIT );

	};

	this.clearTarget = function ( renderTarget, color, depth, stencil ) {

		this.setRenderTarget( renderTarget );
		this.clear( color, depth, stencil );

	};

	// Reset

	this.resetGLState = function () {

		_currentProgram = null;
		_currentCamera = null;

		_oldBlending = - 1;
		_oldDepthTest = - 1;
		_oldDepthWrite = - 1;
		_oldDoubleSided = - 1;
		_oldFlipSided = - 1;
		_currentGeometryGroupHash = - 1;
		_currentMaterialId = - 1;

		_lightsNeedUpdate = true;

	};

	// Buffer allocation

	function createParticleBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createLineBuffers ( geometry ) {

		geometry.__webglVertexBuffer = _gl.createBuffer();
		geometry.__webglColorBuffer = _gl.createBuffer();
		geometry.__webglLineDistanceBuffer = _gl.createBuffer();

		_this.info.memory.geometries ++;

	};

	function createMeshBuffers ( geometryGroup ) {

		geometryGroup.__webglVertexBuffer = _gl.createBuffer();
		geometryGroup.__webglNormalBuffer = _gl.createBuffer();
		geometryGroup.__webglTangentBuffer = _gl.createBuffer();
		geometryGroup.__webglColorBuffer = _gl.createBuffer();
		geometryGroup.__webglUVBuffer = _gl.createBuffer();
		geometryGroup.__webglUV2Buffer = _gl.createBuffer();

		geometryGroup.__webglSkinIndicesBuffer = _gl.createBuffer();
		geometryGroup.__webglSkinWeightsBuffer = _gl.createBuffer();

		geometryGroup.__webglFaceBuffer = _gl.createBuffer();
		geometryGroup.__webglLineBuffer = _gl.createBuffer();

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__webglMorphTargetsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__webglMorphTargetsBuffers.push( _gl.createBuffer() );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__webglMorphNormalsBuffers = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__webglMorphNormalsBuffers.push( _gl.createBuffer() );

			}

		}

		_this.info.memory.geometries ++;

	};

	// Events

	var onObjectRemoved = function ( event ) {

		var object = event.target;

		object.traverse( function ( child ) {

			child.removeEventListener( 'remove', onObjectRemoved );

			removeObject( child );

		} );

	};

	var onGeometryDispose = function ( event ) {

		var geometry = event.target;

		geometry.removeEventListener( 'dispose', onGeometryDispose );

		deallocateGeometry( geometry );

	};

	var onTextureDispose = function ( event ) {

		var texture = event.target;

		texture.removeEventListener( 'dispose', onTextureDispose );

		deallocateTexture( texture );

		_this.info.memory.textures --;


	};

	var onRenderTargetDispose = function ( event ) {

		var renderTarget = event.target;

		renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

		deallocateRenderTarget( renderTarget );

		_this.info.memory.textures --;

	};

	var onMaterialDispose = function ( event ) {

		var material = event.target;

		material.removeEventListener( 'dispose', onMaterialDispose );

		deallocateMaterial( material );

	};

	// Buffer deallocation

	var deleteBuffers = function ( geometry ) {
	
		var buffers = [
			'__webglVertexBuffer',
			'__webglNormalBuffer',
			'__webglTangentBuffer',
			'__webglColorBuffer',
			'__webglUVBuffer',
			'__webglUV2Buffer',
			
			'__webglSkinIndicesBuffer',
			'__webglSkinWeightsBuffer',
			
			'__webglFaceBuffer',
			'__webglLineBuffer',
			
			'__webglLineDistanceBuffer'
		];

		for ( var i = 0, l = buffers.length; i < l; i ++ ) {

			var name = buffers[ i ];

			if ( geometry[ name ] !== undefined ) {

				_gl.deleteBuffer( geometry[ name ] );

				delete geometry[ name ];

			}

		}

		// custom attributes

		if ( geometry.__webglCustomAttributesList !== undefined ) {

			for ( var name in geometry.__webglCustomAttributesList ) {

				_gl.deleteBuffer( geometry.__webglCustomAttributesList[ name ].buffer );

			}

			delete geometry.__webglCustomAttributesList;

		}

		_this.info.memory.geometries --;

	};

	var deallocateGeometry = function ( geometry ) {

		delete geometry.__webglInit;

		if ( geometry instanceof THREE.BufferGeometry ) {

			for ( var name in geometry.attributes ) {
			
				var attribute = geometry.attributes[ name ];

				if ( attribute.buffer !== undefined ) {

					_gl.deleteBuffer( attribute.buffer );

					delete attribute.buffer;

				}

			}

			_this.info.memory.geometries --;

		} else {

			var geometryGroupsList = geometryGroups[ geometry.id ];

			if ( geometryGroupsList !== undefined ) {

				for ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {

					var geometryGroup = geometryGroupsList[ i ];

					if ( geometryGroup.numMorphTargets !== undefined ) {

						for ( var m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

							_gl.deleteBuffer( geometryGroup.__webglMorphTargetsBuffers[ m ] );

						}

						delete geometryGroup.__webglMorphTargetsBuffers;

					}

					if ( geometryGroup.numMorphNormals !== undefined ) {

						for ( var m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

							_gl.deleteBuffer( geometryGroup.__webglMorphNormalsBuffers[ m ] );

						}

						delete geometryGroup.__webglMorphNormalsBuffers;

					}

					deleteBuffers( geometryGroup );

				}

				delete geometryGroups[ geometry.id ];

			} else {

				deleteBuffers( geometry );

			}

		}

		// TOFIX: Workaround for deleted geometry being currently bound

		_currentGeometryGroupHash = - 1;

	};

	var deallocateTexture = function ( texture ) {

		if ( texture.image && texture.image.__webglTextureCube ) {

			// cube texture

			_gl.deleteTexture( texture.image.__webglTextureCube );

			delete texture.image.__webglTextureCube;

		} else {

			// 2D texture

			if ( texture.__webglInit === undefined ) return;

			_gl.deleteTexture( texture.__webglTexture );

			delete texture.__webglTexture;
			delete texture.__webglInit;

		}

	};

	var deallocateRenderTarget = function ( renderTarget ) {

		if ( ! renderTarget || renderTarget.__webglTexture === undefined ) return;

		_gl.deleteTexture( renderTarget.__webglTexture );

		delete renderTarget.__webglTexture;

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			for ( var i = 0; i < 6; i ++ ) {

				_gl.deleteFramebuffer( renderTarget.__webglFramebuffer[ i ] );
				_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer[ i ] );

			}

		} else {

			_gl.deleteFramebuffer( renderTarget.__webglFramebuffer );
			_gl.deleteRenderbuffer( renderTarget.__webglRenderbuffer );

		}

		delete renderTarget.__webglFramebuffer;
		delete renderTarget.__webglRenderbuffer;

	};

	var deallocateMaterial = function ( material ) {

		var program = material.program.program;

		if ( program === undefined ) return;

		material.program = undefined;

		// only deallocate GL program if this was the last use of shared program
		// assumed there is only single copy of any program in the _programs list
		// (that's how it's constructed)

		var i, il, programInfo;
		var deleteProgram = false;

		for ( i = 0, il = _programs.length; i < il; i ++ ) {

			programInfo = _programs[ i ];

			if ( programInfo.program === program ) {

				programInfo.usedTimes --;

				if ( programInfo.usedTimes === 0 ) {

					deleteProgram = true;

				}

				break;

			}

		}

		if ( deleteProgram === true ) {

			// avoid using array.splice, this is costlier than creating new array from scratch

			var newPrograms = [];

			for ( i = 0, il = _programs.length; i < il; i ++ ) {

				programInfo = _programs[ i ];

				if ( programInfo.program !== program ) {

					newPrograms.push( programInfo );

				}

			}

			_programs = newPrograms;

			_gl.deleteProgram( program );

			_this.info.memory.programs --;

		}

	};

	// Buffer initialization

	function initCustomAttributes ( object ) {

		var geometry = object.geometry;
		var material = object.material;

		var nvertices = geometry.vertices.length;

		if ( material.attributes ) {

			if ( geometry.__webglCustomAttributesList === undefined ) {

				geometry.__webglCustomAttributesList = [];

			}

			for ( var name in material.attributes ) {

				var attribute = material.attributes[ name ];

				if ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;   // "f" and "i"

					if ( attribute.type === 'v2' ) size = 2;
					else if ( attribute.type === 'v3' ) size = 3;
					else if ( attribute.type === 'v4' ) size = 4;
					else if ( attribute.type === 'c'  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = name;

					attribute.needsUpdate = true;

				}

				geometry.__webglCustomAttributesList.push( attribute );

			}

		}

	};

	function initParticleBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );

		geometry.__sortArray = [];

		geometry.__webglParticleCount = nvertices;

		initCustomAttributes( object );

	};

	function initLineBuffers ( geometry, object ) {

		var nvertices = geometry.vertices.length;

		geometry.__vertexArray = new Float32Array( nvertices * 3 );
		geometry.__colorArray = new Float32Array( nvertices * 3 );
		geometry.__lineDistanceArray = new Float32Array( nvertices * 1 );

		geometry.__webglLineCount = nvertices;

		initCustomAttributes( object );

	};

	function initMeshBuffers ( geometryGroup, object ) {

		var geometry = object.geometry,
			faces3 = geometryGroup.faces3,

			nvertices = faces3.length * 3,
			ntris     = faces3.length * 1,
			nlines    = faces3.length * 3,

			material = getBufferMaterial( object, geometryGroup );

		geometryGroup.__vertexArray = new Float32Array( nvertices * 3 );
		geometryGroup.__normalArray = new Float32Array( nvertices * 3 );
		geometryGroup.__colorArray = new Float32Array( nvertices * 3 );
		geometryGroup.__uvArray = new Float32Array( nvertices * 2 );

		if ( geometry.faceVertexUvs.length > 1 ) {

			geometryGroup.__uv2Array = new Float32Array( nvertices * 2 );

		}

		if ( geometry.hasTangents ) {

			geometryGroup.__tangentArray = new Float32Array( nvertices * 4 );

		}

		if ( object.geometry.skinWeights.length && object.geometry.skinIndices.length ) {

			geometryGroup.__skinIndexArray = new Float32Array( nvertices * 4 );
			geometryGroup.__skinWeightArray = new Float32Array( nvertices * 4 );

		}

		var UintArray = extensions.get( 'OES_element_index_uint' ) !== null && ntris > 21845 ? Uint32Array : Uint16Array; // 65535 / 3

		geometryGroup.__typeArray = UintArray;
		geometryGroup.__faceArray = new UintArray( ntris * 3 );
		geometryGroup.__lineArray = new UintArray( nlines * 2 );

		var m, ml;

		if ( geometryGroup.numMorphTargets ) {

			geometryGroup.__morphTargetsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphTargets; m < ml; m ++ ) {

				geometryGroup.__morphTargetsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		if ( geometryGroup.numMorphNormals ) {

			geometryGroup.__morphNormalsArrays = [];

			for ( m = 0, ml = geometryGroup.numMorphNormals; m < ml; m ++ ) {

				geometryGroup.__morphNormalsArrays.push( new Float32Array( nvertices * 3 ) );

			}

		}

		geometryGroup.__webglFaceCount = ntris * 3;
		geometryGroup.__webglLineCount = nlines * 2;


		// custom attributes

		if ( material.attributes ) {

			if ( geometryGroup.__webglCustomAttributesList === undefined ) {

				geometryGroup.__webglCustomAttributesList = [];

			}

			for ( var name in material.attributes ) {

				// Do a shallow copy of the attribute object so different geometryGroup chunks use different
				// attribute buffers which are correctly indexed in the setMeshBuffers function

				var originalAttribute = material.attributes[ name ];

				var attribute = {};

				for ( var property in originalAttribute ) {

					attribute[ property ] = originalAttribute[ property ];

				}

				if ( ! attribute.__webglInitialized || attribute.createUniqueBuffers ) {

					attribute.__webglInitialized = true;

					var size = 1;   // "f" and "i"

					if ( attribute.type === 'v2' ) size = 2;
					else if ( attribute.type === 'v3' ) size = 3;
					else if ( attribute.type === 'v4' ) size = 4;
					else if ( attribute.type === 'c'  ) size = 3;

					attribute.size = size;

					attribute.array = new Float32Array( nvertices * size );

					attribute.buffer = _gl.createBuffer();
					attribute.buffer.belongsToAttribute = name;

					originalAttribute.needsUpdate = true;
					attribute.__original = originalAttribute;

				}

				geometryGroup.__webglCustomAttributesList.push( attribute );

			}

		}

		geometryGroup.__inittedArrays = true;

	};

	function getBufferMaterial( object, geometryGroup ) {

		return object.material instanceof THREE.MeshFaceMaterial
			 ? object.material.materials[ geometryGroup.materialIndex ]
			 : object.material;

	};

	function materialNeedsSmoothNormals ( material ) {

		return material && material.shading !== undefined && material.shading === THREE.SmoothShading;

	};

	// Buffer setting

	function setParticleBuffers ( geometry, hint, object ) {

		var v, c, vertex, offset, index, color,

		vertices = geometry.vertices,
		vl = vertices.length,

		colors = geometry.colors,
		cl = colors.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,

		sortArray = geometry.__sortArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,
		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( object.sortParticles ) {

			_projScreenMatrixPS.copy( _projScreenMatrix );
			_projScreenMatrixPS.multiply( object.matrixWorld );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				_vector3.copy( vertex );
				_vector3.applyProjection( _projScreenMatrixPS );

				sortArray[ v ] = [ _vector3.z, v ];

			}

			sortArray.sort( numericalSort );

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ sortArray[ v ][ 1 ] ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			for ( c = 0; c < cl; c ++ ) {

				offset = c * 3;

				color = colors[ sortArray[ c ][ 1 ] ];

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( ! ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) ) continue;

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							customAttribute.array[ ca ] = customAttribute.value[ index ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ]   = value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === 'c' ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ]     = value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								index = sortArray[ ca ][ 1 ];

								value = customAttribute.value[ index ];

								customAttribute.array[ offset ]   = value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							index = sortArray[ ca ][ 1 ];

							value = customAttribute.value[ index ];

							customAttribute.array[ offset ]      = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

				}

			}

		} else {

			if ( dirtyVertices ) {

				for ( v = 0; v < vl; v ++ ) {

					vertex = vertices[ v ];

					offset = v * 3;

					vertexArray[ offset ]     = vertex.x;
					vertexArray[ offset + 1 ] = vertex.y;
					vertexArray[ offset + 2 ] = vertex.z;

				}

			}

			if ( dirtyColors ) {

				for ( c = 0; c < cl; c ++ ) {

					color = colors[ c ];

					offset = c * 3;

					colorArray[ offset ]     = color.r;
					colorArray[ offset + 1 ] = color.g;
					colorArray[ offset + 2 ] = color.b;

				}

			}

			if ( customAttributes ) {

				for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

					customAttribute = customAttributes[ i ];

					if ( customAttribute.needsUpdate &&
						 ( customAttribute.boundTo === undefined ||
							 customAttribute.boundTo === 'vertices' ) ) {

						cal = customAttribute.value.length;

						offset = 0;

						if ( customAttribute.size === 1 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								customAttribute.array[ ca ] = customAttribute.value[ ca ];

							}

						} else if ( customAttribute.size === 2 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]   = value.x;
								customAttribute.array[ offset + 1 ] = value.y;

								offset += 2;

							}

						} else if ( customAttribute.size === 3 ) {

							if ( customAttribute.type === 'c' ) {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ]   = value.r;
									customAttribute.array[ offset + 1 ] = value.g;
									customAttribute.array[ offset + 2 ] = value.b;

									offset += 3;

								}

							} else {

								for ( ca = 0; ca < cal; ca ++ ) {

									value = customAttribute.value[ ca ];

									customAttribute.array[ offset ]   = value.x;
									customAttribute.array[ offset + 1 ] = value.y;
									customAttribute.array[ offset + 2 ] = value.z;

									offset += 3;

								}

							}

						} else if ( customAttribute.size === 4 ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]      = value.x;
								customAttribute.array[ offset + 1  ] = value.y;
								customAttribute.array[ offset + 2  ] = value.z;
								customAttribute.array[ offset + 3  ] = value.w;

								offset += 4;

							}

						}

					}

				}

			}

		}

		if ( dirtyVertices || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors || object.sortParticles ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate || object.sortParticles ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}

	}

	function setLineBuffers ( geometry, hint ) {

		var v, c, d, vertex, offset, color,

		vertices = geometry.vertices,
		colors = geometry.colors,
		lineDistances = geometry.lineDistances,

		vl = vertices.length,
		cl = colors.length,
		dl = lineDistances.length,

		vertexArray = geometry.__vertexArray,
		colorArray = geometry.__colorArray,
		lineDistanceArray = geometry.__lineDistanceArray,

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyLineDistances = geometry.lineDistancesNeedUpdate,

		customAttributes = geometry.__webglCustomAttributesList,

		i, il,
		a, ca, cal, value,
		customAttribute;

		if ( dirtyVertices ) {

			for ( v = 0; v < vl; v ++ ) {

				vertex = vertices[ v ];

				offset = v * 3;

				vertexArray[ offset ]     = vertex.x;
				vertexArray[ offset + 1 ] = vertex.y;
				vertexArray[ offset + 2 ] = vertex.z;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyColors ) {

			for ( c = 0; c < cl; c ++ ) {

				color = colors[ c ];

				offset = c * 3;

				colorArray[ offset ]     = color.r;
				colorArray[ offset + 1 ] = color.g;
				colorArray[ offset + 2 ] = color.b;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

		}

		if ( dirtyLineDistances ) {

			for ( d = 0; d < dl; d ++ ) {

				lineDistanceArray[ d ] = lineDistances[ d ];

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometry.__webglLineDistanceBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, lineDistanceArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( customAttribute.needsUpdate &&
					 ( customAttribute.boundTo === undefined ||
						 customAttribute.boundTo === 'vertices' ) ) {

					offset = 0;

					cal = customAttribute.value.length;

					if ( customAttribute.size === 1 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							customAttribute.array[ ca ] = customAttribute.value[ ca ];

						}

					} else if ( customAttribute.size === 2 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ]   = value.x;
							customAttribute.array[ offset + 1 ] = value.y;

							offset += 2;

						}

					} else if ( customAttribute.size === 3 ) {

						if ( customAttribute.type === 'c' ) {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]   = value.r;
								customAttribute.array[ offset + 1 ] = value.g;
								customAttribute.array[ offset + 2 ] = value.b;

								offset += 3;

							}

						} else {

							for ( ca = 0; ca < cal; ca ++ ) {

								value = customAttribute.value[ ca ];

								customAttribute.array[ offset ]   = value.x;
								customAttribute.array[ offset + 1 ] = value.y;
								customAttribute.array[ offset + 2 ] = value.z;

								offset += 3;

							}

						}

					} else if ( customAttribute.size === 4 ) {

						for ( ca = 0; ca < cal; ca ++ ) {

							value = customAttribute.value[ ca ];

							customAttribute.array[ offset ]    = value.x;
							customAttribute.array[ offset + 1  ] = value.y;
							customAttribute.array[ offset + 2  ] = value.z;
							customAttribute.array[ offset + 3  ] = value.w;

							offset += 4;

						}

					}

					_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
					_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

				}

			}

		}

	}

	function setMeshBuffers( geometryGroup, object, hint, dispose, material ) {

		if ( ! geometryGroup.__inittedArrays ) {

			return;

		}

		var needsSmoothNormals = materialNeedsSmoothNormals( material );

		var f, fl, fi, face,
		vertexNormals, faceNormal, normal,
		vertexColors, faceColor,
		vertexTangents,
		uv, uv2, v1, v2, v3, v4, t1, t2, t3, t4, n1, n2, n3, n4,
		c1, c2, c3,
		sw1, sw2, sw3, sw4,
		si1, si2, si3, si4,
		sa1, sa2, sa3, sa4,
		sb1, sb2, sb3, sb4,
		m, ml, i, il,
		vn, uvi, uv2i,
		vk, vkl, vka,
		nka, chf, faceVertexNormals,
		a,

		vertexIndex = 0,

		offset = 0,
		offset_uv = 0,
		offset_uv2 = 0,
		offset_face = 0,
		offset_normal = 0,
		offset_tangent = 0,
		offset_line = 0,
		offset_color = 0,
		offset_skin = 0,
		offset_morphTarget = 0,
		offset_custom = 0,
		offset_customSrc = 0,

		value,

		vertexArray = geometryGroup.__vertexArray,
		uvArray = geometryGroup.__uvArray,
		uv2Array = geometryGroup.__uv2Array,
		normalArray = geometryGroup.__normalArray,
		tangentArray = geometryGroup.__tangentArray,
		colorArray = geometryGroup.__colorArray,

		skinIndexArray = geometryGroup.__skinIndexArray,
		skinWeightArray = geometryGroup.__skinWeightArray,

		morphTargetsArrays = geometryGroup.__morphTargetsArrays,
		morphNormalsArrays = geometryGroup.__morphNormalsArrays,

		customAttributes = geometryGroup.__webglCustomAttributesList,
		customAttribute,

		faceArray = geometryGroup.__faceArray,
		lineArray = geometryGroup.__lineArray,

		geometry = object.geometry, // this is shared for all chunks

		dirtyVertices = geometry.verticesNeedUpdate,
		dirtyElements = geometry.elementsNeedUpdate,
		dirtyUvs = geometry.uvsNeedUpdate,
		dirtyNormals = geometry.normalsNeedUpdate,
		dirtyTangents = geometry.tangentsNeedUpdate,
		dirtyColors = geometry.colorsNeedUpdate,
		dirtyMorphTargets = geometry.morphTargetsNeedUpdate,

		vertices = geometry.vertices,
		chunk_faces3 = geometryGroup.faces3,
		obj_faces = geometry.faces,

		obj_uvs  = geometry.faceVertexUvs[ 0 ],
		obj_uvs2 = geometry.faceVertexUvs[ 1 ],

		obj_colors = geometry.colors,

		obj_skinIndices = geometry.skinIndices,
		obj_skinWeights = geometry.skinWeights,

		morphTargets = geometry.morphTargets,
		morphNormals = geometry.morphNormals;

		if ( dirtyVertices ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				v1 = vertices[ face.a ];
				v2 = vertices[ face.b ];
				v3 = vertices[ face.c ];

				vertexArray[ offset ]     = v1.x;
				vertexArray[ offset + 1 ] = v1.y;
				vertexArray[ offset + 2 ] = v1.z;

				vertexArray[ offset + 3 ] = v2.x;
				vertexArray[ offset + 4 ] = v2.y;
				vertexArray[ offset + 5 ] = v2.z;

				vertexArray[ offset + 6 ] = v3.x;
				vertexArray[ offset + 7 ] = v3.y;
				vertexArray[ offset + 8 ] = v3.z;

				offset += 9;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, vertexArray, hint );

		}

		if ( dirtyMorphTargets ) {

			for ( vk = 0, vkl = morphTargets.length; vk < vkl; vk ++ ) {

				offset_morphTarget = 0;

				for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

					chf = chunk_faces3[ f ];
					face = obj_faces[ chf ];

					// morph positions

					v1 = morphTargets[ vk ].vertices[ face.a ];
					v2 = morphTargets[ vk ].vertices[ face.b ];
					v3 = morphTargets[ vk ].vertices[ face.c ];

					vka = morphTargetsArrays[ vk ];

					vka[ offset_morphTarget ]     = v1.x;
					vka[ offset_morphTarget + 1 ] = v1.y;
					vka[ offset_morphTarget + 2 ] = v1.z;

					vka[ offset_morphTarget + 3 ] = v2.x;
					vka[ offset_morphTarget + 4 ] = v2.y;
					vka[ offset_morphTarget + 5 ] = v2.z;

					vka[ offset_morphTarget + 6 ] = v3.x;
					vka[ offset_morphTarget + 7 ] = v3.y;
					vka[ offset_morphTarget + 8 ] = v3.z;

					// morph normals

					if ( material.morphNormals ) {

						if ( needsSmoothNormals ) {

							faceVertexNormals = morphNormals[ vk ].vertexNormals[ chf ];

							n1 = faceVertexNormals.a;
							n2 = faceVertexNormals.b;
							n3 = faceVertexNormals.c;

						} else {

							n1 = morphNormals[ vk ].faceNormals[ chf ];
							n2 = n1;
							n3 = n1;

						}

						nka = morphNormalsArrays[ vk ];

						nka[ offset_morphTarget ]     = n1.x;
						nka[ offset_morphTarget + 1 ] = n1.y;
						nka[ offset_morphTarget + 2 ] = n1.z;

						nka[ offset_morphTarget + 3 ] = n2.x;
						nka[ offset_morphTarget + 4 ] = n2.y;
						nka[ offset_morphTarget + 5 ] = n2.z;

						nka[ offset_morphTarget + 6 ] = n3.x;
						nka[ offset_morphTarget + 7 ] = n3.y;
						nka[ offset_morphTarget + 8 ] = n3.z;

					}

					//

					offset_morphTarget += 9;

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ vk ] );
				_gl.bufferData( _gl.ARRAY_BUFFER, morphTargetsArrays[ vk ], hint );

				if ( material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ vk ] );
					_gl.bufferData( _gl.ARRAY_BUFFER, morphNormalsArrays[ vk ], hint );

				}

			}

		}

		if ( obj_skinWeights.length ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				// weights

				sw1 = obj_skinWeights[ face.a ];
				sw2 = obj_skinWeights[ face.b ];
				sw3 = obj_skinWeights[ face.c ];

				skinWeightArray[ offset_skin ]     = sw1.x;
				skinWeightArray[ offset_skin + 1 ] = sw1.y;
				skinWeightArray[ offset_skin + 2 ] = sw1.z;
				skinWeightArray[ offset_skin + 3 ] = sw1.w;

				skinWeightArray[ offset_skin + 4 ] = sw2.x;
				skinWeightArray[ offset_skin + 5 ] = sw2.y;
				skinWeightArray[ offset_skin + 6 ] = sw2.z;
				skinWeightArray[ offset_skin + 7 ] = sw2.w;

				skinWeightArray[ offset_skin + 8 ]  = sw3.x;
				skinWeightArray[ offset_skin + 9 ]  = sw3.y;
				skinWeightArray[ offset_skin + 10 ] = sw3.z;
				skinWeightArray[ offset_skin + 11 ] = sw3.w;

				// indices

				si1 = obj_skinIndices[ face.a ];
				si2 = obj_skinIndices[ face.b ];
				si3 = obj_skinIndices[ face.c ];

				skinIndexArray[ offset_skin ]     = si1.x;
				skinIndexArray[ offset_skin + 1 ] = si1.y;
				skinIndexArray[ offset_skin + 2 ] = si1.z;
				skinIndexArray[ offset_skin + 3 ] = si1.w;

				skinIndexArray[ offset_skin + 4 ] = si2.x;
				skinIndexArray[ offset_skin + 5 ] = si2.y;
				skinIndexArray[ offset_skin + 6 ] = si2.z;
				skinIndexArray[ offset_skin + 7 ] = si2.w;

				skinIndexArray[ offset_skin + 8 ]  = si3.x;
				skinIndexArray[ offset_skin + 9 ]  = si3.y;
				skinIndexArray[ offset_skin + 10 ] = si3.z;
				skinIndexArray[ offset_skin + 11 ] = si3.w;

				offset_skin += 12;

			}

			if ( offset_skin > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinIndexArray, hint );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, skinWeightArray, hint );

			}

		}

		if ( dirtyColors ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				vertexColors = face.vertexColors;
				faceColor = face.color;

				if ( vertexColors.length === 3 && material.vertexColors === THREE.VertexColors ) {

					c1 = vertexColors[ 0 ];
					c2 = vertexColors[ 1 ];
					c3 = vertexColors[ 2 ];

				} else {

					c1 = faceColor;
					c2 = faceColor;
					c3 = faceColor;

				}

				colorArray[ offset_color ]     = c1.r;
				colorArray[ offset_color + 1 ] = c1.g;
				colorArray[ offset_color + 2 ] = c1.b;

				colorArray[ offset_color + 3 ] = c2.r;
				colorArray[ offset_color + 4 ] = c2.g;
				colorArray[ offset_color + 5 ] = c2.b;

				colorArray[ offset_color + 6 ] = c3.r;
				colorArray[ offset_color + 7 ] = c3.g;
				colorArray[ offset_color + 8 ] = c3.b;

				offset_color += 9;

			}

			if ( offset_color > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, colorArray, hint );

			}

		}

		if ( dirtyTangents && geometry.hasTangents ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				vertexTangents = face.vertexTangents;

				t1 = vertexTangents[ 0 ];
				t2 = vertexTangents[ 1 ];
				t3 = vertexTangents[ 2 ];

				tangentArray[ offset_tangent ]     = t1.x;
				tangentArray[ offset_tangent + 1 ] = t1.y;
				tangentArray[ offset_tangent + 2 ] = t1.z;
				tangentArray[ offset_tangent + 3 ] = t1.w;

				tangentArray[ offset_tangent + 4 ] = t2.x;
				tangentArray[ offset_tangent + 5 ] = t2.y;
				tangentArray[ offset_tangent + 6 ] = t2.z;
				tangentArray[ offset_tangent + 7 ] = t2.w;

				tangentArray[ offset_tangent + 8 ]  = t3.x;
				tangentArray[ offset_tangent + 9 ]  = t3.y;
				tangentArray[ offset_tangent + 10 ] = t3.z;
				tangentArray[ offset_tangent + 11 ] = t3.w;

				offset_tangent += 12;

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, tangentArray, hint );

		}

		if ( dirtyNormals ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				face = obj_faces[ chunk_faces3[ f ] ];

				vertexNormals = face.vertexNormals;
				faceNormal = face.normal;

				if ( vertexNormals.length === 3 && needsSmoothNormals ) {

					for ( i = 0; i < 3; i ++ ) {

						vn = vertexNormals[ i ];

						normalArray[ offset_normal ]     = vn.x;
						normalArray[ offset_normal + 1 ] = vn.y;
						normalArray[ offset_normal + 2 ] = vn.z;

						offset_normal += 3;

					}

				} else {

					for ( i = 0; i < 3; i ++ ) {

						normalArray[ offset_normal ]     = faceNormal.x;
						normalArray[ offset_normal + 1 ] = faceNormal.y;
						normalArray[ offset_normal + 2 ] = faceNormal.z;

						offset_normal += 3;

					}

				}

			}

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, normalArray, hint );

		}

		if ( dirtyUvs && obj_uvs ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv = obj_uvs[ fi ];

				if ( uv === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uvi = uv[ i ];

					uvArray[ offset_uv ]     = uvi.x;
					uvArray[ offset_uv + 1 ] = uvi.y;

					offset_uv += 2;

				}

			}

			if ( offset_uv > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uvArray, hint );

			}

		}

		if ( dirtyUvs && obj_uvs2 ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				fi = chunk_faces3[ f ];

				uv2 = obj_uvs2[ fi ];

				if ( uv2 === undefined ) continue;

				for ( i = 0; i < 3; i ++ ) {

					uv2i = uv2[ i ];

					uv2Array[ offset_uv2 ]     = uv2i.x;
					uv2Array[ offset_uv2 + 1 ] = uv2i.y;

					offset_uv2 += 2;

				}

			}

			if ( offset_uv2 > 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, uv2Array, hint );

			}

		}

		if ( dirtyElements ) {

			for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

				faceArray[ offset_face ]   = vertexIndex;
				faceArray[ offset_face + 1 ] = vertexIndex + 1;
				faceArray[ offset_face + 2 ] = vertexIndex + 2;

				offset_face += 3;

				lineArray[ offset_line ]     = vertexIndex;
				lineArray[ offset_line + 1 ] = vertexIndex + 1;

				lineArray[ offset_line + 2 ] = vertexIndex;
				lineArray[ offset_line + 3 ] = vertexIndex + 2;

				lineArray[ offset_line + 4 ] = vertexIndex + 1;
				lineArray[ offset_line + 5 ] = vertexIndex + 2;

				offset_line += 6;

				vertexIndex += 3;

			}

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, faceArray, hint );

			_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
			_gl.bufferData( _gl.ELEMENT_ARRAY_BUFFER, lineArray, hint );

		}

		if ( customAttributes ) {

			for ( i = 0, il = customAttributes.length; i < il; i ++ ) {

				customAttribute = customAttributes[ i ];

				if ( ! customAttribute.__original.needsUpdate ) continue;

				offset_custom = 0;
				offset_customSrc = 0;

				if ( customAttribute.size === 1 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ] ];

							customAttribute.array[ offset_custom ]     = customAttribute.value[ face.a ];
							customAttribute.array[ offset_custom + 1 ] = customAttribute.value[ face.b ];
							customAttribute.array[ offset_custom + 2 ] = customAttribute.value[ face.c ];

							offset_custom += 3;

						}

					} else if ( customAttribute.boundTo === 'faces' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							customAttribute.array[ offset_custom ]     = value;
							customAttribute.array[ offset_custom + 1 ] = value;
							customAttribute.array[ offset_custom + 2 ] = value;

							offset_custom += 3;

						}

					}

				} else if ( customAttribute.size === 2 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ]     = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

					} else if ( customAttribute.boundTo === 'faces' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ]     = v1.x;
							customAttribute.array[ offset_custom + 1 ] = v1.y;

							customAttribute.array[ offset_custom + 2 ] = v2.x;
							customAttribute.array[ offset_custom + 3 ] = v2.y;

							customAttribute.array[ offset_custom + 4 ] = v3.x;
							customAttribute.array[ offset_custom + 5 ] = v3.y;

							offset_custom += 6;

						}

					}

				} else if ( customAttribute.size === 3 ) {

					var pp;

					if ( customAttribute.type === 'c' ) {

						pp = [ 'r', 'g', 'b' ];

					} else {

						pp = [ 'x', 'y', 'z' ];

					}

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					} else if ( customAttribute.boundTo === 'faces' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					} else if ( customAttribute.boundTo === 'faceVertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom ]     = v1[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 1 ] = v1[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 2 ] = v1[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 3 ] = v2[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 4 ] = v2[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 5 ] = v2[ pp[ 2 ] ];

							customAttribute.array[ offset_custom + 6 ] = v3[ pp[ 0 ] ];
							customAttribute.array[ offset_custom + 7 ] = v3[ pp[ 1 ] ];
							customAttribute.array[ offset_custom + 8 ] = v3[ pp[ 2 ] ];

							offset_custom += 9;

						}

					}

				} else if ( customAttribute.size === 4 ) {

					if ( customAttribute.boundTo === undefined || customAttribute.boundTo === 'vertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							face = obj_faces[ chunk_faces3[ f ] ];

							v1 = customAttribute.value[ face.a ];
							v2 = customAttribute.value[ face.b ];
							v3 = customAttribute.value[ face.c ];

							customAttribute.array[ offset_custom  ]   = v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === 'faces' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value;
							v2 = value;
							v3 = value;

							customAttribute.array[ offset_custom  ]   = v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					} else if ( customAttribute.boundTo === 'faceVertices' ) {

						for ( f = 0, fl = chunk_faces3.length; f < fl; f ++ ) {

							value = customAttribute.value[ chunk_faces3[ f ] ];

							v1 = value[ 0 ];
							v2 = value[ 1 ];
							v3 = value[ 2 ];

							customAttribute.array[ offset_custom  ]   = v1.x;
							customAttribute.array[ offset_custom + 1  ] = v1.y;
							customAttribute.array[ offset_custom + 2  ] = v1.z;
							customAttribute.array[ offset_custom + 3  ] = v1.w;

							customAttribute.array[ offset_custom + 4  ] = v2.x;
							customAttribute.array[ offset_custom + 5  ] = v2.y;
							customAttribute.array[ offset_custom + 6  ] = v2.z;
							customAttribute.array[ offset_custom + 7  ] = v2.w;

							customAttribute.array[ offset_custom + 8  ] = v3.x;
							customAttribute.array[ offset_custom + 9  ] = v3.y;
							customAttribute.array[ offset_custom + 10 ] = v3.z;
							customAttribute.array[ offset_custom + 11 ] = v3.w;

							offset_custom += 12;

						}

					}

				}

				_gl.bindBuffer( _gl.ARRAY_BUFFER, customAttribute.buffer );
				_gl.bufferData( _gl.ARRAY_BUFFER, customAttribute.array, hint );

			}

		}

		if ( dispose ) {

			delete geometryGroup.__inittedArrays;
			delete geometryGroup.__colorArray;
			delete geometryGroup.__normalArray;
			delete geometryGroup.__tangentArray;
			delete geometryGroup.__uvArray;
			delete geometryGroup.__uv2Array;
			delete geometryGroup.__faceArray;
			delete geometryGroup.__vertexArray;
			delete geometryGroup.__lineArray;
			delete geometryGroup.__skinIndexArray;
			delete geometryGroup.__skinWeightArray;

		}

	};

	function setDirectBuffers( geometry ) {

		var attributes = geometry.attributes;
		var attributesKeys = geometry.attributesKeys;

		for ( var i = 0, l = attributesKeys.length; i < l; i ++ ) {

			var key = attributesKeys[ i ];
			var attribute = attributes[ key ];

			if ( attribute.buffer === undefined ) {

				attribute.buffer = _gl.createBuffer();
				attribute.needsUpdate = true;

			}

			if ( attribute.needsUpdate === true ) {

				var bufferType = ( key === 'index' ) ? _gl.ELEMENT_ARRAY_BUFFER : _gl.ARRAY_BUFFER;

				_gl.bindBuffer( bufferType, attribute.buffer );
				_gl.bufferData( bufferType, attribute.array, _gl.STATIC_DRAW );

				attribute.needsUpdate = false;

			}

		}

	}

	// Buffer rendering

	this.renderBufferImmediate = function ( object, program, material ) {

		initAttributes();

		if ( object.hasPositions && ! object.__webglVertexBuffer ) object.__webglVertexBuffer = _gl.createBuffer();
		if ( object.hasNormals && ! object.__webglNormalBuffer ) object.__webglNormalBuffer = _gl.createBuffer();
		if ( object.hasUvs && ! object.__webglUvBuffer ) object.__webglUvBuffer = _gl.createBuffer();
		if ( object.hasColors && ! object.__webglColorBuffer ) object.__webglColorBuffer = _gl.createBuffer();

		if ( object.hasPositions ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglVertexBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.positionArray, _gl.DYNAMIC_DRAW );
			enableAttribute( program.attributes.position );
			_gl.vertexAttribPointer( program.attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasNormals ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglNormalBuffer );

			if ( material.shading === THREE.FlatShading ) {

				var nx, ny, nz,
					nax, nbx, ncx, nay, nby, ncy, naz, nbz, ncz,
					normalArray,
					i, il = object.count * 3;

				for ( i = 0; i < il; i += 9 ) {

					normalArray = object.normalArray;

					nax  = normalArray[ i ];
					nay  = normalArray[ i + 1 ];
					naz  = normalArray[ i + 2 ];

					nbx  = normalArray[ i + 3 ];
					nby  = normalArray[ i + 4 ];
					nbz  = normalArray[ i + 5 ];

					ncx  = normalArray[ i + 6 ];
					ncy  = normalArray[ i + 7 ];
					ncz  = normalArray[ i + 8 ];

					nx = ( nax + nbx + ncx ) / 3;
					ny = ( nay + nby + ncy ) / 3;
					nz = ( naz + nbz + ncz ) / 3;

					normalArray[ i ]   = nx;
					normalArray[ i + 1 ] = ny;
					normalArray[ i + 2 ] = nz;

					normalArray[ i + 3 ] = nx;
					normalArray[ i + 4 ] = ny;
					normalArray[ i + 5 ] = nz;

					normalArray[ i + 6 ] = nx;
					normalArray[ i + 7 ] = ny;
					normalArray[ i + 8 ] = nz;

				}

			}

			_gl.bufferData( _gl.ARRAY_BUFFER, object.normalArray, _gl.DYNAMIC_DRAW );
			enableAttribute( program.attributes.normal );
			_gl.vertexAttribPointer( program.attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasUvs && material.map ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglUvBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.uvArray, _gl.DYNAMIC_DRAW );
			enableAttribute( program.attributes.uv );
			_gl.vertexAttribPointer( program.attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.hasColors && material.vertexColors !== THREE.NoColors ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, object.__webglColorBuffer );
			_gl.bufferData( _gl.ARRAY_BUFFER, object.colorArray, _gl.DYNAMIC_DRAW );
			enableAttribute( program.attributes.color );
			_gl.vertexAttribPointer( program.attributes.color, 3, _gl.FLOAT, false, 0, 0 );

		}

		disableUnusedAttributes();

		_gl.drawArrays( _gl.TRIANGLES, 0, object.count );

		object.count = 0;

	};

	function setupVertexAttributes( material, program, geometry, startIndex ) {

		var geometryAttributes = geometry.attributes;

		var programAttributes = program.attributes;
		var programAttributesKeys = program.attributesKeys;

		for ( var i = 0, l = programAttributesKeys.length; i < l; i ++ ) {

			var key = programAttributesKeys[ i ];
			var programAttribute = programAttributes[ key ];

			if ( programAttribute >= 0 ) {

				var geometryAttribute = geometryAttributes[ key ];

				if ( geometryAttribute !== undefined ) {

					var size = geometryAttribute.itemSize;

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryAttribute.buffer );

					enableAttribute( programAttribute );

					_gl.vertexAttribPointer( programAttribute, size, _gl.FLOAT, false, 0, startIndex * size * 4 ); // 4 bytes per Float32

				} else if ( material.defaultAttributeValues !== undefined ) {

					if ( material.defaultAttributeValues[ key ].length === 2 ) {

						_gl.vertexAttrib2fv( programAttribute, material.defaultAttributeValues[ key ] );

					} else if ( material.defaultAttributeValues[ key ].length === 3 ) {

						_gl.vertexAttrib3fv( programAttribute, material.defaultAttributeValues[ key ] );

					}

				}

			}

		}

		disableUnusedAttributes();

	}

	this.renderBufferDirect = function ( camera, lights, fog, material, geometry, object ) {

		if ( material.visible === false ) return;

		var program = setProgram( camera, lights, fog, material, object );

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryHash = ( geometry.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			initAttributes();

		}

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			var mode = material.wireframe === true ? _gl.LINES : _gl.TRIANGLES;

			var index = geometry.attributes.index;

			if ( index ) {

				// indexed triangles

				var type, size;

				if ( index.array instanceof Uint32Array && extensions.get( 'OES_element_index_uint' ) ) {

					type = _gl.UNSIGNED_INT;
					size = 4;

				} else {

					type = _gl.UNSIGNED_SHORT;
					size = 2;

				}

				var offsets = geometry.offsets;

				if ( offsets.length === 0 ) {

					if ( updateBuffers ) {

						setupVertexAttributes( material, program, geometry, 0 );
						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

					}

					_gl.drawElements( mode, index.array.length, type, 0 );

					_this.info.render.calls ++;
					_this.info.render.vertices += index.array.length; // not really true, here vertices can be shared
					_this.info.render.faces += index.array.length / 3;

				} else {

					// if there is more than 1 chunk
					// must set attribute pointers to use new offsets for each chunk
					// even if geometry and materials didn't change

					updateBuffers = true;

					for ( var i = 0, il = offsets.length; i < il; i ++ ) {

						var startIndex = offsets[ i ].index;

						if ( updateBuffers ) {

							setupVertexAttributes( material, program, geometry, startIndex );
							_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

						}

						// render indexed triangles

						_gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size );

						_this.info.render.calls ++;
						_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared
						_this.info.render.faces += offsets[ i ].count / 3;

					}

				}

			} else {

				// non-indexed triangles

				if ( updateBuffers ) {

					setupVertexAttributes( material, program, geometry, 0 );

				}

				var position = geometry.attributes[ 'position' ];

				// render non-indexed triangles

				_gl.drawArrays( mode, 0, position.array.length / 3 );

				_this.info.render.calls ++;
				_this.info.render.vertices += position.array.length / 3;
				_this.info.render.faces += position.array.length / 9;

			}

		} else if ( object instanceof THREE.PointCloud ) {

			// render particles

			if ( updateBuffers ) {

				setupVertexAttributes( material, program, geometry, 0 );

			}

			var position = geometry.attributes.position;

			// render particles

			_gl.drawArrays( _gl.POINTS, 0, position.array.length / 3 );

			_this.info.render.calls ++;
			_this.info.render.points += position.array.length / 3;

		} else if ( object instanceof THREE.Line ) {

			var mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

			setLineWidth( material.linewidth );

			var index = geometry.attributes.index;

			if ( index ) {

				// indexed lines

				var type, size;

				if ( index.array instanceof Uint32Array ) {

					type = _gl.UNSIGNED_INT;
					size = 4;

				} else {

					type = _gl.UNSIGNED_SHORT;
					size = 2;

				}

				var offsets = geometry.offsets;

				if ( offsets.length === 0 ) {

					if ( updateBuffers ) {

						setupVertexAttributes( material, program, geometry, 0 );
						_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

					}

					_gl.drawElements( mode, index.array.length, type, 0 ); // 2 bytes per Uint16Array

					_this.info.render.calls ++;
					_this.info.render.vertices += index.array.length; // not really true, here vertices can be shared

				} else {

					// if there is more than 1 chunk
					// must set attribute pointers to use new offsets for each chunk
					// even if geometry and materials didn't change

					if ( offsets.length > 1 ) updateBuffers = true;

					for ( var i = 0, il = offsets.length; i < il; i ++ ) {

						var startIndex = offsets[ i ].index;

						if ( updateBuffers ) {

							setupVertexAttributes( material, program, geometry, startIndex );
							_gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, index.buffer );

						}

						// render indexed lines

						_gl.drawElements( mode, offsets[ i ].count, type, offsets[ i ].start * size ); // 2 bytes per Uint16Array

						_this.info.render.calls ++;
						_this.info.render.vertices += offsets[ i ].count; // not really true, here vertices can be shared

					}

				}

			} else {

				// non-indexed lines

				if ( updateBuffers ) {

					setupVertexAttributes( material, program, geometry, 0 );

				}

				var position = geometry.attributes.position;

				_gl.drawArrays( mode, 0, position.array.length / 3 );

				_this.info.render.calls ++;
				_this.info.render.points += position.array.length / 3;

			}

		}

	};

	this.renderBuffer = function ( camera, lights, fog, material, geometryGroup, object ) {

		if ( material.visible === false ) return;

		var program = setProgram( camera, lights, fog, material, object );

		var attributes = program.attributes;

		var updateBuffers = false,
			wireframeBit = material.wireframe ? 1 : 0,
			geometryGroupHash = ( geometryGroup.id * 0xffffff ) + ( program.id * 2 ) + wireframeBit;

		if ( geometryGroupHash !== _currentGeometryGroupHash ) {

			_currentGeometryGroupHash = geometryGroupHash;
			updateBuffers = true;

		}

		if ( updateBuffers ) {

			initAttributes();

		}

		// vertices

		if ( ! material.morphTargets && attributes.position >= 0 ) {

			if ( updateBuffers ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
				enableAttribute( attributes.position );
				_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

			}

		} else {

			if ( object.morphTargetBase ) {

				setupMorphTargets( material, geometryGroup, object );

			}

		}


		if ( updateBuffers ) {

			// custom attributes

			// Use the per-geometryGroup custom attribute arrays which are setup in initMeshBuffers

			if ( geometryGroup.__webglCustomAttributesList ) {

				for ( var i = 0, il = geometryGroup.__webglCustomAttributesList.length; i < il; i ++ ) {

					var attribute = geometryGroup.__webglCustomAttributesList[ i ];

					if ( attributes[ attribute.buffer.belongsToAttribute ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, attribute.buffer );
						enableAttribute( attributes[ attribute.buffer.belongsToAttribute ] );
						_gl.vertexAttribPointer( attributes[ attribute.buffer.belongsToAttribute ], attribute.size, _gl.FLOAT, false, 0, 0 );

					}

				}

			}


			// colors

			if ( attributes.color >= 0 ) {

				if ( object.geometry.colors.length > 0 || object.geometry.faces.length > 0 ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglColorBuffer );
					enableAttribute( attributes.color );
					_gl.vertexAttribPointer( attributes.color, 3, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues !== undefined ) {


					_gl.vertexAttrib3fv( attributes.color, material.defaultAttributeValues.color );

				}

			}

			// normals

			if ( attributes.normal >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglNormalBuffer );
				enableAttribute( attributes.normal );
				_gl.vertexAttribPointer( attributes.normal, 3, _gl.FLOAT, false, 0, 0 );

			}

			// tangents

			if ( attributes.tangent >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglTangentBuffer );
				enableAttribute( attributes.tangent );
				_gl.vertexAttribPointer( attributes.tangent, 4, _gl.FLOAT, false, 0, 0 );

			}

			// uvs

			if ( attributes.uv >= 0 ) {

				if ( object.geometry.faceVertexUvs[ 0 ] ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUVBuffer );
					enableAttribute( attributes.uv );
					_gl.vertexAttribPointer( attributes.uv, 2, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues !== undefined ) {


					_gl.vertexAttrib2fv( attributes.uv, material.defaultAttributeValues.uv );

				}

			}

			if ( attributes.uv2 >= 0 ) {

				if ( object.geometry.faceVertexUvs[ 1 ] ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglUV2Buffer );
					enableAttribute( attributes.uv2 );
					_gl.vertexAttribPointer( attributes.uv2, 2, _gl.FLOAT, false, 0, 0 );

				} else if ( material.defaultAttributeValues !== undefined ) {


					_gl.vertexAttrib2fv( attributes.uv2, material.defaultAttributeValues.uv2 );

				}

			}

			if ( material.skinning &&
				 attributes.skinIndex >= 0 && attributes.skinWeight >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinIndicesBuffer );
				enableAttribute( attributes.skinIndex );
				_gl.vertexAttribPointer( attributes.skinIndex, 4, _gl.FLOAT, false, 0, 0 );

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglSkinWeightsBuffer );
				enableAttribute( attributes.skinWeight );
				_gl.vertexAttribPointer( attributes.skinWeight, 4, _gl.FLOAT, false, 0, 0 );

			}

			// line distances

			if ( attributes.lineDistance >= 0 ) {

				_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglLineDistanceBuffer );
				enableAttribute( attributes.lineDistance );
				_gl.vertexAttribPointer( attributes.lineDistance, 1, _gl.FLOAT, false, 0, 0 );

			}

		}

		disableUnusedAttributes();

		// render mesh

		if ( object instanceof THREE.Mesh ) {

			var type = geometryGroup.__typeArray === Uint32Array ? _gl.UNSIGNED_INT : _gl.UNSIGNED_SHORT;

			// wireframe

			if ( material.wireframe ) {

				setLineWidth( material.wireframeLinewidth );
				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglLineBuffer );
				_gl.drawElements( _gl.LINES, geometryGroup.__webglLineCount, type, 0 );

			// triangles

			} else {

				if ( updateBuffers ) _gl.bindBuffer( _gl.ELEMENT_ARRAY_BUFFER, geometryGroup.__webglFaceBuffer );
				_gl.drawElements( _gl.TRIANGLES, geometryGroup.__webglFaceCount, type, 0 );

			}

			_this.info.render.calls ++;
			_this.info.render.vertices += geometryGroup.__webglFaceCount;
			_this.info.render.faces += geometryGroup.__webglFaceCount / 3;

		// render lines

		} else if ( object instanceof THREE.Line ) {

			var mode = ( object.mode === THREE.LineStrip ) ? _gl.LINE_STRIP : _gl.LINES;

			setLineWidth( material.linewidth );

			_gl.drawArrays( mode, 0, geometryGroup.__webglLineCount );

			_this.info.render.calls ++;

		// render particles

		} else if ( object instanceof THREE.PointCloud ) {

			_gl.drawArrays( _gl.POINTS, 0, geometryGroup.__webglParticleCount );

			_this.info.render.calls ++;
			_this.info.render.points += geometryGroup.__webglParticleCount;

		}

	};

	function initAttributes() {

		for ( var i = 0, l = _newAttributes.length; i < l; i ++ ) {

			_newAttributes[ i ] = 0;

		}

	}

	function enableAttribute( attribute ) {

		_newAttributes[ attribute ] = 1;

		if ( _enabledAttributes[ attribute ] === 0 ) {

			_gl.enableVertexAttribArray( attribute );
			_enabledAttributes[ attribute ] = 1;

		}

	}

	function disableUnusedAttributes() {

		for ( var i = 0, l = _enabledAttributes.length; i < l; i ++ ) {

			if ( _enabledAttributes[ i ] !== _newAttributes[ i ] ) {

				_gl.disableVertexAttribArray( i );
				_enabledAttributes[ i ] = 0;

			}

		}

	}

	function setupMorphTargets ( material, geometryGroup, object ) {

		// set base

		var attributes = material.program.attributes;

		if ( object.morphTargetBase !== - 1 && attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ object.morphTargetBase ] );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		} else if ( attributes.position >= 0 ) {

			_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglVertexBuffer );
			enableAttribute( attributes.position );
			_gl.vertexAttribPointer( attributes.position, 3, _gl.FLOAT, false, 0, 0 );

		}

		if ( object.morphTargetForcedOrder.length ) {

			// set forced order

			var m = 0;
			var order = object.morphTargetForcedOrder;
			var influences = object.morphTargetInfluences;

			while ( m < material.numSupportedMorphTargets && m < order.length ) {

				if ( attributes[ 'morphTarget' + m ] >= 0 ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ 'morphTarget' + m ] );
					_gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				if ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {

					_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ order[ m ] ] );
					enableAttribute( attributes[ 'morphNormal' + m ] );
					_gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );

				}

				object.__webglMorphTargetInfluences[ m ] = influences[ order[ m ] ];

				m ++;
			}

		} else {

			// find the most influencing

			var influence, activeInfluenceIndices = [];
			var influences = object.morphTargetInfluences;
			var i, il = influences.length;

			for ( i = 0; i < il; i ++ ) {

				influence = influences[ i ];

				if ( influence > 0 ) {

					activeInfluenceIndices.push( [ influence, i ] );

				}

			}

			if ( activeInfluenceIndices.length > material.numSupportedMorphTargets ) {

				activeInfluenceIndices.sort( numericalSort );
				activeInfluenceIndices.length = material.numSupportedMorphTargets;

			} else if ( activeInfluenceIndices.length > material.numSupportedMorphNormals ) {

				activeInfluenceIndices.sort( numericalSort );

			} else if ( activeInfluenceIndices.length === 0 ) {

				activeInfluenceIndices.push( [ 0, 0 ] );

			};

			var influenceIndex, m = 0;

			while ( m < material.numSupportedMorphTargets ) {

				if ( activeInfluenceIndices[ m ] ) {

					influenceIndex = activeInfluenceIndices[ m ][ 1 ];

					if ( attributes[ 'morphTarget' + m ] >= 0 ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphTargetsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ 'morphTarget' + m ] );
						_gl.vertexAttribPointer( attributes[ 'morphTarget' + m ], 3, _gl.FLOAT, false, 0, 0 );

					}

					if ( attributes[ 'morphNormal' + m ] >= 0 && material.morphNormals ) {

						_gl.bindBuffer( _gl.ARRAY_BUFFER, geometryGroup.__webglMorphNormalsBuffers[ influenceIndex ] );
						enableAttribute( attributes[ 'morphNormal' + m ] );
						_gl.vertexAttribPointer( attributes[ 'morphNormal' + m ], 3, _gl.FLOAT, false, 0, 0 );


					}

					object.__webglMorphTargetInfluences[ m ] = influences[ influenceIndex ];

				} else {

					/*
					_gl.vertexAttribPointer( attributes[ "morphTarget" + m ], 3, _gl.FLOAT, false, 0, 0 );

					if ( material.morphNormals ) {

						_gl.vertexAttribPointer( attributes[ "morphNormal" + m ], 3, _gl.FLOAT, false, 0, 0 );

					}
					*/

					object.__webglMorphTargetInfluences[ m ] = 0;

				}

				m ++;

			}

		}

		// load updated influences uniform

		if ( material.program.uniforms.morphTargetInfluences !== null ) {

			_gl.uniform1fv( material.program.uniforms.morphTargetInfluences, object.__webglMorphTargetInfluences );

		}

	}

	// Sorting

	function painterSortStable ( a, b ) {

		if ( a.material.id !== b.material.id ) {

			return b.material.id - a.material.id;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function numericalSort ( a, b ) {

		return b[ 0 ] - a[ 0 ];

	}

	// Rendering

	this.render = function ( scene, camera, renderTarget, forceClear ) {

		if ( camera instanceof THREE.Camera === false ) {

			console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
			return;

		}

		var fog = scene.fog;

		// reset caching for this frame

		_currentGeometryGroupHash = - 1;
		_currentMaterialId = - 1;
		_currentCamera = null;
		_lightsNeedUpdate = true;

		// update scene graph

		if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

		// update camera matrices and frustum

		if ( camera.parent === undefined ) camera.updateMatrixWorld();

		// update Skeleton objects

		scene.traverse( function ( object ) {

			if ( object instanceof THREE.SkinnedMesh ) {

				object.skeleton.update();

			}

		} );

		camera.matrixWorldInverse.getInverse( camera.matrixWorld );

		_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
		_frustum.setFromMatrix( _projScreenMatrix );

		lights.length = 0;
		opaqueObjects.length = 0;
		transparentObjects.length = 0;

		sprites.length = 0;
		lensFlares.length = 0;

		projectObject( scene, scene );

		if ( _this.sortObjects === true ) {

			opaqueObjects.sort( painterSortStable );
			transparentObjects.sort( reversePainterSortStable );

		}

		// custom render plugins (pre pass)

		shadowMapPlugin.render( scene, camera );

		//

		_this.info.render.calls = 0;
		_this.info.render.vertices = 0;
		_this.info.render.faces = 0;
		_this.info.render.points = 0;

		this.setRenderTarget( renderTarget );

		if ( this.autoClear || forceClear ) {

			this.clear( this.autoClearColor, this.autoClearDepth, this.autoClearStencil );

		}

		// set matrices for immediate objects

		for ( var i = 0, il = _webglObjectsImmediate.length; i < il; i ++ ) {

			var webglObject = _webglObjectsImmediate[ i ];
			var object = webglObject.object;

			if ( object.visible ) {

				setupMatrices( object, camera );

				unrollImmediateBufferMaterial( webglObject );

			}

		}

		if ( scene.overrideMaterial ) {

			var material = scene.overrideMaterial;

			this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
			this.setDepthTest( material.depthTest );
			this.setDepthWrite( material.depthWrite );
			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			renderObjects( opaqueObjects, camera, lights, fog, true, material );
			renderObjects( transparentObjects, camera, lights, fog, true, material );
			renderObjectsImmediate( _webglObjectsImmediate, '', camera, lights, fog, false, material );

		} else {

			var material = null;

			// opaque pass (front-to-back order)

			this.setBlending( THREE.NoBlending );

			renderObjects( opaqueObjects, camera, lights, fog, false, material );
			renderObjectsImmediate( _webglObjectsImmediate, 'opaque', camera, lights, fog, false, material );

			// transparent pass (back-to-front order)

			renderObjects( transparentObjects, camera, lights, fog, true, material );
			renderObjectsImmediate( _webglObjectsImmediate, 'transparent', camera, lights, fog, true, material );

		}

		// custom render plugins (post pass)

		spritePlugin.render( scene, camera );
		lensFlarePlugin.render( scene, camera, _currentWidth, _currentHeight );

		// Generate mipmap if we're using any kind of mipmap filtering

		if ( renderTarget && renderTarget.generateMipmaps && renderTarget.minFilter !== THREE.NearestFilter && renderTarget.minFilter !== THREE.LinearFilter ) {

			updateRenderTargetMipmap( renderTarget );

		}

		// Ensure depth buffer writing is enabled so it can be cleared on next render

		this.setDepthTest( true );
		this.setDepthWrite( true );

		// _gl.finish();

	};

	function projectObject( scene, object ) {

		if ( object.visible === false ) return;

		if ( object instanceof THREE.Scene || object instanceof THREE.Group ) {

			// skip

		} else {

			initObject( object, scene );

			if ( object instanceof THREE.Light ) {

				lights.push( object );

			} else if ( object instanceof THREE.Sprite ) {

				sprites.push( object );

			} else if ( object instanceof THREE.LensFlare ) {

				lensFlares.push( object );

			} else {

				var webglObjects = _webglObjects[ object.id ];

				if ( webglObjects && ( object.frustumCulled === false || _frustum.intersectsObject( object ) === true ) ) {

					updateObject( object, scene );

					for ( var i = 0, l = webglObjects.length; i < l; i ++ ) {

						var webglObject = webglObjects[i];

						unrollBufferMaterial( webglObject );

						webglObject.render = true;

						if ( _this.sortObjects === true ) {

							if ( object.renderDepth !== null ) {

								webglObject.z = object.renderDepth;

							} else {

								_vector3.setFromMatrixPosition( object.matrixWorld );
								_vector3.applyProjection( _projScreenMatrix );

								webglObject.z = _vector3.z;

							}

						}

					}

				}

			}

		}

		for ( var i = 0, l = object.children.length; i < l; i ++ ) {

			projectObject( scene, object.children[ i ] );

		}

	}

	function renderObjects( renderList, camera, lights, fog, useBlending, overrideMaterial ) {

		var material;

		for ( var i = renderList.length - 1; i !== - 1; i -- ) {

			var webglObject = renderList[ i ];

			var object = webglObject.object;
			var buffer = webglObject.buffer;

			setupMatrices( object, camera );

			if ( overrideMaterial ) {

				material = overrideMaterial;

			} else {

				material = webglObject.material;

				if ( ! material ) continue;

				if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

				_this.setDepthTest( material.depthTest );
				_this.setDepthWrite( material.depthWrite );
				setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			}

			_this.setMaterialFaces( material );

			if ( buffer instanceof THREE.BufferGeometry ) {

				_this.renderBufferDirect( camera, lights, fog, material, buffer, object );

			} else {

				_this.renderBuffer( camera, lights, fog, material, buffer, object );

			}

		}

	}

	function renderObjectsImmediate ( renderList, materialType, camera, lights, fog, useBlending, overrideMaterial ) {

		var material;

		for ( var i = 0, il = renderList.length; i < il; i ++ ) {

			var webglObject = renderList[ i ];
			var object = webglObject.object;

			if ( object.visible ) {

				if ( overrideMaterial ) {

					material = overrideMaterial;

				} else {

					material = webglObject[ materialType ];

					if ( ! material ) continue;

					if ( useBlending ) _this.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );

					_this.setDepthTest( material.depthTest );
					_this.setDepthWrite( material.depthWrite );
					setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

				}

				_this.renderImmediateObject( camera, lights, fog, material, object );

			}

		}

	}

	this.renderImmediateObject = function ( camera, lights, fog, material, object ) {

		var program = setProgram( camera, lights, fog, material, object );

		_currentGeometryGroupHash = - 1;

		_this.setMaterialFaces( material );

		if ( object.immediateRenderCallback ) {

			object.immediateRenderCallback( program, _gl, _frustum );

		} else {

			object.render( function ( object ) { _this.renderBufferImmediate( object, program, material ); } );

		}

	};

	function unrollImmediateBufferMaterial ( globject ) {

		var object = globject.object,
			material = object.material;

		if ( material.transparent ) {

			globject.transparent = material;
			globject.opaque = null;

		} else {

			globject.opaque = material;
			globject.transparent = null;

		}

	}

	function unrollBufferMaterial ( globject ) {

		var object = globject.object;
		var buffer = globject.buffer;

		var geometry = object.geometry;
		var material = object.material;

		if ( material instanceof THREE.MeshFaceMaterial ) {

			var materialIndex = geometry instanceof THREE.BufferGeometry ? 0 : buffer.materialIndex;

			material = material.materials[ materialIndex ];

			globject.material = material;

			if ( material.transparent ) {

				transparentObjects.push( globject );

			} else {

				opaqueObjects.push( globject );

			}

		} else if ( material ) {

			globject.material = material;

			if ( material.transparent ) {

				transparentObjects.push( globject );

			} else {

				opaqueObjects.push( globject );

			}

		}

	}

	function initObject( object, scene ) {

		if ( object.__webglInit === undefined ) {

			object.__webglInit = true;
			object._modelViewMatrix = new THREE.Matrix4();
			object._normalMatrix = new THREE.Matrix3();

			object.addEventListener( 'removed', onObjectRemoved );

		}

		var geometry = object.geometry;

		if ( geometry === undefined ) {

			// ImmediateRenderObject

		} else if ( geometry.__webglInit === undefined ) {

			geometry.__webglInit = true;
			geometry.addEventListener( 'dispose', onGeometryDispose );

			if ( geometry instanceof THREE.BufferGeometry ) {

				//

			} else if ( object instanceof THREE.Mesh ) {

				initGeometryGroups( scene, object, geometry );

			} else if ( object instanceof THREE.Line ) {

				if ( geometry.__webglVertexBuffer === undefined ) {

					createLineBuffers( geometry );
					initLineBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;
					geometry.lineDistancesNeedUpdate = true;

				}

			} else if ( object instanceof THREE.PointCloud ) {

				if ( geometry.__webglVertexBuffer === undefined ) {

					createParticleBuffers( geometry );
					initParticleBuffers( geometry, object );

					geometry.verticesNeedUpdate = true;
					geometry.colorsNeedUpdate = true;

				}

			}

		}

		if ( object.__webglActive === undefined) {

			object.__webglActive = true;

			if ( object instanceof THREE.Mesh ) {

				if ( geometry instanceof THREE.BufferGeometry ) {

					addBuffer( _webglObjects, geometry, object );

				} else if ( geometry instanceof THREE.Geometry ) {

					var geometryGroupsList = geometryGroups[ geometry.id ];

					for ( var i = 0,l = geometryGroupsList.length; i < l; i ++ ) {

						addBuffer( _webglObjects, geometryGroupsList[ i ], object );

					}

				}

			} else if ( object instanceof THREE.Line || object instanceof THREE.PointCloud ) {

				addBuffer( _webglObjects, geometry, object );

			} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

				addBufferImmediate( _webglObjectsImmediate, object );

			}

		}

	}

	// Geometry splitting

	var geometryGroups = {};
	var geometryGroupCounter = 0;

	function makeGroups( geometry, usesFaceMaterial ) {

		var maxVerticesInGroup = extensions.get( 'OES_element_index_uint' ) ? 4294967296 : 65535;

		var groupHash, hash_map = {};

		var numMorphTargets = geometry.morphTargets.length;
		var numMorphNormals = geometry.morphNormals.length;

		var group;
		var groups = {};
		var groupsList = [];

		for ( var f = 0, fl = geometry.faces.length; f < fl; f ++ ) {

			var face = geometry.faces[ f ];
			var materialIndex = usesFaceMaterial ? face.materialIndex : 0;

			if ( ! ( materialIndex in hash_map ) ) {

				hash_map[ materialIndex ] = { hash: materialIndex, counter: 0 };

			}

			groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

			if ( ! ( groupHash in groups ) ) {

				group = {
					id: geometryGroupCounter ++,
					faces3: [],
					materialIndex: materialIndex,
					vertices: 0,
					numMorphTargets: numMorphTargets,
					numMorphNormals: numMorphNormals
				};
				
				groups[ groupHash ] = group;
				groupsList.push( group );

			}

			if ( groups[ groupHash ].vertices + 3 > maxVerticesInGroup ) {

				hash_map[ materialIndex ].counter += 1;
				groupHash = hash_map[ materialIndex ].hash + '_' + hash_map[ materialIndex ].counter;

				if ( ! ( groupHash in groups ) ) {

					group = {
						id: geometryGroupCounter ++,
						faces3: [],
						materialIndex: materialIndex,
						vertices: 0,
						numMorphTargets: numMorphTargets,
						numMorphNormals: numMorphNormals
					};
					
					groups[ groupHash ] = group;
					groupsList.push( group );

				}

			}

			groups[ groupHash ].faces3.push( f );
			groups[ groupHash ].vertices += 3;

		}

		return groupsList;

	}

	function initGeometryGroups( scene, object, geometry ) {

		var material = object.material, addBuffers = false;

		if ( geometryGroups[ geometry.id ] === undefined || geometry.groupsNeedUpdate === true ) {

			delete _webglObjects[ object.id ];

			geometryGroups[ geometry.id ] = makeGroups( geometry, material instanceof THREE.MeshFaceMaterial );

			geometry.groupsNeedUpdate = false;

		}

		var geometryGroupsList = geometryGroups[ geometry.id ];

		// create separate VBOs per geometry chunk

		for ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {

			var geometryGroup = geometryGroupsList[ i ];

			// initialise VBO on the first access

			if ( geometryGroup.__webglVertexBuffer === undefined ) {

				createMeshBuffers( geometryGroup );
				initMeshBuffers( geometryGroup, object );

				geometry.verticesNeedUpdate = true;
				geometry.morphTargetsNeedUpdate = true;
				geometry.elementsNeedUpdate = true;
				geometry.uvsNeedUpdate = true;
				geometry.normalsNeedUpdate = true;
				geometry.tangentsNeedUpdate = true;
				geometry.colorsNeedUpdate = true;

				addBuffers = true;

			} else {

				addBuffers = false;

			}

			if ( addBuffers || object.__webglActive === undefined ) {

				addBuffer( _webglObjects, geometryGroup, object );

			}

		}

		object.__webglActive = true;

	}

	function addBuffer( objlist, buffer, object ) {

		var id = object.id;
		objlist[id] = objlist[id] || [];
		objlist[id].push(
			{
				id: id,
				buffer: buffer,
				object: object,
				material: null,
				z: 0
			}
		);

	};

	function addBufferImmediate( objlist, object ) {

		objlist.push(
			{
				id: null,
				object: object,
				opaque: null,
				transparent: null,
				z: 0
			}
		);

	};

	// Objects updates

	function updateObject( object, scene ) {

		var geometry = object.geometry, customAttributesDirty, material;

		if ( geometry instanceof THREE.BufferGeometry ) {

			setDirectBuffers( geometry );

		} else if ( object instanceof THREE.Mesh ) {

			// check all geometry groups

			if ( geometry.groupsNeedUpdate === true ) {

				initGeometryGroups( scene, object, geometry );

			}

			var geometryGroupsList = geometryGroups[ geometry.id ];

			for ( var i = 0, il = geometryGroupsList.length; i < il; i ++ ) {

				var geometryGroup = geometryGroupsList[ i ];

				material = getBufferMaterial( object, geometryGroup );

				if ( geometry.groupsNeedUpdate === true ) {

					initMeshBuffers( geometryGroup, object );

				}

				customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

				if ( geometry.verticesNeedUpdate || geometry.morphTargetsNeedUpdate || geometry.elementsNeedUpdate ||
					 geometry.uvsNeedUpdate || geometry.normalsNeedUpdate ||
					 geometry.colorsNeedUpdate || geometry.tangentsNeedUpdate || customAttributesDirty ) {

					setMeshBuffers( geometryGroup, object, _gl.DYNAMIC_DRAW, ! geometry.dynamic, material );

				}

			}

			geometry.verticesNeedUpdate = false;
			geometry.morphTargetsNeedUpdate = false;
			geometry.elementsNeedUpdate = false;
			geometry.uvsNeedUpdate = false;
			geometry.normalsNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.tangentsNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		} else if ( object instanceof THREE.Line ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || geometry.lineDistancesNeedUpdate || customAttributesDirty ) {

				setLineBuffers( geometry, _gl.DYNAMIC_DRAW );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;
			geometry.lineDistancesNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );


		} else if ( object instanceof THREE.PointCloud ) {

			material = getBufferMaterial( object, geometry );

			customAttributesDirty = material.attributes && areCustomAttributesDirty( material );

			if ( geometry.verticesNeedUpdate || geometry.colorsNeedUpdate || object.sortParticles || customAttributesDirty ) {

				setParticleBuffers( geometry, _gl.DYNAMIC_DRAW, object );

			}

			geometry.verticesNeedUpdate = false;
			geometry.colorsNeedUpdate = false;

			material.attributes && clearCustomAttributes( material );

		}

	}

	// Objects updates - custom attributes check

	function areCustomAttributesDirty( material ) {

		for ( var name in material.attributes ) {

			if ( material.attributes[ name ].needsUpdate ) return true;

		}

		return false;

	}

	function clearCustomAttributes( material ) {

		for ( var name in material.attributes ) {

			material.attributes[ name ].needsUpdate = false;

		}

	}

	// Objects removal

	function removeObject( object ) {

		if ( object instanceof THREE.Mesh  ||
			 object instanceof THREE.PointCloud ||
			 object instanceof THREE.Line ) {

			delete _webglObjects[ object.id ];

		} else if ( object instanceof THREE.ImmediateRenderObject || object.immediateRenderCallback ) {

			removeInstances( _webglObjectsImmediate, object );

		}

		delete object.__webglInit;
		delete object._modelViewMatrix;
		delete object._normalMatrix;

		delete object.__webglActive;

	}

	function removeInstances( objlist, object ) {

		for ( var o = objlist.length - 1; o >= 0; o -- ) {

			if ( objlist[ o ].object === object ) {

				objlist.splice( o, 1 );

			}

		}

	}

	// Materials

	function initMaterial( material, lights, fog, object ) {

		material.addEventListener( 'dispose', onMaterialDispose );

		var shaderID;

		if ( material instanceof THREE.MeshDepthMaterial ) {

			shaderID = 'depth';

		} else if ( material instanceof THREE.MeshNormalMaterial ) {

			shaderID = 'normal';

		} else if ( material instanceof THREE.MeshBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.MeshLambertMaterial ) {

			shaderID = 'lambert';

		} else if ( material instanceof THREE.MeshPhongMaterial ) {

			shaderID = 'phong';

		} else if ( material instanceof THREE.LineBasicMaterial ) {

			shaderID = 'basic';

		} else if ( material instanceof THREE.LineDashedMaterial ) {

			shaderID = 'dashed';

		} else if ( material instanceof THREE.PointCloudMaterial ) {

			shaderID = 'particle_basic';

		}

		if ( shaderID ) {

			var shader = THREE.ShaderLib[ shaderID ];

			material.__webglShader = {
				uniforms: THREE.UniformsUtils.clone( shader.uniforms ),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader
			}

		} else {

			material.__webglShader = {
				uniforms: material.uniforms,
				vertexShader: material.vertexShader,
				fragmentShader: material.fragmentShader
			}

		}

		// heuristics to create shader parameters according to lights in the scene
		// (not to blow over maxLights budget)

		var maxLightCount = allocateLights( lights );
		var maxShadows = allocateShadows( lights );
		var maxBones = allocateBones( object );

		var parameters = {

			precision: _precision,
			supportsVertexTextures: _supportsVertexTextures,

			map: !! material.map,
			envMap: !! material.envMap,
			lightMap: !! material.lightMap,
			bumpMap: !! material.bumpMap,
			normalMap: !! material.normalMap,
			specularMap: !! material.specularMap,
			alphaMap: !! material.alphaMap,

			vertexColors: material.vertexColors,

			fog: fog,
			useFog: material.fog,
			fogExp: fog instanceof THREE.FogExp2,

			sizeAttenuation: material.sizeAttenuation,
			logarithmicDepthBuffer: _logarithmicDepthBuffer,

			skinning: material.skinning,
			maxBones: maxBones,
			useVertexTexture: _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture,

			morphTargets: material.morphTargets,
			morphNormals: material.morphNormals,
			maxMorphTargets: _this.maxMorphTargets,
			maxMorphNormals: _this.maxMorphNormals,

			maxDirLights: maxLightCount.directional,
			maxPointLights: maxLightCount.point,
			maxSpotLights: maxLightCount.spot,
			maxHemiLights: maxLightCount.hemi,

			maxShadows: maxShadows,
			shadowMapEnabled: _this.shadowMapEnabled && object.receiveShadow && maxShadows > 0,
			shadowMapType: _this.shadowMapType,
			shadowMapDebug: _this.shadowMapDebug,
			shadowMapCascade: _this.shadowMapCascade,

			alphaTest: material.alphaTest,
			metal: material.metal,
			wrapAround: material.wrapAround,
			doubleSided: material.side === THREE.DoubleSide,
			flipSided: material.side === THREE.BackSide

		};

		// Generate code

		var chunks = [];

		if ( shaderID ) {

			chunks.push( shaderID );

		} else {

			chunks.push( material.fragmentShader );
			chunks.push( material.vertexShader );

		}

		if ( material.defines !== undefined ) {

			for ( var name in material.defines ) {

				chunks.push( name );
				chunks.push( material.defines[ name ] );

			}

		}

		for ( var name in parameters ) {

			chunks.push( name );
			chunks.push( parameters[ name ] );

		}

		var code = chunks.join();

		var program;

		// Check if code has been already compiled

		for ( var p = 0, pl = _programs.length; p < pl; p ++ ) {

			var programInfo = _programs[ p ];

			if ( programInfo.code === code ) {

				program = programInfo;
				program.usedTimes ++;

				break;

			}

		}

		if ( program === undefined ) {

			program = new THREE.WebGLProgram( _this, code, material, parameters );
			_programs.push( program );

			_this.info.memory.programs = _programs.length;

		}

		material.program = program;

		var attributes = program.attributes;

		if ( material.morphTargets ) {

			material.numSupportedMorphTargets = 0;

			var id, base = 'morphTarget';

			for ( var i = 0; i < _this.maxMorphTargets; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphTargets ++;

				}

			}

		}

		if ( material.morphNormals ) {

			material.numSupportedMorphNormals = 0;

			var id, base = 'morphNormal';

			for ( i = 0; i < _this.maxMorphNormals; i ++ ) {

				id = base + i;

				if ( attributes[ id ] >= 0 ) {

					material.numSupportedMorphNormals ++;

				}

			}

		}

		material.uniformsList = [];

		for ( var u in material.__webglShader.uniforms ) {

			var location = material.program.uniforms[ u ];

			if ( location ) {
				material.uniformsList.push( [ material.__webglShader.uniforms[ u ], location ] );
			}

		}

	}

	function setProgram( camera, lights, fog, material, object ) {

		_usedTextureUnits = 0;

		if ( material.needsUpdate ) {

			if ( material.program ) deallocateMaterial( material );

			initMaterial( material, lights, fog, object );
			material.needsUpdate = false;

		}

		if ( material.morphTargets ) {

			if ( ! object.__webglMorphTargetInfluences ) {

				object.__webglMorphTargetInfluences = new Float32Array( _this.maxMorphTargets );

			}

		}

		var refreshProgram = false;
		var refreshMaterial = false;
		var refreshLights = false;

		var program = material.program,
			p_uniforms = program.uniforms,
			m_uniforms = material.__webglShader.uniforms;

		if ( program.id !== _currentProgram ) {

			_gl.useProgram( program.program );
			_currentProgram = program.id;

			refreshProgram = true;
			refreshMaterial = true;
			refreshLights = true;

		}

		if ( material.id !== _currentMaterialId ) {

			if ( _currentMaterialId === -1 ) refreshLights = true;
			_currentMaterialId = material.id;

			refreshMaterial = true;

		}

		if ( refreshProgram || camera !== _currentCamera ) {

			_gl.uniformMatrix4fv( p_uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

			if ( _logarithmicDepthBuffer ) {

				_gl.uniform1f( p_uniforms.logDepthBufFC, 2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

			}


			if ( camera !== _currentCamera ) _currentCamera = camera;

			// load material specific uniforms
			// (shader material also gets them for the sake of genericity)

			if ( material instanceof THREE.ShaderMaterial ||
				 material instanceof THREE.MeshPhongMaterial ||
				 material.envMap ) {

				if ( p_uniforms.cameraPosition !== null ) {

					_vector3.setFromMatrixPosition( camera.matrixWorld );
					_gl.uniform3f( p_uniforms.cameraPosition, _vector3.x, _vector3.y, _vector3.z );

				}

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.ShaderMaterial ||
				 material.skinning ) {

				if ( p_uniforms.viewMatrix !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.viewMatrix, false, camera.matrixWorldInverse.elements );

				}

			}

		}

		// skinning uniforms must be set even if material didn't change
		// auto-setting of texture unit for bone texture must go before other textures
		// not sure why, but otherwise weird things happen

		if ( material.skinning ) {

			if ( object.bindMatrix && p_uniforms.bindMatrix !== null ) {

				_gl.uniformMatrix4fv( p_uniforms.bindMatrix, false, object.bindMatrix.elements );

			}

			if ( object.bindMatrixInverse && p_uniforms.bindMatrixInverse !== null ) {

				_gl.uniformMatrix4fv( p_uniforms.bindMatrixInverse, false, object.bindMatrixInverse.elements );

			}

			if ( _supportsBoneTextures && object.skeleton && object.skeleton.useVertexTexture ) {

				if ( p_uniforms.boneTexture !== null ) {

					var textureUnit = getTextureUnit();

					_gl.uniform1i( p_uniforms.boneTexture, textureUnit );
					_this.setTexture( object.skeleton.boneTexture, textureUnit );

				}

				if ( p_uniforms.boneTextureWidth !== null ) {

					_gl.uniform1i( p_uniforms.boneTextureWidth, object.skeleton.boneTextureWidth );

				}

				if ( p_uniforms.boneTextureHeight !== null ) {

					_gl.uniform1i( p_uniforms.boneTextureHeight, object.skeleton.boneTextureHeight );

				}

			} else if ( object.skeleton && object.skeleton.boneMatrices ) {

				if ( p_uniforms.boneGlobalMatrices !== null ) {

					_gl.uniformMatrix4fv( p_uniforms.boneGlobalMatrices, false, object.skeleton.boneMatrices );

				}

			}

		}

		if ( refreshMaterial ) {

			// refresh uniforms common to several materials

			if ( fog && material.fog ) {

				refreshUniformsFog( m_uniforms, fog );

			}

			if ( material instanceof THREE.MeshPhongMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material.lights ) {

				if ( _lightsNeedUpdate ) {

					refreshLights = true;
					setupLights( lights );
					_lightsNeedUpdate = false;
				}

				if ( refreshLights ) {
					refreshUniformsLights( m_uniforms, _lights );
					markUniformsLightsNeedsUpdate( m_uniforms, true );
				} else {
					markUniformsLightsNeedsUpdate( m_uniforms, false );
				}

			}

			if ( material instanceof THREE.MeshBasicMaterial ||
				 material instanceof THREE.MeshLambertMaterial ||
				 material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsCommon( m_uniforms, material );

			}

			// refresh single material specific uniforms

			if ( material instanceof THREE.LineBasicMaterial ) {

				refreshUniformsLine( m_uniforms, material );

			} else if ( material instanceof THREE.LineDashedMaterial ) {

				refreshUniformsLine( m_uniforms, material );
				refreshUniformsDash( m_uniforms, material );

			} else if ( material instanceof THREE.PointCloudMaterial ) {

				refreshUniformsParticle( m_uniforms, material );

			} else if ( material instanceof THREE.MeshPhongMaterial ) {

				refreshUniformsPhong( m_uniforms, material );

			} else if ( material instanceof THREE.MeshLambertMaterial ) {

				refreshUniformsLambert( m_uniforms, material );

			} else if ( material instanceof THREE.MeshDepthMaterial ) {

				m_uniforms.mNear.value = camera.near;
				m_uniforms.mFar.value = camera.far;
				m_uniforms.opacity.value = material.opacity;

			} else if ( material instanceof THREE.MeshNormalMaterial ) {

				m_uniforms.opacity.value = material.opacity;

			}

			if ( object.receiveShadow && ! material._shadowPass ) {

				refreshUniformsShadow( m_uniforms, lights );

			}

			// load common uniforms

			loadUniformsGeneric( material.uniformsList );

		}

		loadUniformsMatrices( p_uniforms, object );

		if ( p_uniforms.modelMatrix !== null ) {

			_gl.uniformMatrix4fv( p_uniforms.modelMatrix, false, object.matrixWorld.elements );

		}

		return program;

	}

	// Uniforms (refresh uniforms objects)

	function refreshUniformsCommon ( uniforms, material ) {

		uniforms.opacity.value = material.opacity;

		if ( _this.gammaInput ) {

			uniforms.diffuse.value.copyGammaToLinear( material.color );

		} else {

			uniforms.diffuse.value = material.color;

		}

		uniforms.map.value = material.map;
		uniforms.lightMap.value = material.lightMap;
		uniforms.specularMap.value = material.specularMap;
		uniforms.alphaMap.value = material.alphaMap;

		if ( material.bumpMap ) {

			uniforms.bumpMap.value = material.bumpMap;
			uniforms.bumpScale.value = material.bumpScale;

		}

		if ( material.normalMap ) {

			uniforms.normalMap.value = material.normalMap;
			uniforms.normalScale.value.copy( material.normalScale );

		}

		// uv repeat and offset setting priorities
		//  1. color map
		//  2. specular map
		//  3. normal map
		//  4. bump map
		//  5. alpha map

		var uvScaleMap;

		if ( material.map ) {

			uvScaleMap = material.map;

		} else if ( material.specularMap ) {

			uvScaleMap = material.specularMap;

		} else if ( material.normalMap ) {

			uvScaleMap = material.normalMap;

		} else if ( material.bumpMap ) {

			uvScaleMap = material.bumpMap;

		} else if ( material.alphaMap ) {

			uvScaleMap = material.alphaMap;

		}

		if ( uvScaleMap !== undefined ) {

			var offset = uvScaleMap.offset;
			var repeat = uvScaleMap.repeat;

			uniforms.offsetRepeat.value.set( offset.x, offset.y, repeat.x, repeat.y );

		}

		uniforms.envMap.value = material.envMap;
		uniforms.flipEnvMap.value = ( material.envMap instanceof THREE.WebGLRenderTargetCube ) ? 1 : - 1;

		if ( _this.gammaInput ) {

			//uniforms.reflectivity.value = material.reflectivity * material.reflectivity;
			uniforms.reflectivity.value = material.reflectivity;

		} else {

			uniforms.reflectivity.value = material.reflectivity;

		}

		uniforms.refractionRatio.value = material.refractionRatio;
		uniforms.combine.value = material.combine;
		uniforms.useRefract.value = material.envMap && material.envMap.mapping instanceof THREE.CubeRefractionMapping;

	}

	function refreshUniformsLine ( uniforms, material ) {

		uniforms.diffuse.value = material.color;
		uniforms.opacity.value = material.opacity;

	}

	function refreshUniformsDash ( uniforms, material ) {

		uniforms.dashSize.value = material.dashSize;
		uniforms.totalSize.value = material.dashSize + material.gapSize;
		uniforms.scale.value = material.scale;

	}

	function refreshUniformsParticle ( uniforms, material ) {

		uniforms.psColor.value = material.color;
		uniforms.opacity.value = material.opacity;
		uniforms.size.value = material.size;
		uniforms.scale.value = _canvas.height / 2.0; // TODO: Cache this.

		uniforms.map.value = material.map;

	}

	function refreshUniformsFog ( uniforms, fog ) {

		uniforms.fogColor.value = fog.color;

		if ( fog instanceof THREE.Fog ) {

			uniforms.fogNear.value = fog.near;
			uniforms.fogFar.value = fog.far;

		} else if ( fog instanceof THREE.FogExp2 ) {

			uniforms.fogDensity.value = fog.density;

		}

	}

	function refreshUniformsPhong ( uniforms, material ) {

		uniforms.shininess.value = material.shininess;

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );
			uniforms.specular.value.copyGammaToLinear( material.specular );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;
			uniforms.specular.value = material.specular;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	}

	function refreshUniformsLambert ( uniforms, material ) {

		if ( _this.gammaInput ) {

			uniforms.ambient.value.copyGammaToLinear( material.ambient );
			uniforms.emissive.value.copyGammaToLinear( material.emissive );

		} else {

			uniforms.ambient.value = material.ambient;
			uniforms.emissive.value = material.emissive;

		}

		if ( material.wrapAround ) {

			uniforms.wrapRGB.value.copy( material.wrapRGB );

		}

	}

	function refreshUniformsLights ( uniforms, lights ) {

		uniforms.ambientLightColor.value = lights.ambient;

		uniforms.directionalLightColor.value = lights.directional.colors;
		uniforms.directionalLightDirection.value = lights.directional.positions;

		uniforms.pointLightColor.value = lights.point.colors;
		uniforms.pointLightPosition.value = lights.point.positions;
		uniforms.pointLightDistance.value = lights.point.distances;

		uniforms.spotLightColor.value = lights.spot.colors;
		uniforms.spotLightPosition.value = lights.spot.positions;
		uniforms.spotLightDistance.value = lights.spot.distances;
		uniforms.spotLightDirection.value = lights.spot.directions;
		uniforms.spotLightAngleCos.value = lights.spot.anglesCos;
		uniforms.spotLightExponent.value = lights.spot.exponents;

		uniforms.hemisphereLightSkyColor.value = lights.hemi.skyColors;
		uniforms.hemisphereLightGroundColor.value = lights.hemi.groundColors;
		uniforms.hemisphereLightDirection.value = lights.hemi.positions;

	}

	// If uniforms are marked as clean, they don't need to be loaded to the GPU.

	function markUniformsLightsNeedsUpdate ( uniforms, boolean ) {

		uniforms.ambientLightColor.needsUpdate = boolean;

		uniforms.directionalLightColor.needsUpdate = boolean;
		uniforms.directionalLightDirection.needsUpdate = boolean;

		uniforms.pointLightColor.needsUpdate = boolean;
		uniforms.pointLightPosition.needsUpdate = boolean;
		uniforms.pointLightDistance.needsUpdate = boolean;

		uniforms.spotLightColor.needsUpdate = boolean;
		uniforms.spotLightPosition.needsUpdate = boolean;
		uniforms.spotLightDistance.needsUpdate = boolean;
		uniforms.spotLightDirection.needsUpdate = boolean;
		uniforms.spotLightAngleCos.needsUpdate = boolean;
		uniforms.spotLightExponent.needsUpdate = boolean;

		uniforms.hemisphereLightSkyColor.needsUpdate = boolean;
		uniforms.hemisphereLightGroundColor.needsUpdate = boolean;
		uniforms.hemisphereLightDirection.needsUpdate = boolean;

	}

	function refreshUniformsShadow ( uniforms, lights ) {

		if ( uniforms.shadowMatrix ) {

			var j = 0;

			for ( var i = 0, il = lights.length; i < il; i ++ ) {

				var light = lights[ i ];

				if ( ! light.castShadow ) continue;

				if ( light instanceof THREE.SpotLight || ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) ) {

					uniforms.shadowMap.value[ j ] = light.shadowMap;
					uniforms.shadowMapSize.value[ j ] = light.shadowMapSize;

					uniforms.shadowMatrix.value[ j ] = light.shadowMatrix;

					uniforms.shadowDarkness.value[ j ] = light.shadowDarkness;
					uniforms.shadowBias.value[ j ] = light.shadowBias;

					j ++;

				}

			}

		}

	}

	// Uniforms (load to GPU)

	function loadUniformsMatrices ( uniforms, object ) {

		_gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, object._modelViewMatrix.elements );

		if ( uniforms.normalMatrix ) {

			_gl.uniformMatrix3fv( uniforms.normalMatrix, false, object._normalMatrix.elements );

		}

	}

	function getTextureUnit() {

		var textureUnit = _usedTextureUnits;

		if ( textureUnit >= _maxTextures ) {

			console.warn( 'WebGLRenderer: trying to use ' + textureUnit + ' texture units while this GPU supports only ' + _maxTextures );

		}

		_usedTextureUnits += 1;

		return textureUnit;

	}

	function loadUniformsGeneric ( uniforms ) {

		var texture, textureUnit, offset;

		for ( var j = 0, jl = uniforms.length; j < jl; j ++ ) {

			var uniform = uniforms[ j ][ 0 ];

			// needsUpdate property is not added to all uniforms.
			if ( uniform.needsUpdate === false ) continue;

			var type = uniform.type;
			var value = uniform.value;
			var location = uniforms[ j ][ 1 ];

			switch ( type ) {

				case '1i':
					_gl.uniform1i( location, value );
					break;

				case '1f':
					_gl.uniform1f( location, value );
					break;

				case '2f':
					_gl.uniform2f( location, value[ 0 ], value[ 1 ] );
					break;

				case '3f':
					_gl.uniform3f( location, value[ 0 ], value[ 1 ], value[ 2 ] );
					break;

				case '4f':
					_gl.uniform4f( location, value[ 0 ], value[ 1 ], value[ 2 ], value[ 3 ] );
					break;

				case '1iv':
					_gl.uniform1iv( location, value );
					break;

				case '3iv':
					_gl.uniform3iv( location, value );
					break;

				case '1fv':
					_gl.uniform1fv( location, value );
					break;

				case '2fv':
					_gl.uniform2fv( location, value );
					break;

				case '3fv':
					_gl.uniform3fv( location, value );
					break;

				case '4fv':
					_gl.uniform4fv( location, value );
					break;

				case 'Matrix3fv':
					_gl.uniformMatrix3fv( location, false, value );
					break;

				case 'Matrix4fv':
					_gl.uniformMatrix4fv( location, false, value );
					break;

				//

				case 'i':

					// single integer
					_gl.uniform1i( location, value );

					break;

				case 'f':

					// single float
					_gl.uniform1f( location, value );

					break;

				case 'v2':

					// single THREE.Vector2
					_gl.uniform2f( location, value.x, value.y );

					break;

				case 'v3':

					// single THREE.Vector3
					_gl.uniform3f( location, value.x, value.y, value.z );

					break;

				case 'v4':

					// single THREE.Vector4
					_gl.uniform4f( location, value.x, value.y, value.z, value.w );

					break;

				case 'c':

					// single THREE.Color
					_gl.uniform3f( location, value.r, value.g, value.b );

					break;

				case 'iv1':

					// flat array of integers (JS or typed array)
					_gl.uniform1iv( location, value );

					break;

				case 'iv':

					// flat array of integers with 3 x N size (JS or typed array)
					_gl.uniform3iv( location, value );

					break;

				case 'fv1':

					// flat array of floats (JS or typed array)
					_gl.uniform1fv( location, value );

					break;

				case 'fv':

					// flat array of floats with 3 x N size (JS or typed array)
					_gl.uniform3fv( location, value );

					break;

				case 'v2v':

					// array of THREE.Vector2

					if ( uniform._array === undefined ) {

						uniform._array = new Float32Array( 2 * value.length );

					}

					for ( var i = 0, il = value.length; i < il; i ++ ) {

						offset = i * 2;

						uniform._array[ offset ]   = value[ i ].x;
						uniform._array[ offset + 1 ] = value[ i ].y;

					}

					_gl.uniform2fv( location, uniform._array );

					break;

				case 'v3v':

					// array of THREE.Vector3

					if ( uniform._array === undefined ) {

						uniform._array = new Float32Array( 3 * value.length );

					}

					for ( var i = 0, il = value.length; i < il; i ++ ) {

						offset = i * 3;

						uniform._array[ offset ]   = value[ i ].x;
						uniform._array[ offset + 1 ] = value[ i ].y;
						uniform._array[ offset + 2 ] = value[ i ].z;

					}

					_gl.uniform3fv( location, uniform._array );

					break;

				case 'v4v':

					// array of THREE.Vector4

					if ( uniform._array === undefined ) {

						uniform._array = new Float32Array( 4 * value.length );

					}

					for ( var i = 0, il = value.length; i < il; i ++ ) {

						offset = i * 4;

						uniform._array[ offset ]   = value[ i ].x;
						uniform._array[ offset + 1 ] = value[ i ].y;
						uniform._array[ offset + 2 ] = value[ i ].z;
						uniform._array[ offset + 3 ] = value[ i ].w;

					}

					_gl.uniform4fv( location, uniform._array );

					break;

				case 'm3':

					// single THREE.Matrix3
					_gl.uniformMatrix3fv( location, false, value.elements );

					break;

				case 'm3v':

					// array of THREE.Matrix3

					if ( uniform._array === undefined ) {

						uniform._array = new Float32Array( 9 * value.length );

					}

					for ( var i = 0, il = value.length; i < il; i ++ ) {

						value[ i ].flattenToArrayOffset( uniform._array, i * 9 );

					}

					_gl.uniformMatrix3fv( location, false, uniform._array );

					break;

				case 'm4':

					// single THREE.Matrix4
					_gl.uniformMatrix4fv( location, false, value.elements );

					break;

				case 'm4v':

					// array of THREE.Matrix4

					if ( uniform._array === undefined ) {

						uniform._array = new Float32Array( 16 * value.length );

					}

					for ( var i = 0, il = value.length; i < il; i ++ ) {

						value[ i ].flattenToArrayOffset( uniform._array, i * 16 );

					}

					_gl.uniformMatrix4fv( location, false, uniform._array );

					break;

				case 't':

					// single THREE.Texture (2d or cube)

					texture = value;
					textureUnit = getTextureUnit();

					_gl.uniform1i( location, textureUnit );

					if ( ! texture ) continue;

					if ( texture instanceof THREE.CubeTexture ||
					   ( texture.image instanceof Array && texture.image.length === 6 ) ) { // CompressedTexture can have Array in image :/

						setCubeTexture( texture, textureUnit );

					} else if ( texture instanceof THREE.WebGLRenderTargetCube ) {

						setCubeTextureDynamic( texture, textureUnit );

					} else {

						_this.setTexture( texture, textureUnit );

					}

					break;

				case 'tv':

					// array of THREE.Texture (2d)

					if ( uniform._array === undefined ) {

						uniform._array = [];

					}

					for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

						uniform._array[ i ] = getTextureUnit();

					}

					_gl.uniform1iv( location, uniform._array );

					for ( var i = 0, il = uniform.value.length; i < il; i ++ ) {

						texture = uniform.value[ i ];
						textureUnit = uniform._array[ i ];

						if ( ! texture ) continue;

						_this.setTexture( texture, textureUnit );

					}

					break;

				default:

					console.warn( 'THREE.WebGLRenderer: Unknown uniform type: ' + type );

			}

		}

	}

	function setupMatrices ( object, camera ) {

		object._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
		object._normalMatrix.getNormalMatrix( object._modelViewMatrix );

	}

	//

	function setColorGamma( array, offset, color, intensitySq ) {

		array[ offset ]     = color.r * color.r * intensitySq;
		array[ offset + 1 ] = color.g * color.g * intensitySq;
		array[ offset + 2 ] = color.b * color.b * intensitySq;

	}

	function setColorLinear( array, offset, color, intensity ) {

		array[ offset ]     = color.r * intensity;
		array[ offset + 1 ] = color.g * intensity;
		array[ offset + 2 ] = color.b * intensity;

	}

	function setupLights ( lights ) {

		var l, ll, light, n,
		r = 0, g = 0, b = 0,
		color, skyColor, groundColor,
		intensity,  intensitySq,
		position,
		distance,

		zlights = _lights,

		dirColors = zlights.directional.colors,
		dirPositions = zlights.directional.positions,

		pointColors = zlights.point.colors,
		pointPositions = zlights.point.positions,
		pointDistances = zlights.point.distances,

		spotColors = zlights.spot.colors,
		spotPositions = zlights.spot.positions,
		spotDistances = zlights.spot.distances,
		spotDirections = zlights.spot.directions,
		spotAnglesCos = zlights.spot.anglesCos,
		spotExponents = zlights.spot.exponents,

		hemiSkyColors = zlights.hemi.skyColors,
		hemiGroundColors = zlights.hemi.groundColors,
		hemiPositions = zlights.hemi.positions,

		dirLength = 0,
		pointLength = 0,
		spotLength = 0,
		hemiLength = 0,

		dirCount = 0,
		pointCount = 0,
		spotCount = 0,
		hemiCount = 0,

		dirOffset = 0,
		pointOffset = 0,
		spotOffset = 0,
		hemiOffset = 0;

		for ( l = 0, ll = lights.length; l < ll; l ++ ) {

			light = lights[ l ];

			if ( light.onlyShadow ) continue;

			color = light.color;
			intensity = light.intensity;
			distance = light.distance;

			if ( light instanceof THREE.AmbientLight ) {

				if ( ! light.visible ) continue;

				if ( _this.gammaInput ) {

					r += color.r * color.r;
					g += color.g * color.g;
					b += color.b * color.b;

				} else {

					r += color.r;
					g += color.g;
					b += color.b;

				}

			} else if ( light instanceof THREE.DirectionalLight ) {

				dirCount += 1;

				if ( ! light.visible ) continue;

				_direction.setFromMatrixPosition( light.matrixWorld );
				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				_direction.sub( _vector3 );
				_direction.normalize();

				dirOffset = dirLength * 3;

				dirPositions[ dirOffset ]     = _direction.x;
				dirPositions[ dirOffset + 1 ] = _direction.y;
				dirPositions[ dirOffset + 2 ] = _direction.z;

				if ( _this.gammaInput ) {

					setColorGamma( dirColors, dirOffset, color, intensity * intensity );

				} else {

					setColorLinear( dirColors, dirOffset, color, intensity );

				}

				dirLength += 1;

			} else if ( light instanceof THREE.PointLight ) {

				pointCount += 1;

				if ( ! light.visible ) continue;

				pointOffset = pointLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( pointColors, pointOffset, color, intensity * intensity );

				} else {

					setColorLinear( pointColors, pointOffset, color, intensity );

				}

				_vector3.setFromMatrixPosition( light.matrixWorld );

				pointPositions[ pointOffset ]     = _vector3.x;
				pointPositions[ pointOffset + 1 ] = _vector3.y;
				pointPositions[ pointOffset + 2 ] = _vector3.z;

				pointDistances[ pointLength ] = distance;

				pointLength += 1;

			} else if ( light instanceof THREE.SpotLight ) {

				spotCount += 1;

				if ( ! light.visible ) continue;

				spotOffset = spotLength * 3;

				if ( _this.gammaInput ) {

					setColorGamma( spotColors, spotOffset, color, intensity * intensity );

				} else {

					setColorLinear( spotColors, spotOffset, color, intensity );

				}

				_direction.setFromMatrixPosition( light.matrixWorld );

				spotPositions[ spotOffset ]     = _direction.x;
				spotPositions[ spotOffset + 1 ] = _direction.y;
				spotPositions[ spotOffset + 2 ] = _direction.z;

				spotDistances[ spotLength ] = distance;

				_vector3.setFromMatrixPosition( light.target.matrixWorld );
				_direction.sub( _vector3 );
				_direction.normalize();

				spotDirections[ spotOffset ]     = _direction.x;
				spotDirections[ spotOffset + 1 ] = _direction.y;
				spotDirections[ spotOffset + 2 ] = _direction.z;

				spotAnglesCos[ spotLength ] = Math.cos( light.angle );
				spotExponents[ spotLength ] = light.exponent;

				spotLength += 1;

			} else if ( light instanceof THREE.HemisphereLight ) {

				hemiCount += 1;

				if ( ! light.visible ) continue;

				_direction.setFromMatrixPosition( light.matrixWorld );
				_direction.normalize();

				hemiOffset = hemiLength * 3;

				hemiPositions[ hemiOffset ]     = _direction.x;
				hemiPositions[ hemiOffset + 1 ] = _direction.y;
				hemiPositions[ hemiOffset + 2 ] = _direction.z;

				skyColor = light.color;
				groundColor = light.groundColor;

				if ( _this.gammaInput ) {

					intensitySq = intensity * intensity;

					setColorGamma( hemiSkyColors, hemiOffset, skyColor, intensitySq );
					setColorGamma( hemiGroundColors, hemiOffset, groundColor, intensitySq );

				} else {

					setColorLinear( hemiSkyColors, hemiOffset, skyColor, intensity );
					setColorLinear( hemiGroundColors, hemiOffset, groundColor, intensity );

				}

				hemiLength += 1;

			}

		}

		// null eventual remains from removed lights
		// (this is to avoid if in shader)

		for ( l = dirLength * 3, ll = Math.max( dirColors.length, dirCount * 3 ); l < ll; l ++ ) dirColors[ l ] = 0.0;
		for ( l = pointLength * 3, ll = Math.max( pointColors.length, pointCount * 3 ); l < ll; l ++ ) pointColors[ l ] = 0.0;
		for ( l = spotLength * 3, ll = Math.max( spotColors.length, spotCount * 3 ); l < ll; l ++ ) spotColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiSkyColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiSkyColors[ l ] = 0.0;
		for ( l = hemiLength * 3, ll = Math.max( hemiGroundColors.length, hemiCount * 3 ); l < ll; l ++ ) hemiGroundColors[ l ] = 0.0;

		zlights.directional.length = dirLength;
		zlights.point.length = pointLength;
		zlights.spot.length = spotLength;
		zlights.hemi.length = hemiLength;

		zlights.ambient[ 0 ] = r;
		zlights.ambient[ 1 ] = g;
		zlights.ambient[ 2 ] = b;

	}

	// GL state setting

	this.setFaceCulling = function ( cullFace, frontFaceDirection ) {

		if ( cullFace === THREE.CullFaceNone ) {

			_gl.disable( _gl.CULL_FACE );

		} else {

			if ( frontFaceDirection === THREE.FrontFaceDirectionCW ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			if ( cullFace === THREE.CullFaceBack ) {

				_gl.cullFace( _gl.BACK );

			} else if ( cullFace === THREE.CullFaceFront ) {

				_gl.cullFace( _gl.FRONT );

			} else {

				_gl.cullFace( _gl.FRONT_AND_BACK );

			}

			_gl.enable( _gl.CULL_FACE );

		}

	};

	this.setMaterialFaces = function ( material ) {

		var doubleSided = material.side === THREE.DoubleSide;
		var flipSided = material.side === THREE.BackSide;

		if ( _oldDoubleSided !== doubleSided ) {

			if ( doubleSided ) {

				_gl.disable( _gl.CULL_FACE );

			} else {

				_gl.enable( _gl.CULL_FACE );

			}

			_oldDoubleSided = doubleSided;

		}

		if ( _oldFlipSided !== flipSided ) {

			if ( flipSided ) {

				_gl.frontFace( _gl.CW );

			} else {

				_gl.frontFace( _gl.CCW );

			}

			_oldFlipSided = flipSided;

		}

	};

	this.setDepthTest = function ( depthTest ) {

		if ( _oldDepthTest !== depthTest ) {

			if ( depthTest ) {

				_gl.enable( _gl.DEPTH_TEST );

			} else {

				_gl.disable( _gl.DEPTH_TEST );

			}

			_oldDepthTest = depthTest;

		}

	};

	this.setDepthWrite = function ( depthWrite ) {

		if ( _oldDepthWrite !== depthWrite ) {

			_gl.depthMask( depthWrite );
			_oldDepthWrite = depthWrite;

		}

	};

	function setLineWidth ( width ) {

		if ( width !== _oldLineWidth ) {

			_gl.lineWidth( width );

			_oldLineWidth = width;

		}

	}

	function setPolygonOffset ( polygonoffset, factor, units ) {

		if ( _oldPolygonOffset !== polygonoffset ) {

			if ( polygonoffset ) {

				_gl.enable( _gl.POLYGON_OFFSET_FILL );

			} else {

				_gl.disable( _gl.POLYGON_OFFSET_FILL );

			}

			_oldPolygonOffset = polygonoffset;

		}

		if ( polygonoffset && ( _oldPolygonOffsetFactor !== factor || _oldPolygonOffsetUnits !== units ) ) {

			_gl.polygonOffset( factor, units );

			_oldPolygonOffsetFactor = factor;
			_oldPolygonOffsetUnits = units;

		}

	}

	this.setBlending = function ( blending, blendEquation, blendSrc, blendDst ) {

		if ( blending !== _oldBlending ) {

			if ( blending === THREE.NoBlending ) {

				_gl.disable( _gl.BLEND );

			} else if ( blending === THREE.AdditiveBlending ) {

				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.SRC_ALPHA, _gl.ONE );

			} else if ( blending === THREE.SubtractiveBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.ONE_MINUS_SRC_COLOR );

			} else if ( blending === THREE.MultiplyBlending ) {

				// TODO: Find blendFuncSeparate() combination
				_gl.enable( _gl.BLEND );
				_gl.blendEquation( _gl.FUNC_ADD );
				_gl.blendFunc( _gl.ZERO, _gl.SRC_COLOR );

			} else if ( blending === THREE.CustomBlending ) {

				_gl.enable( _gl.BLEND );

			} else {

				_gl.enable( _gl.BLEND );
				_gl.blendEquationSeparate( _gl.FUNC_ADD, _gl.FUNC_ADD );
				_gl.blendFuncSeparate( _gl.SRC_ALPHA, _gl.ONE_MINUS_SRC_ALPHA, _gl.ONE, _gl.ONE_MINUS_SRC_ALPHA );

			}

			_oldBlending = blending;

		}

		if ( blending === THREE.CustomBlending ) {

			if ( blendEquation !== _oldBlendEquation ) {

				_gl.blendEquation( paramThreeToGL( blendEquation ) );

				_oldBlendEquation = blendEquation;

			}

			if ( blendSrc !== _oldBlendSrc || blendDst !== _oldBlendDst ) {

				_gl.blendFunc( paramThreeToGL( blendSrc ), paramThreeToGL( blendDst ) );

				_oldBlendSrc = blendSrc;
				_oldBlendDst = blendDst;

			}

		} else {

			_oldBlendEquation = null;
			_oldBlendSrc = null;
			_oldBlendDst = null;

		}

	};

	// Textures

	function setTextureParameters ( textureType, texture, isImagePowerOfTwo ) {

		var extension;

		if ( isImagePowerOfTwo ) {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, paramThreeToGL( texture.wrapS ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, paramThreeToGL( texture.wrapT ) );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, paramThreeToGL( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, paramThreeToGL( texture.minFilter ) );

		} else {

			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
			_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

			_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
			_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

		}

		extension = extensions.get( 'EXT_texture_filter_anisotropic' );

		if ( extension && texture.type !== THREE.FloatType ) {

			if ( texture.anisotropy > 1 || texture.__oldAnisotropy ) {

				_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, _this.getMaxAnisotropy() ) );
				texture.__oldAnisotropy = texture.anisotropy;

			}

		}

	}

	this.uploadTexture = function ( texture ) {

		if ( texture.__webglInit === undefined ) {

			texture.__webglInit = true;

			texture.addEventListener( 'dispose', onTextureDispose );

			texture.__webglTexture = _gl.createTexture();

			_this.info.memory.textures ++;

		}

		_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

		_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
		_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
		_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );

		texture.image = clampToMaxSize( texture.image, _maxTextureSize );

		var image = texture.image,
		isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
		glFormat = paramThreeToGL( texture.format ),
		glType = paramThreeToGL( texture.type );

		setTextureParameters( _gl.TEXTURE_2D, texture, isImagePowerOfTwo );

		var mipmap, mipmaps = texture.mipmaps;

		if ( texture instanceof THREE.DataTexture ) {

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

				texture.generateMipmaps = false;

			} else {

				_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, image.width, image.height, 0, glFormat, glType, image.data );

			}

		} else if ( texture instanceof THREE.CompressedTexture ) {

			for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

				mipmap = mipmaps[ i ];

				if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

					if ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {

						_gl.compressedTexImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

					} else {

						console.warn( "Attempt to load unsupported compressed texture format" );

					}

				} else {

					_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

				}

			}

		} else { // regular Texture (image, video, canvas)

			// use manually created mipmaps if available
			// if there are no manual mipmaps
			// set 0 level mipmap and then use GL to generate other mipmap levels

			if ( mipmaps.length > 0 && isImagePowerOfTwo ) {

				for ( var i = 0, il = mipmaps.length; i < il; i ++ ) {

					mipmap = mipmaps[ i ];
					_gl.texImage2D( _gl.TEXTURE_2D, i, glFormat, glFormat, glType, mipmap );

				}

				texture.generateMipmaps = false;

			} else {

				_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, glFormat, glType, texture.image );

			}

		}

		if ( texture.generateMipmaps && isImagePowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

		texture.needsUpdate = false;

		if ( texture.onUpdate ) texture.onUpdate();

	};

	this.setTexture = function ( texture, slot ) {

		_gl.activeTexture( _gl.TEXTURE0 + slot );

		if ( texture.needsUpdate ) {

			_this.uploadTexture( texture );

		} else {

			_gl.bindTexture( _gl.TEXTURE_2D, texture.__webglTexture );

		}

	};

	function clampToMaxSize ( image, maxSize ) {

		if ( image.width > maxSize || image.height > maxSize ) {

			// Warning: Scaling through the canvas will only work with images that use
			// premultiplied alpha.

			var scale = maxSize / Math.max( image.width, image.height );

			var canvas = document.createElement( 'canvas' );
			canvas.width = Math.floor( image.width * scale );
			canvas.height = Math.floor( image.height * scale );

			var context = canvas.getContext( '2d' );
			context.drawImage( image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height );

			console.log( 'THREE.WebGLRenderer:', image, 'is too big (' + image.width + 'x' + image.height + '). Resized to ' + canvas.width + 'x' + canvas.height + '.' );

			return canvas;

		}

		return image;

	}

	function setCubeTexture ( texture, slot ) {

		if ( texture.image.length === 6 ) {

			if ( texture.needsUpdate ) {

				if ( ! texture.image.__webglTextureCube ) {

					texture.addEventListener( 'dispose', onTextureDispose );

					texture.image.__webglTextureCube = _gl.createTexture();

					_this.info.memory.textures ++;

				}

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );

				var isCompressed = texture instanceof THREE.CompressedTexture;
				var isDataTexture = texture.image[ 0 ] instanceof THREE.DataTexture;

				var cubeImage = [];

				for ( var i = 0; i < 6; i ++ ) {

					if ( _this.autoScaleCubemaps && ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = clampToMaxSize( texture.image[ i ], _maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

				}

				var image = cubeImage[ 0 ],
				isImagePowerOfTwo = THREE.Math.isPowerOfTwo( image.width ) && THREE.Math.isPowerOfTwo( image.height ),
				glFormat = paramThreeToGL( texture.format ),
				glType = paramThreeToGL( texture.type );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, isImagePowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					if ( ! isCompressed ) {

						if ( isDataTexture ) {

							_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

						} else {

							_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, glFormat, glType, cubeImage[ i ] );

						}

					} else {

						var mipmap, mipmaps = cubeImage[ i ].mipmaps;

						for ( var j = 0, jl = mipmaps.length; j < jl; j ++ ) {

							mipmap = mipmaps[ j ];

							if ( texture.format !== THREE.RGBAFormat && texture.format !== THREE.RGBFormat ) {

								if ( getCompressedTextureFormats().indexOf( glFormat ) > -1 ) {

									_gl.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, mipmap.data );

								} else {

									console.warn( "Attempt to load unsupported compressed texture format" );

								}

							} else {

								_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

					}

				}

				if ( texture.generateMipmaps && isImagePowerOfTwo ) {

					_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				texture.needsUpdate = false;

				if ( texture.onUpdate ) texture.onUpdate();

			} else {

				_gl.activeTexture( _gl.TEXTURE0 + slot );
				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.image.__webglTextureCube );

			}

		}

	}

	function setCubeTextureDynamic ( texture, slot ) {

		_gl.activeTexture( _gl.TEXTURE0 + slot );
		_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, texture.__webglTexture );

	}

	// Render targets

	function setupFrameBuffer ( framebuffer, renderTarget, textureTarget ) {

		_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
		_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureTarget, renderTarget.__webglTexture, 0 );

	}

	function setupRenderBuffer ( renderbuffer, renderTarget  ) {

		_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

		if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_COMPONENT16, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		/* For some reason this is not working. Defaulting to RGBA4.
		} else if ( ! renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.STENCIL_INDEX8, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );
		*/
		} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );
			_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

		} else {

			_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.RGBA4, renderTarget.width, renderTarget.height );

		}

	}

	this.setRenderTarget = function ( renderTarget ) {

		var isCube = ( renderTarget instanceof THREE.WebGLRenderTargetCube );

		if ( renderTarget && renderTarget.__webglFramebuffer === undefined ) {

			if ( renderTarget.depthBuffer === undefined ) renderTarget.depthBuffer = true;
			if ( renderTarget.stencilBuffer === undefined ) renderTarget.stencilBuffer = true;

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			renderTarget.__webglTexture = _gl.createTexture();

			_this.info.memory.textures ++;

			// Setup texture, create render and frame buffers

			var isTargetPowerOfTwo = THREE.Math.isPowerOfTwo( renderTarget.width ) && THREE.Math.isPowerOfTwo( renderTarget.height ),
				glFormat = paramThreeToGL( renderTarget.format ),
				glType = paramThreeToGL( renderTarget.type );

			if ( isCube ) {

				renderTarget.__webglFramebuffer = [];
				renderTarget.__webglRenderbuffer = [];

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, renderTarget, isTargetPowerOfTwo );

				for ( var i = 0; i < 6; i ++ ) {

					renderTarget.__webglFramebuffer[ i ] = _gl.createFramebuffer();
					renderTarget.__webglRenderbuffer[ i ] = _gl.createRenderbuffer();

					_gl.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

					setupFrameBuffer( renderTarget.__webglFramebuffer[ i ], renderTarget, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i );
					setupRenderBuffer( renderTarget.__webglRenderbuffer[ i ], renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );

			} else {

				renderTarget.__webglFramebuffer = _gl.createFramebuffer();

				if ( renderTarget.shareDepthFrom ) {

					renderTarget.__webglRenderbuffer = renderTarget.shareDepthFrom.__webglRenderbuffer;

				} else {

					renderTarget.__webglRenderbuffer = _gl.createRenderbuffer();

				}

				_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
				setTextureParameters( _gl.TEXTURE_2D, renderTarget, isTargetPowerOfTwo );

				_gl.texImage2D( _gl.TEXTURE_2D, 0, glFormat, renderTarget.width, renderTarget.height, 0, glFormat, glType, null );

				setupFrameBuffer( renderTarget.__webglFramebuffer, renderTarget, _gl.TEXTURE_2D );

				if ( renderTarget.shareDepthFrom ) {

					if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderTarget.__webglRenderbuffer );

					}

				} else {

					setupRenderBuffer( renderTarget.__webglRenderbuffer, renderTarget );

				}

				if ( isTargetPowerOfTwo ) _gl.generateMipmap( _gl.TEXTURE_2D );

			}

			// Release everything

			if ( isCube ) {

				_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

			} else {

				_gl.bindTexture( _gl.TEXTURE_2D, null );

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );
			_gl.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		var framebuffer, width, height, vx, vy;

		if ( renderTarget ) {

			if ( isCube ) {

				framebuffer = renderTarget.__webglFramebuffer[ renderTarget.activeCubeFace ];

			} else {

				framebuffer = renderTarget.__webglFramebuffer;

			}

			width = renderTarget.width;
			height = renderTarget.height;

			vx = 0;
			vy = 0;

		} else {

			framebuffer = null;

			width = _viewportWidth;
			height = _viewportHeight;

			vx = _viewportX;
			vy = _viewportY;

		}

		if ( framebuffer !== _currentFramebuffer ) {

			_gl.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );
			_gl.viewport( vx, vy, width, height );

			_currentFramebuffer = framebuffer;

		}

		_currentWidth = width;
		_currentHeight = height;

	};

	function updateRenderTargetMipmap ( renderTarget ) {

		if ( renderTarget instanceof THREE.WebGLRenderTargetCube ) {

			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_CUBE_MAP );
			_gl.bindTexture( _gl.TEXTURE_CUBE_MAP, null );

		} else {

			_gl.bindTexture( _gl.TEXTURE_2D, renderTarget.__webglTexture );
			_gl.generateMipmap( _gl.TEXTURE_2D );
			_gl.bindTexture( _gl.TEXTURE_2D, null );

		}

	}

	// Fallback filters for non-power-of-2 textures

	function filterFallback ( f ) {

		if ( f === THREE.NearestFilter || f === THREE.NearestMipMapNearestFilter || f === THREE.NearestMipMapLinearFilter ) {

			return _gl.NEAREST;

		}

		return _gl.LINEAR;

	}

	// Map three.js constants to WebGL constants

	function paramThreeToGL ( p ) {

		var extension;

		if ( p === THREE.RepeatWrapping ) return _gl.REPEAT;
		if ( p === THREE.ClampToEdgeWrapping ) return _gl.CLAMP_TO_EDGE;
		if ( p === THREE.MirroredRepeatWrapping ) return _gl.MIRRORED_REPEAT;

		if ( p === THREE.NearestFilter ) return _gl.NEAREST;
		if ( p === THREE.NearestMipMapNearestFilter ) return _gl.NEAREST_MIPMAP_NEAREST;
		if ( p === THREE.NearestMipMapLinearFilter ) return _gl.NEAREST_MIPMAP_LINEAR;

		if ( p === THREE.LinearFilter ) return _gl.LINEAR;
		if ( p === THREE.LinearMipMapNearestFilter ) return _gl.LINEAR_MIPMAP_NEAREST;
		if ( p === THREE.LinearMipMapLinearFilter ) return _gl.LINEAR_MIPMAP_LINEAR;

		if ( p === THREE.UnsignedByteType ) return _gl.UNSIGNED_BYTE;
		if ( p === THREE.UnsignedShort4444Type ) return _gl.UNSIGNED_SHORT_4_4_4_4;
		if ( p === THREE.UnsignedShort5551Type ) return _gl.UNSIGNED_SHORT_5_5_5_1;
		if ( p === THREE.UnsignedShort565Type ) return _gl.UNSIGNED_SHORT_5_6_5;

		if ( p === THREE.ByteType ) return _gl.BYTE;
		if ( p === THREE.ShortType ) return _gl.SHORT;
		if ( p === THREE.UnsignedShortType ) return _gl.UNSIGNED_SHORT;
		if ( p === THREE.IntType ) return _gl.INT;
		if ( p === THREE.UnsignedIntType ) return _gl.UNSIGNED_INT;
		if ( p === THREE.FloatType ) return _gl.FLOAT;

		if ( p === THREE.AlphaFormat ) return _gl.ALPHA;
		if ( p === THREE.RGBFormat ) return _gl.RGB;
		if ( p === THREE.RGBAFormat ) return _gl.RGBA;
		if ( p === THREE.LuminanceFormat ) return _gl.LUMINANCE;
		if ( p === THREE.LuminanceAlphaFormat ) return _gl.LUMINANCE_ALPHA;

		if ( p === THREE.AddEquation ) return _gl.FUNC_ADD;
		if ( p === THREE.SubtractEquation ) return _gl.FUNC_SUBTRACT;
		if ( p === THREE.ReverseSubtractEquation ) return _gl.FUNC_REVERSE_SUBTRACT;

		if ( p === THREE.ZeroFactor ) return _gl.ZERO;
		if ( p === THREE.OneFactor ) return _gl.ONE;
		if ( p === THREE.SrcColorFactor ) return _gl.SRC_COLOR;
		if ( p === THREE.OneMinusSrcColorFactor ) return _gl.ONE_MINUS_SRC_COLOR;
		if ( p === THREE.SrcAlphaFactor ) return _gl.SRC_ALPHA;
		if ( p === THREE.OneMinusSrcAlphaFactor ) return _gl.ONE_MINUS_SRC_ALPHA;
		if ( p === THREE.DstAlphaFactor ) return _gl.DST_ALPHA;
		if ( p === THREE.OneMinusDstAlphaFactor ) return _gl.ONE_MINUS_DST_ALPHA;

		if ( p === THREE.DstColorFactor ) return _gl.DST_COLOR;
		if ( p === THREE.OneMinusDstColorFactor ) return _gl.ONE_MINUS_DST_COLOR;
		if ( p === THREE.SrcAlphaSaturateFactor ) return _gl.SRC_ALPHA_SATURATE;

		extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

		if ( extension !== null ) {

			if ( p === THREE.RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			if ( p === THREE.RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
			if ( p === THREE.RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

		}

		extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

		if ( extension !== null ) {

			if ( p === THREE.RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			if ( p === THREE.RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
			if ( p === THREE.RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			if ( p === THREE.RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

		}

		extension = extensions.get( 'EXT_blend_minmax' );

		if ( extension !== null ) {

			if ( p === THREE.MinEquation ) return extension.MIN_EXT;
			if ( p === THREE.MaxEquation ) return extension.MAX_EXT;

		}

		return 0;

	}

	// Allocations

	function allocateBones ( object ) {

		if ( _supportsBoneTextures && object && object.skeleton && object.skeleton.useVertexTexture ) {

			return 1024;

		} else {

			// default for when object is not specified
			// ( for example when prebuilding shader
			//   to be used with multiple objects )
			//
			//  - leave some extra space for other uniforms
			//  - limit here is ANGLE's 254 max uniform vectors
			//    (up to 54 should be safe)

			var nVertexUniforms = _gl.getParameter( _gl.MAX_VERTEX_UNIFORM_VECTORS );
			var nVertexMatrices = Math.floor( ( nVertexUniforms - 20 ) / 4 );

			var maxBones = nVertexMatrices;

			if ( object !== undefined && object instanceof THREE.SkinnedMesh ) {

				maxBones = Math.min( object.skeleton.bones.length, maxBones );

				if ( maxBones < object.skeleton.bones.length ) {

					console.warn( 'WebGLRenderer: too many bones - ' + object.skeleton.bones.length + ', this GPU supports just ' + maxBones + ' (try OpenGL instead of ANGLE)' );

				}

			}

			return maxBones;

		}

	}

	function allocateLights( lights ) {

		var dirLights = 0;
		var pointLights = 0;
		var spotLights = 0;
		var hemiLights = 0;

		for ( var l = 0, ll = lights.length; l < ll; l ++ ) {

			var light = lights[ l ];

			if ( light.onlyShadow || light.visible === false ) continue;

			if ( light instanceof THREE.DirectionalLight ) dirLights ++;
			if ( light instanceof THREE.PointLight ) pointLights ++;
			if ( light instanceof THREE.SpotLight ) spotLights ++;
			if ( light instanceof THREE.HemisphereLight ) hemiLights ++;

		}

		return { 'directional': dirLights, 'point': pointLights, 'spot': spotLights, 'hemi': hemiLights };

	}

	function allocateShadows( lights ) {

		var maxShadows = 0;

		for ( var l = 0, ll = lights.length; l < ll; l ++ ) {

			var light = lights[ l ];

			if ( ! light.castShadow ) continue;

			if ( light instanceof THREE.SpotLight ) maxShadows ++;
			if ( light instanceof THREE.DirectionalLight && ! light.shadowCascade ) maxShadows ++;

		}

		return maxShadows;

	}

	// DEPRECATED
	
	this.initMaterial = function () {

		console.warn( 'THREE.WebGLRenderer: .initMaterial() has been removed.' );

	};

	this.addPrePlugin = function () {

		console.warn( 'THREE.WebGLRenderer: .addPrePlugin() has been removed.' );

	};

	this.addPostPlugin = function () {

		console.warn( 'THREE.WebGLRenderer: .addPostPlugin() has been removed.' );

	};

	this.updateShadowMap = function () {

		console.warn( 'THREE.WebGLRenderer: .updateShadowMap() has been removed.' );

	};

};

// File:src/renderers/WebGLRenderTarget.js

/**
 * @author szimek / https://github.com/szimek/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.WebGLRenderTarget = function ( width, height, options ) {

	this.width = width;
	this.height = height;

	options = options || {};

	this.wrapS = options.wrapS !== undefined ? options.wrapS : THREE.ClampToEdgeWrapping;
	this.wrapT = options.wrapT !== undefined ? options.wrapT : THREE.ClampToEdgeWrapping;

	this.magFilter = options.magFilter !== undefined ? options.magFilter : THREE.LinearFilter;
	this.minFilter = options.minFilter !== undefined ? options.minFilter : THREE.LinearMipMapLinearFilter;

	this.anisotropy = options.anisotropy !== undefined ? options.anisotropy : 1;

	this.offset = new THREE.Vector2( 0, 0 );
	this.repeat = new THREE.Vector2( 1, 1 );

	this.format = options.format !== undefined ? options.format : THREE.RGBAFormat;
	this.type = options.type !== undefined ? options.type : THREE.UnsignedByteType;

	this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
	this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : true;

	this.generateMipmaps = true;

	this.shareDepthFrom = null;

};

THREE.WebGLRenderTarget.prototype = {

	constructor: THREE.WebGLRenderTarget,

	setSize: function ( width, height ) {

		this.width = width;
		this.height = height;

	},

	clone: function () {

		var tmp = new THREE.WebGLRenderTarget( this.width, this.height );

		tmp.wrapS = this.wrapS;
		tmp.wrapT = this.wrapT;

		tmp.magFilter = this.magFilter;
		tmp.minFilter = this.minFilter;

		tmp.anisotropy = this.anisotropy;

		tmp.offset.copy( this.offset );
		tmp.repeat.copy( this.repeat );

		tmp.format = this.format;
		tmp.type = this.type;

		tmp.depthBuffer = this.depthBuffer;
		tmp.stencilBuffer = this.stencilBuffer;

		tmp.generateMipmaps = this.generateMipmaps;

		tmp.shareDepthFrom = this.shareDepthFrom;

		return tmp;

	},

	dispose: function () {

		this.dispatchEvent( { type: 'dispose' } );

	}

};

THREE.EventDispatcher.prototype.apply( THREE.WebGLRenderTarget.prototype );

// File:src/renderers/WebGLRenderTargetCube.js

/**
 * @author alteredq / http://alteredqualia.com
 */

THREE.WebGLRenderTargetCube = function ( width, height, options ) {

	THREE.WebGLRenderTarget.call( this, width, height, options );

	this.activeCubeFace = 0; // PX 0, NX 1, PY 2, NY 3, PZ 4, NZ 5

};

THREE.WebGLRenderTargetCube.prototype = Object.create( THREE.WebGLRenderTarget.prototype );

// File:src/renderers/webgl/WebGLExtensions.js

THREE.WebGLExtensions = function ( gl ) {

	var extensions = {};

	this.get = function ( name ) {

		if ( extensions[ name ] !== undefined ) {

			return extensions[ name ];

		}

		var extension;

		switch ( name ) {
		
			case 'OES_texture_float':
				extension = gl.getExtension( 'OES_texture_float' );
				break;

			case 'OES_texture_float_linear':
				extension = gl.getExtension( 'OES_texture_float_linear' );
				break;

			case 'OES_standard_derivatives':
				extension = gl.getExtension( 'OES_standard_derivatives' );
				break;

			case 'EXT_texture_filter_anisotropic':
				extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
				break;

			case 'WEBGL_compressed_texture_s3tc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
				break;

			case 'WEBGL_compressed_texture_pvrtc':
				extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
				break;

			case 'OES_element_index_uint':
				extension = gl.getExtension( 'OES_element_index_uint' );
				break;

			case 'EXT_blend_minmax':
				extension = gl.getExtension( 'EXT_blend_minmax' );
				break;

			case 'EXT_frag_depth':
				extension = gl.getExtension( 'EXT_frag_depth' );
				break;

		}

		if ( extension === null ) {

			console.log( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

		}

		extensions[ name ] = extension;

		return extension;

	};

};

// File:src/renderers/webgl/WebGLProgram.js

THREE.WebGLProgram = ( function () {

	var programIdCount = 0;

	var generateDefines = function ( defines ) {

		var value, chunk, chunks = [];

		for ( var d in defines ) {

			value = defines[ d ];
			if ( value === false ) continue;

			chunk = "#define " + d + " " + value;
			chunks.push( chunk );

		}

		return chunks.join( "\n" );

	};

	var cacheUniformLocations = function ( gl, program, identifiers ) {

		var uniforms = {};

		for ( var i = 0, l = identifiers.length; i < l; i ++ ) {

			var id = identifiers[ i ];
			uniforms[ id ] = gl.getUniformLocation( program, id );

		}

		return uniforms;

	};

	var cacheAttributeLocations = function ( gl, program, identifiers ) {

		var attributes = {};

		for ( var i = 0, l = identifiers.length; i < l; i ++ ) {

			var id = identifiers[ i ];
			attributes[ id ] = gl.getAttribLocation( program, id );

		}

		return attributes;

	};

	return function ( renderer, code, material, parameters ) {

		var _this = renderer;
		var _gl = _this.context;

		var defines = material.defines;
		var uniforms = material.__webglShader.uniforms;
		var attributes = material.attributes;

		var vertexShader = material.__webglShader.vertexShader;
		var fragmentShader = material.__webglShader.fragmentShader;

		var index0AttributeName = material.index0AttributeName;

		if ( index0AttributeName === undefined && parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0

			index0AttributeName = 'position';

		}

		var shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";

		if ( parameters.shadowMapType === THREE.PCFShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";

		} else if ( parameters.shadowMapType === THREE.PCFSoftShadowMap ) {

			shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";

		}

		// console.log( "building new program " );

		//

		var customDefines = generateDefines( defines );

		//

		var program = _gl.createProgram();

		var prefix_vertex, prefix_fragment;

		if ( material instanceof THREE.RawShaderMaterial ) {

			prefix_vertex = '';
			prefix_fragment = '';

		} else {

			prefix_vertex = [

				"precision " + parameters.precision + " float;",
				"precision " + parameters.precision + " int;",

				customDefines,

				parameters.supportsVertexTextures ? "#define VERTEX_TEXTURES" : "",

				_this.gammaInput ? "#define GAMMA_INPUT" : "",
				_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

				"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
				"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
				"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
				"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

				"#define MAX_SHADOWS " + parameters.maxShadows,

				"#define MAX_BONES " + parameters.maxBones,

				parameters.map ? "#define USE_MAP" : "",
				parameters.envMap ? "#define USE_ENVMAP" : "",
				parameters.lightMap ? "#define USE_LIGHTMAP" : "",
				parameters.bumpMap ? "#define USE_BUMPMAP" : "",
				parameters.normalMap ? "#define USE_NORMALMAP" : "",
				parameters.specularMap ? "#define USE_SPECULARMAP" : "",
				parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
				parameters.vertexColors ? "#define USE_COLOR" : "",

				parameters.skinning ? "#define USE_SKINNING" : "",
				parameters.useVertexTexture ? "#define BONE_TEXTURE" : "",

				parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
				parameters.morphNormals ? "#define USE_MORPHNORMALS" : "",
				parameters.wrapAround ? "#define WRAP_AROUND" : "",
				parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
				parameters.flipSided ? "#define FLIP_SIDED" : "",

				parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
				parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
				parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
				parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

				parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",

				parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
				//_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",


				"uniform mat4 modelMatrix;",
				"uniform mat4 modelViewMatrix;",
				"uniform mat4 projectionMatrix;",
				"uniform mat4 viewMatrix;",
				"uniform mat3 normalMatrix;",
				"uniform vec3 cameraPosition;",

				"attribute vec3 position;",
				"attribute vec3 normal;",
				"attribute vec2 uv;",
				"attribute vec2 uv2;",

				"#ifdef USE_COLOR",

				"	attribute vec3 color;",

				"#endif",

				"#ifdef USE_MORPHTARGETS",

				"	attribute vec3 morphTarget0;",
				"	attribute vec3 morphTarget1;",
				"	attribute vec3 morphTarget2;",
				"	attribute vec3 morphTarget3;",

				"	#ifdef USE_MORPHNORMALS",

				"		attribute vec3 morphNormal0;",
				"		attribute vec3 morphNormal1;",
				"		attribute vec3 morphNormal2;",
				"		attribute vec3 morphNormal3;",

				"	#else",

				"		attribute vec3 morphTarget4;",
				"		attribute vec3 morphTarget5;",
				"		attribute vec3 morphTarget6;",
				"		attribute vec3 morphTarget7;",

				"	#endif",

				"#endif",

				"#ifdef USE_SKINNING",

				"	attribute vec4 skinIndex;",
				"	attribute vec4 skinWeight;",

				"#endif",

				""

			].join( '\n' );

			prefix_fragment = [

				"precision " + parameters.precision + " float;",
				"precision " + parameters.precision + " int;",

				( parameters.bumpMap || parameters.normalMap ) ? "#extension GL_OES_standard_derivatives : enable" : "",

				customDefines,

				"#define MAX_DIR_LIGHTS " + parameters.maxDirLights,
				"#define MAX_POINT_LIGHTS " + parameters.maxPointLights,
				"#define MAX_SPOT_LIGHTS " + parameters.maxSpotLights,
				"#define MAX_HEMI_LIGHTS " + parameters.maxHemiLights,

				"#define MAX_SHADOWS " + parameters.maxShadows,

				parameters.alphaTest ? "#define ALPHATEST " + parameters.alphaTest: "",

				_this.gammaInput ? "#define GAMMA_INPUT" : "",
				_this.gammaOutput ? "#define GAMMA_OUTPUT" : "",

				( parameters.useFog && parameters.fog ) ? "#define USE_FOG" : "",
				( parameters.useFog && parameters.fogExp ) ? "#define FOG_EXP2" : "",

				parameters.map ? "#define USE_MAP" : "",
				parameters.envMap ? "#define USE_ENVMAP" : "",
				parameters.lightMap ? "#define USE_LIGHTMAP" : "",
				parameters.bumpMap ? "#define USE_BUMPMAP" : "",
				parameters.normalMap ? "#define USE_NORMALMAP" : "",
				parameters.specularMap ? "#define USE_SPECULARMAP" : "",
				parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
				parameters.vertexColors ? "#define USE_COLOR" : "",

				parameters.metal ? "#define METAL" : "",
				parameters.wrapAround ? "#define WRAP_AROUND" : "",
				parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
				parameters.flipSided ? "#define FLIP_SIDED" : "",

				parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
				parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
				parameters.shadowMapDebug ? "#define SHADOWMAP_DEBUG" : "",
				parameters.shadowMapCascade ? "#define SHADOWMAP_CASCADE" : "",

				parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
				//_this._glExtensionFragDepth ? "#define USE_LOGDEPTHBUF_EXT" : "",

				"uniform mat4 viewMatrix;",
				"uniform vec3 cameraPosition;",
				""

			].join( '\n' );

		}

		var glVertexShader = new THREE.WebGLShader( _gl, _gl.VERTEX_SHADER, prefix_vertex + vertexShader );
		var glFragmentShader = new THREE.WebGLShader( _gl, _gl.FRAGMENT_SHADER, prefix_fragment + fragmentShader );

		_gl.attachShader( program, glVertexShader );
		_gl.attachShader( program, glFragmentShader );

		if ( index0AttributeName !== undefined ) {

			// Force a particular attribute to index 0.
			// because potentially expensive emulation is done by browser if attribute 0 is disabled.
			// And, color, for example is often automatically bound to index 0 so disabling it

			_gl.bindAttribLocation( program, 0, index0AttributeName );

		}

		_gl.linkProgram( program );

		if ( _gl.getProgramParameter( program, _gl.LINK_STATUS ) === false ) {

			console.error( 'THREE.WebGLProgram: Could not initialise shader.' );
			console.error( 'gl.VALIDATE_STATUS', _gl.getProgramParameter( program, _gl.VALIDATE_STATUS ) );
			console.error( 'gl.getError()', _gl.getError() );

		}

		if ( _gl.getProgramInfoLog( program ) !== '' ) {

			console.warn( 'THREE.WebGLProgram: gl.getProgramInfoLog()', _gl.getProgramInfoLog( program ) );

		}

		// clean up

		_gl.deleteShader( glVertexShader );
		_gl.deleteShader( glFragmentShader );

		// cache uniform locations

		var identifiers = [

			'viewMatrix', 'modelViewMatrix', 'projectionMatrix', 'normalMatrix', 'modelMatrix', 'cameraPosition', 'morphTargetInfluences', 'bindMatrix', 'bindMatrixInverse'

		];

		if ( parameters.useVertexTexture ) {

			identifiers.push( 'boneTexture' );
			identifiers.push( 'boneTextureWidth' );
			identifiers.push( 'boneTextureHeight' );

		} else {

			identifiers.push( 'boneGlobalMatrices' );

		}

		if ( parameters.logarithmicDepthBuffer ) {

			identifiers.push('logDepthBufFC');

		}


		for ( var u in uniforms ) {

			identifiers.push( u );

		}

		this.uniforms = cacheUniformLocations( _gl, program, identifiers );

		// cache attributes locations

		identifiers = [

			"position", "normal", "uv", "uv2", "tangent", "color",
			"skinIndex", "skinWeight", "lineDistance"

		];

		for ( var i = 0; i < parameters.maxMorphTargets; i ++ ) {

			identifiers.push( "morphTarget" + i );

		}

		for ( var i = 0; i < parameters.maxMorphNormals; i ++ ) {

			identifiers.push( "morphNormal" + i );

		}

		for ( var a in attributes ) {

			identifiers.push( a );

		}

		this.attributes = cacheAttributeLocations( _gl, program, identifiers );
		this.attributesKeys = Object.keys( this.attributes );

		//

		this.id = programIdCount ++;
		this.code = code;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	};

} )();

// File:src/renderers/webgl/WebGLShader.js

THREE.WebGLShader = ( function () {

	var addLineNumbers = function ( string ) {

		var lines = string.split( '\n' );

		for ( var i = 0; i < lines.length; i ++ ) {

			lines[ i ] = ( i + 1 ) + ': ' + lines[ i ];

		}

		return lines.join( '\n' );

	};

	return function ( gl, type, string ) {

		var shader = gl.createShader( type ); 

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		if ( gl.getShaderParameter( shader, gl.COMPILE_STATUS ) === false ) {

			console.error( 'THREE.WebGLShader: Shader couldn\'t compile.' );

		}

		if ( gl.getShaderInfoLog( shader ) !== '' ) {

			console.warn( 'THREE.WebGLShader: gl.getShaderInfoLog()', gl.getShaderInfoLog( shader ) );
			console.warn( addLineNumbers( string ) );

		}

		// --enable-privileged-webgl-extension
		// console.log( type, gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

		return shader;

	};

} )();

// File:src/renderers/webgl/plugins/LensFlarePlugin.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.LensFlarePlugin = function ( renderer, flares ) {

	var gl = renderer.context;

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;
	var hasVertexTexture;

	var tempTexture, occlusionTexture;

	var init = function () {

		var vertices = new Float32Array( [
			-1, -1,  0, 0,
			 1, -1,  1, 0,
			 1,  1,  1, 1,
			-1,  1,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		// buffers

		vertexBuffer     = gl.createBuffer();
		elementBuffer    = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		// textures

		tempTexture      = gl.createTexture();
		occlusionTexture = gl.createTexture();

		gl.bindTexture( gl.TEXTURE_2D, tempTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGB, 16, 16, 0, gl.RGB, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		gl.bindTexture( gl.TEXTURE_2D, occlusionTexture );
		gl.texImage2D( gl.TEXTURE_2D, 0, gl.RGBA, 16, 16, 0, gl.RGBA, gl.UNSIGNED_BYTE, null );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST );
		gl.texParameteri( gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST );

		hasVertexTexture = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS ) > 0;

		var shader;

		if ( hasVertexTexture ) {

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"uniform sampler2D occlusionMap;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if( renderType == 2 ) {",

							"vec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );",

							"vVisibility =        visibility.r / 9.0;",
							"vVisibility *= 1.0 - visibility.g / 9.0;",
							"vVisibility *=       visibility.b / 9.0;",
							"vVisibility *= 1.0 - visibility.a / 9.0;",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",
					"varying float vVisibility;",

					"void main() {",

						// pink square

						"if( renderType == 0 ) {",

							"gl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );",

						// restore

						"} else if( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * vVisibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

		} else {

			shader = {

				vertexShader: [

					"uniform lowp int renderType;",

					"uniform vec3 screenPosition;",
					"uniform vec2 scale;",
					"uniform float rotation;",

					"attribute vec2 position;",
					"attribute vec2 uv;",

					"varying vec2 vUV;",

					"void main() {",

						"vUV = uv;",

						"vec2 pos = position;",

						"if( renderType == 2 ) {",

							"pos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;",
							"pos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;",

						"}",

						"gl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );",

					"}"

				].join( "\n" ),

				fragmentShader: [

					"precision mediump float;",

					"uniform lowp int renderType;",

					"uniform sampler2D map;",
					"uniform sampler2D occlusionMap;",
					"uniform float opacity;",
					"uniform vec3 color;",

					"varying vec2 vUV;",

					"void main() {",

						// pink square

						"if( renderType == 0 ) {",

							"gl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );",

						// restore

						"} else if( renderType == 1 ) {",

							"gl_FragColor = texture2D( map, vUV );",

						// flare

						"} else {",

							"float visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;",
							"visibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;",
							"visibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;",
							"visibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;",
							"visibility = ( 1.0 - visibility / 4.0 );",

							"vec4 texture = texture2D( map, vUV );",
							"texture.a *= opacity * visibility;",
							"gl_FragColor = texture;",
							"gl_FragColor.rgb *= color;",

						"}",

					"}"

				].join( "\n" )

			};

		}

		program = createProgram( shader );

		attributes = {
			vertex: gl.getAttribLocation ( program, "position" ),
			uv:     gl.getAttribLocation ( program, "uv" )
		}

		uniforms = {
			renderType:     gl.getUniformLocation( program, "renderType" ),
			map:            gl.getUniformLocation( program, "map" ),
			occlusionMap:   gl.getUniformLocation( program, "occlusionMap" ),
			opacity:        gl.getUniformLocation( program, "opacity" ),
			color:          gl.getUniformLocation( program, "color" ),
			scale:          gl.getUniformLocation( program, "scale" ),
			rotation:       gl.getUniformLocation( program, "rotation" ),
			screenPosition: gl.getUniformLocation( program, "screenPosition" )
		};

	};

	/*
	 * Render lens flares
	 * Method: renders 16x16 0xff00ff-colored points scattered over the light source area,
	 *         reads these back and calculates occlusion.
	 */

	this.render = function ( scene, camera, viewportWidth, viewportHeight ) {

		if ( flares.length === 0 ) return;

		var tempPosition = new THREE.Vector3();

		var invAspect = viewportHeight / viewportWidth,
			halfViewportWidth = viewportWidth * 0.5,
			halfViewportHeight = viewportHeight * 0.5;

		var size = 16 / viewportHeight,
			scale = new THREE.Vector2( size * invAspect, size );

		var screenPosition = new THREE.Vector3( 1, 1, 0 ),
			screenPositionPixels = new THREE.Vector2( 1, 1 );

		if ( program === undefined ) {

			init();

		}

		gl.useProgram( program );

		gl.enableVertexAttribArray( attributes.vertex );
		gl.enableVertexAttribArray( attributes.uv );

		// loop through all lens flares to update their occlusion and positions
		// setup gl and common used attribs/unforms

		gl.uniform1i( uniforms.occlusionMap, 0 );
		gl.uniform1i( uniforms.map, 1 );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.vertex, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.disable( gl.CULL_FACE );
		gl.depthMask( false );

		for ( var i = 0, l = flares.length; i < l; i ++ ) {

			size = 16 / viewportHeight;
			scale.set( size * invAspect, size );

			// calc object screen position

			var flare = flares[ i ];
			
			tempPosition.set( flare.matrixWorld.elements[12], flare.matrixWorld.elements[13], flare.matrixWorld.elements[14] );

			tempPosition.applyMatrix4( camera.matrixWorldInverse );
			tempPosition.applyProjection( camera.projectionMatrix );

			// setup arrays for gl programs

			screenPosition.copy( tempPosition )

			screenPositionPixels.x = screenPosition.x * halfViewportWidth + halfViewportWidth;
			screenPositionPixels.y = screenPosition.y * halfViewportHeight + halfViewportHeight;

			// screen cull

			if ( hasVertexTexture || (
				screenPositionPixels.x > 0 &&
				screenPositionPixels.x < viewportWidth &&
				screenPositionPixels.y > 0 &&
				screenPositionPixels.y < viewportHeight ) ) {

				// save current RGB to temp texture

				gl.activeTexture( gl.TEXTURE1 );
				gl.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGB, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// render pink quad

				gl.uniform1i( uniforms.renderType, 0 );
				gl.uniform2f( uniforms.scale, scale.x, scale.y );
				gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );

				gl.disable( gl.BLEND );
				gl.enable( gl.DEPTH_TEST );

				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// copy result to occlusionMap

				gl.activeTexture( gl.TEXTURE0 );
				gl.bindTexture( gl.TEXTURE_2D, occlusionTexture );
				gl.copyTexImage2D( gl.TEXTURE_2D, 0, gl.RGBA, screenPositionPixels.x - 8, screenPositionPixels.y - 8, 16, 16, 0 );


				// restore graphics

				gl.uniform1i( uniforms.renderType, 1 );
				gl.disable( gl.DEPTH_TEST );

				gl.activeTexture( gl.TEXTURE1 );
				gl.bindTexture( gl.TEXTURE_2D, tempTexture );
				gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );


				// update object positions

				flare.positionScreen.copy( screenPosition )

				if ( flare.customUpdateCallback ) {

					flare.customUpdateCallback( flare );

				} else {

					flare.updateLensFlares();

				}

				// render flares

				gl.uniform1i( uniforms.renderType, 2 );
				gl.enable( gl.BLEND );

				for ( var j = 0, jl = flare.lensFlares.length; j < jl; j ++ ) {

					var sprite = flare.lensFlares[ j ];

					if ( sprite.opacity > 0.001 && sprite.scale > 0.001 ) {

						screenPosition.x = sprite.x;
						screenPosition.y = sprite.y;
						screenPosition.z = sprite.z;

						size = sprite.size * sprite.scale / viewportHeight;

						scale.x = size * invAspect;
						scale.y = size;

						gl.uniform3f( uniforms.screenPosition, screenPosition.x, screenPosition.y, screenPosition.z );
						gl.uniform2f( uniforms.scale, scale.x, scale.y );
						gl.uniform1f( uniforms.rotation, sprite.rotation );

						gl.uniform1f( uniforms.opacity, sprite.opacity );
						gl.uniform3f( uniforms.color, sprite.color.r, sprite.color.g, sprite.color.b );

						renderer.setBlending( sprite.blending, sprite.blendEquation, sprite.blendSrc, sprite.blendDst );
						renderer.setTexture( sprite.texture, 1 );

						gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

					}

				}

			}

		}

		// restore gl

		gl.enable( gl.CULL_FACE );
		gl.enable( gl.DEPTH_TEST );
		gl.depthMask( true );

		renderer.resetGLState();

	};

	function createProgram ( shader ) {

		var program = gl.createProgram();

		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );
		var vertexShader = gl.createShader( gl.VERTEX_SHADER );

		var prefix = "precision " + renderer.getPrecision() + " float;\n";

		gl.shaderSource( fragmentShader, prefix + shader.fragmentShader );
		gl.shaderSource( vertexShader, prefix + shader.vertexShader );

		gl.compileShader( fragmentShader );
		gl.compileShader( vertexShader );

		gl.attachShader( program, fragmentShader );
		gl.attachShader( program, vertexShader );

		gl.linkProgram( program );

		return program;

	}

};

// File:src/renderers/webgl/plugins/ShadowMapPlugin.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ShadowMapPlugin = function ( _renderer, _lights, _webglObjects, _webglObjectsImmediate ) {

	var _gl = _renderer.context;

	var _depthMaterial, _depthMaterialMorph, _depthMaterialSkin, _depthMaterialMorphSkin,

	_frustum = new THREE.Frustum(),
	_projScreenMatrix = new THREE.Matrix4(),

	_min = new THREE.Vector3(),
	_max = new THREE.Vector3(),

	_matrixPosition = new THREE.Vector3(),
	
	_renderList = [];

	// init

	var depthShader = THREE.ShaderLib[ "depthRGBA" ];
	var depthUniforms = THREE.UniformsUtils.clone( depthShader.uniforms );

	_depthMaterial = new THREE.ShaderMaterial( {
		uniforms: depthUniforms,
		vertexShader: depthShader.vertexShader,
		fragmentShader: depthShader.fragmentShader
	 } );

	_depthMaterialMorph = new THREE.ShaderMaterial( {
		uniforms: depthUniforms,
		vertexShader: depthShader.vertexShader,
		fragmentShader: depthShader.fragmentShader,
		morphTargets: true
	} );

	_depthMaterialSkin = new THREE.ShaderMaterial( {
		uniforms: depthUniforms,
		vertexShader: depthShader.vertexShader,
		fragmentShader: depthShader.fragmentShader,
		skinning: true
	} );

	_depthMaterialMorphSkin = new THREE.ShaderMaterial( {
		uniforms: depthUniforms,
		vertexShader: depthShader.vertexShader,
		fragmentShader: depthShader.fragmentShader,
		morphTargets: true,
		skinning: true
	} );

	_depthMaterial._shadowPass = true;
	_depthMaterialMorph._shadowPass = true;
	_depthMaterialSkin._shadowPass = true;
	_depthMaterialMorphSkin._shadowPass = true;

	this.render = function ( scene, camera ) {

		if ( _renderer.shadowMapEnabled === false ) return;

		var i, il, j, jl, n,

		shadowMap, shadowMatrix, shadowCamera,
		program, buffer, material,
		webglObject, object, light,

		lights = [],
		k = 0,

		fog = null;

		// set GL state for depth map

		_gl.clearColor( 1, 1, 1, 1 );
		_gl.disable( _gl.BLEND );

		_gl.enable( _gl.CULL_FACE );
		_gl.frontFace( _gl.CCW );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.FRONT );

		} else {

			_gl.cullFace( _gl.BACK );

		}

		_renderer.setDepthTest( true );

		// preprocess lights
		// 	- skip lights that are not casting shadows
		//	- create virtual lights for cascaded shadow maps

		for ( i = 0, il = _lights.length; i < il; i ++ ) {

			light = _lights[ i ];

			if ( ! light.castShadow ) continue;

			if ( ( light instanceof THREE.DirectionalLight ) && light.shadowCascade ) {

				for ( n = 0; n < light.shadowCascadeCount; n ++ ) {

					var virtualLight;

					if ( ! light.shadowCascadeArray[ n ] ) {

						virtualLight = createVirtualLight( light, n );
						virtualLight.originalCamera = camera;

						var gyro = new THREE.Gyroscope();
						gyro.position.copy( light.shadowCascadeOffset );

						gyro.add( virtualLight );
						gyro.add( virtualLight.target );

						camera.add( gyro );

						light.shadowCascadeArray[ n ] = virtualLight;

						console.log( "Created virtualLight", virtualLight );

					} else {

						virtualLight = light.shadowCascadeArray[ n ];

					}

					updateVirtualLight( light, n );

					lights[ k ] = virtualLight;
					k ++;

				}

			} else {

				lights[ k ] = light;
				k ++;

			}

		}

		// render depth map

		for ( i = 0, il = lights.length; i < il; i ++ ) {

			light = lights[ i ];

			if ( ! light.shadowMap ) {

				var shadowFilter = THREE.LinearFilter;

				if ( _renderer.shadowMapType === THREE.PCFSoftShadowMap ) {

					shadowFilter = THREE.NearestFilter;

				}

				var pars = { minFilter: shadowFilter, magFilter: shadowFilter, format: THREE.RGBAFormat };

				light.shadowMap = new THREE.WebGLRenderTarget( light.shadowMapWidth, light.shadowMapHeight, pars );
				light.shadowMapSize = new THREE.Vector2( light.shadowMapWidth, light.shadowMapHeight );

				light.shadowMatrix = new THREE.Matrix4();

			}

			if ( ! light.shadowCamera ) {

				if ( light instanceof THREE.SpotLight ) {

					light.shadowCamera = new THREE.PerspectiveCamera( light.shadowCameraFov, light.shadowMapWidth / light.shadowMapHeight, light.shadowCameraNear, light.shadowCameraFar );

				} else if ( light instanceof THREE.DirectionalLight ) {

					light.shadowCamera = new THREE.OrthographicCamera( light.shadowCameraLeft, light.shadowCameraRight, light.shadowCameraTop, light.shadowCameraBottom, light.shadowCameraNear, light.shadowCameraFar );

				} else {

					console.error( "Unsupported light type for shadow" );
					continue;

				}

				scene.add( light.shadowCamera );

				if ( scene.autoUpdate === true ) scene.updateMatrixWorld();

			}

			if ( light.shadowCameraVisible && ! light.cameraHelper ) {

				light.cameraHelper = new THREE.CameraHelper( light.shadowCamera );
				scene.add( light.cameraHelper );

			}

			if ( light.isVirtual && virtualLight.originalCamera == camera ) {

				updateShadowCamera( camera, light );

			}

			shadowMap = light.shadowMap;
			shadowMatrix = light.shadowMatrix;
			shadowCamera = light.shadowCamera;

			//

			shadowCamera.position.setFromMatrixPosition( light.matrixWorld );
			_matrixPosition.setFromMatrixPosition( light.target.matrixWorld );
			shadowCamera.lookAt( _matrixPosition );
			shadowCamera.updateMatrixWorld();

			shadowCamera.matrixWorldInverse.getInverse( shadowCamera.matrixWorld );

			//

			if ( light.cameraHelper ) light.cameraHelper.visible = light.shadowCameraVisible;
			if ( light.shadowCameraVisible ) light.cameraHelper.update();

			// compute shadow matrix

			shadowMatrix.set(
				0.5, 0.0, 0.0, 0.5,
				0.0, 0.5, 0.0, 0.5,
				0.0, 0.0, 0.5, 0.5,
				0.0, 0.0, 0.0, 1.0
			);

			shadowMatrix.multiply( shadowCamera.projectionMatrix );
			shadowMatrix.multiply( shadowCamera.matrixWorldInverse );

			// update camera matrices and frustum

			_projScreenMatrix.multiplyMatrices( shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse );
			_frustum.setFromMatrix( _projScreenMatrix );

			// render shadow map

			_renderer.setRenderTarget( shadowMap );
			_renderer.clear();

			// set object matrices & frustum culling

			_renderList.length = 0;

			projectObject( scene, scene, shadowCamera );


			// render regular objects

			var objectMaterial, useMorphing, useSkinning;

			for ( j = 0, jl = _renderList.length; j < jl; j ++ ) {

				webglObject = _renderList[ j ];

				object = webglObject.object;
				buffer = webglObject.buffer;

				// culling is overriden globally for all objects
				// while rendering depth map

				// need to deal with MeshFaceMaterial somehow
				// in that case just use the first of material.materials for now
				// (proper solution would require to break objects by materials
				//  similarly to regular rendering and then set corresponding
				//  depth materials per each chunk instead of just once per object)

				objectMaterial = getObjectMaterial( object );

				useMorphing = object.geometry.morphTargets !== undefined && object.geometry.morphTargets.length > 0 && objectMaterial.morphTargets;
				useSkinning = object instanceof THREE.SkinnedMesh && objectMaterial.skinning;

				if ( object.customDepthMaterial ) {

					material = object.customDepthMaterial;

				} else if ( useSkinning ) {

					material = useMorphing ? _depthMaterialMorphSkin : _depthMaterialSkin;

				} else if ( useMorphing ) {

					material = _depthMaterialMorph;

				} else {

					material = _depthMaterial;

				}

				_renderer.setMaterialFaces( objectMaterial );

				if ( buffer instanceof THREE.BufferGeometry ) {

					_renderer.renderBufferDirect( shadowCamera, _lights, fog, material, buffer, object );

				} else {

					_renderer.renderBuffer( shadowCamera, _lights, fog, material, buffer, object );

				}

			}

			// set matrices and render immediate objects

			for ( j = 0, jl = _webglObjectsImmediate.length; j < jl; j ++ ) {

				webglObject = _webglObjectsImmediate[ j ];
				object = webglObject.object;

				if ( object.visible && object.castShadow ) {

					object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					_renderer.renderImmediateObject( shadowCamera, _lights, fog, _depthMaterial, object );

				}

			}

		}

		// restore GL state

		var clearColor = _renderer.getClearColor(),
		clearAlpha = _renderer.getClearAlpha();

		_gl.clearColor( clearColor.r, clearColor.g, clearColor.b, clearAlpha );
		_gl.enable( _gl.BLEND );

		if ( _renderer.shadowMapCullFace === THREE.CullFaceFront ) {

			_gl.cullFace( _gl.BACK );

		}

		_renderer.resetGLState();

	};

	function projectObject( scene, object, shadowCamera ){

		if ( object.visible ) {

			var webglObjects = _webglObjects[ object.id ];

			if ( webglObjects && object.castShadow && (object.frustumCulled === false || _frustum.intersectsObject( object ) === true) ) {

				for ( var i = 0, l = webglObjects.length; i < l; i ++ ) {

					var webglObject = webglObjects[ i ];

					object._modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );
					_renderList.push( webglObject );

				}

			}

			for ( var i = 0, l = object.children.length; i < l; i ++ ) {

				projectObject( scene, object.children[ i ], shadowCamera );

			}

		}

	}

	function createVirtualLight( light, cascade ) {

		var virtualLight = new THREE.DirectionalLight();

		virtualLight.isVirtual = true;

		virtualLight.onlyShadow = true;
		virtualLight.castShadow = true;

		virtualLight.shadowCameraNear = light.shadowCameraNear;
		virtualLight.shadowCameraFar = light.shadowCameraFar;

		virtualLight.shadowCameraLeft = light.shadowCameraLeft;
		virtualLight.shadowCameraRight = light.shadowCameraRight;
		virtualLight.shadowCameraBottom = light.shadowCameraBottom;
		virtualLight.shadowCameraTop = light.shadowCameraTop;

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;

		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];
		virtualLight.shadowMapWidth = light.shadowCascadeWidth[ cascade ];
		virtualLight.shadowMapHeight = light.shadowCascadeHeight[ cascade ];

		virtualLight.pointsWorld = [];
		virtualLight.pointsFrustum = [];

		var pointsWorld = virtualLight.pointsWorld,
			pointsFrustum = virtualLight.pointsFrustum;

		for ( var i = 0; i < 8; i ++ ) {

			pointsWorld[ i ] = new THREE.Vector3();
			pointsFrustum[ i ] = new THREE.Vector3();

		}

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		pointsFrustum[ 0 ].set( - 1, - 1, nearZ );
		pointsFrustum[ 1 ].set(  1, - 1, nearZ );
		pointsFrustum[ 2 ].set( - 1,  1, nearZ );
		pointsFrustum[ 3 ].set(  1,  1, nearZ );

		pointsFrustum[ 4 ].set( - 1, - 1, farZ );
		pointsFrustum[ 5 ].set(  1, - 1, farZ );
		pointsFrustum[ 6 ].set( - 1,  1, farZ );
		pointsFrustum[ 7 ].set(  1,  1, farZ );

		return virtualLight;

	}

	// Synchronize virtual light with the original light

	function updateVirtualLight( light, cascade ) {

		var virtualLight = light.shadowCascadeArray[ cascade ];

		virtualLight.position.copy( light.position );
		virtualLight.target.position.copy( light.target.position );
		virtualLight.lookAt( virtualLight.target );

		virtualLight.shadowCameraVisible = light.shadowCameraVisible;
		virtualLight.shadowDarkness = light.shadowDarkness;

		virtualLight.shadowBias = light.shadowCascadeBias[ cascade ];

		var nearZ = light.shadowCascadeNearZ[ cascade ];
		var farZ = light.shadowCascadeFarZ[ cascade ];

		var pointsFrustum = virtualLight.pointsFrustum;

		pointsFrustum[ 0 ].z = nearZ;
		pointsFrustum[ 1 ].z = nearZ;
		pointsFrustum[ 2 ].z = nearZ;
		pointsFrustum[ 3 ].z = nearZ;

		pointsFrustum[ 4 ].z = farZ;
		pointsFrustum[ 5 ].z = farZ;
		pointsFrustum[ 6 ].z = farZ;
		pointsFrustum[ 7 ].z = farZ;

	}

	// Fit shadow camera's ortho frustum to camera frustum

	function updateShadowCamera( camera, light ) {

		var shadowCamera = light.shadowCamera,
			pointsFrustum = light.pointsFrustum,
			pointsWorld = light.pointsWorld;

		_min.set( Infinity, Infinity, Infinity );
		_max.set( - Infinity, - Infinity, - Infinity );

		for ( var i = 0; i < 8; i ++ ) {

			var p = pointsWorld[ i ];

			p.copy( pointsFrustum[ i ] );
			p.unproject( camera );

			p.applyMatrix4( shadowCamera.matrixWorldInverse );

			if ( p.x < _min.x ) _min.x = p.x;
			if ( p.x > _max.x ) _max.x = p.x;

			if ( p.y < _min.y ) _min.y = p.y;
			if ( p.y > _max.y ) _max.y = p.y;

			if ( p.z < _min.z ) _min.z = p.z;
			if ( p.z > _max.z ) _max.z = p.z;

		}

		shadowCamera.left = _min.x;
		shadowCamera.right = _max.x;
		shadowCamera.top = _max.y;
		shadowCamera.bottom = _min.y;

		// can't really fit near/far
		//shadowCamera.near = _min.z;
		//shadowCamera.far = _max.z;

		shadowCamera.updateProjectionMatrix();

	}

	// For the moment just ignore objects that have multiple materials with different animation methods
	// Only the first material will be taken into account for deciding which depth material to use for shadow maps

	function getObjectMaterial( object ) {

		return object.material instanceof THREE.MeshFaceMaterial
			? object.material.materials[ 0 ]
			: object.material;

	};

};

// File:src/renderers/webgl/plugins/SpritePlugin.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SpritePlugin = function ( renderer, sprites ) {

	var gl = renderer.context;

	var vertexBuffer, elementBuffer;
	var program, attributes, uniforms;

	var texture;
	
	var init = function () {

		var vertices = new Float32Array( [
			- 0.5, - 0.5,  0, 0,
			  0.5, - 0.5,  1, 0,
			  0.5,   0.5,  1, 1,
			- 0.5,   0.5,  0, 1
		] );

		var faces = new Uint16Array( [
			0, 1, 2,
			0, 2, 3
		] );

		vertexBuffer  = gl.createBuffer();
		elementBuffer = gl.createBuffer();

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.bufferData( gl.ARRAY_BUFFER, vertices, gl.STATIC_DRAW );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );
		gl.bufferData( gl.ELEMENT_ARRAY_BUFFER, faces, gl.STATIC_DRAW );

		program = createProgram();

		attributes = {
			position:			gl.getAttribLocation ( program, 'position' ),
			uv:					gl.getAttribLocation ( program, 'uv' )
		};

		uniforms = {
			uvOffset:			gl.getUniformLocation( program, 'uvOffset' ),
			uvScale:			gl.getUniformLocation( program, 'uvScale' ),

			rotation:			gl.getUniformLocation( program, 'rotation' ),
			scale:				gl.getUniformLocation( program, 'scale' ),

			color:				gl.getUniformLocation( program, 'color' ),
			map:				gl.getUniformLocation( program, 'map' ),
			opacity:			gl.getUniformLocation( program, 'opacity' ),

			modelViewMatrix: 	gl.getUniformLocation( program, 'modelViewMatrix' ),
			projectionMatrix:	gl.getUniformLocation( program, 'projectionMatrix' ),

			fogType:			gl.getUniformLocation( program, 'fogType' ),
			fogDensity:			gl.getUniformLocation( program, 'fogDensity' ),
			fogNear:			gl.getUniformLocation( program, 'fogNear' ),
			fogFar:				gl.getUniformLocation( program, 'fogFar' ),
			fogColor:			gl.getUniformLocation( program, 'fogColor' ),

			alphaTest:			gl.getUniformLocation( program, 'alphaTest' )
		};

		var canvas = document.createElement( 'canvas' );
		canvas.width = 8;
		canvas.height = 8;

		var context = canvas.getContext( '2d' );
		context.fillStyle = 'white';
		context.fillRect( 0, 0, 8, 8 );

		texture = new THREE.Texture( canvas );
		texture.needsUpdate = true;

	};

	this.render = function ( scene, camera ) {

		if ( sprites.length === 0 ) return;

		// setup gl

		if ( program === undefined ) {

			init();

		}

		gl.useProgram( program );

		gl.enableVertexAttribArray( attributes.position );
		gl.enableVertexAttribArray( attributes.uv );

		gl.disable( gl.CULL_FACE );
		gl.enable( gl.BLEND );

		gl.bindBuffer( gl.ARRAY_BUFFER, vertexBuffer );
		gl.vertexAttribPointer( attributes.position, 2, gl.FLOAT, false, 2 * 8, 0 );
		gl.vertexAttribPointer( attributes.uv, 2, gl.FLOAT, false, 2 * 8, 8 );

		gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, elementBuffer );

		gl.uniformMatrix4fv( uniforms.projectionMatrix, false, camera.projectionMatrix.elements );

		gl.activeTexture( gl.TEXTURE0 );
		gl.uniform1i( uniforms.map, 0 );

		var oldFogType = 0;
		var sceneFogType = 0;
		var fog = scene.fog;

		if ( fog ) {

			gl.uniform3f( uniforms.fogColor, fog.color.r, fog.color.g, fog.color.b );

			if ( fog instanceof THREE.Fog ) {

				gl.uniform1f( uniforms.fogNear, fog.near );
				gl.uniform1f( uniforms.fogFar, fog.far );

				gl.uniform1i( uniforms.fogType, 1 );
				oldFogType = 1;
				sceneFogType = 1;

			} else if ( fog instanceof THREE.FogExp2 ) {

				gl.uniform1f( uniforms.fogDensity, fog.density );

				gl.uniform1i( uniforms.fogType, 2 );
				oldFogType = 2;
				sceneFogType = 2;

			}

		} else {

			gl.uniform1i( uniforms.fogType, 0 );
			oldFogType = 0;
			sceneFogType = 0;

		}


		// update positions and sort

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];

			sprite._modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, sprite.matrixWorld );

			if ( sprite.renderDepth === null ) {

				sprite.z = - sprite._modelViewMatrix.elements[ 14 ];

			} else {

				sprite.z = sprite.renderDepth;

			}

		}

		sprites.sort( painterSortStable );

		// render all sprites

		var scale = [];

		for ( var i = 0, l = sprites.length; i < l; i ++ ) {

			var sprite = sprites[ i ];
			var material = sprite.material;

			gl.uniform1f( uniforms.alphaTest, material.alphaTest );
			gl.uniformMatrix4fv( uniforms.modelViewMatrix, false, sprite._modelViewMatrix.elements );

			scale[ 0 ] = sprite.scale.x;
			scale[ 1 ] = sprite.scale.y;

			var fogType = 0;

			if ( scene.fog && material.fog ) {

				fogType = sceneFogType;

			}

			if ( oldFogType !== fogType ) {

				gl.uniform1i( uniforms.fogType, fogType );
				oldFogType = fogType;

			}

			if ( material.map !== null ) {

				gl.uniform2f( uniforms.uvOffset, material.map.offset.x, material.map.offset.y );
				gl.uniform2f( uniforms.uvScale, material.map.repeat.x, material.map.repeat.y );

			} else {

				gl.uniform2f( uniforms.uvOffset, 0, 0 );
				gl.uniform2f( uniforms.uvScale, 1, 1 );

			}

			gl.uniform1f( uniforms.opacity, material.opacity );
			gl.uniform3f( uniforms.color, material.color.r, material.color.g, material.color.b );

			gl.uniform1f( uniforms.rotation, material.rotation );
			gl.uniform2fv( uniforms.scale, scale );

			renderer.setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst );
			renderer.setDepthTest( material.depthTest );
			renderer.setDepthWrite( material.depthWrite );

			if ( material.map && material.map.image && material.map.image.width ) {

				renderer.setTexture( material.map, 0 );

			} else {

				renderer.setTexture( texture, 0 );

			}

			gl.drawElements( gl.TRIANGLES, 6, gl.UNSIGNED_SHORT, 0 );

		}

		// restore gl

		gl.enable( gl.CULL_FACE );
		
		renderer.resetGLState();

	};

	function createProgram () {

		var program = gl.createProgram();

		var vertexShader = gl.createShader( gl.VERTEX_SHADER );
		var fragmentShader = gl.createShader( gl.FRAGMENT_SHADER );

		gl.shaderSource( vertexShader, [

			'precision ' + renderer.getPrecision() + ' float;',

			'uniform mat4 modelViewMatrix;',
			'uniform mat4 projectionMatrix;',
			'uniform float rotation;',
			'uniform vec2 scale;',
			'uniform vec2 uvOffset;',
			'uniform vec2 uvScale;',

			'attribute vec2 position;',
			'attribute vec2 uv;',

			'varying vec2 vUV;',

			'void main() {',

				'vUV = uvOffset + uv * uvScale;',

				'vec2 alignedPosition = position * scale;',

				'vec2 rotatedPosition;',
				'rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;',
				'rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;',

				'vec4 finalPosition;',

				'finalPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );',
				'finalPosition.xy += rotatedPosition;',
				'finalPosition = projectionMatrix * finalPosition;',

				'gl_Position = finalPosition;',

			'}'

		].join( '\n' ) );

		gl.shaderSource( fragmentShader, [

			'precision ' + renderer.getPrecision() + ' float;',

			'uniform vec3 color;',
			'uniform sampler2D map;',
			'uniform float opacity;',

			'uniform int fogType;',
			'uniform vec3 fogColor;',
			'uniform float fogDensity;',
			'uniform float fogNear;',
			'uniform float fogFar;',
			'uniform float alphaTest;',

			'varying vec2 vUV;',

			'void main() {',

				'vec4 texture = texture2D( map, vUV );',

				'if ( texture.a < alphaTest ) discard;',

				'gl_FragColor = vec4( color * texture.xyz, texture.a * opacity );',

				'if ( fogType > 0 ) {',

					'float depth = gl_FragCoord.z / gl_FragCoord.w;',
					'float fogFactor = 0.0;',

					'if ( fogType == 1 ) {',

						'fogFactor = smoothstep( fogNear, fogFar, depth );',

					'} else {',

						'const float LOG2 = 1.442695;',
						'float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );',
						'fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );',

					'}',

					'gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );',

				'}',

			'}'

		].join( '\n' ) );

		gl.compileShader( vertexShader );
		gl.compileShader( fragmentShader );

		gl.attachShader( program, vertexShader );
		gl.attachShader( program, fragmentShader );

		gl.linkProgram( program );

		return program;

	};

	function painterSortStable ( a, b ) {

		if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return b.id - a.id;

		}

	};

};

// File:src/extras/GeometryUtils.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GeometryUtils = {

	merge: function ( geometry1, geometry2, materialIndexOffset ) {

		console.warn( 'THREE.GeometryUtils: .merge() has been moved to Geometry. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.' );

		var matrix;

		if ( geometry2 instanceof THREE.Mesh ) {

			geometry2.matrixAutoUpdate && geometry2.updateMatrix();

			matrix = geometry2.matrix;
			geometry2 = geometry2.geometry;

		}

		geometry1.merge( geometry2, matrix, materialIndexOffset );

	},

	center: function ( geometry ) {

		console.warn( 'THREE.GeometryUtils: .center() has been moved to Geometry. Use geometry.center() instead.' );
		return geometry.center();

	}

};

// File:src/extras/ImageUtils.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author Daosheng Mu / https://github.com/DaoshengMu/
 */

THREE.ImageUtils = {

	crossOrigin: undefined,

	loadTexture: function ( url, mapping, onLoad, onError ) {

		var loader = new THREE.ImageLoader();
		loader.crossOrigin = this.crossOrigin;

		var texture = new THREE.Texture( undefined, mapping );

		loader.load( url, function ( image ) {

			texture.image = image;
			texture.needsUpdate = true;

			if ( onLoad ) onLoad( texture );

		}, undefined, function ( event ) {

			if ( onError ) onError( event );

		} );

		texture.sourceFile = url;

		return texture;

	},

	loadTextureCube: function ( array, mapping, onLoad, onError ) {

		var images = [];

		var loader = new THREE.ImageLoader();
		loader.crossOrigin = this.crossOrigin;

		var texture = new THREE.CubeTexture( images, mapping );

		// no flipping needed for cube textures

		texture.flipY = false;

		var loaded = 0;

		var loadTexture = function ( i ) {

			loader.load( array[ i ], function ( image ) {

				texture.images[ i ] = image;

				loaded += 1;

				if ( loaded === 6 ) {

					texture.needsUpdate = true;

					if ( onLoad ) onLoad( texture );

				}

			} );

		}

		for ( var i = 0, il = array.length; i < il; ++ i ) {

			loadTexture( i );

		}

		return texture;

	},

	loadCompressedTexture: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.' )

	},

	loadCompressedTextureCube: function () {

		console.error( 'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.' )

	},

	getNormalMap: function ( image, depth ) {

		// Adapted from http://www.paulbrunt.co.uk/lab/heightnormal/

		var cross = function ( a, b ) {

			return [ a[ 1 ] * b[ 2 ] - a[ 2 ] * b[ 1 ], a[ 2 ] * b[ 0 ] - a[ 0 ] * b[ 2 ], a[ 0 ] * b[ 1 ] - a[ 1 ] * b[ 0 ] ];

		}

		var subtract = function ( a, b ) {

			return [ a[ 0 ] - b[ 0 ], a[ 1 ] - b[ 1 ], a[ 2 ] - b[ 2 ] ];

		}

		var normalize = function ( a ) {

			var l = Math.sqrt( a[ 0 ] * a[ 0 ] + a[ 1 ] * a[ 1 ] + a[ 2 ] * a[ 2 ] );
			return [ a[ 0 ] / l, a[ 1 ] / l, a[ 2 ] / l ];

		}

		depth = depth | 1;

		var width = image.width;
		var height = image.height;

		var canvas = document.createElement( 'canvas' );
		canvas.width = width;
		canvas.height = height;

		var context = canvas.getContext( '2d' );
		context.drawImage( image, 0, 0 );

		var data = context.getImageData( 0, 0, width, height ).data;
		var imageData = context.createImageData( width, height );
		var output = imageData.data;

		for ( var x = 0; x < width; x ++ ) {

			for ( var y = 0; y < height; y ++ ) {

				var ly = y - 1 < 0 ? 0 : y - 1;
				var uy = y + 1 > height - 1 ? height - 1 : y + 1;
				var lx = x - 1 < 0 ? 0 : x - 1;
				var ux = x + 1 > width - 1 ? width - 1 : x + 1;

				var points = [];
				var origin = [ 0, 0, data[ ( y * width + x ) * 4 ] / 255 * depth ];
				points.push( [ - 1, 0, data[ ( y * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, - 1, data[ ( ly * width + lx ) * 4 ] / 255 * depth ] );
				points.push( [ 0, - 1, data[ ( ly * width + x ) * 4 ] / 255 * depth ] );
				points.push( [  1, - 1, data[ ( ly * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 0, data[ ( y * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 1, 1, data[ ( uy * width + ux ) * 4 ] / 255 * depth ] );
				points.push( [ 0, 1, data[ ( uy * width + x ) * 4 ] / 255 * depth ] );
				points.push( [ - 1, 1, data[ ( uy * width + lx ) * 4 ] / 255 * depth ] );

				var normals = [];
				var num_points = points.length;

				for ( var i = 0; i < num_points; i ++ ) {

					var v1 = points[ i ];
					var v2 = points[ ( i + 1 ) % num_points ];
					v1 = subtract( v1, origin );
					v2 = subtract( v2, origin );
					normals.push( normalize( cross( v1, v2 ) ) );

				}

				var normal = [ 0, 0, 0 ];

				for ( var i = 0; i < normals.length; i ++ ) {

					normal[ 0 ] += normals[ i ][ 0 ];
					normal[ 1 ] += normals[ i ][ 1 ];
					normal[ 2 ] += normals[ i ][ 2 ];

				}

				normal[ 0 ] /= normals.length;
				normal[ 1 ] /= normals.length;
				normal[ 2 ] /= normals.length;

				var idx = ( y * width + x ) * 4;

				output[ idx ] = ( ( normal[ 0 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 1 ] = ( ( normal[ 1 ] + 1.0 ) / 2.0 * 255 ) | 0;
				output[ idx + 2 ] = ( normal[ 2 ] * 255 ) | 0;
				output[ idx + 3 ] = 255;

			}

		}

		context.putImageData( imageData, 0, 0 );

		return canvas;

	},

	generateDataTexture: function ( width, height, color ) {

		var size = width * height;
		var data = new Uint8Array( 3 * size );

		var r = Math.floor( color.r * 255 );
		var g = Math.floor( color.g * 255 );
		var b = Math.floor( color.b * 255 );

		for ( var i = 0; i < size; i ++ ) {

			data[ i * 3 ] 	   = r;
			data[ i * 3 + 1 ] = g;
			data[ i * 3 + 2 ] = b;

		}

		var texture = new THREE.DataTexture( data, width, height, THREE.RGBFormat );
		texture.needsUpdate = true;

		return texture;

	}

};

// File:src/extras/SceneUtils.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.SceneUtils = {

	createMultiMaterialObject: function ( geometry, materials ) {

		var group = new THREE.Object3D();

		for ( var i = 0, l = materials.length; i < l; i ++ ) {

			group.add( new THREE.Mesh( geometry, materials[ i ] ) );

		}

		return group;

	},

	detach: function ( child, parent, scene ) {

		child.applyMatrix( parent.matrixWorld );
		parent.remove( child );
		scene.add( child );

	},

	attach: function ( child, scene, parent ) {

		var matrixWorldInverse = new THREE.Matrix4();
		matrixWorldInverse.getInverse( parent.matrixWorld );
		child.applyMatrix( matrixWorldInverse );

		scene.remove( child );
		parent.add( child );

	}

};

// File:src/extras/FontUtils.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For Text operations in three.js (See TextGeometry)
 *
 * It uses techniques used in:
 *
 * 	typeface.js and canvastext
 * 		For converting fonts and rendering with javascript
 *		http://typeface.neocracy.org
 *
 *	Triangulation ported from AS3
 *		Simple Polygon Triangulation
 *		http://actionsnippet.com/?p=1462
 *
 * 	A Method to triangulate shapes with holes
 *		http://www.sakri.net/blog/2009/06/12/an-approach-to-triangulating-polygons-with-holes/
 *
 */

THREE.FontUtils = {

	faces: {},

	// Just for now. face[weight][style]

	face: 'helvetiker',
	weight: 'normal',
	style: 'normal',
	size: 150,
	divisions: 10,

	getFace: function () {

		try {

			return this.faces[ this.face ][ this.weight ][ this.style ];

		} catch (e) {

			throw "The font " + this.face + " with " + this.weight + " weight and " + this.style + " style is missing."

		};

	},

	loadFace: function ( data ) {

		var family = data.familyName.toLowerCase();

		var ThreeFont = this;

		ThreeFont.faces[ family ] = ThreeFont.faces[ family ] || {};

		ThreeFont.faces[ family ][ data.cssFontWeight ] = ThreeFont.faces[ family ][ data.cssFontWeight ] || {};
		ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		var face = ThreeFont.faces[ family ][ data.cssFontWeight ][ data.cssFontStyle ] = data;

		return data;

	},

	drawText: function ( text ) {

		var characterPts = [], allPts = [];

		// RenderText

		var i, p,
			face = this.getFace(),
			scale = this.size / face.resolution,
			offset = 0,
			chars = String( text ).split( '' ),
			length = chars.length;

		var fontPaths = [];

		for ( i = 0; i < length; i ++ ) {

			var path = new THREE.Path();

			var ret = this.extractGlyphPoints( chars[ i ], face, scale, offset, path );
			offset += ret.offset;

			fontPaths.push( ret.path );

		}

		// get the width

		var width = offset / 2;
		//
		// for ( p = 0; p < allPts.length; p++ ) {
		//
		// 	allPts[ p ].x -= width;
		//
		// }

		//var extract = this.extractPoints( allPts, characterPts );
		//extract.contour = allPts;

		//extract.paths = fontPaths;
		//extract.offset = width;

		return { paths: fontPaths, offset: width };

	},




	extractGlyphPoints: function ( c, face, scale, offset, path ) {

		var pts = [];

		var i, i2, divisions,
			outline, action, length,
			scaleX, scaleY,
			x, y, cpx, cpy, cpx0, cpy0, cpx1, cpy1, cpx2, cpy2,
			laste,
			glyph = face.glyphs[ c ] || face.glyphs[ '?' ];

		if ( ! glyph ) return;

		if ( glyph.o ) {

			outline = glyph._cachedOutline || ( glyph._cachedOutline = glyph.o.split( ' ' ) );
			length = outline.length;

			scaleX = scale;
			scaleY = scale;

			for ( i = 0; i < length; ) {

				action = outline[ i ++ ];

				//console.log( action );

				switch ( action ) {

				case 'm':

					// Move To

					x = outline[ i ++ ] * scaleX + offset;
					y = outline[ i ++ ] * scaleY;

					path.moveTo( x, y );
					break;

				case 'l':

					// Line To

					x = outline[ i ++ ] * scaleX + offset;
					y = outline[ i ++ ] * scaleY;
					path.lineTo( x,y );
					break;

				case 'q':

					// QuadraticCurveTo

					cpx  = outline[ i ++ ] * scaleX + offset;
					cpy  = outline[ i ++ ] * scaleY;
					cpx1 = outline[ i ++ ] * scaleX + offset;
					cpy1 = outline[ i ++ ] * scaleY;

					path.quadraticCurveTo( cpx1, cpy1, cpx, cpy );

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
							var ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );
					  }

				  }

				  break;

				case 'b':

					// Cubic Bezier Curve

					cpx  = outline[ i ++ ] *  scaleX + offset;
					cpy  = outline[ i ++ ] *  scaleY;
					cpx1 = outline[ i ++ ] *  scaleX + offset;
					cpy1 = outline[ i ++ ] *  scaleY;
					cpx2 = outline[ i ++ ] *  scaleX + offset;
					cpy2 = outline[ i ++ ] *  scaleY;

					path.bezierCurveTo( cpx1, cpy1, cpx2, cpy2, cpx, cpy );

					laste = pts[ pts.length - 1 ];

					if ( laste ) {

						cpx0 = laste.x;
						cpy0 = laste.y;

						for ( i2 = 1, divisions = this.divisions; i2 <= divisions; i2 ++ ) {

							var t = i2 / divisions;
							var tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
							var ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

						}

					}

					break;

				}

			}
		}



		return { offset: glyph.ha * scale, path:path };
	}

};


THREE.FontUtils.generateShapes = function ( text, parameters ) {

	// Parameters 

	parameters = parameters || {};

	var size = parameters.size !== undefined ? parameters.size : 100;
	var curveSegments = parameters.curveSegments !== undefined ? parameters.curveSegments : 4;

	var font = parameters.font !== undefined ? parameters.font : 'helvetiker';
	var weight = parameters.weight !== undefined ? parameters.weight : 'normal';
	var style = parameters.style !== undefined ? parameters.style : 'normal';

	THREE.FontUtils.size = size;
	THREE.FontUtils.divisions = curveSegments;

	THREE.FontUtils.face = font;
	THREE.FontUtils.weight = weight;
	THREE.FontUtils.style = style;

	// Get a Font data json object

	var data = THREE.FontUtils.drawText( text );

	var paths = data.paths;
	var shapes = [];

	for ( var p = 0, pl = paths.length; p < pl; p ++ ) {

		Array.prototype.push.apply( shapes, paths[ p ].toShapes() );

	}

	return shapes;

};


/**
 * This code is a quick port of code written in C++ which was submitted to
 * flipcode.com by John W. Ratcliff  // July 22, 2000
 * See original code and more information here:
 * http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
 *
 * ported to actionscript by Zevan Rosser
 * www.actionsnippet.com
 *
 * ported to javascript by Joshua Koo
 * http://www.lab4games.net/zz85/blog
 *
 */


( function ( namespace ) {

	var EPSILON = 0.0000000001;

	// takes in an contour array and returns

	var process = function ( contour, indices ) {

		var n = contour.length;

		if ( n < 3 ) return null;

		var result = [],
			verts = [],
			vertIndices = [];

		/* we want a counter-clockwise polygon in verts */

		var u, v, w;

		if ( area( contour ) > 0.0 ) {

			for ( v = 0; v < n; v ++ ) verts[ v ] = v;

		} else {

			for ( v = 0; v < n; v ++ ) verts[ v ] = ( n - 1 ) - v;

		}

		var nv = n;

		/*  remove nv - 2 vertices, creating 1 triangle every time */

		var count = 2 * nv;   /* error detection */

		for ( v = nv - 1; nv > 2; ) {

			/* if we loop, it is probably a non-simple polygon */

			if ( ( count -- ) <= 0 ) {

				//** Triangulate: ERROR - probable bad polygon!

				//throw ( "Warning, unable to triangulate polygon!" );
				//return null;
				// Sometimes warning is fine, especially polygons are triangulated in reverse.
				console.log( 'Warning, unable to triangulate polygon!' );

				if ( indices ) return vertIndices;
				return result;

			}

			/* three consecutive vertices in current polygon, <u,v,w> */

			u = v; 	 	if ( nv <= u ) u = 0;     /* previous */
			v = u + 1;  if ( nv <= v ) v = 0;     /* new v    */
			w = v + 1;  if ( nv <= w ) w = 0;     /* next     */

			if ( snip( contour, u, v, w, nv, verts ) ) {

				var a, b, c, s, t;

				/* true names of the vertices */

				a = verts[ u ];
				b = verts[ v ];
				c = verts[ w ];

				/* output Triangle */

				result.push( [ contour[ a ],
					contour[ b ],
					contour[ c ] ] );


				vertIndices.push( [ verts[ u ], verts[ v ], verts[ w ] ] );

				/* remove v from the remaining polygon */

				for ( s = v, t = v + 1; t < nv; s++, t++ ) {

					verts[ s ] = verts[ t ];

				}

				nv --;

				/* reset error detection counter */

				count = 2 * nv;

			}

		}

		if ( indices ) return vertIndices;
		return result;

	};

	// calculate area of the contour polygon

	var area = function ( contour ) {

		var n = contour.length;
		var a = 0.0;

		for ( var p = n - 1, q = 0; q < n; p = q ++ ) {

			a += contour[ p ].x * contour[ q ].y - contour[ q ].x * contour[ p ].y;

		}

		return a * 0.5;

	};

	var snip = function ( contour, u, v, w, n, verts ) {

		var p;
		var ax, ay, bx, by;
		var cx, cy, px, py;

		ax = contour[ verts[ u ] ].x;
		ay = contour[ verts[ u ] ].y;

		bx = contour[ verts[ v ] ].x;
		by = contour[ verts[ v ] ].y;

		cx = contour[ verts[ w ] ].x;
		cy = contour[ verts[ w ] ].y;

		if ( EPSILON > ( ( ( bx - ax ) * ( cy - ay ) ) - ( ( by - ay ) * ( cx - ax ) ) ) ) return false;

		var aX, aY, bX, bY, cX, cY;
		var apx, apy, bpx, bpy, cpx, cpy;
		var cCROSSap, bCROSScp, aCROSSbp;

		aX = cx - bx;  aY = cy - by;
		bX = ax - cx;  bY = ay - cy;
		cX = bx - ax;  cY = by - ay;

		for ( p = 0; p < n; p ++ ) {

			px = contour[ verts[ p ] ].x
			py = contour[ verts[ p ] ].y

			if ( ( ( px === ax ) && ( py === ay ) ) ||
				 ( ( px === bx ) && ( py === by ) ) ||
				 ( ( px === cx ) && ( py === cy ) ) )	continue;

			apx = px - ax;  apy = py - ay;
			bpx = px - bx;  bpy = py - by;
			cpx = px - cx;  cpy = py - cy;

			// see if p is inside triangle abc

			aCROSSbp = aX * bpy - aY * bpx;
			cCROSSap = cX * apy - cY * apx;
			bCROSScp = bX * cpy - bY * cpx;

			if ( ( aCROSSbp >= - EPSILON ) && ( bCROSScp >= - EPSILON ) && ( cCROSSap >= - EPSILON ) ) return false;

		}

		return true;

	};


	namespace.Triangulate = process;
	namespace.Triangulate.area = area;

	return namespace;

} )( THREE.FontUtils );

// To use the typeface.js face files, hook up the API
self._typeface_js = { faces: THREE.FontUtils.faces, loadFace: THREE.FontUtils.loadFace };
THREE.typeface_js = self._typeface_js;

// File:src/extras/audio/Audio.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.Audio = function ( listener ) {

	THREE.Object3D.call( this );

	this.type = 'Audio';

	this.context = listener.context;
	this.source = this.context.createBufferSource();

	this.gain = this.context.createGain();
	this.gain.connect( this.context.destination );

	this.panner = this.context.createPanner();
	this.panner.connect( this.gain );

};

THREE.Audio.prototype = Object.create( THREE.Object3D.prototype );

THREE.Audio.prototype.load = function ( file ) {

	var scope = this;

	var request = new XMLHttpRequest();
	request.open( 'GET', file, true );
	request.responseType = 'arraybuffer';
	request.onload = function ( e ) {

		scope.context.decodeAudioData( this.response, function ( buffer ) {

			scope.source.buffer = buffer;
			scope.source.connect( scope.panner );
			scope.source.start( 0 );

		} );

	};
	request.send();

	return this;

};

THREE.Audio.prototype.setLoop = function ( value ) {

	this.source.loop = value;

};

THREE.Audio.prototype.setRefDistance = function ( value ) {

	this.panner.refDistance = value;

};

THREE.Audio.prototype.setRolloffFactor = function ( value ) {

	this.panner.rolloffFactor = value;

};

THREE.Audio.prototype.updateMatrixWorld = ( function () {

	var position = new THREE.Vector3();

	return function ( force ) {

		THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

		position.setFromMatrixPosition( this.matrixWorld );

		this.panner.setPosition( position.x, position.y, position.z );

	};

} )();

// File:src/extras/audio/AudioListener.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AudioListener = function () {

	THREE.Object3D.call( this );

	this.type = 'AudioListener';

	this.context = new ( window.AudioContext || window.webkitAudioContext )();

};

THREE.AudioListener.prototype = Object.create( THREE.Object3D.prototype );

THREE.AudioListener.prototype.updateMatrixWorld = ( function () {

	var position = new THREE.Vector3();
	var quaternion = new THREE.Quaternion();
	var scale = new THREE.Vector3();

	var orientation = new THREE.Vector3();
	var velocity = new THREE.Vector3();

	var positionPrev = new THREE.Vector3();

	return function ( force ) {

		THREE.Object3D.prototype.updateMatrixWorld.call( this, force );

		var listener = this.context.listener;

		this.matrixWorld.decompose( position, quaternion, scale );

		orientation.set( 0, 0, -1 ).applyQuaternion( quaternion );
		velocity.subVectors( position, positionPrev );

		listener.setPosition( position.x, position.y, position.z );
		listener.setOrientation( orientation.x, orientation.y, orientation.z, this.up.x, this.up.y, this.up.z );
		listener.setVelocity( velocity.x, velocity.y, velocity.z );

		positionPrev.copy( position );

	};

} )();

// File:src/extras/core/Curve.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Extensible curve object
 *
 * Some common of Curve methods
 * .getPoint(t), getTangent(t)
 * .getPointAt(u), getTagentAt(u)
 * .getPoints(), .getSpacedPoints()
 * .getLength()
 * .updateArcLengths()
 *
 * This following classes subclasses THREE.Curve:
 *
 * -- 2d classes --
 * THREE.LineCurve
 * THREE.QuadraticBezierCurve
 * THREE.CubicBezierCurve
 * THREE.SplineCurve
 * THREE.ArcCurve
 * THREE.EllipseCurve
 *
 * -- 3d classes --
 * THREE.LineCurve3
 * THREE.QuadraticBezierCurve3
 * THREE.CubicBezierCurve3
 * THREE.SplineCurve3
 * THREE.ClosedSplineCurve3
 *
 * A series of curves can be represented as a THREE.CurvePath
 *
 **/

/**************************************************************
 *	Abstract Curve base class
 **************************************************************/

THREE.Curve = function () {

};

// Virtual base class method to overwrite and implement in subclasses
//	- t [0 .. 1]

THREE.Curve.prototype.getPoint = function ( t ) {

	console.log( "Warning, getPoint() not implemented!" );
	return null;

};

// Get point at relative position in curve according to arc length
// - u [0 .. 1]

THREE.Curve.prototype.getPointAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getPoint( t );

};

// Get sequence of points using getPoint( t )

THREE.Curve.prototype.getPoints = function ( divisions ) {

	if ( ! divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPoint( d / divisions ) );

	}

	return pts;

};

// Get sequence of points using getPointAt( u )

THREE.Curve.prototype.getSpacedPoints = function ( divisions ) {

	if ( ! divisions ) divisions = 5;

	var d, pts = [];

	for ( d = 0; d <= divisions; d ++ ) {

		pts.push( this.getPointAt( d / divisions ) );

	}

	return pts;

};

// Get total curve arc length

THREE.Curve.prototype.getLength = function () {

	var lengths = this.getLengths();
	return lengths[ lengths.length - 1 ];

};

// Get list of cumulative segment lengths

THREE.Curve.prototype.getLengths = function ( divisions ) {

	if ( ! divisions ) divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions): 200;

	if ( this.cacheArcLengths
		&& ( this.cacheArcLengths.length == divisions + 1 )
		&& ! this.needsUpdate) {

		//console.log( "cached", this.cacheArcLengths );
		return this.cacheArcLengths;

	}

	this.needsUpdate = false;

	var cache = [];
	var current, last = this.getPoint( 0 );
	var p, sum = 0;

	cache.push( 0 );

	for ( p = 1; p <= divisions; p ++ ) {

		current = this.getPoint ( p / divisions );
		sum += current.distanceTo( last );
		cache.push( sum );
		last = current;

	}

	this.cacheArcLengths = cache;

	return cache; // { sums: cache, sum:sum }; Sum is in the last element.

};


THREE.Curve.prototype.updateArcLengths = function() {
	this.needsUpdate = true;
	this.getLengths();
};

// Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance

THREE.Curve.prototype.getUtoTmapping = function ( u, distance ) {

	var arcLengths = this.getLengths();

	var i = 0, il = arcLengths.length;

	var targetArcLength; // The targeted u distance value to get

	if ( distance ) {

		targetArcLength = distance;

	} else {

		targetArcLength = u * arcLengths[ il - 1 ];

	}

	//var time = Date.now();

	// binary search for the index with largest value smaller than target u distance

	var low = 0, high = il - 1, comparison;

	while ( low <= high ) {

		i = Math.floor( low + ( high - low ) / 2 ); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats

		comparison = arcLengths[ i ] - targetArcLength;

		if ( comparison < 0 ) {

			low = i + 1;
			continue;

		} else if ( comparison > 0 ) {

			high = i - 1;
			continue;

		} else {

			high = i;
			break;

			// DONE

		}

	}

	i = high;

	//console.log('b' , i, low, high, Date.now()- time);

	if ( arcLengths[ i ] == targetArcLength ) {

		var t = i / ( il - 1 );
		return t;

	}

	// we could get finer grain at lengths, or use simple interpolatation between two points

	var lengthBefore = arcLengths[ i ];
    var lengthAfter = arcLengths[ i + 1 ];

    var segmentLength = lengthAfter - lengthBefore;

    // determine where we are between the 'before' and 'after' points

    var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;

    // add that fractional amount to t

    var t = ( i + segmentFraction ) / ( il -1 );

	return t;

};

// Returns a unit vector tangent at t
// In case any sub curve does not implement its tangent derivation,
// 2 points a small delta apart will be used to find its gradient
// which seems to give a reasonable approximation

THREE.Curve.prototype.getTangent = function( t ) {

	var delta = 0.0001;
	var t1 = t - delta;
	var t2 = t + delta;

	// Capping in case of danger

	if ( t1 < 0 ) t1 = 0;
	if ( t2 > 1 ) t2 = 1;

	var pt1 = this.getPoint( t1 );
	var pt2 = this.getPoint( t2 );

	var vec = pt2.clone().sub(pt1);
	return vec.normalize();

};


THREE.Curve.prototype.getTangentAt = function ( u ) {

	var t = this.getUtoTmapping( u );
	return this.getTangent( t );

};





/**************************************************************
 *	Utils
 **************************************************************/

THREE.Curve.Utils = {

	tangentQuadraticBezier: function ( t, p0, p1, p2 ) {

		return 2 * ( 1 - t ) * ( p1 - p0 ) + 2 * t * ( p2 - p1 );

	},

	// Puay Bing, thanks for helping with this derivative!

	tangentCubicBezier: function (t, p0, p1, p2, p3 ) {

		return - 3 * p0 * (1 - t) * (1 - t)  +
			3 * p1 * (1 - t) * (1-t) - 6 *t *p1 * (1-t) +
			6 * t *  p2 * (1-t) - 3 * t * t * p2 +
			3 * t * t * p3;

	},

	tangentSpline: function ( t, p0, p1, p2, p3 ) {

		// To check if my formulas are correct

		var h00 = 6 * t * t - 6 * t; 	// derived from 2t^3 − 3t^2 + 1
		var h10 = 3 * t * t - 4 * t + 1; // t^3 − 2t^2 + t
		var h01 = - 6 * t * t + 6 * t; 	// − 2t3 + 3t2
		var h11 = 3 * t * t - 2 * t;	// t3 − t2

		return h00 + h10 + h01 + h11;

	},

	// Catmull-Rom

	interpolate: function( p0, p1, p2, p3, t ) {

		var v0 = ( p2 - p0 ) * 0.5;
		var v1 = ( p3 - p1 ) * 0.5;
		var t2 = t * t;
		var t3 = t * t2;
		return ( 2 * p1 - 2 * p2 + v0 + v1 ) * t3 + ( - 3 * p1 + 3 * p2 - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	}

};


// TODO: Transformation for Curves?

/**************************************************************
 *	3D Curves
 **************************************************************/

// A Factory method for creating new curve subclasses

THREE.Curve.create = function ( constructor, getPointFunc ) {

	constructor.prototype = Object.create( THREE.Curve.prototype );
	constructor.prototype.getPoint = getPointFunc;

	return constructor;

};

// File:src/extras/core/CurvePath.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 **/

/**************************************************************
 *	Curved Path - a curve path is simply a array of connected
 *  curves, but retains the api of a curve
 **************************************************************/

THREE.CurvePath = function () {

	this.curves = [];
	this.bends = [];
	
	this.autoClose = false; // Automatically closes the path
};

THREE.CurvePath.prototype = Object.create( THREE.Curve.prototype );

THREE.CurvePath.prototype.add = function ( curve ) {

	this.curves.push( curve );

};

THREE.CurvePath.prototype.checkConnection = function() {
	// TODO
	// If the ending of curve is not connected to the starting
	// or the next curve, then, this is not a real path
};

THREE.CurvePath.prototype.closePath = function() {
	// TODO Test
	// and verify for vector3 (needs to implement equals)
	// Add a line curve if start and end of lines are not connected
	var startPoint = this.curves[0].getPoint(0);
	var endPoint = this.curves[this.curves.length-1].getPoint(1);
	
	if (! startPoint.equals(endPoint)) {
		this.curves.push( new THREE.LineCurve(endPoint, startPoint) );
	}
	
};

// To get accurate point with reference to
// entire path distance at time t,
// following has to be done:

// 1. Length of each sub path have to be known
// 2. Locate and identify type of curve
// 3. Get t for the curve
// 4. Return curve.getPointAt(t')

THREE.CurvePath.prototype.getPoint = function( t ) {

	var d = t * this.getLength();
	var curveLengths = this.getCurveLengths();
	var i = 0, diff, curve;

	// To think about boundaries points.

	while ( i < curveLengths.length ) {

		if ( curveLengths[ i ] >= d ) {

			diff = curveLengths[ i ] - d;
			curve = this.curves[ i ];

			var u = 1 - diff / curve.getLength();

			return curve.getPointAt( u );

			break;
		}

		i ++;

	}

	return null;

	// loop where sum != 0, sum > d , sum+1 <d

};

/*
THREE.CurvePath.prototype.getTangent = function( t ) {
};*/


// We cannot use the default THREE.Curve getPoint() with getLength() because in
// THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
// getPoint() depends on getLength

THREE.CurvePath.prototype.getLength = function() {

	var lens = this.getCurveLengths();
	return lens[ lens.length - 1 ];

};

// Compute lengths and cache them
// We cannot overwrite getLengths() because UtoT mapping uses it.

THREE.CurvePath.prototype.getCurveLengths = function() {

	// We use cache values if curves and cache array are same length

	if ( this.cacheLengths && this.cacheLengths.length == this.curves.length ) {

		return this.cacheLengths;

	};

	// Get length of subsurve
	// Push sums into cached array

	var lengths = [], sums = 0;
	var i, il = this.curves.length;

	for ( i = 0; i < il; i ++ ) {

		sums += this.curves[ i ].getLength();
		lengths.push( sums );

	}

	this.cacheLengths = lengths;

	return lengths;

};



// Returns min and max coordinates

THREE.CurvePath.prototype.getBoundingBox = function () {

	var points = this.getPoints();

	var maxX, maxY, maxZ;
	var minX, minY, minZ;

	maxX = maxY = Number.NEGATIVE_INFINITY;
	minX = minY = Number.POSITIVE_INFINITY;

	var p, i, il, sum;

	var v3 = points[0] instanceof THREE.Vector3;

	sum = v3 ? new THREE.Vector3() : new THREE.Vector2();

	for ( i = 0, il = points.length; i < il; i ++ ) {

		p = points[ i ];

		if ( p.x > maxX ) maxX = p.x;
		else if ( p.x < minX ) minX = p.x;

		if ( p.y > maxY ) maxY = p.y;
		else if ( p.y < minY ) minY = p.y;

		if ( v3 ) {

			if ( p.z > maxZ ) maxZ = p.z;
			else if ( p.z < minZ ) minZ = p.z;

		}

		sum.add( p );

	}

	var ret = {

		minX: minX,
		minY: minY,
		maxX: maxX,
		maxY: maxY

	};

	if ( v3 ) {

		ret.maxZ = maxZ;
		ret.minZ = minZ;

	}

	return ret;

};

/**************************************************************
 *	Create Geometries Helpers
 **************************************************************/

/// Generate geometry from path points (for Line or Points objects)

THREE.CurvePath.prototype.createPointsGeometry = function( divisions ) {

	var pts = this.getPoints( divisions, true );
	return this.createGeometry( pts );

};

// Generate geometry from equidistance sampling along the path

THREE.CurvePath.prototype.createSpacedPointsGeometry = function( divisions ) {

	var pts = this.getSpacedPoints( divisions, true );
	return this.createGeometry( pts );

};

THREE.CurvePath.prototype.createGeometry = function( points ) {

	var geometry = new THREE.Geometry();

	for ( var i = 0; i < points.length; i ++ ) {

		geometry.vertices.push( new THREE.Vector3( points[ i ].x, points[ i ].y, points[ i ].z || 0) );

	}

	return geometry;

};


/**************************************************************
 *	Bend / Wrap Helper Methods
 **************************************************************/

// Wrap path / Bend modifiers?

THREE.CurvePath.prototype.addWrapPath = function ( bendpath ) {

	this.bends.push( bendpath );

};

THREE.CurvePath.prototype.getTransformedPoints = function( segments, bends ) {

	var oldPts = this.getPoints( segments ); // getPoints getSpacedPoints
	var i, il;

	if ( ! bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

THREE.CurvePath.prototype.getTransformedSpacedPoints = function( segments, bends ) {

	var oldPts = this.getSpacedPoints( segments );

	var i, il;

	if ( ! bends ) {

		bends = this.bends;

	}

	for ( i = 0, il = bends.length; i < il; i ++ ) {

		oldPts = this.getWrapPoints( oldPts, bends[ i ] );

	}

	return oldPts;

};

// This returns getPoints() bend/wrapped around the contour of a path.
// Read http://www.planetclegg.com/projects/WarpingTextToSplines.html

THREE.CurvePath.prototype.getWrapPoints = function ( oldPts, path ) {

	var bounds = this.getBoundingBox();

	var i, il, p, oldX, oldY, xNorm;

	for ( i = 0, il = oldPts.length; i < il; i ++ ) {

		p = oldPts[ i ];

		oldX = p.x;
		oldY = p.y;

		xNorm = oldX / bounds.maxX;

		// If using actual distance, for length > path, requires line extrusions
		//xNorm = path.getUtoTmapping(xNorm, oldX); // 3 styles. 1) wrap stretched. 2) wrap stretch by arc length 3) warp by actual distance

		xNorm = path.getUtoTmapping( xNorm, oldX );

		// check for out of bounds?

		var pathPt = path.getPoint( xNorm );
		var normal = path.getTangent( xNorm );
		normal.set( - normal.y, normal.x ).multiplyScalar( oldY );

		p.x = pathPt.x + normal.x;
		p.y = pathPt.y + normal.y;

	}

	return oldPts;

};


// File:src/extras/core/Gyroscope.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Gyroscope = function () {

	THREE.Object3D.call( this );

};

THREE.Gyroscope.prototype = Object.create( THREE.Object3D.prototype );

THREE.Gyroscope.prototype.updateMatrixWorld = ( function () {

	var translationObject = new THREE.Vector3();
	var quaternionObject = new THREE.Quaternion();
	var scaleObject = new THREE.Vector3();

	var translationWorld = new THREE.Vector3();
	var quaternionWorld = new THREE.Quaternion();
	var scaleWorld = new THREE.Vector3();

	return function ( force ) {

		this.matrixAutoUpdate && this.updateMatrix();

		// update matrixWorld

		if ( this.matrixWorldNeedsUpdate || force ) {

			if ( this.parent ) {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				this.matrixWorld.decompose( translationWorld, quaternionWorld, scaleWorld );
				this.matrix.decompose( translationObject, quaternionObject, scaleObject );

				this.matrixWorld.compose( translationWorld, quaternionObject, scaleWorld );


			} else {

				this.matrixWorld.copy( this.matrix );

			}


			this.matrixWorldNeedsUpdate = false;

			force = true;

		}

		// update children

		for ( var i = 0, l = this.children.length; i < l; i ++ ) {

			this.children[ i ].updateMatrixWorld( force );

		}

	};
	
}() );

// File:src/extras/core/Path.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Creates free form 2d path using series of points, lines or curves.
 *
 **/

THREE.Path = function ( points ) {

	THREE.CurvePath.call(this);

	this.actions = [];

	if ( points ) {

		this.fromPoints( points );

	}

};

THREE.Path.prototype = Object.create( THREE.CurvePath.prototype );

THREE.PathActions = {

	MOVE_TO: 'moveTo',
	LINE_TO: 'lineTo',
	QUADRATIC_CURVE_TO: 'quadraticCurveTo', // Bezier quadratic curve
	BEZIER_CURVE_TO: 'bezierCurveTo', 		// Bezier cubic curve
	CSPLINE_THRU: 'splineThru',				// Catmull-rom spline
	ARC: 'arc',								// Circle
	ELLIPSE: 'ellipse'
};

// TODO Clean up PATH API

// Create path using straight lines to connect all points
// - vectors: array of Vector2

THREE.Path.prototype.fromPoints = function ( vectors ) {

	this.moveTo( vectors[ 0 ].x, vectors[ 0 ].y );

	for ( var v = 1, vlen = vectors.length; v < vlen; v ++ ) {

		this.lineTo( vectors[ v ].x, vectors[ v ].y );

	};

};

// startPath() endPath()?

THREE.Path.prototype.moveTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );
	this.actions.push( { action: THREE.PathActions.MOVE_TO, args: args } );

};

THREE.Path.prototype.lineTo = function ( x, y ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.LineCurve( new THREE.Vector2( x0, y0 ), new THREE.Vector2( x, y ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.LINE_TO, args: args } );

};

THREE.Path.prototype.quadraticCurveTo = function( aCPx, aCPy, aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.QuadraticBezierCurve( new THREE.Vector2( x0, y0 ),
												new THREE.Vector2( aCPx, aCPy ),
												new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.QUADRATIC_CURVE_TO, args: args } );

};

THREE.Path.prototype.bezierCurveTo = function( aCP1x, aCP1y,
											   aCP2x, aCP2y,
											   aX, aY ) {

	var args = Array.prototype.slice.call( arguments );

	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	var curve = new THREE.CubicBezierCurve( new THREE.Vector2( x0, y0 ),
											new THREE.Vector2( aCP1x, aCP1y ),
											new THREE.Vector2( aCP2x, aCP2y ),
											new THREE.Vector2( aX, aY ) );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.BEZIER_CURVE_TO, args: args } );

};

THREE.Path.prototype.splineThru = function( pts /*Array of Vector*/ ) {

	var args = Array.prototype.slice.call( arguments );
	var lastargs = this.actions[ this.actions.length - 1 ].args;

	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];
//---
	var npts = [ new THREE.Vector2( x0, y0 ) ];
	Array.prototype.push.apply( npts, pts );

	var curve = new THREE.SplineCurve( npts );
	this.curves.push( curve );

	this.actions.push( { action: THREE.PathActions.CSPLINE_THRU, args: args } );

};

// FUTURE: Change the API or follow canvas API?

THREE.Path.prototype.arc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absarc(aX + x0, aY + y0, aRadius,
		aStartAngle, aEndAngle, aClockwise );

 };

 THREE.Path.prototype.absarc = function ( aX, aY, aRadius,
									  aStartAngle, aEndAngle, aClockwise ) {
	this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
 };

THREE.Path.prototype.ellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var lastargs = this.actions[ this.actions.length - 1].args;
	var x0 = lastargs[ lastargs.length - 2 ];
	var y0 = lastargs[ lastargs.length - 1 ];

	this.absellipse(aX + x0, aY + y0, xRadius, yRadius,
		aStartAngle, aEndAngle, aClockwise );

 };


THREE.Path.prototype.absellipse = function ( aX, aY, xRadius, yRadius,
									  aStartAngle, aEndAngle, aClockwise ) {

	var args = Array.prototype.slice.call( arguments );
	var curve = new THREE.EllipseCurve( aX, aY, xRadius, yRadius,
									aStartAngle, aEndAngle, aClockwise );
	this.curves.push( curve );

	var lastPoint = curve.getPoint(1);
	args.push(lastPoint.x);
	args.push(lastPoint.y);

	this.actions.push( { action: THREE.PathActions.ELLIPSE, args: args } );

 };

THREE.Path.prototype.getSpacedPoints = function ( divisions, closedPath ) {

	if ( ! divisions ) divisions = 40;

	var points = [];

	for ( var i = 0; i < divisions; i ++ ) {

		points.push( this.getPoint( i / divisions ) );

		//if( !this.getPoint( i / divisions ) ) throw "DIE";

	}

	// if ( closedPath ) {
	//
	// 	points.push( points[ 0 ] );
	//
	// }

	return points;

};

/* Return an array of vectors based on contour of the path */

THREE.Path.prototype.getPoints = function( divisions, closedPath ) {

	if (this.useSpacedPoints) {
		console.log('tata');
		return this.getSpacedPoints( divisions, closedPath );
	}

	divisions = divisions || 12;

	var points = [];

	var i, il, item, action, args;
	var cpx, cpy, cpx2, cpy2, cpx1, cpy1, cpx0, cpy0,
		laste, j,
		t, tx, ty;

	for ( i = 0, il = this.actions.length; i < il; i ++ ) {

		item = this.actions[ i ];

		action = item.action;
		args = item.args;

		switch( action ) {

		case THREE.PathActions.MOVE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.LINE_TO:

			points.push( new THREE.Vector2( args[ 0 ], args[ 1 ] ) );

			break;

		case THREE.PathActions.QUADRATIC_CURVE_TO:

			cpx  = args[ 2 ];
			cpy  = args[ 3 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}

			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b2( t, cpx0, cpx1, cpx );
				ty = THREE.Shape.Utils.b2( t, cpy0, cpy1, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

			}

			break;

		case THREE.PathActions.BEZIER_CURVE_TO:

			cpx  = args[ 4 ];
			cpy  = args[ 5 ];

			cpx1 = args[ 0 ];
			cpy1 = args[ 1 ];

			cpx2 = args[ 2 ];
			cpy2 = args[ 3 ];

			if ( points.length > 0 ) {

				laste = points[ points.length - 1 ];

				cpx0 = laste.x;
				cpy0 = laste.y;

			} else {

				laste = this.actions[ i - 1 ].args;

				cpx0 = laste[ laste.length - 2 ];
				cpy0 = laste[ laste.length - 1 ];

			}


			for ( j = 1; j <= divisions; j ++ ) {

				t = j / divisions;

				tx = THREE.Shape.Utils.b3( t, cpx0, cpx1, cpx2, cpx );
				ty = THREE.Shape.Utils.b3( t, cpy0, cpy1, cpy2, cpy );

				points.push( new THREE.Vector2( tx, ty ) );

			}

			break;

		case THREE.PathActions.CSPLINE_THRU:

			laste = this.actions[ i - 1 ].args;

			var last = new THREE.Vector2( laste[ laste.length - 2 ], laste[ laste.length - 1 ] );
			var spts = [ last ];

			var n = divisions * args[ 0 ].length;

			spts = spts.concat( args[ 0 ] );

			var spline = new THREE.SplineCurve( spts );

			for ( j = 1; j <= n; j ++ ) {

				points.push( spline.getPointAt( j / n ) ) ;

			}

			break;

		case THREE.PathActions.ARC:

			var aX = args[ 0 ], aY = args[ 1 ],
				aRadius = args[ 2 ],
				aStartAngle = args[ 3 ], aEndAngle = args[ 4 ],
				aClockwise = !! args[ 5 ];

			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + aRadius * Math.cos( angle );
				ty = aY + aRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;
		  
		case THREE.PathActions.ELLIPSE:

			var aX = args[ 0 ], aY = args[ 1 ],
				xRadius = args[ 2 ],
				yRadius = args[ 3 ],
				aStartAngle = args[ 4 ], aEndAngle = args[ 5 ],
				aClockwise = !! args[ 6 ];


			var deltaAngle = aEndAngle - aStartAngle;
			var angle;
			var tdivisions = divisions * 2;

			for ( j = 1; j <= tdivisions; j ++ ) {

				t = j / tdivisions;

				if ( ! aClockwise ) {

					t = 1 - t;

				}

				angle = aStartAngle + t * deltaAngle;

				tx = aX + xRadius * Math.cos( angle );
				ty = aY + yRadius * Math.sin( angle );

				//console.log('t', t, 'angle', angle, 'tx', tx, 'ty', ty);

				points.push( new THREE.Vector2( tx, ty ) );

			}

			//console.log(points);

		  break;

		} // end switch

	}



	// Normalize to remove the closing point by default.
	var lastPoint = points[ points.length - 1];
	var EPSILON = 0.0000000001;
	if ( Math.abs(lastPoint.x - points[ 0 ].x) < EPSILON &&
			 Math.abs(lastPoint.y - points[ 0 ].y) < EPSILON)
		points.splice( points.length - 1, 1);
	if ( closedPath ) {

		points.push( points[ 0 ] );

	}

	return points;

};

//
// Breaks path into shapes
//
//	Assumptions (if parameter isCCW==true the opposite holds):
//	- solid shapes are defined clockwise (CW)
//	- holes are defined counterclockwise (CCW)
//
//	If parameter noHoles==true:
//  - all subPaths are regarded as solid shapes
//  - definition order CW/CCW has no relevance
//

THREE.Path.prototype.toShapes = function( isCCW, noHoles ) {

	function extractSubpaths( inActions ) {

		var i, il, item, action, args;

		var subPaths = [], lastPath = new THREE.Path();

		for ( i = 0, il = inActions.length; i < il; i ++ ) {

			item = inActions[ i ];

			args = item.args;
			action = item.action;

			if ( action == THREE.PathActions.MOVE_TO ) {

				if ( lastPath.actions.length != 0 ) {

					subPaths.push( lastPath );
					lastPath = new THREE.Path();

				}

			}

			lastPath[ action ].apply( lastPath, args );

		}

		if ( lastPath.actions.length != 0 ) {

			subPaths.push( lastPath );

		}

		// console.log(subPaths);

		return	subPaths;
	}

	function toShapesNoHoles( inSubpaths ) {

		var shapes = [];

		for ( var i = 0, il = inSubpaths.length; i < il; i ++ ) {

			var tmpPath = inSubpaths[ i ];

			var tmpShape = new THREE.Shape();
			tmpShape.actions = tmpPath.actions;
			tmpShape.curves = tmpPath.curves;

			shapes.push( tmpShape );
		}

		//console.log("shape", shapes);

		return shapes;
	};

	function isPointInsidePolygon( inPt, inPolygon ) {
		var EPSILON = 0.0000000001;

		var polyLen = inPolygon.length;

		// inPt on polygon contour => immediate success    or
		// toggling of inside/outside at every single! intersection point of an edge
		//  with the horizontal line through inPt, left of inPt
		//  not counting lowerY endpoints of edges and whole edges on that line
		var inside = false;
		for( var p = polyLen - 1, q = 0; q < polyLen; p = q ++ ) {
			var edgeLowPt  = inPolygon[ p ];
			var edgeHighPt = inPolygon[ q ];

			var edgeDx = edgeHighPt.x - edgeLowPt.x;
			var edgeDy = edgeHighPt.y - edgeLowPt.y;

			if ( Math.abs(edgeDy) > EPSILON ) {			// not parallel
				if ( edgeDy < 0 ) {
					edgeLowPt  = inPolygon[ q ]; edgeDx = - edgeDx;
					edgeHighPt = inPolygon[ p ]; edgeDy = - edgeDy;
				}
				if ( ( inPt.y < edgeLowPt.y ) || ( inPt.y > edgeHighPt.y ) ) 		continue;

				if ( inPt.y == edgeLowPt.y ) {
					if ( inPt.x == edgeLowPt.x )		return	true;		// inPt is on contour ?
					// continue;				// no intersection or edgeLowPt => doesn't count !!!
				} else {
					var perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
					if ( perpEdge == 0 )				return	true;		// inPt is on contour ?
					if ( perpEdge < 0 ) 				continue;
					inside = ! inside;		// true intersection left of inPt
				}
			} else {		// parallel or colinear
				if ( inPt.y != edgeLowPt.y ) 		continue;			// parallel
				// egde lies on the same horizontal line as inPt
				if ( ( ( edgeHighPt.x <= inPt.x ) && ( inPt.x <= edgeLowPt.x ) ) ||
					 ( ( edgeLowPt.x <= inPt.x ) && ( inPt.x <= edgeHighPt.x ) ) )		return	true;	// inPt: Point on contour !
				// continue;
			}
		}

		return	inside;
	}


	var subPaths = extractSubpaths( this.actions );
	if ( subPaths.length == 0 ) return [];

	if ( noHoles === true )	return	toShapesNoHoles( subPaths );


	var solid, tmpPath, tmpShape, shapes = [];

	if ( subPaths.length == 1) {

		tmpPath = subPaths[0];
		tmpShape = new THREE.Shape();
		tmpShape.actions = tmpPath.actions;
		tmpShape.curves = tmpPath.curves;
		shapes.push( tmpShape );
		return shapes;

	}

	var holesFirst = ! THREE.Shape.Utils.isClockWise( subPaths[ 0 ].getPoints() );
	holesFirst = isCCW ? ! holesFirst : holesFirst;

	// console.log("Holes first", holesFirst);
	
	var betterShapeHoles = [];
	var newShapes = [];
	var newShapeHoles = [];
	var mainIdx = 0;
	var tmpPoints;

	newShapes[mainIdx] = undefined;
	newShapeHoles[mainIdx] = [];

	var i, il;

	for ( i = 0, il = subPaths.length; i < il; i ++ ) {

		tmpPath = subPaths[ i ];
		tmpPoints = tmpPath.getPoints();
		solid = THREE.Shape.Utils.isClockWise( tmpPoints );
		solid = isCCW ? ! solid : solid;

		if ( solid ) {

			if ( (! holesFirst ) && ( newShapes[mainIdx] ) )	mainIdx ++;

			newShapes[mainIdx] = { s: new THREE.Shape(), p: tmpPoints };
			newShapes[mainIdx].s.actions = tmpPath.actions;
			newShapes[mainIdx].s.curves = tmpPath.curves;
			
			if ( holesFirst )	mainIdx ++;
			newShapeHoles[mainIdx] = [];

			//console.log('cw', i);

		} else {

			newShapeHoles[mainIdx].push( { h: tmpPath, p: tmpPoints[0] } );

			//console.log('ccw', i);

		}

	}

	// only Holes? -> probably all Shapes with wrong orientation
	if ( ! newShapes[0] )	return	toShapesNoHoles( subPaths );


	if ( newShapes.length > 1 ) {
		var ambigious = false;
		var toChange = [];

		for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
			betterShapeHoles[sIdx] = [];
		}
		for (var sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx ++ ) {
			var sh = newShapes[sIdx];
			var sho = newShapeHoles[sIdx];
			for (var hIdx = 0; hIdx < sho.length; hIdx ++ ) {
				var ho = sho[hIdx];
				var hole_unassigned = true;
				for (var s2Idx = 0; s2Idx < newShapes.length; s2Idx ++ ) {
					if ( isPointInsidePolygon( ho.p, newShapes[s2Idx].p ) ) {
						if ( sIdx != s2Idx )		toChange.push( { froms: sIdx, tos: s2Idx, hole: hIdx } );
						if ( hole_unassigned ) {
							hole_unassigned = false;
							betterShapeHoles[s2Idx].push( ho );
						} else {
							ambigious = true;
						}
					}
				}
				if ( hole_unassigned ) { betterShapeHoles[sIdx].push( ho ); }
			}
		}
		// console.log("ambigious: ", ambigious);
		if ( toChange.length > 0 ) {
			// console.log("to change: ", toChange);
			if (! ambigious)	newShapeHoles = betterShapeHoles;
		}
	}

	var tmpHoles, j, jl;
	for ( i = 0, il = newShapes.length; i < il; i ++ ) {
		tmpShape = newShapes[i].s;
		shapes.push( tmpShape );
		tmpHoles = newShapeHoles[i];
		for ( j = 0, jl = tmpHoles.length; j < jl; j ++ ) {
			tmpShape.holes.push( tmpHoles[j].h );
		}
	}

	//console.log("shape", shapes);

	return shapes;

};

// File:src/extras/core/Shape.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * Defines a 2d shape plane using paths.
 **/

// STEP 1 Create a path.
// STEP 2 Turn path into shape.
// STEP 3 ExtrudeGeometry takes in Shape/Shapes
// STEP 3a - Extract points from each shape, turn to vertices
// STEP 3b - Triangulate each shape, add faces.

THREE.Shape = function () {

	THREE.Path.apply( this, arguments );
	this.holes = [];

};

THREE.Shape.prototype = Object.create( THREE.Path.prototype );

// Convenience method to return ExtrudeGeometry

THREE.Shape.prototype.extrude = function ( options ) {

	var extruded = new THREE.ExtrudeGeometry( this, options );
	return extruded;

};

// Convenience method to return ShapeGeometry

THREE.Shape.prototype.makeGeometry = function ( options ) {

	var geometry = new THREE.ShapeGeometry( this, options );
	return geometry;

};

// Get points of holes

THREE.Shape.prototype.getPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedPoints( divisions, this.bends );

	}

	return holesPts;

};

// Get points of holes (spaced by regular distance)

THREE.Shape.prototype.getSpacedPointsHoles = function ( divisions ) {

	var i, il = this.holes.length, holesPts = [];

	for ( i = 0; i < il; i ++ ) {

		holesPts[ i ] = this.holes[ i ].getTransformedSpacedPoints( divisions, this.bends );

	}

	return holesPts;

};


// Get points of shape and holes (keypoints based on segments parameter)

THREE.Shape.prototype.extractAllPoints = function ( divisions ) {

	return {

		shape: this.getTransformedPoints( divisions ),
		holes: this.getPointsHoles( divisions )

	};

};

THREE.Shape.prototype.extractPoints = function ( divisions ) {

	if (this.useSpacedPoints) {
		return this.extractAllSpacedPoints(divisions);
	}

	return this.extractAllPoints(divisions);

};

//
// THREE.Shape.prototype.extractAllPointsWithBend = function ( divisions, bend ) {
//
// 	return {
//
// 		shape: this.transform( bend, divisions ),
// 		holes: this.getPointsHoles( divisions, bend )
//
// 	};
//
// };

// Get points of shape and holes (spaced by regular distance)

THREE.Shape.prototype.extractAllSpacedPoints = function ( divisions ) {

	return {

		shape: this.getTransformedSpacedPoints( divisions ),
		holes: this.getSpacedPointsHoles( divisions )

	};

};

/**************************************************************
 *	Utils
 **************************************************************/

THREE.Shape.Utils = {

	triangulateShape: function ( contour, holes ) {

		function point_in_segment_2D_colin( inSegPt1, inSegPt2, inOtherPt ) {
			// inOtherPt needs to be colinear to the inSegment
			if ( inSegPt1.x != inSegPt2.x ) {
				if ( inSegPt1.x < inSegPt2.x ) {
					return	( ( inSegPt1.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt2.x ) );
				} else {
					return	( ( inSegPt2.x <= inOtherPt.x ) && ( inOtherPt.x <= inSegPt1.x ) );
				}
			} else {
				if ( inSegPt1.y < inSegPt2.y ) {
					return	( ( inSegPt1.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt2.y ) );
				} else {
					return	( ( inSegPt2.y <= inOtherPt.y ) && ( inOtherPt.y <= inSegPt1.y ) );
				}
			}
		}

		function intersect_segments_2D( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1, inSeg2Pt2, inExcludeAdjacentSegs ) {
			var EPSILON = 0.0000000001;

			var seg1dx = inSeg1Pt2.x - inSeg1Pt1.x,   seg1dy = inSeg1Pt2.y - inSeg1Pt1.y;
			var seg2dx = inSeg2Pt2.x - inSeg2Pt1.x,   seg2dy = inSeg2Pt2.y - inSeg2Pt1.y;

			var seg1seg2dx = inSeg1Pt1.x - inSeg2Pt1.x;
			var seg1seg2dy = inSeg1Pt1.y - inSeg2Pt1.y;

			var limit		= seg1dy * seg2dx - seg1dx * seg2dy;
			var perpSeg1	= seg1dy * seg1seg2dx - seg1dx * seg1seg2dy;

			if ( Math.abs(limit) > EPSILON ) {			// not parallel

				var perpSeg2;
				if ( limit > 0 ) {
					if ( ( perpSeg1 < 0 ) || ( perpSeg1 > limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 < 0 ) || ( perpSeg2 > limit ) ) 		return [];
				} else {
					if ( ( perpSeg1 > 0 ) || ( perpSeg1 < limit ) ) 		return [];
					perpSeg2 = seg2dy * seg1seg2dx - seg2dx * seg1seg2dy;
					if ( ( perpSeg2 > 0 ) || ( perpSeg2 < limit ) ) 		return [];
				}

				// i.e. to reduce rounding errors
				// intersection at endpoint of segment#1?
				if ( perpSeg2 == 0 ) {
					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )		return [];
					return  [ inSeg1Pt1 ];
				}
				if ( perpSeg2 == limit ) {
					if ( ( inExcludeAdjacentSegs ) &&
						 ( ( perpSeg1 == 0 ) || ( perpSeg1 == limit ) ) )		return [];
					return  [ inSeg1Pt2 ];
				}
				// intersection at endpoint of segment#2?
				if ( perpSeg1 == 0 )		return  [ inSeg2Pt1 ];
				if ( perpSeg1 == limit )	return  [ inSeg2Pt2 ];

				// return real intersection point
				var factorSeg1 = perpSeg2 / limit;
				return	[ { x: inSeg1Pt1.x + factorSeg1 * seg1dx,
							y: inSeg1Pt1.y + factorSeg1 * seg1dy } ];

			} else {		// parallel or colinear
				if ( ( perpSeg1 != 0 ) ||
					 ( seg2dy * seg1seg2dx != seg2dx * seg1seg2dy ) ) 			return [];

				// they are collinear or degenerate
				var seg1Pt = ( (seg1dx == 0) && (seg1dy == 0) );	// segment1 ist just a point?
				var seg2Pt = ( (seg2dx == 0) && (seg2dy == 0) );	// segment2 ist just a point?
				// both segments are points
				if ( seg1Pt && seg2Pt ) {
					if ( (inSeg1Pt1.x != inSeg2Pt1.x) ||
						 (inSeg1Pt1.y != inSeg2Pt1.y) )		return [];   	// they are distinct  points
					return  [ inSeg1Pt1 ];                 					// they are the same point
				}
				// segment#1  is a single point
				if ( seg1Pt ) {
					if (! point_in_segment_2D_colin( inSeg2Pt1, inSeg2Pt2, inSeg1Pt1 ) )		return [];		// but not in segment#2
					return  [ inSeg1Pt1 ];
				}
				// segment#2  is a single point
				if ( seg2Pt ) {
					if (! point_in_segment_2D_colin( inSeg1Pt1, inSeg1Pt2, inSeg2Pt1 ) )		return [];		// but not in segment#1
					return  [ inSeg2Pt1 ];
				}

				// they are collinear segments, which might overlap
				var seg1min, seg1max, seg1minVal, seg1maxVal;
				var seg2min, seg2max, seg2minVal, seg2maxVal;
				if (seg1dx != 0) {		// the segments are NOT on a vertical line
					if ( inSeg1Pt1.x < inSeg1Pt2.x ) {
						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.x;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.x;
					} else {
						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.x;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.x;
					}
					if ( inSeg2Pt1.x < inSeg2Pt2.x ) {
						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.x;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.x;
					} else {
						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.x;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.x;
					}
				} else {				// the segments are on a vertical line
					if ( inSeg1Pt1.y < inSeg1Pt2.y ) {
						seg1min = inSeg1Pt1; seg1minVal = inSeg1Pt1.y;
						seg1max = inSeg1Pt2; seg1maxVal = inSeg1Pt2.y;
					} else {
						seg1min = inSeg1Pt2; seg1minVal = inSeg1Pt2.y;
						seg1max = inSeg1Pt1; seg1maxVal = inSeg1Pt1.y;
					}
					if ( inSeg2Pt1.y < inSeg2Pt2.y ) {
						seg2min = inSeg2Pt1; seg2minVal = inSeg2Pt1.y;
						seg2max = inSeg2Pt2; seg2maxVal = inSeg2Pt2.y;
					} else {
						seg2min = inSeg2Pt2; seg2minVal = inSeg2Pt2.y;
						seg2max = inSeg2Pt1; seg2maxVal = inSeg2Pt1.y;
					}
				}
				if ( seg1minVal <= seg2minVal ) {
					if ( seg1maxVal <  seg2minVal )	return [];
					if ( seg1maxVal == seg2minVal )	{
						if ( inExcludeAdjacentSegs )		return [];
						return [ seg2min ];
					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg2min, seg1max ];
					return	[ seg2min, seg2max ];
				} else {
					if ( seg1minVal >  seg2maxVal )	return [];
					if ( seg1minVal == seg2maxVal )	{
						if ( inExcludeAdjacentSegs )		return [];
						return [ seg1min ];
					}
					if ( seg1maxVal <= seg2maxVal )	return [ seg1min, seg1max ];
					return	[ seg1min, seg2max ];
				}
			}
		}

		function isPointInsideAngle( inVertex, inLegFromPt, inLegToPt, inOtherPt ) {
			// The order of legs is important

			var EPSILON = 0.0000000001;

			// translation of all points, so that Vertex is at (0,0)
			var legFromPtX	= inLegFromPt.x - inVertex.x,  legFromPtY	= inLegFromPt.y - inVertex.y;
			var legToPtX	= inLegToPt.x	- inVertex.x,  legToPtY		= inLegToPt.y	- inVertex.y;
			var otherPtX	= inOtherPt.x	- inVertex.x,  otherPtY		= inOtherPt.y	- inVertex.y;

			// main angle >0: < 180 deg.; 0: 180 deg.; <0: > 180 deg.
			var from2toAngle	= legFromPtX * legToPtY - legFromPtY * legToPtX;
			var from2otherAngle	= legFromPtX * otherPtY - legFromPtY * otherPtX;

			if ( Math.abs(from2toAngle) > EPSILON ) {			// angle != 180 deg.

				var other2toAngle		= otherPtX * legToPtY - otherPtY * legToPtX;
				// console.log( "from2to: " + from2toAngle + ", from2other: " + from2otherAngle + ", other2to: " + other2toAngle );

				if ( from2toAngle > 0 ) {				// main angle < 180 deg.
					return	( ( from2otherAngle >= 0 ) && ( other2toAngle >= 0 ) );
				} else {								// main angle > 180 deg.
					return	( ( from2otherAngle >= 0 ) || ( other2toAngle >= 0 ) );
				}
			} else {										// angle == 180 deg.
				// console.log( "from2to: 180 deg., from2other: " + from2otherAngle  );
				return	( from2otherAngle > 0 );
			}
		}


		function removeHoles( contour, holes ) {

			var shape = contour.concat(); // work on this shape
			var hole;

			function isCutLineInsideAngles( inShapeIdx, inHoleIdx ) {
				// Check if hole point lies within angle around shape point
				var lastShapeIdx = shape.length - 1;

				var prevShapeIdx = inShapeIdx - 1;
				if ( prevShapeIdx < 0 )			prevShapeIdx = lastShapeIdx;

				var nextShapeIdx = inShapeIdx + 1;
				if ( nextShapeIdx > lastShapeIdx )	nextShapeIdx = 0;

				var insideAngle = isPointInsideAngle( shape[inShapeIdx], shape[ prevShapeIdx ], shape[ nextShapeIdx ], hole[inHoleIdx] );
				if (! insideAngle ) {
					// console.log( "Vertex (Shape): " + inShapeIdx + ", Point: " + hole[inHoleIdx].x + "/" + hole[inHoleIdx].y );
					return	false;
				}

				// Check if shape point lies within angle around hole point
				var lastHoleIdx = hole.length - 1;

				var prevHoleIdx = inHoleIdx - 1;
				if ( prevHoleIdx < 0 )			prevHoleIdx = lastHoleIdx;

				var nextHoleIdx = inHoleIdx + 1;
				if ( nextHoleIdx > lastHoleIdx )	nextHoleIdx = 0;

				insideAngle = isPointInsideAngle( hole[inHoleIdx], hole[ prevHoleIdx ], hole[ nextHoleIdx ], shape[inShapeIdx] );
				if (! insideAngle ) {
					// console.log( "Vertex (Hole): " + inHoleIdx + ", Point: " + shape[inShapeIdx].x + "/" + shape[inShapeIdx].y );
					return	false;
				}

				return	true;
			}

			function intersectsShapeEdge( inShapePt, inHolePt ) {
				// checks for intersections with shape edges
				var sIdx, nextIdx, intersection;
				for ( sIdx = 0; sIdx < shape.length; sIdx ++ ) {
					nextIdx = sIdx+1; nextIdx %= shape.length;
					intersection = intersect_segments_2D( inShapePt, inHolePt, shape[sIdx], shape[nextIdx], true );
					if ( intersection.length > 0 )		return	true;
				}

				return	false;
			}

			var indepHoles = [];

			function intersectsHoleEdge( inShapePt, inHolePt ) {
				// checks for intersections with hole edges
				var ihIdx, chkHole,
					hIdx, nextIdx, intersection;
				for ( ihIdx = 0; ihIdx < indepHoles.length; ihIdx ++ ) {
					chkHole = holes[indepHoles[ihIdx]];
					for ( hIdx = 0; hIdx < chkHole.length; hIdx ++ ) {
						nextIdx = hIdx+1; nextIdx %= chkHole.length;
						intersection = intersect_segments_2D( inShapePt, inHolePt, chkHole[hIdx], chkHole[nextIdx], true );
						if ( intersection.length > 0 )		return	true;
					}
				}
				return	false;
			}

			var holeIndex, shapeIndex,
				shapePt, holePt,
				holeIdx, cutKey, failedCuts = [],
				tmpShape1, tmpShape2,
				tmpHole1, tmpHole2;

			for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

				indepHoles.push( h );

			}

			var minShapeIndex = 0;
			var counter = indepHoles.length * 2;
			while ( indepHoles.length > 0 ) {
				counter --;
				if ( counter < 0 ) {
					console.log( "Infinite Loop! Holes left:" + indepHoles.length + ", Probably Hole outside Shape!" );
					break;
				}

				// search for shape-vertex and hole-vertex,
				// which can be connected without intersections
				for ( shapeIndex = minShapeIndex; shapeIndex < shape.length; shapeIndex ++ ) {

					shapePt = shape[ shapeIndex ];
					holeIndex	= - 1;

					// search for hole which can be reached without intersections
					for ( var h = 0; h < indepHoles.length; h ++ ) {
						holeIdx = indepHoles[h];

						// prevent multiple checks
						cutKey = shapePt.x + ":" + shapePt.y + ":" + holeIdx;
						if ( failedCuts[cutKey] !== undefined )			continue;

						hole = holes[holeIdx];
						for ( var h2 = 0; h2 < hole.length; h2 ++ ) {
							holePt = hole[ h2 ];
							if (! isCutLineInsideAngles( shapeIndex, h2 ) )		continue;
							if ( intersectsShapeEdge( shapePt, holePt ) )		continue;
							if ( intersectsHoleEdge( shapePt, holePt ) )		continue;

							holeIndex = h2;
							indepHoles.splice(h,1);

							tmpShape1 = shape.slice( 0, shapeIndex+1 );
							tmpShape2 = shape.slice( shapeIndex );
							tmpHole1 = hole.slice( holeIndex );
							tmpHole2 = hole.slice( 0, holeIndex+1 );

							shape = tmpShape1.concat( tmpHole1 ).concat( tmpHole2 ).concat( tmpShape2 );

							minShapeIndex = shapeIndex;

							// Debug only, to show the selected cuts
							// glob_CutLines.push( [ shapePt, holePt ] );

							break;
						}
						if ( holeIndex >= 0 )	break;		// hole-vertex found

						failedCuts[cutKey] = true;			// remember failure
					}
					if ( holeIndex >= 0 )	break;		// hole-vertex found
				}
			}

			return shape; 			/* shape with no holes */
		}


		var i, il, f, face,
			key, index,
			allPointsMap = {};

		// To maintain reference to old shape, one must match coordinates, or offset the indices from original arrays. It's probably easier to do the first.

		var allpoints = contour.concat();

		for ( var h = 0, hl = holes.length; h < hl; h ++ ) {

			Array.prototype.push.apply( allpoints, holes[h] );

		}

		//console.log( "allpoints",allpoints, allpoints.length );

		// prepare all points map

		for ( i = 0, il = allpoints.length; i < il; i ++ ) {

			key = allpoints[ i ].x + ":" + allpoints[ i ].y;

			if ( allPointsMap[ key ] !== undefined ) {

				console.log( "Duplicate point", key );

			}

			allPointsMap[ key ] = i;

		}

		// remove holes by cutting paths to holes and adding them to the shape
		var shapeWithoutHoles = removeHoles( contour, holes );

		var triangles = THREE.FontUtils.Triangulate( shapeWithoutHoles, false ); // True returns indices for points of spooled shape
		//console.log( "triangles",triangles, triangles.length );

		// check all face vertices against all points map

		for ( i = 0, il = triangles.length; i < il; i ++ ) {

			face = triangles[ i ];

			for ( f = 0; f < 3; f ++ ) {

				key = face[ f ].x + ":" + face[ f ].y;

				index = allPointsMap[ key ];

				if ( index !== undefined ) {

					face[ f ] = index;

				}

			}

		}

		return triangles.concat();

	},

	isClockWise: function ( pts ) {

		return THREE.FontUtils.Triangulate.area( pts ) < 0;

	},

	// Bezier Curves formulas obtained from
	// http://en.wikipedia.org/wiki/B%C3%A9zier_curve

	// Quad Bezier Functions

	b2p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * p;

	},

	b2p1: function ( t, p ) {

		return 2 * ( 1 - t ) * t * p;

	},

	b2p2: function ( t, p ) {

		return t * t * p;

	},

	b2: function ( t, p0, p1, p2 ) {

		return this.b2p0( t, p0 ) + this.b2p1( t, p1 ) + this.b2p2( t, p2 );

	},

	// Cubic Bezier Functions

	b3p0: function ( t, p ) {

		var k = 1 - t;
		return k * k * k * p;

	},

	b3p1: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * k * t * p;

	},

	b3p2: function ( t, p ) {

		var k = 1 - t;
		return 3 * k * t * t * p;

	},

	b3p3: function ( t, p ) {

		return t * t * t * p;

	},

	b3: function ( t, p0, p1, p2, p3 ) {

		return this.b3p0( t, p0 ) + this.b3p1( t, p1 ) + this.b3p2( t, p2 ) +  this.b3p3( t, p3 );

	}

};


// File:src/extras/curves/LineCurve.js

/**************************************************************
 *	Line
 **************************************************************/

THREE.LineCurve = function ( v1, v2 ) {

	this.v1 = v1;
	this.v2 = v2;

};

THREE.LineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.LineCurve.prototype.getPoint = function ( t ) {

	var point = this.v2.clone().sub(this.v1);
	point.multiplyScalar( t ).add( this.v1 );

	return point;

};

// Line curve is linear, so we can overwrite default getPointAt

THREE.LineCurve.prototype.getPointAt = function ( u ) {

	return this.getPoint( u );

};

THREE.LineCurve.prototype.getTangent = function( t ) {

	var tangent = this.v2.clone().sub(this.v1);

	return tangent.normalize();

};

// File:src/extras/curves/QuadraticBezierCurve.js

/**************************************************************
 *	Quadratic Bezier curve
 **************************************************************/


THREE.QuadraticBezierCurve = function ( v0, v1, v2 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;

};

THREE.QuadraticBezierCurve.prototype = Object.create( THREE.Curve.prototype );


THREE.QuadraticBezierCurve.prototype.getPoint = function ( t ) {

	var vector = new THREE.Vector2();

	vector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
	vector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );

	return vector;

};


THREE.QuadraticBezierCurve.prototype.getTangent = function( t ) {

	var vector = new THREE.Vector2();

	vector.x = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.x, this.v1.x, this.v2.x );
	vector.y = THREE.Curve.Utils.tangentQuadraticBezier( t, this.v0.y, this.v1.y, this.v2.y );

	// returns unit vector

	return vector.normalize();

};

// File:src/extras/curves/CubicBezierCurve.js

/**************************************************************
 *	Cubic Bezier curve
 **************************************************************/

THREE.CubicBezierCurve = function ( v0, v1, v2, v3 ) {

	this.v0 = v0;
	this.v1 = v1;
	this.v2 = v2;
	this.v3 = v3;

};

THREE.CubicBezierCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.CubicBezierCurve.prototype.getPoint = function ( t ) {

	var tx, ty;

	tx = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	return new THREE.Vector2( tx, ty );

};

THREE.CubicBezierCurve.prototype.getTangent = function( t ) {

	var tx, ty;

	tx = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
	ty = THREE.Curve.Utils.tangentCubicBezier( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );

	var tangent = new THREE.Vector2( tx, ty );
	tangent.normalize();

	return tangent;

};

// File:src/extras/curves/SplineCurve.js

/**************************************************************
 *	Spline curve
 **************************************************************/

THREE.SplineCurve = function ( points /* array of Vector2 */ ) {

	this.points = ( points == undefined ) ? [] : points;

};

THREE.SplineCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.SplineCurve.prototype.getPoint = function ( t ) {

	var points = this.points;
	var point = ( points.length - 1 ) * t;

	var intPoint = Math.floor( point );
	var weight = point - intPoint;

	var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ]
	var point1 = points[ intPoint ]
	var point2 = points[ intPoint > points.length - 2 ? points.length -1 : intPoint + 1 ]
	var point3 = points[ intPoint > points.length - 3 ? points.length -1 : intPoint + 2 ]

	var vector = new THREE.Vector2();

	vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
	vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );

	return vector;

};

// File:src/extras/curves/EllipseCurve.js

/**************************************************************
 *	Ellipse curve
 **************************************************************/

THREE.EllipseCurve = function ( aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise ) {

	this.aX = aX;
	this.aY = aY;

	this.xRadius = xRadius;
	this.yRadius = yRadius;

	this.aStartAngle = aStartAngle;
	this.aEndAngle = aEndAngle;

	this.aClockwise = aClockwise;

};

THREE.EllipseCurve.prototype = Object.create( THREE.Curve.prototype );

THREE.EllipseCurve.prototype.getPoint = function ( t ) {

	var deltaAngle = this.aEndAngle - this.aStartAngle;

	if ( deltaAngle < 0 ) deltaAngle += Math.PI * 2;
	if ( deltaAngle > Math.PI * 2 ) deltaAngle -= Math.PI * 2;

	var angle;

	if ( this.aClockwise === true ) {

		angle = this.aEndAngle + ( 1 - t ) * ( Math.PI * 2 - deltaAngle );

	} else {

		angle = this.aStartAngle + t * deltaAngle;

	}
	
	var vector = new THREE.Vector2();

	vector.x = this.aX + this.xRadius * Math.cos( angle );
	vector.y = this.aY + this.yRadius * Math.sin( angle );

	return vector;

};

// File:src/extras/curves/ArcCurve.js

/**************************************************************
 *	Arc curve
 **************************************************************/

THREE.ArcCurve = function ( aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise ) {

	THREE.EllipseCurve.call( this, aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise );
};

THREE.ArcCurve.prototype = Object.create( THREE.EllipseCurve.prototype );

// File:src/extras/curves/LineCurve3.js

/**************************************************************
 *	Line3D
 **************************************************************/

THREE.LineCurve3 = THREE.Curve.create(

	function ( v1, v2 ) {

		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var vector = new THREE.Vector3();

		vector.subVectors( this.v2, this.v1 ); // diff
		vector.multiplyScalar( t );
		vector.add( this.v1 );

		return vector;

	}

);

// File:src/extras/curves/QuadraticBezierCurve3.js

/**************************************************************
 *	Quadratic Bezier 3D curve
 **************************************************************/

THREE.QuadraticBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;

	},

	function ( t ) {

		var vector = new THREE.Vector3();

		vector.x = THREE.Shape.Utils.b2( t, this.v0.x, this.v1.x, this.v2.x );
		vector.y = THREE.Shape.Utils.b2( t, this.v0.y, this.v1.y, this.v2.y );
		vector.z = THREE.Shape.Utils.b2( t, this.v0.z, this.v1.z, this.v2.z );

		return vector;

	}

);

// File:src/extras/curves/CubicBezierCurve3.js

/**************************************************************
 *	Cubic Bezier 3D curve
 **************************************************************/

THREE.CubicBezierCurve3 = THREE.Curve.create(

	function ( v0, v1, v2, v3 ) {

		this.v0 = v0;
		this.v1 = v1;
		this.v2 = v2;
		this.v3 = v3;

	},

	function ( t ) {

		var vector = new THREE.Vector3();

		vector.x = THREE.Shape.Utils.b3( t, this.v0.x, this.v1.x, this.v2.x, this.v3.x );
		vector.y = THREE.Shape.Utils.b3( t, this.v0.y, this.v1.y, this.v2.y, this.v3.y );
		vector.z = THREE.Shape.Utils.b3( t, this.v0.z, this.v1.z, this.v2.z, this.v3.z );

		return vector;

	}

);

// File:src/extras/curves/SplineCurve3.js

/**************************************************************
 *	Spline 3D curve
 **************************************************************/


THREE.SplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = ( points == undefined ) ? [] : points;

	},

	function ( t ) {

		var points = this.points;
		var point = ( points.length - 1 ) * t;

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		var point0 = points[ intPoint == 0 ? intPoint : intPoint - 1 ];
		var point1 = points[ intPoint ];
		var point2 = points[ intPoint > points.length - 2 ? points.length - 1 : intPoint + 1 ];
		var point3 = points[ intPoint > points.length - 3 ? points.length - 1 : intPoint + 2 ];

		var vector = new THREE.Vector3();

		vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
		vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );
		vector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );

		return vector;

	}

);

// File:src/extras/curves/ClosedSplineCurve3.js

/**************************************************************
 *	Closed Spline 3D curve
 **************************************************************/


THREE.ClosedSplineCurve3 = THREE.Curve.create(

	function ( points /* array of Vector3 */) {

		this.points = ( points == undefined ) ? [] : points;

	},

	function ( t ) {

		var points = this.points;
		var point = ( points.length - 0 ) * t; // This needs to be from 0-length +1

		var intPoint = Math.floor( point );
		var weight = point - intPoint;

		intPoint += intPoint > 0 ? 0 : ( Math.floor( Math.abs( intPoint ) / points.length ) + 1 ) * points.length;

		var point0 = points[ ( intPoint - 1 ) % points.length ];
		var point1 = points[ ( intPoint     ) % points.length ];
		var point2 = points[ ( intPoint + 1 ) % points.length ];
		var point3 = points[ ( intPoint + 2 ) % points.length ];

		var vector = new THREE.Vector3();

		vector.x = THREE.Curve.Utils.interpolate( point0.x, point1.x, point2.x, point3.x, weight );
		vector.y = THREE.Curve.Utils.interpolate( point0.y, point1.y, point2.y, point3.y, weight );
		vector.z = THREE.Curve.Utils.interpolate( point0.z, point1.z, point2.z, point3.z, weight );

		return vector;

	}

);

// File:src/extras/animation/AnimationHandler.js

/**
 * @author mikael emtinger / http://gomo.se/
 */

THREE.AnimationHandler = {

	LINEAR: 0,
	CATMULLROM: 1,
	CATMULLROM_FORWARD: 2,

	//

	add: function () { console.warn( 'THREE.AnimationHandler.add() has been deprecated.' ); },
	get: function () { console.warn( 'THREE.AnimationHandler.get() has been deprecated.' ); },
	remove: function () { console.warn( 'THREE.AnimationHandler.remove() has been deprecated.' ); },

	//

	animations: [],

	init: function ( data ) {

		if ( data.initialized === true ) return;

		// loop through all keys

		for ( var h = 0; h < data.hierarchy.length; h ++ ) {

			for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				// remove minus times

				if ( data.hierarchy[ h ].keys[ k ].time < 0 ) {

					 data.hierarchy[ h ].keys[ k ].time = 0;

				}

				// create quaternions

				if ( data.hierarchy[ h ].keys[ k ].rot !== undefined &&
				  ! ( data.hierarchy[ h ].keys[ k ].rot instanceof THREE.Quaternion ) ) {

					var quat = data.hierarchy[ h ].keys[ k ].rot;
					data.hierarchy[ h ].keys[ k ].rot = new THREE.Quaternion().fromArray( quat );

				}

			}

			// prepare morph target keys

			if ( data.hierarchy[ h ].keys.length && data.hierarchy[ h ].keys[ 0 ].morphTargets !== undefined ) {

				// get all used

				var usedMorphTargets = {};

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

						var morphTargetName = data.hierarchy[ h ].keys[ k ].morphTargets[ m ];
						usedMorphTargets[ morphTargetName ] = - 1;

					}

				}

				data.hierarchy[ h ].usedMorphTargets = usedMorphTargets;


				// set all used on all frames

				for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

					var influences = {};

					for ( var morphTargetName in usedMorphTargets ) {

						for ( var m = 0; m < data.hierarchy[ h ].keys[ k ].morphTargets.length; m ++ ) {

							if ( data.hierarchy[ h ].keys[ k ].morphTargets[ m ] === morphTargetName ) {

								influences[ morphTargetName ] = data.hierarchy[ h ].keys[ k ].morphTargetsInfluences[ m ];
								break;

							}

						}

						if ( m === data.hierarchy[ h ].keys[ k ].morphTargets.length ) {

							influences[ morphTargetName ] = 0;

						}

					}

					data.hierarchy[ h ].keys[ k ].morphTargetsInfluences = influences;

				}

			}


			// remove all keys that are on the same time

			for ( var k = 1; k < data.hierarchy[ h ].keys.length; k ++ ) {

				if ( data.hierarchy[ h ].keys[ k ].time === data.hierarchy[ h ].keys[ k - 1 ].time ) {

					data.hierarchy[ h ].keys.splice( k, 1 );
					k --;

				}

			}


			// set index

			for ( var k = 0; k < data.hierarchy[ h ].keys.length; k ++ ) {

				data.hierarchy[ h ].keys[ k ].index = k;

			}

		}

		data.initialized = true;

		return data;

	},

	parse: function ( root ) {

		var parseRecurseHierarchy = function ( root, hierarchy ) {

			hierarchy.push( root );

			for ( var c = 0; c < root.children.length; c ++ )
				parseRecurseHierarchy( root.children[ c ], hierarchy );

		};

		// setup hierarchy

		var hierarchy = [];

		if ( root instanceof THREE.SkinnedMesh ) {

			for ( var b = 0; b < root.skeleton.bones.length; b ++ ) {

				hierarchy.push( root.skeleton.bones[ b ] );

			}

		} else {

			parseRecurseHierarchy( root, hierarchy );

		}

		return hierarchy;

	},

	play: function ( animation ) {

		if ( this.animations.indexOf( animation ) === - 1 ) {

			this.animations.push( animation );

		}

	},

	stop: function ( animation ) {

		var index = this.animations.indexOf( animation );

		if ( index !== - 1 ) {

			this.animations.splice( index, 1 );

		}

	},

	update: function ( deltaTimeMS ) {

		for ( var i = 0; i < this.animations.length; i ++ ) {

			this.animations[ i ].resetBlendWeights( );

		}

		for ( var i = 0; i < this.animations.length; i ++ ) {

			this.animations[ i ].update( deltaTimeMS );

		}

	}

};

// File:src/extras/animation/Animation.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 */

THREE.Animation = function ( root, data ) {

	this.root = root;
	this.data = THREE.AnimationHandler.init( data );
	this.hierarchy = THREE.AnimationHandler.parse( root );

	this.currentTime = 0;
	this.timeScale = 1;

	this.isPlaying = false;
	this.loop = true;
	this.weight = 0;

	this.interpolationType = THREE.AnimationHandler.LINEAR;

};


THREE.Animation.prototype.keyTypes = [ "pos", "rot", "scl" ];


THREE.Animation.prototype.play = function ( startTime, weight ) {

	this.currentTime = startTime !== undefined ? startTime : 0;
	this.weight = weight !== undefined ? weight: 1;

	this.isPlaying = true;

	this.reset();

	THREE.AnimationHandler.play( this );

};


THREE.Animation.prototype.stop = function() {

	this.isPlaying = false;

	THREE.AnimationHandler.stop( this );

};

THREE.Animation.prototype.reset = function () {

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		var object = this.hierarchy[ h ];

		object.matrixAutoUpdate = true;

		if ( object.animationCache === undefined ) {

			object.animationCache = {
				animations: {},
				blending: {
					positionWeight: 0.0,
					quaternionWeight: 0.0,
					scaleWeight: 0.0
				}
			};
		}

		if ( object.animationCache.animations[this.data.name] === undefined ) {

			object.animationCache.animations[this.data.name] = {};
			object.animationCache.animations[this.data.name].prevKey = { pos: 0, rot: 0, scl: 0 };
			object.animationCache.animations[this.data.name].nextKey = { pos: 0, rot: 0, scl: 0 };
			object.animationCache.animations[this.data.name].originalMatrix = object.matrix;

		}

		var animationCache = object.animationCache.animations[this.data.name];

		// Get keys to match our current time

		for ( var t = 0; t < 3; t ++ ) {

			var type = this.keyTypes[ t ];

			var prevKey = this.data.hierarchy[ h ].keys[ 0 ];
			var nextKey = this.getNextKeyWith( type, h, 1 );

			while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

				prevKey = nextKey;
				nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

			}

			animationCache.prevKey[ type ] = prevKey;
			animationCache.nextKey[ type ] = nextKey;

		}

	}

};

THREE.Animation.prototype.resetBlendWeights = function () {

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		var object = this.hierarchy[ h ];

		if ( object.animationCache !== undefined ) {

			object.animationCache.blending.positionWeight = 0.0;
			object.animationCache.blending.quaternionWeight = 0.0;
			object.animationCache.blending.scaleWeight = 0.0;

		}

	}

};

THREE.Animation.prototype.update = (function(){

	var points = [];
	var target = new THREE.Vector3();
	var newVector = new THREE.Vector3();
	var newQuat = new THREE.Quaternion();

	// Catmull-Rom spline

	var interpolateCatmullRom = function ( points, scale ) {

		var c = [], v3 = [],
		point, intPoint, weight, w2, w3,
		pa, pb, pc, pd;

		point = ( points.length - 1 ) * scale;
		intPoint = Math.floor( point );
		weight = point - intPoint;

		c[ 0 ] = intPoint === 0 ? intPoint : intPoint - 1;
		c[ 1 ] = intPoint;
		c[ 2 ] = intPoint > points.length - 2 ? intPoint : intPoint + 1;
		c[ 3 ] = intPoint > points.length - 3 ? intPoint : intPoint + 2;

		pa = points[ c[ 0 ] ];
		pb = points[ c[ 1 ] ];
		pc = points[ c[ 2 ] ];
		pd = points[ c[ 3 ] ];

		w2 = weight * weight;
		w3 = weight * w2;

		v3[ 0 ] = interpolate( pa[ 0 ], pb[ 0 ], pc[ 0 ], pd[ 0 ], weight, w2, w3 );
		v3[ 1 ] = interpolate( pa[ 1 ], pb[ 1 ], pc[ 1 ], pd[ 1 ], weight, w2, w3 );
		v3[ 2 ] = interpolate( pa[ 2 ], pb[ 2 ], pc[ 2 ], pd[ 2 ], weight, w2, w3 );

		return v3;

	};

	var interpolate = function ( p0, p1, p2, p3, t, t2, t3 ) {

		var v0 = ( p2 - p0 ) * 0.5,
			v1 = ( p3 - p1 ) * 0.5;

		return ( 2 * ( p1 - p2 ) + v0 + v1 ) * t3 + ( - 3 * ( p1 - p2 ) - 2 * v0 - v1 ) * t2 + v0 * t + p1;

	};

	return function ( delta ) {

		if ( this.isPlaying === false ) return;

		this.currentTime += delta * this.timeScale;

		if ( this.weight === 0 )
			return;

		//

		var duration = this.data.length;

		if ( this.currentTime > duration || this.currentTime < 0 ) {

			if ( this.loop ) {

				this.currentTime %= duration;

				if ( this.currentTime < 0 )
					this.currentTime += duration;

				this.reset();

			} else {

				this.stop();
				return;

			}

		}

		for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

			var object = this.hierarchy[ h ];
			var animationCache = object.animationCache.animations[this.data.name];
			var blending = object.animationCache.blending;

			// loop through pos/rot/scl

			for ( var t = 0; t < 3; t ++ ) {

				// get keys

				var type    = this.keyTypes[ t ];
				var prevKey = animationCache.prevKey[ type ];
				var nextKey = animationCache.nextKey[ type ];

				if ( ( this.timeScale > 0 && nextKey.time <= this.currentTime ) ||
					( this.timeScale < 0 && prevKey.time >= this.currentTime ) ) {

					prevKey = this.data.hierarchy[ h ].keys[ 0 ];
					nextKey = this.getNextKeyWith( type, h, 1 );

					while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

						prevKey = nextKey;
						nextKey = this.getNextKeyWith( type, h, nextKey.index + 1 );

					}

					animationCache.prevKey[ type ] = prevKey;
					animationCache.nextKey[ type ] = nextKey;

				}

				object.matrixAutoUpdate = true;
				object.matrixWorldNeedsUpdate = true;

				var scale = ( this.currentTime - prevKey.time ) / ( nextKey.time - prevKey.time );

				var prevXYZ = prevKey[ type ];
				var nextXYZ = nextKey[ type ];

				if ( scale < 0 ) scale = 0;
				if ( scale > 1 ) scale = 1;

				// interpolate

				if ( type === "pos" ) {

					if ( this.interpolationType === THREE.AnimationHandler.LINEAR ) {

						newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
						newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
						newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

						// blend
						var proportionalWeight = this.weight / ( this.weight + blending.positionWeight );
						object.position.lerp( newVector, proportionalWeight );
						blending.positionWeight += this.weight;

					} else if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
								this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

						points[ 0 ] = this.getPrevKeyWith( "pos", h, prevKey.index - 1 )[ "pos" ];
						points[ 1 ] = prevXYZ;
						points[ 2 ] = nextXYZ;
						points[ 3 ] = this.getNextKeyWith( "pos", h, nextKey.index + 1 )[ "pos" ];

						scale = scale * 0.33 + 0.33;

						var currentPoint = interpolateCatmullRom( points, scale );
						var proportionalWeight = this.weight / ( this.weight + blending.positionWeight );
						blending.positionWeight += this.weight;

						// blend

						var vector = object.position;
						
						vector.x = vector.x + ( currentPoint[ 0 ] - vector.x ) * proportionalWeight;
						vector.y = vector.y + ( currentPoint[ 1 ] - vector.y ) * proportionalWeight;
						vector.z = vector.z + ( currentPoint[ 2 ] - vector.z ) * proportionalWeight;

						if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

							var forwardPoint = interpolateCatmullRom( points, scale * 1.01 );

							target.set( forwardPoint[ 0 ], forwardPoint[ 1 ], forwardPoint[ 2 ] );
							target.sub( vector );
							target.y = 0;
							target.normalize();

							var angle = Math.atan2( target.x, target.z );
							object.rotation.set( 0, angle, 0 );

						}

					}

				} else if ( type === "rot" ) {

					THREE.Quaternion.slerp( prevXYZ, nextXYZ, newQuat, scale );

					// Avoid paying the cost of an additional slerp if we don't have to
					if ( blending.quaternionWeight === 0 ) {

						object.quaternion.copy(newQuat);
						blending.quaternionWeight = this.weight;

					} else {

						var proportionalWeight = this.weight / ( this.weight + blending.quaternionWeight );
						THREE.Quaternion.slerp( object.quaternion, newQuat, object.quaternion, proportionalWeight );
						blending.quaternionWeight += this.weight;

					}

				} else if ( type === "scl" ) {

					newVector.x = prevXYZ[ 0 ] + ( nextXYZ[ 0 ] - prevXYZ[ 0 ] ) * scale;
					newVector.y = prevXYZ[ 1 ] + ( nextXYZ[ 1 ] - prevXYZ[ 1 ] ) * scale;
					newVector.z = prevXYZ[ 2 ] + ( nextXYZ[ 2 ] - prevXYZ[ 2 ] ) * scale;

					var proportionalWeight = this.weight / ( this.weight + blending.scaleWeight );
					object.scale.lerp( newVector, proportionalWeight );
					blending.scaleWeight += this.weight;

				}

			}

		}

		return true;

	};

})();





// Get next key with

THREE.Animation.prototype.getNextKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		 this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key < keys.length - 1 ? key : keys.length - 1;

	} else {

		key = key % keys.length;

	}

	for ( ; key < keys.length; key ++ ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ 0 ];

};

// Get previous key with

THREE.Animation.prototype.getPrevKeyWith = function ( type, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;

	if ( this.interpolationType === THREE.AnimationHandler.CATMULLROM ||
		this.interpolationType === THREE.AnimationHandler.CATMULLROM_FORWARD ) {

		key = key > 0 ? key : 0;

	} else {

		key = key >= 0 ? key : key + keys.length;

	}


	for ( ; key >= 0; key -- ) {

		if ( keys[ key ][ type ] !== undefined ) {

			return keys[ key ];

		}

	}

	return this.data.hierarchy[ h ].keys[ keys.length - 1 ];

};

// File:src/extras/animation/KeyFrameAnimation.js

/**
 * @author mikael emtinger / http://gomo.se/
 * @author mrdoob / http://mrdoob.com/
 * @author alteredq / http://alteredqualia.com/
 * @author khang duong
 * @author erik kitson
 */

THREE.KeyFrameAnimation = function ( data ) {

	this.root = data.node;
	this.data = THREE.AnimationHandler.init( data );
	this.hierarchy = THREE.AnimationHandler.parse( this.root );
	this.currentTime = 0;
	this.timeScale = 0.001;
	this.isPlaying = false;
	this.isPaused = true;
	this.loop = true;

	// initialize to first keyframes

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		var keys = this.data.hierarchy[h].keys,
			sids = this.data.hierarchy[h].sids,
			obj = this.hierarchy[h];

		if ( keys.length && sids ) {

			for ( var s = 0; s < sids.length; s ++ ) {

				var sid = sids[ s ],
					next = this.getNextKeyWith( sid, h, 0 );

				if ( next ) {

					next.apply( sid );

				}

			}

			obj.matrixAutoUpdate = false;
			this.data.hierarchy[h].node.updateMatrix();
			obj.matrixWorldNeedsUpdate = true;

		}

	}

};


THREE.KeyFrameAnimation.prototype.play = function ( startTime ) {

	this.currentTime = startTime !== undefined ? startTime : 0;

	if ( this.isPlaying === false ) {

		this.isPlaying = true;

		// reset key cache

		var h, hl = this.hierarchy.length,
			object,
			node;

		for ( h = 0; h < hl; h ++ ) {

			object = this.hierarchy[ h ];
			node = this.data.hierarchy[ h ];

			if ( node.animationCache === undefined ) {

				node.animationCache = {};
				node.animationCache.prevKey = null;
				node.animationCache.nextKey = null;
				node.animationCache.originalMatrix = object.matrix;

			}

			var keys = this.data.hierarchy[h].keys;

			if (keys.length) {

				node.animationCache.prevKey = keys[ 0 ];
				node.animationCache.nextKey = keys[ 1 ];

				this.startTime = Math.min( keys[0].time, this.startTime );
				this.endTime = Math.max( keys[keys.length - 1].time, this.endTime );

			}

		}

		this.update( 0 );

	}

	this.isPaused = false;

	THREE.AnimationHandler.play( this );

};


THREE.KeyFrameAnimation.prototype.stop = function() {

	this.isPlaying = false;
	this.isPaused  = false;

	THREE.AnimationHandler.stop( this );

	// reset JIT matrix and remove cache

	for ( var h = 0; h < this.data.hierarchy.length; h ++ ) {
		
		var obj = this.hierarchy[ h ];
		var node = this.data.hierarchy[ h ];

		if ( node.animationCache !== undefined ) {

			var original = node.animationCache.originalMatrix;

			original.copy( obj.matrix );
			obj.matrix = original;

			delete node.animationCache;

		}

	}

};


// Update

THREE.KeyFrameAnimation.prototype.update = function ( delta ) {

	if ( this.isPlaying === false ) return;

	this.currentTime += delta * this.timeScale;

	//

	var duration = this.data.length;

	if ( this.loop === true && this.currentTime > duration ) {

		this.currentTime %= duration;

	}

	this.currentTime = Math.min( this.currentTime, duration );

	for ( var h = 0, hl = this.hierarchy.length; h < hl; h ++ ) {

		var object = this.hierarchy[ h ];
		var node = this.data.hierarchy[ h ];

		var keys = node.keys,
			animationCache = node.animationCache;


		if ( keys.length ) {

			var prevKey = animationCache.prevKey;
			var nextKey = animationCache.nextKey;

			if ( nextKey.time <= this.currentTime ) {

				while ( nextKey.time < this.currentTime && nextKey.index > prevKey.index ) {

					prevKey = nextKey;
					nextKey = keys[ prevKey.index + 1 ];

				}

				animationCache.prevKey = prevKey;
				animationCache.nextKey = nextKey;

			}

			if ( nextKey.time >= this.currentTime ) {

				prevKey.interpolate( nextKey, this.currentTime );

			} else {

				prevKey.interpolate( nextKey, nextKey.time );

			}

			this.data.hierarchy[ h ].node.updateMatrix();
			object.matrixWorldNeedsUpdate = true;

		}

	}

};

// Get next key with

THREE.KeyFrameAnimation.prototype.getNextKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key % keys.length;

	for ( ; key < keys.length; key ++ ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ 0 ];

};

// Get previous key with

THREE.KeyFrameAnimation.prototype.getPrevKeyWith = function( sid, h, key ) {

	var keys = this.data.hierarchy[ h ].keys;
	key = key >= 0 ? key : key + keys.length;

	for ( ; key >= 0; key -- ) {

		if ( keys[ key ].hasTarget( sid ) ) {

			return keys[ key ];

		}

	}

	return keys[ keys.length - 1 ];

};

// File:src/extras/animation/MorphAnimation.js

/**
 * @author mrdoob / http://mrdoob.com
 */

THREE.MorphAnimation = function ( mesh ) {

	this.mesh = mesh;
	this.frames = mesh.morphTargetInfluences.length;
	this.currentTime = 0;
	this.duration = 1000;
	this.loop = true;

	this.isPlaying = false;

};

THREE.MorphAnimation.prototype = {

	play: function () {

		this.isPlaying = true;

	},

	pause: function () {

		this.isPlaying = false;

	},

	update: ( function () {

		var lastFrame = 0;
		var currentFrame = 0;

		return function ( delta ) {

			if ( this.isPlaying === false ) return;

			this.currentTime += delta;

			if ( this.loop === true && this.currentTime > this.duration ) {

				this.currentTime %= this.duration;

			}

			this.currentTime = Math.min( this.currentTime, this.duration );

			var interpolation = this.duration / this.frames;
			var frame = Math.floor( this.currentTime / interpolation );

			if ( frame != currentFrame ) {

				this.mesh.morphTargetInfluences[ lastFrame ] = 0;
				this.mesh.morphTargetInfluences[ currentFrame ] = 1;
				this.mesh.morphTargetInfluences[ frame ] = 0;

				lastFrame = currentFrame;
				currentFrame = frame;

			}

			this.mesh.morphTargetInfluences[ frame ] = ( this.currentTime % interpolation ) / interpolation;
			this.mesh.morphTargetInfluences[ lastFrame ] = 1 - this.mesh.morphTargetInfluences[ frame ];

		}

	} )()

};

// File:src/extras/geometries/BoxGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Cube.as
 */

THREE.BoxGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	THREE.Geometry.call( this );

	this.type = 'BoxGeometry';

	this.parameters = {
		width: width,
		height: height,
		depth: depth,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		depthSegments: depthSegments
	};

	this.widthSegments = widthSegments || 1;
	this.heightSegments = heightSegments || 1;
	this.depthSegments = depthSegments || 1;

	var scope = this;

	var width_half = width / 2;
	var height_half = height / 2;
	var depth_half = depth / 2;

	buildPlane( 'z', 'y', - 1, - 1, depth, height, width_half, 0 ); // px
	buildPlane( 'z', 'y',   1, - 1, depth, height, - width_half, 1 ); // nx
	buildPlane( 'x', 'z',   1,   1, width, depth, height_half, 2 ); // py
	buildPlane( 'x', 'z',   1, - 1, width, depth, - height_half, 3 ); // ny
	buildPlane( 'x', 'y',   1, - 1, width, height, depth_half, 4 ); // pz
	buildPlane( 'x', 'y', - 1, - 1, width, height, - depth_half, 5 ); // nz

	function buildPlane( u, v, udir, vdir, width, height, depth, materialIndex ) {

		var w, ix, iy,
		gridX = scope.widthSegments,
		gridY = scope.heightSegments,
		width_half = width / 2,
		height_half = height / 2,
		offset = scope.vertices.length;

		if ( ( u === 'x' && v === 'y' ) || ( u === 'y' && v === 'x' ) ) {

			w = 'z';

		} else if ( ( u === 'x' && v === 'z' ) || ( u === 'z' && v === 'x' ) ) {

			w = 'y';
			gridY = scope.depthSegments;

		} else if ( ( u === 'z' && v === 'y' ) || ( u === 'y' && v === 'z' ) ) {

			w = 'x';
			gridX = scope.depthSegments;

		}

		var gridX1 = gridX + 1,
		gridY1 = gridY + 1,
		segment_width = width / gridX,
		segment_height = height / gridY,
		normal = new THREE.Vector3();

		normal[ w ] = depth > 0 ? 1 : - 1;

		for ( iy = 0; iy < gridY1; iy ++ ) {

			for ( ix = 0; ix < gridX1; ix ++ ) {

				var vector = new THREE.Vector3();
				vector[ u ] = ( ix * segment_width - width_half ) * udir;
				vector[ v ] = ( iy * segment_height - height_half ) * vdir;
				vector[ w ] = depth;

				scope.vertices.push( vector );

			}

		}

		for ( iy = 0; iy < gridY; iy ++ ) {

			for ( ix = 0; ix < gridX; ix ++ ) {

				var a = ix + gridX1 * iy;
				var b = ix + gridX1 * ( iy + 1 );
				var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
				var d = ( ix + 1 ) + gridX1 * iy;

				var uva = new THREE.Vector2( ix / gridX, 1 - iy / gridY );
				var uvb = new THREE.Vector2( ix / gridX, 1 - ( iy + 1 ) / gridY );
				var uvc = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - ( iy + 1 ) / gridY );
				var uvd = new THREE.Vector2( ( ix + 1 ) / gridX, 1 - iy / gridY );

				var face = new THREE.Face3( a + offset, b + offset, d + offset );
				face.normal.copy( normal );
				face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
				face.materialIndex = materialIndex;

				scope.faces.push( face );
				scope.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

				face = new THREE.Face3( b + offset, c + offset, d + offset );
				face.normal.copy( normal );
				face.vertexNormals.push( normal.clone(), normal.clone(), normal.clone() );
				face.materialIndex = materialIndex;

				scope.faces.push( face );
				scope.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

			}

		}

	}

	this.mergeVertices();

};

THREE.BoxGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/CircleGeometry.js

/**
 * @author hughes
 */

THREE.CircleGeometry = function ( radius, segments, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.type = 'CircleGeometry';

	this.parameters = {
		radius: radius,
		segments: segments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	radius = radius || 50;
	segments = segments !== undefined ? Math.max( 3, segments ) : 8;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	var i, uvs = [],
	center = new THREE.Vector3(), centerUV = new THREE.Vector2( 0.5, 0.5 );

	this.vertices.push(center);
	uvs.push( centerUV );

	for ( i = 0; i <= segments; i ++ ) {

		var vertex = new THREE.Vector3();
		var segment = thetaStart + i / segments * thetaLength;

		vertex.x = radius * Math.cos( segment );
		vertex.y = radius * Math.sin( segment );

		this.vertices.push( vertex );
		uvs.push( new THREE.Vector2( ( vertex.x / radius + 1 ) / 2, ( vertex.y / radius + 1 ) / 2 ) );

	}

	var n = new THREE.Vector3( 0, 0, 1 );

	for ( i = 1; i <= segments; i ++ ) {

		this.faces.push( new THREE.Face3( i, i + 1, 0, [ n.clone(), n.clone(), n.clone() ] ) );
		this.faceVertexUvs[ 0 ].push( [ uvs[ i ].clone(), uvs[ i + 1 ].clone(), centerUV.clone() ] );

	}

	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.CircleGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/CubeGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 */


THREE.CubeGeometry = function ( width, height, depth, widthSegments, heightSegments, depthSegments ) {

	console.warn( 'THREE.CubeGeometry has been renamed to THREE.BoxGeometry.' );
	return new THREE.BoxGeometry( width, height, depth, widthSegments, heightSegments, depthSegments );

 };

// File:src/extras/geometries/CylinderGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.CylinderGeometry = function ( radiusTop, radiusBottom, height, radialSegments, heightSegments, openEnded ) {

	THREE.Geometry.call( this );

	this.type = 'CylinderGeometry';

	this.parameters = {
		radiusTop: radiusTop,
		radiusBottom: radiusBottom,
		height: height,
		radialSegments: radialSegments,
		heightSegments: heightSegments,
		openEnded: openEnded
	};

	radiusTop = radiusTop !== undefined ? radiusTop : 20;
	radiusBottom = radiusBottom !== undefined ? radiusBottom : 20;
	height = height !== undefined ? height : 100;

	radialSegments = radialSegments || 8;
	heightSegments = heightSegments || 1;

	openEnded = openEnded !== undefined ? openEnded : false;

	var heightHalf = height / 2;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= heightSegments; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		var v = y / heightSegments;
		var radius = v * ( radiusBottom - radiusTop ) + radiusTop;

		for ( x = 0; x <= radialSegments; x ++ ) {

			var u = x / radialSegments;

			var vertex = new THREE.Vector3();
			vertex.x = radius * Math.sin( u * Math.PI * 2 );
			vertex.y = - v * height + heightHalf;
			vertex.z = radius * Math.cos( u * Math.PI * 2 );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	var tanTheta = ( radiusBottom - radiusTop ) / height;
	var na, nb;

	for ( x = 0; x < radialSegments; x ++ ) {

		if ( radiusTop !== 0 ) {

			na = this.vertices[ vertices[ 0 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 0 ][ x + 1 ] ].clone();

		} else {

			na = this.vertices[ vertices[ 1 ][ x ] ].clone();
			nb = this.vertices[ vertices[ 1 ][ x + 1 ] ].clone();

		}

		na.setY( Math.sqrt( na.x * na.x + na.z * na.z ) * tanTheta ).normalize();
		nb.setY( Math.sqrt( nb.x * nb.x + nb.z * nb.z ) * tanTheta ).normalize();

		for ( y = 0; y < heightSegments; y ++ ) {

			var v1 = vertices[ y ][ x ];
			var v2 = vertices[ y + 1 ][ x ];
			var v3 = vertices[ y + 1 ][ x + 1 ];
			var v4 = vertices[ y ][ x + 1 ];

			var n1 = na.clone();
			var n2 = na.clone();
			var n3 = nb.clone();
			var n4 = nb.clone();

			var uv1 = uvs[ y ][ x ].clone();
			var uv2 = uvs[ y + 1 ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x + 1 ].clone();
			var uv4 = uvs[ y ][ x + 1 ].clone();

			this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

			this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

		}

	}

	// top cap

	if ( openEnded === false && radiusTop > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, heightHalf, 0 ) );

		for ( x = 0; x < radialSegments; x ++ ) {

			var v1 = vertices[ 0 ][ x ];
			var v2 = vertices[ 0 ][ x + 1 ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, 1, 0 );
			var n2 = new THREE.Vector3( 0, 1, 0 );
			var n3 = new THREE.Vector3( 0, 1, 0 );

			var uv1 = uvs[ 0 ][ x ].clone();
			var uv2 = uvs[ 0 ][ x + 1 ].clone();
			var uv3 = new THREE.Vector2( uv2.x, 0 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	// bottom cap

	if ( openEnded === false && radiusBottom > 0 ) {

		this.vertices.push( new THREE.Vector3( 0, - heightHalf, 0 ) );

		for ( x = 0; x < radialSegments; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = this.vertices.length - 1;

			var n1 = new THREE.Vector3( 0, - 1, 0 );
			var n2 = new THREE.Vector3( 0, - 1, 0 );
			var n3 = new THREE.Vector3( 0, - 1, 0 );

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = new THREE.Vector2( uv2.x, 1 );

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
			this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

		}

	}

	this.computeFaceNormals();

}

THREE.CylinderGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/ExtrudeGeometry.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 *
 * Creates extruded geometry from a path shape.
 *
 * parameters = {
 *
 *  curveSegments: <int>, // number of points on the curves
 *  steps: <int>, // number of points for z-side extrusions / used for subdividing segements of extrude spline too
 *  amount: <int>, // Depth to extrude the shape
 *
 *  bevelEnabled: <bool>, // turn on bevel
 *  bevelThickness: <float>, // how deep into the original shape bevel goes
 *  bevelSize: <float>, // how far from shape outline is bevel
 *  bevelSegments: <int>, // number of bevel layers
 *
 *  extrudePath: <THREE.CurvePath> // 3d spline path to extrude shape along. (creates Frames if .frames aren't defined)
 *  frames: <THREE.TubeGeometry.FrenetFrames> // containing arrays of tangents, normals, binormals
 *
 *  material: <int> // material index for front and back faces
 *  extrudeMaterial: <int> // material index for extrusion and beveled faces
 *  uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ExtrudeGeometry = function ( shapes, options ) {

	if ( typeof( shapes ) === "undefined" ) {
		shapes = [];
		return;
	}

	THREE.Geometry.call( this );

	this.type = 'ExtrudeGeometry';

	shapes = shapes instanceof Array ? shapes : [ shapes ];

	this.addShapeList( shapes, options );

	this.computeFaceNormals();

	// can't really use automatic vertex normals
	// as then front and back sides get smoothed too
	// should do separate smoothing just for sides

	//this.computeVertexNormals();

	//console.log( "took", ( Date.now() - startTime ) );

};

THREE.ExtrudeGeometry.prototype = Object.create( THREE.Geometry.prototype );

THREE.ExtrudeGeometry.prototype.addShapeList = function ( shapes, options ) {
	var sl = shapes.length;

	for ( var s = 0; s < sl; s ++ ) {
		var shape = shapes[ s ];
		this.addShape( shape, options );
	}
};

THREE.ExtrudeGeometry.prototype.addShape = function ( shape, options ) {

	var amount = options.amount !== undefined ? options.amount : 100;

	var bevelThickness = options.bevelThickness !== undefined ? options.bevelThickness : 6; // 10
	var bevelSize = options.bevelSize !== undefined ? options.bevelSize : bevelThickness - 2; // 8
	var bevelSegments = options.bevelSegments !== undefined ? options.bevelSegments : 3;

	var bevelEnabled = options.bevelEnabled !== undefined ? options.bevelEnabled : true; // false

	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var steps = options.steps !== undefined ? options.steps : 1;

	var extrudePath = options.extrudePath;
	var extrudePts, extrudeByPath = false;

	var material = options.material;
	var extrudeMaterial = options.extrudeMaterial;

	// Use default WorldUVGenerator if no UV generators are specified.
	var uvgen = options.UVGenerator !== undefined ? options.UVGenerator : THREE.ExtrudeGeometry.WorldUVGenerator;

	var splineTube, binormal, normal, position2;
	if ( extrudePath ) {

		extrudePts = extrudePath.getSpacedPoints( steps );

		extrudeByPath = true;
		bevelEnabled = false; // bevels not supported for path extrusion

		// SETUP TNB variables

		// Reuse TNB from TubeGeomtry for now.
		// TODO1 - have a .isClosed in spline?

		splineTube = options.frames !== undefined ? options.frames : new THREE.TubeGeometry.FrenetFrames(extrudePath, steps, false);

		// console.log(splineTube, 'splineTube', splineTube.normals.length, 'steps', steps, 'extrudePts', extrudePts.length);

		binormal = new THREE.Vector3();
		normal = new THREE.Vector3();
		position2 = new THREE.Vector3();

	}

	// Safeguards if bevels are not enabled

	if ( ! bevelEnabled ) {

		bevelSegments = 0;
		bevelThickness = 0;
		bevelSize = 0;

	}

	// Variables initalization

	var ahole, h, hl; // looping of holes
	var scope = this;
	var bevelPoints = [];

	var shapesOffset = this.vertices.length;

	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! THREE.Shape.Utils.isClockWise( vertices ) ;

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe ...

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];

			if ( THREE.Shape.Utils.isClockWise( ahole ) ) {

				holes[ h ] = ahole.reverse();

			}

		}

		reverse = false; // If vertices are in order now, we shouldn't need to worry about them again (hopefully)!

	}


	var faces = THREE.Shape.Utils.triangulateShape ( vertices, holes );

	/* Vertices */

	var contour = vertices; // vertices has all points but contour has only points of circumference

	for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

		ahole = holes[ h ];

		vertices = vertices.concat( ahole );

	}


	function scalePt2 ( pt, vec, size ) {

		if ( ! vec ) console.log( "die" );

		return vec.clone().multiplyScalar( size ).add( pt );

	}

	var b, bs, t, z,
		vert, vlen = vertices.length,
		face, flen = faces.length,
		cont, clen = contour.length;


	// Find directions for point movement

	var RAD_TO_DEGREES = 180 / Math.PI;


	function getBevelVec( inPt, inPrev, inNext ) {

		var EPSILON = 0.0000000001;
		
		// computes for inPt the corresponding point inPt' on a new contour
		//   shiftet by 1 unit (length of normalized vector) to the left
		// if we walk along contour clockwise, this new contour is outside the old one
		//
		// inPt' is the intersection of the two lines parallel to the two
		//  adjacent edges of inPt at a distance of 1 unit on the left side.
		
		var v_trans_x, v_trans_y, shrink_by = 1;		// resulting translation vector for inPt

		// good reading for geometry algorithms (here: line-line intersection)
		// http://geomalgorithms.com/a05-_intersect-1.html

		var v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
		var v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
		
		var v_prev_lensq = ( v_prev_x * v_prev_x + v_prev_y * v_prev_y );
		
		// check for colinear edges
		var colinear0 = ( v_prev_x * v_next_y - v_prev_y * v_next_x );
		
		if ( Math.abs( colinear0 ) > EPSILON ) {		// not colinear
			
			// length of vectors for normalizing
	
			var v_prev_len = Math.sqrt( v_prev_lensq );
			var v_next_len = Math.sqrt( v_next_x * v_next_x + v_next_y * v_next_y );
			
			// shift adjacent points by unit vectors to the left
	
			var ptPrevShift_x = ( inPrev.x - v_prev_y / v_prev_len );
			var ptPrevShift_y = ( inPrev.y + v_prev_x / v_prev_len );
			
			var ptNextShift_x = ( inNext.x - v_next_y / v_next_len );
			var ptNextShift_y = ( inNext.y + v_next_x / v_next_len );
	
			// scaling factor for v_prev to intersection point
	
			var sf = (  ( ptNextShift_x - ptPrevShift_x ) * v_next_y -
						( ptNextShift_y - ptPrevShift_y ) * v_next_x    ) /
					  ( v_prev_x * v_next_y - v_prev_y * v_next_x );
	
			// vector from inPt to intersection point
	
			v_trans_x = ( ptPrevShift_x + v_prev_x * sf - inPt.x );
			v_trans_y = ( ptPrevShift_y + v_prev_y * sf - inPt.y );
	
			// Don't normalize!, otherwise sharp corners become ugly
			//  but prevent crazy spikes
			var v_trans_lensq = ( v_trans_x * v_trans_x + v_trans_y * v_trans_y )
			if ( v_trans_lensq <= 2 ) {
				return	new THREE.Vector2( v_trans_x, v_trans_y );
			} else {
				shrink_by = Math.sqrt( v_trans_lensq / 2 );
			}
			
		} else {		// handle special case of colinear edges

			var direction_eq = false;		// assumes: opposite
			if ( v_prev_x > EPSILON ) {
				if ( v_next_x > EPSILON ) { direction_eq = true; }
			} else {
				if ( v_prev_x < - EPSILON ) {
					if ( v_next_x < - EPSILON ) { direction_eq = true; }
				} else {
					if ( Math.sign(v_prev_y) == Math.sign(v_next_y) ) { direction_eq = true; }
				}
			}

			if ( direction_eq ) {
				// console.log("Warning: lines are a straight sequence");
				v_trans_x = - v_prev_y;
				v_trans_y =  v_prev_x;
				shrink_by = Math.sqrt( v_prev_lensq );
			} else {
				// console.log("Warning: lines are a straight spike");
				v_trans_x = v_prev_x;
				v_trans_y = v_prev_y;
				shrink_by = Math.sqrt( v_prev_lensq / 2 );
			}

		}

		return	new THREE.Vector2( v_trans_x / shrink_by, v_trans_y / shrink_by );

	}


	var contourMovements = [];

	for ( var i = 0, il = contour.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

		if ( j === il ) j = 0;
		if ( k === il ) k = 0;

		//  (j)---(i)---(k)
		// console.log('i,j,k', i, j , k)

		var pt_i = contour[ i ];
		var pt_j = contour[ j ];
		var pt_k = contour[ k ];

		contourMovements[ i ]= getBevelVec( contour[ i ], contour[ j ], contour[ k ] );

	}

	var holesMovements = [], oneHoleMovements, verticesMovements = contourMovements.concat();

	for ( h = 0, hl = holes.length; h < hl; h ++ ) {

		ahole = holes[ h ];

		oneHoleMovements = [];

		for ( i = 0, il = ahole.length, j = il - 1, k = i + 1; i < il; i ++, j ++, k ++ ) {

			if ( j === il ) j = 0;
			if ( k === il ) k = 0;

			//  (j)---(i)---(k)
			oneHoleMovements[ i ]= getBevelVec( ahole[ i ], ahole[ j ], ahole[ k ] );

		}

		holesMovements.push( oneHoleMovements );
		verticesMovements = verticesMovements.concat( oneHoleMovements );

	}


	// Loop bevelSegments, 1 for the front, 1 for the back

	for ( b = 0; b < bevelSegments; b ++ ) {
	//for ( b = bevelSegments; b > 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );

		//z = bevelThickness * t;
		bs = bevelSize * ( Math.sin ( t * Math.PI/2 ) ) ; // curved
		//bs = bevelSize * t ; // linear

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );

			v( vert.x, vert.y,  - z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				v( vert.x, vert.y,  - z );

			}

		}

	}

	bs = bevelSize;

	// Back facing vertices

	for ( i = 0; i < vlen; i ++ ) {

		vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

		if ( ! extrudeByPath ) {

			v( vert.x, vert.y, 0 );

		} else {

			// v( vert.x, vert.y + extrudePts[ 0 ].y, extrudePts[ 0 ].x );

			normal.copy( splineTube.normals[0] ).multiplyScalar(vert.x);
			binormal.copy( splineTube.binormals[0] ).multiplyScalar(vert.y);

			position2.copy( extrudePts[0] ).add(normal).add(binormal);

			v( position2.x, position2.y, position2.z );

		}

	}

	// Add stepped vertices...
	// Including front facing vertices

	var s;

	for ( s = 1; s <= steps; s ++ ) {

		for ( i = 0; i < vlen; i ++ ) {

			vert = bevelEnabled ? scalePt2( vertices[ i ], verticesMovements[ i ], bs ) : vertices[ i ];

			if ( ! extrudeByPath ) {

				v( vert.x, vert.y, amount / steps * s );

			} else {

				// v( vert.x, vert.y + extrudePts[ s - 1 ].y, extrudePts[ s - 1 ].x );

				normal.copy( splineTube.normals[s] ).multiplyScalar( vert.x );
				binormal.copy( splineTube.binormals[s] ).multiplyScalar( vert.y );

				position2.copy( extrudePts[s] ).add( normal ).add( binormal );

				v( position2.x, position2.y, position2.z );

			}

		}

	}


	// Add bevel segments planes

	//for ( b = 1; b <= bevelSegments; b ++ ) {
	for ( b = bevelSegments - 1; b >= 0; b -- ) {

		t = b / bevelSegments;
		z = bevelThickness * ( 1 - t );
		//bs = bevelSize * ( 1-Math.sin ( ( 1 - t ) * Math.PI/2 ) );
		bs = bevelSize * Math.sin ( t * Math.PI/2 ) ;

		// contract shape

		for ( i = 0, il = contour.length; i < il; i ++ ) {

			vert = scalePt2( contour[ i ], contourMovements[ i ], bs );
			v( vert.x, vert.y,  amount + z );

		}

		// expand holes

		for ( h = 0, hl = holes.length; h < hl; h ++ ) {

			ahole = holes[ h ];
			oneHoleMovements = holesMovements[ h ];

			for ( i = 0, il = ahole.length; i < il; i ++ ) {

				vert = scalePt2( ahole[ i ], oneHoleMovements[ i ], bs );

				if ( ! extrudeByPath ) {

					v( vert.x, vert.y,  amount + z );

				} else {

					v( vert.x, vert.y + extrudePts[ steps - 1 ].y, extrudePts[ steps - 1 ].x + z );

				}

			}

		}

	}

	/* Faces */

	// Top and bottom faces

	buildLidFaces();

	// Sides faces

	buildSideFaces();


	/////  Internal functions

	function buildLidFaces() {

		if ( bevelEnabled ) {

			var layer = 0 ; // steps + 1
			var offset = vlen * layer;

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ]+ offset, face[ 1 ]+ offset, face[ 0 ] + offset );

			}

			layer = steps + bevelSegments * 2;
			offset = vlen * layer;

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + offset, face[ 1 ] + offset, face[ 2 ] + offset );

			}

		} else {

			// Bottom faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 2 ], face[ 1 ], face[ 0 ] );

			}

			// Top faces

			for ( i = 0; i < flen; i ++ ) {

				face = faces[ i ];
				f3( face[ 0 ] + vlen * steps, face[ 1 ] + vlen * steps, face[ 2 ] + vlen * steps );

			}
		}

	}

	// Create faces for the z-sides of the shape

	function buildSideFaces() {

		var layeroffset = 0;
		sidewalls( contour, layeroffset );
		layeroffset += contour.length;

		for ( h = 0, hl = holes.length;  h < hl; h ++ ) {

			ahole = holes[ h ];
			sidewalls( ahole, layeroffset );

			//, true
			layeroffset += ahole.length;

		}

	}

	function sidewalls( contour, layeroffset ) {

		var j, k;
		i = contour.length;

		while ( --i >= 0 ) {

			j = i;
			k = i - 1;
			if ( k < 0 ) k = contour.length - 1;

			//console.log('b', i,j, i-1, k,vertices.length);

			var s = 0, sl = steps  + bevelSegments * 2;

			for ( s = 0; s < sl; s ++ ) {

				var slen1 = vlen * s;
				var slen2 = vlen * ( s + 1 );

				var a = layeroffset + j + slen1,
					b = layeroffset + k + slen1,
					c = layeroffset + k + slen2,
					d = layeroffset + j + slen2;

				f4( a, b, c, d, contour, s, sl, j, k );

			}
		}

	}


	function v( x, y, z ) {

		scope.vertices.push( new THREE.Vector3( x, y, z ) );

	}

	function f3( a, b, c ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;

		// normal, color, material
		scope.faces.push( new THREE.Face3( a, b, c, null, null, material ) );

		var uvs = uvgen.generateTopUV( scope, a, b, c );

 		scope.faceVertexUvs[ 0 ].push( uvs );

	}

	function f4( a, b, c, d, wallContour, stepIndex, stepsLength, contourIndex1, contourIndex2 ) {

		a += shapesOffset;
		b += shapesOffset;
		c += shapesOffset;
		d += shapesOffset;

 		scope.faces.push( new THREE.Face3( a, b, d, null, null, extrudeMaterial ) );
 		scope.faces.push( new THREE.Face3( b, c, d, null, null, extrudeMaterial ) );

 		var uvs = uvgen.generateSideWallUV( scope, a, b, c, d );

 		scope.faceVertexUvs[ 0 ].push( [ uvs[ 0 ], uvs[ 1 ], uvs[ 3 ] ] );
 		scope.faceVertexUvs[ 0 ].push( [ uvs[ 1 ], uvs[ 2 ], uvs[ 3 ] ] );

	}

};

THREE.ExtrudeGeometry.WorldUVGenerator = {

	generateTopUV: function ( geometry, indexA, indexB, indexC ) {

		var vertices = geometry.vertices;

		var a = vertices[ indexA ];
		var b = vertices[ indexB ];
		var c = vertices[ indexC ];

		return [
			new THREE.Vector2( a.x, a.y ),
			new THREE.Vector2( b.x, b.y ),
			new THREE.Vector2( c.x, c.y )
		];

	},

	generateSideWallUV: function ( geometry, indexA, indexB, indexC, indexD ) {

		var vertices = geometry.vertices;

		var a = vertices[ indexA ];
		var b = vertices[ indexB ];
		var c = vertices[ indexC ];
		var d = vertices[ indexD ];

		if ( Math.abs( a.y - b.y ) < 0.01 ) {
			return [
				new THREE.Vector2( a.x, 1 - a.z ),
				new THREE.Vector2( b.x, 1 - b.z ),
				new THREE.Vector2( c.x, 1 - c.z ),
				new THREE.Vector2( d.x, 1 - d.z )
			];
		} else {
			return [
				new THREE.Vector2( a.y, 1 - a.z ),
				new THREE.Vector2( b.y, 1 - b.z ),
				new THREE.Vector2( c.y, 1 - c.z ),
				new THREE.Vector2( d.y, 1 - d.z )
			];
		}
	}
};

// File:src/extras/geometries/ShapeGeometry.js

/**
 * @author jonobr1 / http://jonobr1.com
 *
 * Creates a one-sided polygonal geometry from a path shape. Similar to
 * ExtrudeGeometry.
 *
 * parameters = {
 *
 *	curveSegments: <int>, // number of points on the curves. NOT USED AT THE MOMENT.
 *
 *	material: <int> // material index for front and back faces
 *	uvGenerator: <Object> // object that provides UV generator functions
 *
 * }
 **/

THREE.ShapeGeometry = function ( shapes, options ) {

	THREE.Geometry.call( this );

	this.type = 'ShapeGeometry';

	if ( shapes instanceof Array === false ) shapes = [ shapes ];

	this.addShapeList( shapes, options );

	this.computeFaceNormals();

};

THREE.ShapeGeometry.prototype = Object.create( THREE.Geometry.prototype );

/**
 * Add an array of shapes to THREE.ShapeGeometry.
 */
THREE.ShapeGeometry.prototype.addShapeList = function ( shapes, options ) {

	for ( var i = 0, l = shapes.length; i < l; i ++ ) {

		this.addShape( shapes[ i ], options );

	}

	return this;

};

/**
 * Adds a shape to THREE.ShapeGeometry, based on THREE.ExtrudeGeometry.
 */
THREE.ShapeGeometry.prototype.addShape = function ( shape, options ) {

	if ( options === undefined ) options = {};
	var curveSegments = options.curveSegments !== undefined ? options.curveSegments : 12;

	var material = options.material;
	var uvgen = options.UVGenerator === undefined ? THREE.ExtrudeGeometry.WorldUVGenerator : options.UVGenerator;

	//

	var i, l, hole, s;

	var shapesOffset = this.vertices.length;
	var shapePoints = shape.extractPoints( curveSegments );

	var vertices = shapePoints.shape;
	var holes = shapePoints.holes;

	var reverse = ! THREE.Shape.Utils.isClockWise( vertices );

	if ( reverse ) {

		vertices = vertices.reverse();

		// Maybe we should also check if holes are in the opposite direction, just to be safe...

		for ( i = 0, l = holes.length; i < l; i ++ ) {

			hole = holes[ i ];

			if ( THREE.Shape.Utils.isClockWise( hole ) ) {

				holes[ i ] = hole.reverse();

			}

		}

		reverse = false;

	}

	var faces = THREE.Shape.Utils.triangulateShape( vertices, holes );

	// Vertices

	var contour = vertices;

	for ( i = 0, l = holes.length; i < l; i ++ ) {

		hole = holes[ i ];
		vertices = vertices.concat( hole );

	}

	//

	var vert, vlen = vertices.length;
	var face, flen = faces.length;
	var cont, clen = contour.length;

	for ( i = 0; i < vlen; i ++ ) {

		vert = vertices[ i ];

		this.vertices.push( new THREE.Vector3( vert.x, vert.y, 0 ) );

	}

	for ( i = 0; i < flen; i ++ ) {

		face = faces[ i ];

		var a = face[ 0 ] + shapesOffset;
		var b = face[ 1 ] + shapesOffset;
		var c = face[ 2 ] + shapesOffset;

		this.faces.push( new THREE.Face3( a, b, c, null, null, material ) );
		this.faceVertexUvs[ 0 ].push( uvgen.generateTopUV( this, a, b, c ) );

	}

};

// File:src/extras/geometries/LatheGeometry.js

/**
 * @author astrodud / http://astrodud.isgreat.org/
 * @author zz85 / https://github.com/zz85
 * @author bhouston / http://exocortex.com
 */

// points - to create a closed torus, one must use a set of points 
//    like so: [ a, b, c, d, a ], see first is the same as last.
// segments - the number of circumference segments to create
// phiStart - the starting radian
// phiLength - the radian (0 to 2*PI) range of the lathed section
//    2*pi is a closed lathe, less than 2PI is a portion.

THREE.LatheGeometry = function ( points, segments, phiStart, phiLength ) {

	THREE.Geometry.call( this );

	this.type = 'LatheGeometry';

	this.parameters = {
		points: points,
		segments: segments,
		phiStart: phiStart,
		phiLength: phiLength
	};

	segments = segments || 12;
	phiStart = phiStart || 0;
	phiLength = phiLength || 2 * Math.PI;

	var inversePointLength = 1.0 / ( points.length - 1 );
	var inverseSegments = 1.0 / segments;

	for ( var i = 0, il = segments; i <= il; i ++ ) {

		var phi = phiStart + i * inverseSegments * phiLength;

		var c = Math.cos( phi ),
			s = Math.sin( phi );

		for ( var j = 0, jl = points.length; j < jl; j ++ ) {

			var pt = points[ j ];

			var vertex = new THREE.Vector3();

			vertex.x = c * pt.x - s * pt.y;
			vertex.y = s * pt.x + c * pt.y;
			vertex.z = pt.z;

			this.vertices.push( vertex );

		}

	}

	var np = points.length;

	for ( var i = 0, il = segments; i < il; i ++ ) {

		for ( var j = 0, jl = points.length - 1; j < jl; j ++ ) {

			var base = j + np * i;
			var a = base;
			var b = base + np;
			var c = base + 1 + np;
			var d = base + 1;

			var u0 = i * inverseSegments;
			var v0 = j * inversePointLength;
			var u1 = u0 + inverseSegments;
			var v1 = v0 + inversePointLength;

			this.faces.push( new THREE.Face3( a, b, d ) );

			this.faceVertexUvs[ 0 ].push( [

				new THREE.Vector2( u0, v0 ),
				new THREE.Vector2( u1, v0 ),
				new THREE.Vector2( u0, v1 )

			] );

			this.faces.push( new THREE.Face3( b, c, d ) );

			this.faceVertexUvs[ 0 ].push( [

				new THREE.Vector2( u1, v0 ),
				new THREE.Vector2( u1, v1 ),
				new THREE.Vector2( u0, v1 )

			] );


		}

	}

	this.mergeVertices();
	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.LatheGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/PlaneGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
 */

THREE.PlaneGeometry = function ( width, height, widthSegments, heightSegments ) {

	console.info( 'THREE.PlaneGeometry: Consider using THREE.PlaneBufferGeometry for lower memory footprint.' );

	THREE.Geometry.call( this );

	this.type = 'PlaneGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	this.fromBufferGeometry( new THREE.PlaneBufferGeometry( width, height, widthSegments, heightSegments ) );

};

THREE.PlaneGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/PlaneBufferGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 * based on http://papervision3d.googlecode.com/svn/trunk/as3/trunk/src/org/papervision3d/objects/primitives/Plane.as
 */

THREE.PlaneBufferGeometry = function ( width, height, widthSegments, heightSegments ) {

	THREE.BufferGeometry.call( this );

	this.type = 'PlaneBufferGeometry';

	this.parameters = {
		width: width,
		height: height,
		widthSegments: widthSegments,
		heightSegments: heightSegments
	};

	var width_half = width / 2;
	var height_half = height / 2;

	var gridX = widthSegments || 1;
	var gridY = heightSegments || 1;

	var gridX1 = gridX + 1;
	var gridY1 = gridY + 1;

	var segment_width = width / gridX;
	var segment_height = height / gridY;

	var vertices = new Float32Array( gridX1 * gridY1 * 3 );
	var normals = new Float32Array( gridX1 * gridY1 * 3 );
	var uvs = new Float32Array( gridX1 * gridY1 * 2 );

	var offset = 0;
	var offset2 = 0;

	for ( var iy = 0; iy < gridY1; iy ++ ) {

		var y = iy * segment_height - height_half;

		for ( var ix = 0; ix < gridX1; ix ++ ) {

			var x = ix * segment_width - width_half;

			vertices[ offset     ] = x;
			vertices[ offset + 1 ] = - y;

			normals[ offset + 2 ] = 1;

			uvs[ offset2     ] = ix / gridX;
			uvs[ offset2 + 1 ] = 1 - ( iy / gridY );

			offset += 3;
			offset2 += 2;

		}

	}

	offset = 0;

	var indices = new ( ( vertices.length / 3 ) > 65535 ? Uint32Array : Uint16Array )( gridX * gridY * 6 );

	for ( var iy = 0; iy < gridY; iy ++ ) {

		for ( var ix = 0; ix < gridX; ix ++ ) {

			var a = ix + gridX1 * iy;
			var b = ix + gridX1 * ( iy + 1 );
			var c = ( ix + 1 ) + gridX1 * ( iy + 1 );
			var d = ( ix + 1 ) + gridX1 * iy;

			indices[ offset     ] = a;
			indices[ offset + 1 ] = b;
			indices[ offset + 2 ] = d;

			indices[ offset + 3 ] = b;
			indices[ offset + 4 ] = c;
			indices[ offset + 5 ] = d;

			offset += 6;

		}

	}

	this.addAttribute( 'index', new THREE.BufferAttribute( indices, 1 ) );
	this.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
	this.addAttribute( 'normal', new THREE.BufferAttribute( normals, 3 ) );
	this.addAttribute( 'uv', new THREE.BufferAttribute( uvs, 2 ) );

};

THREE.PlaneBufferGeometry.prototype = Object.create( THREE.BufferGeometry.prototype );

// File:src/extras/geometries/RingGeometry.js

/**
 * @author Kaleb Murphy
 */

THREE.RingGeometry = function ( innerRadius, outerRadius, thetaSegments, phiSegments, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.type = 'RingGeometry';

	this.parameters = {
		innerRadius: innerRadius,
		outerRadius: outerRadius,
		thetaSegments: thetaSegments,
		phiSegments: phiSegments,
		thetaStart: thetaStart,
		thetaLength: thetaLength
	};

	innerRadius = innerRadius || 0;
	outerRadius = outerRadius || 50;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI * 2;

	thetaSegments = thetaSegments !== undefined ? Math.max( 3, thetaSegments ) : 8;
	phiSegments = phiSegments !== undefined ? Math.max( 1, phiSegments ) : 8;

	var i, o, uvs = [], radius = innerRadius, radiusStep = ( ( outerRadius - innerRadius ) / phiSegments );

	for ( i = 0; i < phiSegments + 1; i ++ ) { // concentric circles inside ring

		for ( o = 0; o < thetaSegments + 1; o ++ ) { // number of segments per circle

			var vertex = new THREE.Vector3();
			var segment = thetaStart + o / thetaSegments * thetaLength;
			vertex.x = radius * Math.cos( segment );
			vertex.y = radius * Math.sin( segment );

			this.vertices.push( vertex );
			uvs.push( new THREE.Vector2( ( vertex.x / outerRadius + 1 ) / 2, ( vertex.y / outerRadius + 1 ) / 2 ) );
		}

		radius += radiusStep;

	}

	var n = new THREE.Vector3( 0, 0, 1 );

	for ( i = 0; i < phiSegments; i ++ ) { // concentric circles inside ring

		var thetaSegment = i * (thetaSegments + 1);

		for ( o = 0; o < thetaSegments ; o ++ ) { // number of segments per circle

			var segment = o + thetaSegment;

			var v1 = segment;
			var v2 = segment + thetaSegments + 1;
			var v3 = segment + thetaSegments + 2;

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

			v1 = segment;
			v2 = segment + thetaSegments + 2;
			v3 = segment + 1;

			this.faces.push( new THREE.Face3( v1, v2, v3, [ n.clone(), n.clone(), n.clone() ] ) );
			this.faceVertexUvs[ 0 ].push( [ uvs[ v1 ].clone(), uvs[ v2 ].clone(), uvs[ v3 ].clone() ]);

		}
	}

	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.RingGeometry.prototype = Object.create( THREE.Geometry.prototype );


// File:src/extras/geometries/SphereGeometry.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.SphereGeometry = function ( radius, widthSegments, heightSegments, phiStart, phiLength, thetaStart, thetaLength ) {

	THREE.Geometry.call( this );

	this.type = 'SphereGeometry';

	this.parameters = {
		radius: radius,
		widthSegments: widthSegments,
		heightSegments: heightSegments,
		phiStart: phiStart,
		phiLength: phiLength,
		thetaStart: thetaStart,
		thetaLength: thetaLength 
	};

	radius = radius || 50;

	widthSegments = Math.max( 3, Math.floor( widthSegments ) || 8 );
	heightSegments = Math.max( 2, Math.floor( heightSegments ) || 6 );

	phiStart = phiStart !== undefined ? phiStart : 0;
	phiLength = phiLength !== undefined ? phiLength : Math.PI * 2;

	thetaStart = thetaStart !== undefined ? thetaStart : 0;
	thetaLength = thetaLength !== undefined ? thetaLength : Math.PI;

	var x, y, vertices = [], uvs = [];

	for ( y = 0; y <= heightSegments; y ++ ) {

		var verticesRow = [];
		var uvsRow = [];

		for ( x = 0; x <= widthSegments; x ++ ) {

			var u = x / widthSegments;
			var v = y / heightSegments;

			var vertex = new THREE.Vector3();
			vertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );
			vertex.y = radius * Math.cos( thetaStart + v * thetaLength );
			vertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );

			this.vertices.push( vertex );

			verticesRow.push( this.vertices.length - 1 );
			uvsRow.push( new THREE.Vector2( u, 1 - v ) );

		}

		vertices.push( verticesRow );
		uvs.push( uvsRow );

	}

	for ( y = 0; y < heightSegments; y ++ ) {

		for ( x = 0; x < widthSegments; x ++ ) {

			var v1 = vertices[ y ][ x + 1 ];
			var v2 = vertices[ y ][ x ];
			var v3 = vertices[ y + 1 ][ x ];
			var v4 = vertices[ y + 1 ][ x + 1 ];

			var n1 = this.vertices[ v1 ].clone().normalize();
			var n2 = this.vertices[ v2 ].clone().normalize();
			var n3 = this.vertices[ v3 ].clone().normalize();
			var n4 = this.vertices[ v4 ].clone().normalize();

			var uv1 = uvs[ y ][ x + 1 ].clone();
			var uv2 = uvs[ y ][ x ].clone();
			var uv3 = uvs[ y + 1 ][ x ].clone();
			var uv4 = uvs[ y + 1 ][ x + 1 ].clone();

			if ( Math.abs( this.vertices[ v1 ].y ) === radius ) {

				uv1.x = ( uv1.x + uv2.x ) / 2;
				this.faces.push( new THREE.Face3( v1, v3, v4, [ n1, n3, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv3, uv4 ] );

			} else if ( Math.abs( this.vertices[ v3 ].y ) === radius ) {

				uv3.x = ( uv3.x + uv4.x ) / 2;
				this.faces.push( new THREE.Face3( v1, v2, v3, [ n1, n2, n3 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv3 ] );

			} else {

				this.faces.push( new THREE.Face3( v1, v2, v4, [ n1, n2, n4 ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv1, uv2, uv4 ] );

				this.faces.push( new THREE.Face3( v2, v3, v4, [ n2.clone(), n3, n4.clone() ] ) );
				this.faceVertexUvs[ 0 ].push( [ uv2.clone(), uv3, uv4.clone() ] );

			}

		}

	}

	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );

};

THREE.SphereGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/TextGeometry.js

/**
 * @author zz85 / http://www.lab4games.net/zz85/blog
 * @author alteredq / http://alteredqualia.com/
 *
 * For creating 3D text geometry in three.js
 *
 * Text = 3D Text
 *
 * parameters = {
 *  size: 			<float>, 	// size of the text
 *  height: 		<float>, 	// thickness to extrude text
 *  curveSegments: 	<int>,		// number of points on the curves
 *
 *  font: 			<string>,		// font name
 *  weight: 		<string>,		// font weight (normal, bold)
 *  style: 			<string>,		// font style  (normal, italics)
 *
 *  bevelEnabled:	<bool>,			// turn on bevel
 *  bevelThickness: <float>, 		// how deep into text bevel goes
 *  bevelSize:		<float>, 		// how far from text outline is bevel
 *  }
 *
 */

/*	Usage Examples

	// TextGeometry wrapper

	var text3d = new TextGeometry( text, options );

	// Complete manner

	var textShapes = THREE.FontUtils.generateShapes( text, options );
	var text3d = new ExtrudeGeometry( textShapes, options );

*/


THREE.TextGeometry = function ( text, parameters ) {

	parameters = parameters || {};

	var textShapes = THREE.FontUtils.generateShapes( text, parameters );

	// translate parameters to ExtrudeGeometry API

	parameters.amount = parameters.height !== undefined ? parameters.height : 50;

	// defaults

	if ( parameters.bevelThickness === undefined ) parameters.bevelThickness = 10;
	if ( parameters.bevelSize === undefined ) parameters.bevelSize = 8;
	if ( parameters.bevelEnabled === undefined ) parameters.bevelEnabled = false;

	THREE.ExtrudeGeometry.call( this, textShapes, parameters );

	this.type = 'TextGeometry';

};

THREE.TextGeometry.prototype = Object.create( THREE.ExtrudeGeometry.prototype );

// File:src/extras/geometries/TorusGeometry.js

/**
 * @author oosmoxiecode
 * @author mrdoob / http://mrdoob.com/
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3DLite/src/away3dlite/primitives/Torus.as?r=2888
 */

THREE.TorusGeometry = function ( radius, tube, radialSegments, tubularSegments, arc ) {

	THREE.Geometry.call( this );

	this.type = 'TorusGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		arc: arc
	};

	radius = radius || 100;
	tube = tube || 40;
	radialSegments = radialSegments || 8;
	tubularSegments = tubularSegments || 6;
	arc = arc || Math.PI * 2;

	var center = new THREE.Vector3(), uvs = [], normals = [];

	for ( var j = 0; j <= radialSegments; j ++ ) {

		for ( var i = 0; i <= tubularSegments; i ++ ) {

			var u = i / tubularSegments * arc;
			var v = j / radialSegments * Math.PI * 2;

			center.x = radius * Math.cos( u );
			center.y = radius * Math.sin( u );

			var vertex = new THREE.Vector3();
			vertex.x = ( radius + tube * Math.cos( v ) ) * Math.cos( u );
			vertex.y = ( radius + tube * Math.cos( v ) ) * Math.sin( u );
			vertex.z = tube * Math.sin( v );

			this.vertices.push( vertex );

			uvs.push( new THREE.Vector2( i / tubularSegments, j / radialSegments ) );
			normals.push( vertex.clone().sub( center ).normalize() );

		}

	}

	for ( var j = 1; j <= radialSegments; j ++ ) {

		for ( var i = 1; i <= tubularSegments; i ++ ) {

			var a = ( tubularSegments + 1 ) * j + i - 1;
			var b = ( tubularSegments + 1 ) * ( j - 1 ) + i - 1;
			var c = ( tubularSegments + 1 ) * ( j - 1 ) + i;
			var d = ( tubularSegments + 1 ) * j + i;

			var face = new THREE.Face3( a, b, d, [ normals[ a ].clone(), normals[ b ].clone(), normals[ d ].clone() ] );
			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uvs[ a ].clone(), uvs[ b ].clone(), uvs[ d ].clone() ] );

			face = new THREE.Face3( b, c, d, [ normals[ b ].clone(), normals[ c ].clone(), normals[ d ].clone() ] );
			this.faces.push( face );
			this.faceVertexUvs[ 0 ].push( [ uvs[ b ].clone(), uvs[ c ].clone(), uvs[ d ].clone() ] );

		}

	}

	this.computeFaceNormals();

};

THREE.TorusGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/TorusKnotGeometry.js

/**
 * @author oosmoxiecode
 * based on http://code.google.com/p/away3d/source/browse/trunk/fp10/Away3D/src/away3d/primitives/TorusKnot.as?spec=svn2473&r=2473
 */

THREE.TorusKnotGeometry = function ( radius, tube, radialSegments, tubularSegments, p, q, heightScale ) {

	THREE.Geometry.call( this );

	this.type = 'TorusKnotGeometry';

	this.parameters = {
		radius: radius,
		tube: tube,
		radialSegments: radialSegments,
		tubularSegments: tubularSegments,
		p: p,
		q: q,
		heightScale: heightScale
	};

	radius = radius || 100;
	tube = tube || 40;
	radialSegments = radialSegments || 64;
	tubularSegments = tubularSegments || 8;
	p = p || 2;
	q = q || 3;
	heightScale = heightScale || 1;
	
	var grid = new Array( radialSegments );
	var tang = new THREE.Vector3();
	var n = new THREE.Vector3();
	var bitan = new THREE.Vector3();

	for ( var i = 0; i < radialSegments; ++ i ) {

		grid[ i ] = new Array( tubularSegments );
		var u = i / radialSegments * 2 * p * Math.PI;
		var p1 = getPos( u, q, p, radius, heightScale );
		var p2 = getPos( u + 0.01, q, p, radius, heightScale );
		tang.subVectors( p2, p1 );
		n.addVectors( p2, p1 );

		bitan.crossVectors( tang, n );
		n.crossVectors( bitan, tang );
		bitan.normalize();
		n.normalize();

		for ( var j = 0; j < tubularSegments; ++ j ) {

			var v = j / tubularSegments * 2 * Math.PI;
			var cx = - tube * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			var cy = tube * Math.sin( v );

			var pos = new THREE.Vector3();
			pos.x = p1.x + cx * n.x + cy * bitan.x;
			pos.y = p1.y + cx * n.y + cy * bitan.y;
			pos.z = p1.z + cx * n.z + cy * bitan.z;

			grid[ i ][ j ] = this.vertices.push( pos ) - 1;

		}

	}

	for ( var i = 0; i < radialSegments; ++ i ) {

		for ( var j = 0; j < tubularSegments; ++ j ) {

			var ip = ( i + 1 ) % radialSegments;
			var jp = ( j + 1 ) % tubularSegments;

			var a = grid[ i ][ j ];
			var b = grid[ ip ][ j ];
			var c = grid[ ip ][ jp ];
			var d = grid[ i ][ jp ];

			var uva = new THREE.Vector2( i / radialSegments, j / tubularSegments );
			var uvb = new THREE.Vector2( ( i + 1 ) / radialSegments, j / tubularSegments );
			var uvc = new THREE.Vector2( ( i + 1 ) / radialSegments, ( j + 1 ) / tubularSegments );
			var uvd = new THREE.Vector2( i / radialSegments, ( j + 1 ) / tubularSegments );

			this.faces.push( new THREE.Face3( a, b, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

			this.faces.push( new THREE.Face3( b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

		}
	}

	this.computeFaceNormals();
	this.computeVertexNormals();

	function getPos( u, in_q, in_p, radius, heightScale ) {

		var cu = Math.cos( u );
		var su = Math.sin( u );
		var quOverP = in_q / in_p * u;
		var cs = Math.cos( quOverP );

		var tx = radius * ( 2 + cs ) * 0.5 * cu;
		var ty = radius * ( 2 + cs ) * su * 0.5;
		var tz = heightScale * radius * Math.sin( quOverP ) * 0.5;

		return new THREE.Vector3( tx, ty, tz );

	}

};

THREE.TorusKnotGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/TubeGeometry.js

/**
 * @author WestLangley / https://github.com/WestLangley
 * @author zz85 / https://github.com/zz85
 * @author miningold / https://github.com/miningold
 *
 * Modified from the TorusKnotGeometry by @oosmoxiecode
 *
 * Creates a tube which extrudes along a 3d spline
 *
 * Uses parallel transport frames as described in
 * http://www.cs.indiana.edu/pub/techreports/TR425.pdf
 */

THREE.TubeGeometry = function ( path, segments, radius, radialSegments, closed ) {

	THREE.Geometry.call( this );

	this.type = 'TubeGeometry';

	this.parameters = {
		path: path,
		segments: segments,
		radius: radius,
		radialSegments: radialSegments,
		closed: closed
	};

	segments = segments || 64;
	radius = radius || 1;
	radialSegments = radialSegments || 8;
	closed = closed || false;

	var grid = [];

	var scope = this,

		tangent,
		normal,
		binormal,

		numpoints = segments + 1,

		x, y, z,
		tx, ty, tz,
		u, v,

		cx, cy,
		pos, pos2 = new THREE.Vector3(),
		i, j,
		ip, jp,
		a, b, c, d,
		uva, uvb, uvc, uvd;

	var frames = new THREE.TubeGeometry.FrenetFrames( path, segments, closed ),
		tangents = frames.tangents,
		normals = frames.normals,
		binormals = frames.binormals;

	// proxy internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	function vert( x, y, z ) {

		return scope.vertices.push( new THREE.Vector3( x, y, z ) ) - 1;

	}

	// consruct the grid

	for ( i = 0; i < numpoints; i ++ ) {

		grid[ i ] = [];

		u = i / ( numpoints - 1 );

		pos = path.getPointAt( u );

		tangent = tangents[ i ];
		normal = normals[ i ];
		binormal = binormals[ i ];

		for ( j = 0; j < radialSegments; j ++ ) {

			v = j / radialSegments * 2 * Math.PI;

			cx = - radius * Math.cos( v ); // TODO: Hack: Negating it so it faces outside.
			cy = radius * Math.sin( v );

			pos2.copy( pos );
			pos2.x += cx * normal.x + cy * binormal.x;
			pos2.y += cx * normal.y + cy * binormal.y;
			pos2.z += cx * normal.z + cy * binormal.z;

			grid[ i ][ j ] = vert( pos2.x, pos2.y, pos2.z );

		}
	}


	// construct the mesh

	for ( i = 0; i < segments; i ++ ) {

		for ( j = 0; j < radialSegments; j ++ ) {

			ip = ( closed ) ? (i + 1) % segments : i + 1;
			jp = (j + 1) % radialSegments;

			a = grid[ i ][ j ];		// *** NOT NECESSARILY PLANAR ! ***
			b = grid[ ip ][ j ];
			c = grid[ ip ][ jp ];
			d = grid[ i ][ jp ];

			uva = new THREE.Vector2( i / segments, j / radialSegments );
			uvb = new THREE.Vector2( ( i + 1 ) / segments, j / radialSegments );
			uvc = new THREE.Vector2( ( i + 1 ) / segments, ( j + 1 ) / radialSegments );
			uvd = new THREE.Vector2( i / segments, ( j + 1 ) / radialSegments );

			this.faces.push( new THREE.Face3( a, b, d ) );
			this.faceVertexUvs[ 0 ].push( [ uva, uvb, uvd ] );

			this.faces.push( new THREE.Face3( b, c, d ) );
			this.faceVertexUvs[ 0 ].push( [ uvb.clone(), uvc, uvd.clone() ] );

		}
	}

	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.TubeGeometry.prototype = Object.create( THREE.Geometry.prototype );


// For computing of Frenet frames, exposing the tangents, normals and binormals the spline
THREE.TubeGeometry.FrenetFrames = function ( path, segments, closed ) {

	var	tangent = new THREE.Vector3(),
		normal = new THREE.Vector3(),
		binormal = new THREE.Vector3(),

		tangents = [],
		normals = [],
		binormals = [],

		vec = new THREE.Vector3(),
		mat = new THREE.Matrix4(),

		numpoints = segments + 1,
		theta,
		epsilon = 0.0001,
		smallest,

		tx, ty, tz,
		i, u, v;


	// expose internals
	this.tangents = tangents;
	this.normals = normals;
	this.binormals = binormals;

	// compute the tangent vectors for each segment on the path

	for ( i = 0; i < numpoints; i ++ ) {

		u = i / ( numpoints - 1 );

		tangents[ i ] = path.getTangentAt( u );
		tangents[ i ].normalize();

	}

	initialNormal3();

	/*
	function initialNormal1(lastBinormal) {
		// fixed start binormal. Has dangers of 0 vectors
		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		if (lastBinormal===undefined) lastBinormal = new THREE.Vector3( 0, 0, 1 );
		normals[ 0 ].crossVectors( lastBinormal, tangents[ 0 ] ).normalize();
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();
	}

	function initialNormal2() {

		// This uses the Frenet-Serret formula for deriving binormal
		var t2 = path.getTangentAt( epsilon );

		normals[ 0 ] = new THREE.Vector3().subVectors( t2, tangents[ 0 ] ).normalize();
		binormals[ 0 ] = new THREE.Vector3().crossVectors( tangents[ 0 ], normals[ 0 ] );

		normals[ 0 ].crossVectors( binormals[ 0 ], tangents[ 0 ] ).normalize(); // last binormal x tangent
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] ).normalize();

	}
	*/

	function initialNormal3() {
		// select an initial normal vector perpenicular to the first tangent vector,
		// and in the direction of the smallest tangent xyz component

		normals[ 0 ] = new THREE.Vector3();
		binormals[ 0 ] = new THREE.Vector3();
		smallest = Number.MAX_VALUE;
		tx = Math.abs( tangents[ 0 ].x );
		ty = Math.abs( tangents[ 0 ].y );
		tz = Math.abs( tangents[ 0 ].z );

		if ( tx <= smallest ) {
			smallest = tx;
			normal.set( 1, 0, 0 );
		}

		if ( ty <= smallest ) {
			smallest = ty;
			normal.set( 0, 1, 0 );
		}

		if ( tz <= smallest ) {
			normal.set( 0, 0, 1 );
		}

		vec.crossVectors( tangents[ 0 ], normal ).normalize();

		normals[ 0 ].crossVectors( tangents[ 0 ], vec );
		binormals[ 0 ].crossVectors( tangents[ 0 ], normals[ 0 ] );
	}


	// compute the slowly-varying normal and binormal vectors for each segment on the path

	for ( i = 1; i < numpoints; i ++ ) {

		normals[ i ] = normals[ i-1 ].clone();

		binormals[ i ] = binormals[ i-1 ].clone();

		vec.crossVectors( tangents[ i-1 ], tangents[ i ] );

		if ( vec.length() > epsilon ) {

			vec.normalize();

			theta = Math.acos( THREE.Math.clamp( tangents[ i-1 ].dot( tangents[ i ] ), - 1, 1 ) ); // clamp for floating pt errors

			normals[ i ].applyMatrix4( mat.makeRotationAxis( vec, theta ) );

		}

		binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

	}


	// if the curve is closed, postprocess the vectors so the first and last normal vectors are the same

	if ( closed ) {

		theta = Math.acos( THREE.Math.clamp( normals[ 0 ].dot( normals[ numpoints-1 ] ), - 1, 1 ) );
		theta /= ( numpoints - 1 );

		if ( tangents[ 0 ].dot( vec.crossVectors( normals[ 0 ], normals[ numpoints-1 ] ) ) > 0 ) {

			theta = - theta;

		}

		for ( i = 1; i < numpoints; i ++ ) {

			// twist a little...
			normals[ i ].applyMatrix4( mat.makeRotationAxis( tangents[ i ], theta * i ) );
			binormals[ i ].crossVectors( tangents[ i ], normals[ i ] );

		}

	}
};

// File:src/extras/geometries/PolyhedronGeometry.js

/**
 * @author clockworkgeek / https://github.com/clockworkgeek
 * @author timothypratley / https://github.com/timothypratley
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.PolyhedronGeometry = function ( vertices, indices, radius, detail ) {

	THREE.Geometry.call( this );

	this.type = 'PolyhedronGeometry';

	this.parameters = {
		vertices: vertices,
		indices: indices,
		radius: radius,
		detail: detail
	};

	radius = radius || 1;
	detail = detail || 0;

	var that = this;

	for ( var i = 0, l = vertices.length; i < l; i += 3 ) {

		prepare( new THREE.Vector3( vertices[ i ], vertices[ i + 1 ], vertices[ i + 2 ] ) );

	}

	var midpoints = [], p = this.vertices;

	var faces = [];

	for ( var i = 0, j = 0, l = indices.length; i < l; i += 3, j ++ ) {

		var v1 = p[ indices[ i     ] ];
		var v2 = p[ indices[ i + 1 ] ];
		var v3 = p[ indices[ i + 2 ] ];

		faces[ j ] = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );

	}

	var centroid = new THREE.Vector3();

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		subdivide( faces[ i ], detail );

	}


	// Handle case when face straddles the seam

	for ( var i = 0, l = this.faceVertexUvs[ 0 ].length; i < l; i ++ ) {

		var uvs = this.faceVertexUvs[ 0 ][ i ];

		var x0 = uvs[ 0 ].x;
		var x1 = uvs[ 1 ].x;
		var x2 = uvs[ 2 ].x;

		var max = Math.max( x0, Math.max( x1, x2 ) );
		var min = Math.min( x0, Math.min( x1, x2 ) );

		if ( max > 0.9 && min < 0.1 ) { // 0.9 is somewhat arbitrary

			if ( x0 < 0.2 ) uvs[ 0 ].x += 1;
			if ( x1 < 0.2 ) uvs[ 1 ].x += 1;
			if ( x2 < 0.2 ) uvs[ 2 ].x += 1;

		}

	}


	// Apply radius

	for ( var i = 0, l = this.vertices.length; i < l; i ++ ) {

		this.vertices[ i ].multiplyScalar( radius );

	}


	// Merge vertices

	this.mergeVertices();

	this.computeFaceNormals();

	this.boundingSphere = new THREE.Sphere( new THREE.Vector3(), radius );


	// Project vector onto sphere's surface

	function prepare( vector ) {

		var vertex = vector.normalize().clone();
		vertex.index = that.vertices.push( vertex ) - 1;

		// Texture coords are equivalent to map coords, calculate angle and convert to fraction of a circle.

		var u = azimuth( vector ) / 2 / Math.PI + 0.5;
		var v = inclination( vector ) / Math.PI + 0.5;
		vertex.uv = new THREE.Vector2( u, 1 - v );

		return vertex;

	}


	// Approximate a curved face with recursively sub-divided triangles.

	function make( v1, v2, v3 ) {

		var face = new THREE.Face3( v1.index, v2.index, v3.index, [ v1.clone(), v2.clone(), v3.clone() ] );
		that.faces.push( face );

		centroid.copy( v1 ).add( v2 ).add( v3 ).divideScalar( 3 );

		var azi = azimuth( centroid );

		that.faceVertexUvs[ 0 ].push( [
			correctUV( v1.uv, v1, azi ),
			correctUV( v2.uv, v2, azi ),
			correctUV( v3.uv, v3, azi )
		] );

	}


	// Analytically subdivide a face to the required detail level.

	function subdivide( face, detail ) {

		var cols = Math.pow(2, detail);
		var cells = Math.pow(4, detail);
		var a = prepare( that.vertices[ face.a ] );
		var b = prepare( that.vertices[ face.b ] );
		var c = prepare( that.vertices[ face.c ] );
		var v = [];

		// Construct all of the vertices for this subdivision.

		for ( var i = 0 ; i <= cols; i ++ ) {

			v[ i ] = [];

			var aj = prepare( a.clone().lerp( c, i / cols ) );
			var bj = prepare( b.clone().lerp( c, i / cols ) );
			var rows = cols - i;

			for ( var j = 0; j <= rows; j ++) {

				if ( j == 0 && i == cols ) {

					v[ i ][ j ] = aj;

				} else {

					v[ i ][ j ] = prepare( aj.clone().lerp( bj, j / rows ) );

				}

			}

		}

		// Construct all of the faces.

		for ( var i = 0; i < cols ; i ++ ) {

			for ( var j = 0; j < 2 * (cols - i) - 1; j ++ ) {

				var k = Math.floor( j / 2 );

				if ( j % 2 == 0 ) {

					make(
						v[ i ][ k + 1],
						v[ i + 1 ][ k ],
						v[ i ][ k ]
					);

				} else {

					make(
						v[ i ][ k + 1 ],
						v[ i + 1][ k + 1],
						v[ i + 1 ][ k ]
					);

				}

			}

		}

	}


	// Angle around the Y axis, counter-clockwise when looking from above.

	function azimuth( vector ) {

		return Math.atan2( vector.z, - vector.x );

	}


	// Angle above the XZ plane.

	function inclination( vector ) {

		return Math.atan2( - vector.y, Math.sqrt( ( vector.x * vector.x ) + ( vector.z * vector.z ) ) );

	}


	// Texture fixing helper. Spheres have some odd behaviours.

	function correctUV( uv, vector, azimuth ) {

		if ( ( azimuth < 0 ) && ( uv.x === 1 ) ) uv = new THREE.Vector2( uv.x - 1, uv.y );
		if ( ( vector.x === 0 ) && ( vector.z === 0 ) ) uv = new THREE.Vector2( azimuth / 2 / Math.PI + 0.5, uv.y );
		return uv.clone();

	}


};

THREE.PolyhedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/DodecahedronGeometry.js

/**
 * @author Abe Pazos / https://hamoid.com
 */

THREE.DodecahedronGeometry = function ( radius, detail ) {

	this.parameters = {
		radius: radius,
		detail: detail
	};

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;
	var r = 1 / t;

	var vertices = [

		// (±1, ±1, ±1)
		-1, -1, -1,    -1, -1,  1,
		-1,  1, -1,    -1,  1,  1,
		 1, -1, -1,     1, -1,  1,
		 1,  1, -1,     1,  1,  1,

		// (0, ±1/φ, ±φ)
		 0, -r, -t,     0, -r,  t,
		 0,  r, -t,     0,  r,  t,

		// (±1/φ, ±φ, 0)
		-r, -t,  0,    -r,  t,  0,
		 r, -t,  0,     r,  t,  0,

		// (±φ, 0, ±1/φ)
		-t,  0, -r,     t,  0, -r,
		-t,  0,  r,     t,  0,  r
	];

	var indices = [
		 3, 11,  7,      3,  7, 15,      3, 15, 13,
		 7, 19, 17,      7, 17,  6,      7,  6, 15,
		17,  4,  8,     17,  8, 10,     17, 10,  6,
		 8,  0, 16,      8, 16,  2,      8,  2, 10,
		 0, 12,  1,      0,  1, 18,      0, 18, 16,
		 6, 10,  2,      6,  2, 13,      6, 13, 15,
		 2, 16, 18,      2, 18,  3,      2,  3, 13,
		18,  1,  9,     18,  9, 11,     18, 11,  3,
		 4, 14, 12,      4, 12,  0,      4,  0,  8,
		11,  9,  5,     11,  5, 19,     11, 19,  7,
		19,  5, 14,     19, 14,  4,     19,  4, 17,
		 1, 12, 14,      1, 14,  5,      1,  5,  9
	];

	THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

};

THREE.DodecahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/IcosahedronGeometry.js

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.IcosahedronGeometry = function ( radius, detail ) {

	var t = ( 1 + Math.sqrt( 5 ) ) / 2;

	var vertices = [
		- 1,  t,  0,    1,  t,  0,   - 1, - t,  0,    1, - t,  0,
		 0, - 1,  t,    0,  1,  t,    0, - 1, - t,    0,  1, - t,
		 t,  0, - 1,    t,  0,  1,   - t,  0, - 1,   - t,  0,  1
	];

	var indices = [
		 0, 11,  5,    0,  5,  1,    0,  1,  7,    0,  7, 10,    0, 10, 11,
		 1,  5,  9,    5, 11,  4,   11, 10,  2,   10,  7,  6,    7,  1,  8,
		 3,  9,  4,    3,  4,  2,    3,  2,  6,    3,  6,  8,    3,  8,  9,
		 4,  9,  5,    2,  4, 11,    6,  2, 10,    8,  6,  7,    9,  8,  1
	];

	THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'IcosahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};
};

THREE.IcosahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/OctahedronGeometry.js

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.OctahedronGeometry = function ( radius, detail ) {

	this.parameters = {
		radius: radius,
		detail: detail
	};

	var vertices = [
		1, 0, 0,   - 1, 0, 0,    0, 1, 0,    0,- 1, 0,    0, 0, 1,    0, 0,- 1
	];

	var indices = [
		0, 2, 4,    0, 4, 3,    0, 3, 5,    0, 5, 2,    1, 2, 5,    1, 5, 3,    1, 3, 4,    1, 4, 2
	];

	THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'OctahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};
};

THREE.OctahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/TetrahedronGeometry.js

/**
 * @author timothypratley / https://github.com/timothypratley
 */

THREE.TetrahedronGeometry = function ( radius, detail ) {

	var vertices = [
		 1,  1,  1,   - 1, - 1,  1,   - 1,  1, - 1,    1, - 1, - 1
	];

	var indices = [
		 2,  1,  0,    0,  3,  2,    1,  3,  0,    2,  3,  1
	];

	THREE.PolyhedronGeometry.call( this, vertices, indices, radius, detail );

	this.type = 'TetrahedronGeometry';

	this.parameters = {
		radius: radius,
		detail: detail
	};

};

THREE.TetrahedronGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/geometries/ParametricGeometry.js

/**
 * @author zz85 / https://github.com/zz85
 * Parametric Surfaces Geometry
 * based on the brilliant article by @prideout http://prideout.net/blog/?p=44
 *
 * new THREE.ParametricGeometry( parametricFunction, uSegments, ySegements );
 *
 */

THREE.ParametricGeometry = function ( func, slices, stacks ) {

	THREE.Geometry.call( this );

	this.type = 'ParametricGeometry';

	this.parameters = {
		func: func,
		slices: slices,
		stacks: stacks
	};

	var verts = this.vertices;
	var faces = this.faces;
	var uvs = this.faceVertexUvs[ 0 ];

	var i, il, j, p;
	var u, v;

	var stackCount = stacks + 1;
	var sliceCount = slices + 1;

	for ( i = 0; i <= stacks; i ++ ) {

		v = i / stacks;

		for ( j = 0; j <= slices; j ++ ) {

			u = j / slices;

			p = func( u, v );
			verts.push( p );

		}
	}

	var a, b, c, d;
	var uva, uvb, uvc, uvd;

	for ( i = 0; i < stacks; i ++ ) {

		for ( j = 0; j < slices; j ++ ) {

			a = i * sliceCount + j;
			b = i * sliceCount + j + 1;
			c = (i + 1) * sliceCount + j + 1;
			d = (i + 1) * sliceCount + j;

			uva = new THREE.Vector2( j / slices, i / stacks );
			uvb = new THREE.Vector2( ( j + 1 ) / slices, i / stacks );
			uvc = new THREE.Vector2( ( j + 1 ) / slices, ( i + 1 ) / stacks );
			uvd = new THREE.Vector2( j / slices, ( i + 1 ) / stacks );

			faces.push( new THREE.Face3( a, b, d ) );
			uvs.push( [ uva, uvb, uvd ] );

			faces.push( new THREE.Face3( b, c, d ) );
			uvs.push( [ uvb.clone(), uvc, uvd.clone() ] );

		}

	}

	// console.log(this);

	// magic bullet
	// var diff = this.mergeVertices();
	// console.log('removed ', diff, ' vertices by merging');

	this.computeFaceNormals();
	this.computeVertexNormals();

};

THREE.ParametricGeometry.prototype = Object.create( THREE.Geometry.prototype );

// File:src/extras/helpers/AxisHelper.js

/**
 * @author sroucheray / http://sroucheray.org/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.AxisHelper = function ( size ) {

	size = size || 1;

	var vertices = new Float32Array( [
		0, 0, 0,  size, 0, 0,
		0, 0, 0,  0, size, 0,
		0, 0, 0,  0, 0, size
	] );

	var colors = new Float32Array( [
		1, 0, 0,  1, 0.6, 0,
		0, 1, 0,  0.6, 1, 0,
		0, 0, 1,  0, 0.6, 1
	] );

	var geometry = new THREE.BufferGeometry();
	geometry.addAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
	geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.AxisHelper.prototype = Object.create( THREE.Line.prototype );

// File:src/extras/helpers/ArrowHelper.js

/**
 * @author WestLangley / http://github.com/WestLangley
 * @author zz85 / http://github.com/zz85
 * @author bhouston / http://exocortex.com
 *
 * Creates an arrow for visualizing directions
 *
 * Parameters:
 *  dir - Vector3
 *  origin - Vector3
 *  length - Number
 *  color - color in hex value
 *  headLength - Number
 *  headWidth - Number
 */

THREE.ArrowHelper = ( function () {

	var lineGeometry = new THREE.Geometry();
	lineGeometry.vertices.push( new THREE.Vector3( 0, 0, 0 ), new THREE.Vector3( 0, 1, 0 ) );

	var coneGeometry = new THREE.CylinderGeometry( 0, 0.5, 1, 5, 1 );
	coneGeometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );

	return function ( dir, origin, length, color, headLength, headWidth ) {

		// dir is assumed to be normalized

		THREE.Object3D.call( this );

		if ( color === undefined ) color = 0xffff00;
		if ( length === undefined ) length = 1;
		if ( headLength === undefined ) headLength = 0.2 * length;
		if ( headWidth === undefined ) headWidth = 0.2 * headLength;

		this.position.copy( origin );

		this.line = new THREE.Line( lineGeometry, new THREE.LineBasicMaterial( { color: color } ) );
		this.line.matrixAutoUpdate = false;
		this.add( this.line );

		this.cone = new THREE.Mesh( coneGeometry, new THREE.MeshBasicMaterial( { color: color } ) );
		this.cone.matrixAutoUpdate = false;
		this.add( this.cone );

		this.setDirection( dir );
		this.setLength( length, headLength, headWidth );

	}

}() );

THREE.ArrowHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.ArrowHelper.prototype.setDirection = ( function () {

	var axis = new THREE.Vector3();
	var radians;

	return function ( dir ) {

		// dir is assumed to be normalized

		if ( dir.y > 0.99999 ) {

			this.quaternion.set( 0, 0, 0, 1 );

		} else if ( dir.y < - 0.99999 ) {

			this.quaternion.set( 1, 0, 0, 0 );

		} else {

			axis.set( dir.z, 0, - dir.x ).normalize();

			radians = Math.acos( dir.y );

			this.quaternion.setFromAxisAngle( axis, radians );

		}

	};

}() );

THREE.ArrowHelper.prototype.setLength = function ( length, headLength, headWidth ) {

	if ( headLength === undefined ) headLength = 0.2 * length;
	if ( headWidth === undefined ) headWidth = 0.2 * headLength;

	this.line.scale.set( 1, length, 1 );
	this.line.updateMatrix();

	this.cone.scale.set( headWidth, headLength, headWidth );
	this.cone.position.y = length;
	this.cone.updateMatrix();

};

THREE.ArrowHelper.prototype.setColor = function ( color ) {

	this.line.material.color.set( color );
	this.cone.material.color.set( color );

};

// File:src/extras/helpers/BoxHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.BoxHelper = function ( object ) {

	var geometry = new THREE.BufferGeometry();
	geometry.addAttribute( 'position', new THREE.BufferAttribute( new Float32Array( 72 ), 3 ) );

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: 0xffff00 } ), THREE.LinePieces );

	if ( object !== undefined ) {

		this.update( object );

	}

};

THREE.BoxHelper.prototype = Object.create( THREE.Line.prototype );

THREE.BoxHelper.prototype.update = function ( object ) {

	var geometry = object.geometry;

	if ( geometry.boundingBox === null ) {

		geometry.computeBoundingBox();

	}

	var min = geometry.boundingBox.min;
	var max = geometry.boundingBox.max;

	/*
	  5____4
	1/___0/|
	| 6__|_7
	2/___3/

	0: max.x, max.y, max.z
	1: min.x, max.y, max.z
	2: min.x, min.y, max.z
	3: max.x, min.y, max.z
	4: max.x, max.y, min.z
	5: min.x, max.y, min.z
	6: min.x, min.y, min.z
	7: max.x, min.y, min.z
	*/

	var vertices = this.geometry.attributes.position.array;

	vertices[  0 ] = max.x; vertices[  1 ] = max.y; vertices[  2 ] = max.z;
	vertices[  3 ] = min.x; vertices[  4 ] = max.y; vertices[  5 ] = max.z;

	vertices[  6 ] = min.x; vertices[  7 ] = max.y; vertices[  8 ] = max.z;
	vertices[  9 ] = min.x; vertices[ 10 ] = min.y; vertices[ 11 ] = max.z;

	vertices[ 12 ] = min.x; vertices[ 13 ] = min.y; vertices[ 14 ] = max.z;
	vertices[ 15 ] = max.x; vertices[ 16 ] = min.y; vertices[ 17 ] = max.z;

	vertices[ 18 ] = max.x; vertices[ 19 ] = min.y; vertices[ 20 ] = max.z;
	vertices[ 21 ] = max.x; vertices[ 22 ] = max.y; vertices[ 23 ] = max.z;

	//

	vertices[ 24 ] = max.x; vertices[ 25 ] = max.y; vertices[ 26 ] = min.z;
	vertices[ 27 ] = min.x; vertices[ 28 ] = max.y; vertices[ 29 ] = min.z;

	vertices[ 30 ] = min.x; vertices[ 31 ] = max.y; vertices[ 32 ] = min.z;
	vertices[ 33 ] = min.x; vertices[ 34 ] = min.y; vertices[ 35 ] = min.z;

	vertices[ 36 ] = min.x; vertices[ 37 ] = min.y; vertices[ 38 ] = min.z;
	vertices[ 39 ] = max.x; vertices[ 40 ] = min.y; vertices[ 41 ] = min.z;

	vertices[ 42 ] = max.x; vertices[ 43 ] = min.y; vertices[ 44 ] = min.z;
	vertices[ 45 ] = max.x; vertices[ 46 ] = max.y; vertices[ 47 ] = min.z;

	//

	vertices[ 48 ] = max.x; vertices[ 49 ] = max.y; vertices[ 50 ] = max.z;
	vertices[ 51 ] = max.x; vertices[ 52 ] = max.y; vertices[ 53 ] = min.z;

	vertices[ 54 ] = min.x; vertices[ 55 ] = max.y; vertices[ 56 ] = max.z;
	vertices[ 57 ] = min.x; vertices[ 58 ] = max.y; vertices[ 59 ] = min.z;

	vertices[ 60 ] = min.x; vertices[ 61 ] = min.y; vertices[ 62 ] = max.z;
	vertices[ 63 ] = min.x; vertices[ 64 ] = min.y; vertices[ 65 ] = min.z;

	vertices[ 66 ] = max.x; vertices[ 67 ] = min.y; vertices[ 68 ] = max.z;
	vertices[ 69 ] = max.x; vertices[ 70 ] = min.y; vertices[ 71 ] = min.z;

	this.geometry.attributes.position.needsUpdate = true;

	this.geometry.computeBoundingSphere();

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

};

// File:src/extras/helpers/BoundingBoxHelper.js

/**
 * @author WestLangley / http://github.com/WestLangley
 */

// a helper to show the world-axis-aligned bounding box for an object

THREE.BoundingBoxHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0x888888;

	this.object = object;

	this.box = new THREE.Box3();

	THREE.Mesh.call( this, new THREE.BoxGeometry( 1, 1, 1 ), new THREE.MeshBasicMaterial( { color: color, wireframe: true } ) );

};

THREE.BoundingBoxHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.BoundingBoxHelper.prototype.update = function () {

	this.box.setFromObject( this.object );

	this.box.size( this.scale );

	this.box.center( this.position );

};

// File:src/extras/helpers/CameraHelper.js

/**
 * @author alteredq / http://alteredqualia.com/
 *
 *	- shows frustum, line of sight and up of the camera
 *	- suitable for fast updates
 * 	- based on frustum visualization in lightgl.js shadowmap example
 *		http://evanw.github.com/lightgl.js/tests/shadowmap.html
 */

THREE.CameraHelper = function ( camera ) {

	var geometry = new THREE.Geometry();
	var material = new THREE.LineBasicMaterial( { color: 0xffffff, vertexColors: THREE.FaceColors } );

	var pointMap = {};

	// colors

	var hexFrustum = 0xffaa00;
	var hexCone = 0xff0000;
	var hexUp = 0x00aaff;
	var hexTarget = 0xffffff;
	var hexCross = 0x333333;

	// near

	addLine( "n1", "n2", hexFrustum );
	addLine( "n2", "n4", hexFrustum );
	addLine( "n4", "n3", hexFrustum );
	addLine( "n3", "n1", hexFrustum );

	// far

	addLine( "f1", "f2", hexFrustum );
	addLine( "f2", "f4", hexFrustum );
	addLine( "f4", "f3", hexFrustum );
	addLine( "f3", "f1", hexFrustum );

	// sides

	addLine( "n1", "f1", hexFrustum );
	addLine( "n2", "f2", hexFrustum );
	addLine( "n3", "f3", hexFrustum );
	addLine( "n4", "f4", hexFrustum );

	// cone

	addLine( "p", "n1", hexCone );
	addLine( "p", "n2", hexCone );
	addLine( "p", "n3", hexCone );
	addLine( "p", "n4", hexCone );

	// up

	addLine( "u1", "u2", hexUp );
	addLine( "u2", "u3", hexUp );
	addLine( "u3", "u1", hexUp );

	// target

	addLine( "c", "t", hexTarget );
	addLine( "p", "c", hexCross );

	// cross

	addLine( "cn1", "cn2", hexCross );
	addLine( "cn3", "cn4", hexCross );

	addLine( "cf1", "cf2", hexCross );
	addLine( "cf3", "cf4", hexCross );

	function addLine( a, b, hex ) {

		addPoint( a, hex );
		addPoint( b, hex );

	}

	function addPoint( id, hex ) {

		geometry.vertices.push( new THREE.Vector3() );
		geometry.colors.push( new THREE.Color( hex ) );

		if ( pointMap[ id ] === undefined ) {

			pointMap[ id ] = [];

		}

		pointMap[ id ].push( geometry.vertices.length - 1 );

	}

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

	this.camera = camera;
	this.matrix = camera.matrixWorld;
	this.matrixAutoUpdate = false;

	this.pointMap = pointMap;

	this.update();

};

THREE.CameraHelper.prototype = Object.create( THREE.Line.prototype );

THREE.CameraHelper.prototype.update = function () {

	var geometry, pointMap;
	
	var vector = new THREE.Vector3();
	var camera = new THREE.Camera();

	var setPoint = function ( point, x, y, z ) {

		vector.set( x, y, z ).unproject( camera );

		var points = pointMap[ point ];

		if ( points !== undefined ) {

			for ( var i = 0, il = points.length; i < il; i ++ ) {

				geometry.vertices[ points[ i ] ].copy( vector );

			}

		}

	};

	return function () {

		geometry = this.geometry;
		pointMap = this.pointMap;

		var w = 1, h = 1;

		// we need just camera projection matrix
		// world matrix must be identity

		camera.projectionMatrix.copy( this.camera.projectionMatrix );

		// center / target

		setPoint( "c", 0, 0, - 1 );
		setPoint( "t", 0, 0,  1 );

		// near

		setPoint( "n1", - w, - h, - 1 );
		setPoint( "n2",   w, - h, - 1 );
		setPoint( "n3", - w,   h, - 1 );
		setPoint( "n4",   w,   h, - 1 );

		// far

		setPoint( "f1", - w, - h, 1 );
		setPoint( "f2",   w, - h, 1 );
		setPoint( "f3", - w,   h, 1 );
		setPoint( "f4",   w,   h, 1 );

		// up

		setPoint( "u1",   w * 0.7, h * 1.1, - 1 );
		setPoint( "u2", - w * 0.7, h * 1.1, - 1 );
		setPoint( "u3",         0, h * 2,   - 1 );

		// cross

		setPoint( "cf1", - w,   0, 1 );
		setPoint( "cf2",   w,   0, 1 );
		setPoint( "cf3",   0, - h, 1 );
		setPoint( "cf4",   0,   h, 1 );

		setPoint( "cn1", - w,   0, - 1 );
		setPoint( "cn2",   w,   0, - 1 );
		setPoint( "cn3",   0, - h, - 1 );
		setPoint( "cn4",   0,   h, - 1 );

		geometry.verticesNeedUpdate = true;

	};

}();

// File:src/extras/helpers/DirectionalLightHelper.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.DirectionalLightHelper = function ( light, size ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	size = size || 1;

	var geometry = new THREE.Geometry();
	geometry.vertices.push(
		new THREE.Vector3( - size,   size, 0 ),
		new THREE.Vector3(   size,   size, 0 ),
		new THREE.Vector3(   size, - size, 0 ),
		new THREE.Vector3( - size, - size, 0 ),
		new THREE.Vector3( - size,   size, 0 )
	);

	var material = new THREE.LineBasicMaterial( { fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	this.lightPlane = new THREE.Line( geometry, material );
	this.add( this.lightPlane );

	geometry = new THREE.Geometry();
	geometry.vertices.push(
		new THREE.Vector3(),
		new THREE.Vector3()
	);

	material = new THREE.LineBasicMaterial( { fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	this.targetLine = new THREE.Line( geometry, material );
	this.add( this.targetLine );

	this.update();

};

THREE.DirectionalLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.DirectionalLightHelper.prototype.dispose = function () {

	this.lightPlane.geometry.dispose();
	this.lightPlane.material.dispose();
	this.targetLine.geometry.dispose();
	this.targetLine.material.dispose();
};

THREE.DirectionalLightHelper.prototype.update = function () {

	var v1 = new THREE.Vector3();
	var v2 = new THREE.Vector3();
	var v3 = new THREE.Vector3();

	return function () {

		v1.setFromMatrixPosition( this.light.matrixWorld );
		v2.setFromMatrixPosition( this.light.target.matrixWorld );
		v3.subVectors( v2, v1 );

		this.lightPlane.lookAt( v3 );
		this.lightPlane.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

		this.targetLine.geometry.vertices[ 1 ].copy( v3 );
		this.targetLine.geometry.verticesNeedUpdate = true;
		this.targetLine.material.color.copy( this.lightPlane.material.color );

	};

}();

// File:src/extras/helpers/EdgesHelper.js

/**
 * @author WestLangley / http://github.com/WestLangley
 */

THREE.EdgesHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0xffffff;

	var edge = [ 0, 0 ], hash = {};
	var sortFunction = function ( a, b ) { return a - b };

	var keys = [ 'a', 'b', 'c' ];
	var geometry = new THREE.BufferGeometry();

	var geometry2 = object.geometry.clone();

	geometry2.mergeVertices();
	geometry2.computeFaceNormals();

	var vertices = geometry2.vertices;
	var faces = geometry2.faces;
	var numEdges = 0;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0; j < 3; j ++ ) {

			edge[ 0 ] = face[ keys[ j ] ];
			edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
			edge.sort( sortFunction );

			var key = edge.toString();

			if ( hash[ key ] === undefined ) {

				hash[ key ] = { vert1: edge[ 0 ], vert2: edge[ 1 ], face1: i, face2: undefined };
				numEdges ++;

			} else {

				hash[ key ].face2 = i;

			}

		}

	}

	var coords = new Float32Array( numEdges * 2 * 3 );

	var index = 0;

	for ( var key in hash ) {

		var h = hash[ key ];

		if ( h.face2 === undefined || faces[ h.face1 ].normal.dot( faces[ h.face2 ].normal ) < 0.9999 ) { // hardwired const OK

			var vertex = vertices[ h.vert1 ];
			coords[ index ++ ] = vertex.x;
			coords[ index ++ ] = vertex.y;
			coords[ index ++ ] = vertex.z;

			vertex = vertices[ h.vert2 ];
			coords[ index ++ ] = vertex.x;
			coords[ index ++ ] = vertex.y;
			coords[ index ++ ] = vertex.z;

		}

	}

	geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

};

THREE.EdgesHelper.prototype = Object.create( THREE.Line.prototype );

// File:src/extras/helpers/FaceNormalsHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.FaceNormalsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xffff00;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var faces = this.object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		geometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.normalMatrix = new THREE.Matrix3();

	this.update();

};

THREE.FaceNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.FaceNormalsHelper.prototype.update = function () {

	var vertices = this.geometry.vertices;

	var object = this.object;
	var objectVertices = object.geometry.vertices;
	var objectFaces = object.geometry.faces;
	var objectWorldMatrix = object.matrixWorld;

	object.updateMatrixWorld( true );

	this.normalMatrix.getNormalMatrix( objectWorldMatrix );

	for ( var i = 0, i2 = 0, l = objectFaces.length; i < l; i ++, i2 += 2 ) {

		var face = objectFaces[ i ];

		vertices[ i2 ].copy( objectVertices[ face.a ] )
			.add( objectVertices[ face.b ] )
			.add( objectVertices[ face.c ] )
			.divideScalar( 3 )
			.applyMatrix4( objectWorldMatrix );

		vertices[ i2 + 1 ].copy( face.normal )
			.applyMatrix3( this.normalMatrix )
			.normalize()
			.multiplyScalar( this.size )
			.add( vertices[ i2 ] );

	}

	this.geometry.verticesNeedUpdate = true;

	return this;

};


// File:src/extras/helpers/GridHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.GridHelper = function ( size, step ) {

	var geometry = new THREE.Geometry();
	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors } );

	this.color1 = new THREE.Color( 0x444444 );
	this.color2 = new THREE.Color( 0x888888 );

	for ( var i = - size; i <= size; i += step ) {

		geometry.vertices.push(
			new THREE.Vector3( - size, 0, i ), new THREE.Vector3( size, 0, i ),
			new THREE.Vector3( i, 0, - size ), new THREE.Vector3( i, 0, size )
		);

		var color = i === 0 ? this.color1 : this.color2;

		geometry.colors.push( color, color, color, color );

	}

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

};

THREE.GridHelper.prototype = Object.create( THREE.Line.prototype );

THREE.GridHelper.prototype.setColors = function( colorCenterLine, colorGrid ) {

	this.color1.set( colorCenterLine );
	this.color2.set( colorGrid );

	this.geometry.colorsNeedUpdate = true;

}

// File:src/extras/helpers/HemisphereLightHelper.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.HemisphereLightHelper = function ( light, sphereSize, arrowLength, domeSize ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	this.colors = [ new THREE.Color(), new THREE.Color() ];

	var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
	geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

	for ( var i = 0, il = 8; i < il; i ++ ) {

		geometry.faces[ i ].color = this.colors[ i < 4 ? 0 : 1 ];

	}

	var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.FaceColors, wireframe: true } );

	this.lightSphere = new THREE.Mesh( geometry, material );
	this.add( this.lightSphere );

	this.update();

};

THREE.HemisphereLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.HemisphereLightHelper.prototype.dispose = function () {
	this.lightSphere.geometry.dispose();
	this.lightSphere.material.dispose();
};

THREE.HemisphereLightHelper.prototype.update = function () {

	var vector = new THREE.Vector3();

	return function () {

		this.colors[ 0 ].copy( this.light.color ).multiplyScalar( this.light.intensity );
		this.colors[ 1 ].copy( this.light.groundColor ).multiplyScalar( this.light.intensity );

		this.lightSphere.lookAt( vector.setFromMatrixPosition( this.light.matrixWorld ).negate() );
		this.lightSphere.geometry.colorsNeedUpdate = true;

	}

}();

// File:src/extras/helpers/PointLightHelper.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 */

THREE.PointLightHelper = function ( light, sphereSize ) {

	this.light = light;
	this.light.updateMatrixWorld();

	var geometry = new THREE.SphereGeometry( sphereSize, 4, 2 );
	var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );
	material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	THREE.Mesh.call( this, geometry, material );

	this.matrix = this.light.matrixWorld;
	this.matrixAutoUpdate = false;

	/*
	var distanceGeometry = new THREE.IcosahedronGeometry( 1, 2 );
	var distanceMaterial = new THREE.MeshBasicMaterial( { color: hexColor, fog: false, wireframe: true, opacity: 0.1, transparent: true } );

	this.lightSphere = new THREE.Mesh( bulbGeometry, bulbMaterial );
	this.lightDistance = new THREE.Mesh( distanceGeometry, distanceMaterial );

	var d = light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.scale.set( d, d, d );

	}

	this.add( this.lightDistance );
	*/

};

THREE.PointLightHelper.prototype = Object.create( THREE.Mesh.prototype );

THREE.PointLightHelper.prototype.dispose = function () {

	this.geometry.dispose();
	this.material.dispose();
};

THREE.PointLightHelper.prototype.update = function () {

	this.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	/*
	var d = this.light.distance;

	if ( d === 0.0 ) {

		this.lightDistance.visible = false;

	} else {

		this.lightDistance.visible = true;
		this.lightDistance.scale.set( d, d, d );

	}
	*/

};

// File:src/extras/helpers/SkeletonHelper.js

/**
 * @author Sean Griffin / http://twitter.com/sgrif
 * @author Michael Guerrero / http://realitymeltdown.com
 * @author mrdoob / http://mrdoob.com/
 * @author ikerr / http://verold.com
 */

THREE.SkeletonHelper = function ( object ) {

	this.bones = this.getBoneList( object );

	var geometry = new THREE.Geometry();

	for ( var i = 0; i < this.bones.length; i ++ ) {

		var bone = this.bones[ i ];

		if ( bone.parent instanceof THREE.Bone ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.vertices.push( new THREE.Vector3() );
			geometry.colors.push( new THREE.Color( 0, 0, 1 ) );
			geometry.colors.push( new THREE.Color( 0, 1, 0 ) );

		}

	}

	var material = new THREE.LineBasicMaterial( { vertexColors: THREE.VertexColors, depthTest: false, depthWrite: false, transparent: true } );

	THREE.Line.call( this, geometry, material, THREE.LinePieces );

	this.root = object;

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

	this.update();

};


THREE.SkeletonHelper.prototype = Object.create( THREE.Line.prototype );

THREE.SkeletonHelper.prototype.getBoneList = function( object ) {

	var boneList = [];

	if ( object instanceof THREE.Bone ) {

		boneList.push( object );

	}

	for ( var i = 0; i < object.children.length; i ++ ) {

		boneList.push.apply( boneList, this.getBoneList( object.children[ i ] ) );

	}

	return boneList;

};

THREE.SkeletonHelper.prototype.update = function () {

	var geometry = this.geometry;

	var matrixWorldInv = new THREE.Matrix4().getInverse( this.root.matrixWorld );

	var boneMatrix = new THREE.Matrix4();

	var j = 0;

	for ( var i = 0; i < this.bones.length; i ++ ) {

		var bone = this.bones[ i ];

		if ( bone.parent instanceof THREE.Bone ) {

			boneMatrix.multiplyMatrices( matrixWorldInv, bone.matrixWorld );
			geometry.vertices[ j ].setFromMatrixPosition( boneMatrix );

			boneMatrix.multiplyMatrices( matrixWorldInv, bone.parent.matrixWorld );
			geometry.vertices[ j + 1 ].setFromMatrixPosition( boneMatrix );

			j += 2;

		}

	}

	geometry.verticesNeedUpdate = true;

	geometry.computeBoundingSphere();

};

// File:src/extras/helpers/SpotLightHelper.js

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.SpotLightHelper = function ( light ) {

	THREE.Object3D.call( this );

	this.light = light;
	this.light.updateMatrixWorld();

	this.matrix = light.matrixWorld;
	this.matrixAutoUpdate = false;

	var geometry = new THREE.CylinderGeometry( 0, 1, 1, 8, 1, true );

	geometry.applyMatrix( new THREE.Matrix4().makeTranslation( 0, - 0.5, 0 ) );
	geometry.applyMatrix( new THREE.Matrix4().makeRotationX( - Math.PI / 2 ) );

	var material = new THREE.MeshBasicMaterial( { wireframe: true, fog: false } );

	this.cone = new THREE.Mesh( geometry, material );
	this.add( this.cone );

	this.update();

};

THREE.SpotLightHelper.prototype = Object.create( THREE.Object3D.prototype );

THREE.SpotLightHelper.prototype.dispose = function () {
	this.cone.geometry.dispose();
	this.cone.material.dispose();
};

THREE.SpotLightHelper.prototype.update = function () {

	var vector = new THREE.Vector3();
	var vector2 = new THREE.Vector3();

	return function () {

		var coneLength = this.light.distance ? this.light.distance : 10000;
		var coneWidth = coneLength * Math.tan( this.light.angle );

		this.cone.scale.set( coneWidth, coneWidth, coneLength );

		vector.setFromMatrixPosition( this.light.matrixWorld );
		vector2.setFromMatrixPosition( this.light.target.matrixWorld );

		this.cone.lookAt( vector2.sub( vector ) );

		this.cone.material.color.copy( this.light.color ).multiplyScalar( this.light.intensity );

	};

}();

// File:src/extras/helpers/VertexNormalsHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexNormalsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0xff0000;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var vertices = object.geometry.vertices;

	var faces = object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

			geometry.vertices.push( new THREE.Vector3(), new THREE.Vector3() );

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.normalMatrix = new THREE.Matrix3();

	this.update();

};

THREE.VertexNormalsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexNormalsHelper.prototype.update = ( function ( object ) {

	var v1 = new THREE.Vector3();

	return function( object ) {

		var keys = [ 'a', 'b', 'c', 'd' ];

		this.object.updateMatrixWorld( true );

		this.normalMatrix.getNormalMatrix( this.object.matrixWorld );

		var vertices = this.geometry.vertices;

		var verts = this.object.geometry.vertices;

		var faces = this.object.geometry.faces;

		var worldMatrix = this.object.matrixWorld;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {

				var vertexId = face[ keys[ j ] ];
				var vertex = verts[ vertexId ];

				var normal = face.vertexNormals[ j ];

				vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

				v1.copy( normal ).applyMatrix3( this.normalMatrix ).normalize().multiplyScalar( this.size );

				v1.add( vertices[ idx ] );
				idx = idx + 1;

				vertices[ idx ].copy( v1 );
				idx = idx + 1;

			}

		}

		this.geometry.verticesNeedUpdate = true;

		return this;

	}

}());

// File:src/extras/helpers/VertexTangentsHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 * @author WestLangley / http://github.com/WestLangley
*/

THREE.VertexTangentsHelper = function ( object, size, hex, linewidth ) {

	this.object = object;

	this.size = ( size !== undefined ) ? size : 1;

	var color = ( hex !== undefined ) ? hex : 0x0000ff;

	var width = ( linewidth !== undefined ) ? linewidth : 1;

	var geometry = new THREE.Geometry();

	var vertices = object.geometry.vertices;

	var faces = object.geometry.faces;

	for ( var i = 0, l = faces.length; i < l; i ++ ) {

		var face = faces[ i ];

		for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

			geometry.vertices.push( new THREE.Vector3() );
			geometry.vertices.push( new THREE.Vector3() );

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color, linewidth: width } ), THREE.LinePieces );

	this.matrixAutoUpdate = false;

	this.update();

};

THREE.VertexTangentsHelper.prototype = Object.create( THREE.Line.prototype );

THREE.VertexTangentsHelper.prototype.update = ( function ( object ) {

	var v1 = new THREE.Vector3();

	return function( object ) {

		var keys = [ 'a', 'b', 'c', 'd' ];

		this.object.updateMatrixWorld( true );

		var vertices = this.geometry.vertices;

		var verts = this.object.geometry.vertices;

		var faces = this.object.geometry.faces;

		var worldMatrix = this.object.matrixWorld;

		var idx = 0;

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0, jl = face.vertexTangents.length; j < jl; j ++ ) {

				var vertexId = face[ keys[ j ] ];
				var vertex = verts[ vertexId ];

				var tangent = face.vertexTangents[ j ];

				vertices[ idx ].copy( vertex ).applyMatrix4( worldMatrix );

				v1.copy( tangent ).transformDirection( worldMatrix ).multiplyScalar( this.size );

				v1.add( vertices[ idx ] );
				idx = idx + 1;

				vertices[ idx ].copy( v1 );
				idx = idx + 1;

			}

		}

		this.geometry.verticesNeedUpdate = true;

		return this;

	}

}());

// File:src/extras/helpers/WireframeHelper.js

/**
 * @author mrdoob / http://mrdoob.com/
 */

THREE.WireframeHelper = function ( object, hex ) {

	var color = ( hex !== undefined ) ? hex : 0xffffff;

	var edge = [ 0, 0 ], hash = {};
	var sortFunction = function ( a, b ) { return a - b };

	var keys = [ 'a', 'b', 'c' ];
	var geometry = new THREE.BufferGeometry();

	if ( object.geometry instanceof THREE.Geometry ) {

		var vertices = object.geometry.vertices;
		var faces = object.geometry.faces;
		var numEdges = 0;

		// allocate maximal size
		var edges = new Uint32Array( 6 * faces.length );

		for ( var i = 0, l = faces.length; i < l; i ++ ) {

			var face = faces[ i ];

			for ( var j = 0; j < 3; j ++ ) {

				edge[ 0 ] = face[ keys[ j ] ];
				edge[ 1 ] = face[ keys[ ( j + 1 ) % 3 ] ];
				edge.sort( sortFunction );

				var key = edge.toString();

				if ( hash[ key ] === undefined ) {

					edges[ 2 * numEdges ] = edge[ 0 ];
					edges[ 2 * numEdges + 1 ] = edge[ 1 ];
					hash[ key ] = true;
					numEdges ++;

				}

			}

		}

		var coords = new Float32Array( numEdges * 2 * 3 );

		for ( var i = 0, l = numEdges; i < l; i ++ ) {

			for ( var j = 0; j < 2; j ++ ) {

				var vertex = vertices[ edges [ 2 * i + j] ];

				var index = 6 * i + 3 * j;
				coords[ index + 0 ] = vertex.x;
				coords[ index + 1 ] = vertex.y;
				coords[ index + 2 ] = vertex.z;

			}

		}

		geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

	} else if ( object.geometry instanceof THREE.BufferGeometry ) {

		if ( object.geometry.attributes.index !== undefined ) { // Indexed BufferGeometry

			var vertices = object.geometry.attributes.position.array;
			var indices = object.geometry.attributes.index.array;
			var drawcalls = object.geometry.drawcalls;
			var numEdges = 0;

			if ( drawcalls.length === 0 ) {

				drawcalls = [ { count : indices.length, index : 0, start : 0 } ];

			}

			// allocate maximal size
			var edges = new Uint32Array( 2 * indices.length );

			for ( var o = 0, ol = drawcalls.length; o < ol; ++ o ) {

				var start = drawcalls[ o ].start;
				var count = drawcalls[ o ].count;
				var index = drawcalls[ o ].index;

				for ( var i = start, il = start + count; i < il; i += 3 ) {

					for ( var j = 0; j < 3; j ++ ) {

						edge[ 0 ] = index + indices[ i + j ];
						edge[ 1 ] = index + indices[ i + ( j + 1 ) % 3 ];
						edge.sort( sortFunction );

						var key = edge.toString();

						if ( hash[ key ] === undefined ) {

							edges[ 2 * numEdges ] = edge[ 0 ];
							edges[ 2 * numEdges + 1 ] = edge[ 1 ];
							hash[ key ] = true;
							numEdges ++;

						}

					}

				}

			}

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numEdges; i < l; i ++ ) {

				for ( var j = 0; j < 2; j ++ ) {

					var index = 6 * i + 3 * j;
					var index2 = 3 * edges[ 2 * i + j];
					coords[ index + 0 ] = vertices[ index2 ];
					coords[ index + 1 ] = vertices[ index2 + 1 ];
					coords[ index + 2 ] = vertices[ index2 + 2 ];

				}

			}

			geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

		} else { // non-indexed BufferGeometry

			var vertices = object.geometry.attributes.position.array;
			var numEdges = vertices.length / 3;
			var numTris = numEdges / 3;

			var coords = new Float32Array( numEdges * 2 * 3 );

			for ( var i = 0, l = numTris; i < l; i ++ ) {

				for ( var j = 0; j < 3; j ++ ) {

					var index = 18 * i + 6 * j;

					var index1 = 9 * i + 3 * j;
					coords[ index + 0 ] = vertices[ index1 ];
					coords[ index + 1 ] = vertices[ index1 + 1 ];
					coords[ index + 2 ] = vertices[ index1 + 2 ];

					var index2 = 9 * i + 3 * ( ( j + 1 ) % 3 );
					coords[ index + 3 ] = vertices[ index2 ];
					coords[ index + 4 ] = vertices[ index2 + 1 ];
					coords[ index + 5 ] = vertices[ index2 + 2 ];

				}

			}

			geometry.addAttribute( 'position', new THREE.BufferAttribute( coords, 3 ) );

		}

	}

	THREE.Line.call( this, geometry, new THREE.LineBasicMaterial( { color: color } ), THREE.LinePieces );

	this.matrix = object.matrixWorld;
	this.matrixAutoUpdate = false;

};

THREE.WireframeHelper.prototype = Object.create( THREE.Line.prototype );

// File:src/extras/objects/ImmediateRenderObject.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.ImmediateRenderObject = function () {

	THREE.Object3D.call( this );

	this.render = function ( renderCallback ) {};

};

THREE.ImmediateRenderObject.prototype = Object.create( THREE.Object3D.prototype );

// File:src/extras/objects/MorphBlendMesh.js

/**
 * @author alteredq / http://alteredqualia.com/
 */

THREE.MorphBlendMesh = function( geometry, material ) {

	THREE.Mesh.call( this, geometry, material );

	this.animationsMap = {};
	this.animationsList = [];

	// prepare default animation
	// (all frames played together in 1 second)

	var numFrames = this.geometry.morphTargets.length;

	var name = "__default";

	var startFrame = 0;
	var endFrame = numFrames - 1;

	var fps = numFrames / 1;

	this.createAnimation( name, startFrame, endFrame, fps );
	this.setAnimationWeight( name, 1 );

};

THREE.MorphBlendMesh.prototype = Object.create( THREE.Mesh.prototype );

THREE.MorphBlendMesh.prototype.createAnimation = function ( name, start, end, fps ) {

	var animation = {

		startFrame: start,
		endFrame: end,

		length: end - start + 1,

		fps: fps,
		duration: ( end - start ) / fps,

		lastFrame: 0,
		currentFrame: 0,

		active: false,

		time: 0,
		direction: 1,
		weight: 1,

		directionBackwards: false,
		mirroredLoop: false

	};

	this.animationsMap[ name ] = animation;
	this.animationsList.push( animation );

};

THREE.MorphBlendMesh.prototype.autoCreateAnimations = function ( fps ) {

	var pattern = /([a-z]+)_?(\d+)/;

	var firstAnimation, frameRanges = {};

	var geometry = this.geometry;

	for ( var i = 0, il = geometry.morphTargets.length; i < il; i ++ ) {

		var morph = geometry.morphTargets[ i ];
		var chunks = morph.name.match( pattern );

		if ( chunks && chunks.length > 1 ) {

			var name = chunks[ 1 ];
			var num = chunks[ 2 ];

			if ( ! frameRanges[ name ] ) frameRanges[ name ] = { start: Infinity, end: - Infinity };

			var range = frameRanges[ name ];

			if ( i < range.start ) range.start = i;
			if ( i > range.end ) range.end = i;

			if ( ! firstAnimation ) firstAnimation = name;

		}

	}

	for ( var name in frameRanges ) {

		var range = frameRanges[ name ];
		this.createAnimation( name, range.start, range.end, fps );

	}

	this.firstAnimation = firstAnimation;

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionForward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = 1;
		animation.directionBackwards = false;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDirectionBackward = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.direction = - 1;
		animation.directionBackwards = true;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationFPS = function ( name, fps ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.fps = fps;
		animation.duration = ( animation.end - animation.start ) / animation.fps;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationDuration = function ( name, duration ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.duration = duration;
		animation.fps = ( animation.end - animation.start ) / animation.duration;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationWeight = function ( name, weight ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.weight = weight;

	}

};

THREE.MorphBlendMesh.prototype.setAnimationTime = function ( name, time ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = time;

	}

};

THREE.MorphBlendMesh.prototype.getAnimationTime = function ( name ) {

	var time = 0;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		time = animation.time;

	}

	return time;

};

THREE.MorphBlendMesh.prototype.getAnimationDuration = function ( name ) {

	var duration = - 1;

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		duration = animation.duration;

	}

	return duration;

};

THREE.MorphBlendMesh.prototype.playAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.time = 0;
		animation.active = true;

	} else {

		console.warn( "animation[" + name + "] undefined" );

	}

};

THREE.MorphBlendMesh.prototype.stopAnimation = function ( name ) {

	var animation = this.animationsMap[ name ];

	if ( animation ) {

		animation.active = false;

	}

};

THREE.MorphBlendMesh.prototype.update = function ( delta ) {

	for ( var i = 0, il = this.animationsList.length; i < il; i ++ ) {

		var animation = this.animationsList[ i ];

		if ( ! animation.active ) continue;

		var frameTime = animation.duration / animation.length;

		animation.time += animation.direction * delta;

		if ( animation.mirroredLoop ) {

			if ( animation.time > animation.duration || animation.time < 0 ) {

				animation.direction *= - 1;

				if ( animation.time > animation.duration ) {

					animation.time = animation.duration;
					animation.directionBackwards = true;

				}

				if ( animation.time < 0 ) {

					animation.time = 0;
					animation.directionBackwards = false;

				}

			}

		} else {

			animation.time = animation.time % animation.duration;

			if ( animation.time < 0 ) animation.time += animation.duration;

		}

		var keyframe = animation.startFrame + THREE.Math.clamp( Math.floor( animation.time / frameTime ), 0, animation.length - 1 );
		var weight = animation.weight;

		if ( keyframe !== animation.currentFrame ) {

			this.morphTargetInfluences[ animation.lastFrame ] = 0;
			this.morphTargetInfluences[ animation.currentFrame ] = 1 * weight;

			this.morphTargetInfluences[ keyframe ] = 0;

			animation.lastFrame = animation.currentFrame;
			animation.currentFrame = keyframe;

		}

		var mix = ( animation.time % frameTime ) / frameTime;

		if ( animation.directionBackwards ) mix = 1 - mix;

		this.morphTargetInfluences[ animation.currentFrame ] = mix * weight;
		this.morphTargetInfluences[ animation.lastFrame ] = ( 1 - mix ) * weight;

	}

};


define("lib/Three", function(){});

/**
 * Exports the {@link module:core/Math~Math|Math} namespace.
 * @module core/Math
 */
define(
  'core/Math',[ 'lib/Three' ], function( _Three ) {

    /**
     * Complimentary math functions and constants.
     * @namespace Math
     */
    var Math = {};

    var X_ALIGNED_VECTOR = new THREE.Vector3( 1, 0, 0 );
    var Y_ALIGNED_VECTOR = new THREE.Vector3( 0, 1, 0 );
    var Z_ALIGNED_VECTOR = new THREE.Vector3( 0, 0, 1 );
    var ONE = new THREE.Vector3( 1, 1, 1 );
    var ZERO = new THREE.Vector3( 0, 0, 0 );

    /**
     * Factor to convert radians to degrees: 57.295779513082.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.RADTODEG = 57.295779513082;

    /**
     * Factor to convert degrees to radians: 0.0174532925199.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.DEGTORAD = 0.0174532925199;

    /**
     * 1.41421356237.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.SQRT_2 = 1.41421356237;

    /**
     * 3.14159265358979.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.PI = 3.14159265358979;

    /**
     * 2 * PI = 6.28318530717958.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.PI_2 = 6.28318530717958;

    /**
     * PI / 180 = 0.0174532925199.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.PI_OVER_180 = 0.0174532925199;

    /**
     * PI / 360 = 0.0087266462599.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.PI_OVER_360 = 0.0087266462599;

    /**
     * 1 degree = PI / 180 = 0.0174532925199.
     * @constant
     * @memberOf module:core/Math~Math
     * @type {number}
     */
    Math.ONE_DEGREE = Math.PI_OVER_180;

    /**
     * 1024 kilobytes * 1024 bytes = 1048576.
     * @memberOf module:core/Math~Math
     * @constant
     * @type {number}
     */
    Math.ONE_MEGABYTE = 1048576;

    /**
     * Returns THREE.Vector3( 1, 0, 0 ).
     *
     * @memberOf module:core/Math~Math
     * @returns {THREE.Vector3}
     */
    Math.getXAlignedVector = function() {
      return X_ALIGNED_VECTOR;
    };

    /**
     * Returns THREE.Vector3( 0, 1, 0 ).
     *
     * @memberOf module:core/Math~Math
     * @returns {THREE.Vector3}
     */
    Math.getYAlignedVector = function() {
      return Y_ALIGNED_VECTOR;
    };

    /**
     * Returns THREE.Vector3( 0, 0, 1 ).
     *
     * @memberOf module:core/Math~Math
     * @returns {THREE.Vector3}
     */
    Math.getZAlignedVector = function() {
      return Z_ALIGNED_VECTOR;
    };

    /**
     * Returns THREE.Vector3( 1, 1, 1 ).
     *
     * @memberOf module:core/Math~Math
     * @returns {THREE.Vector3}
     */
    Math.getVectorOne = function() {
      return ONE;
    };

    /**
     * Returns THREE.Vector3( 0, 0, 0 ).
     *
     * @memberOf module:core/Math~Math
     * @returns {THREE.Vector3}
     */
    Math.getVectorZero = function() {
      return ZERO;
    };

    /**
     * Converts a given angle in degrees to radians.
     *
     * @memberOf module:core/Math~Math
     * @param {number} a An angle in degrees.
     * @returns {number} Angle converted to radians.
     */
    Math.toRadians = function( a ) {
      return a * this.DEGTORAD;
    };

    /**
     * Converts a given angle in radians to degrees.
     *
     * @memberOf module:core/Math~Math
     * @param {number} a An angle in radians.
     * @returns {number} Angle converted to degrees.
     */
    Math.toDegrees = function( a ) {
      return a * this.RADTODEG;
    };

    /**
     * Converts a decimal number to a binary String.
     *
     * @memberOf module:core/Math~Math
     * @param {number} num Decimal number.
     * @returns {string} Number converted to binary string.
     */
    Math.decimalToBinary = function( num ) {
      return num.toString( 2 );
    };

    /**
     * Converts a decimal number to a octal String.
     *
     * @memberOf module:core/Math~Math
     * @param {number} num Decimal number.
     * @returns {string} Number converted to octal string.
     */
    Math.decimalToOctal = function( num ) {
      return num.toString( 8 );
    };

    /**
     * Converts a decimal number to a hexadecimal String.
     *
     * @memberOf module:core/Math~Math
     * @param {number} num Decimal number
     * @returns {string} Number converted to hex string.
     */
    Math.decimalToHex = function( num ) {
      return num.toString( 16 );
    };

    /**
     * Converts a binary String to a decimal number.
     *
     * @memberOf module:core/Math~Math
     * @param {string} num Binary string.
     * @returns {number} Binary string converted to decimal.
     */
    Math.binaryToDecimal = function( num ) {
      return parseInt( num, 2 );
    };

    /**
     * Converts a octal String to a decimal number.
     *
     * @memberOf module:core/Math~Math
     * @param {string} num Octal string.
     * @returns {number} Binary string converted to decimal.
     */
    Math.octalToDecimal = function( num ) {
      return parseInt( num, 8 );
    };

    /**
     * Converts a hexadecimal String to a decimal number.
     *
     * @memberOf module:core/Math~Math
     * @param {string} num Hex string.
     * @returns {number} Binary string converted to decimal.
     */
    Math.hexToDecimal = function( num ) {
      return parseInt( num, 16 );
    };

    /**
     * Rounds the given number to the nearest multiple.
     *
     * @memberOf module:core/Math~Math
     * @param {number} numToRound
     * @param {number} multiple
     * @returns {number} Nearest multiple.
     */
    Math.nearestMultiple = function( numToRound, multiple ) {
      if( multiple === 0 ) {
        return numToRound;
      }

      var remainder = this.abs( numToRound ) % multiple;
      if( remainder === 0 ) {
        return numToRound + multiple;
      }
      if( numToRound < 0 ) {
        return -( this.abs( numToRound ) - remainder );
      }
      return numToRound + multiple - remainder;
    };

    // Function hacks from:
    // http://mudcu.be/journal/2011/11/bitwise-gems-and-other-optimizations/

    /**
     * @memberOf module:core/Math~Math
     * @param {number} a First number to be compared.
     * @param {number} b Second number to be compared.
     * @returns {number} The minimum value between a and b.
     */
    Math.min = function( a, b ) {
      return ( a < b ) ? a : b;
    };

    /**
     * @memberOf module:core/Math~Math
     * @param {number} a First number to be compared.
     * @param {number} b Second number to be compared.
     * @returns {number} The maximum value between a and b.
     */
    Math.max = function( a, b ) {
      return ( a > b ) ? a : b;
    };

    /**
     * @memberOf module:core/Math~Math
     * @param {number} n The number to get absolute value.
     * @returns {number} Absolute value of n.
     */
    Math.abs = function( n ) {
      return n > 0 ? n : -n;
    };

    /**
     * @memberOf module:core/Math~Math
     * @param {number} n The number to be rounded.
     * @returns {number} Rounded value of n.
     */
    Math.round = function( n ) {
      return n + ( n < 0 ? -0.5 : 0.5 ) >> 0;
    };

    /**
     * @memberOf module:core/Math~Math
     * Gets the nearest upwards integer of n.
     * @param {number} n The number to get ceil.
     * @returns {number} Nearest upwards integer of n.
     */
    Math.ceil = function( n ) {
      return n + ( n < 0 ? 0 : 1 ) >> 0;
    };

    /**
     * @memberOf module:core/Math~Math
     * Gets the nearest downwards integer of n.
     * @param {number} n The number to get floor.
     * @returns {number} Nearest downwards integer of n.
     */
    Math.floor = function( n ) {
      // return n + ( n < 0 ? -1 : 0 ) >> 0;
      return n | 0;
    };

    return Math;
  }
);

define(
  'input/Keyboard',[],function() {

    var Keyboard = function() {
      this.pressed = new Int32Array( 256 );

      for( var i = 0, len = this.pressed.length; i < len; i++ ) {
        this.pressed[ i ] = -1;
      }
    };

    Keyboard.prototype.BACKSPACE = 8;
    Keyboard.prototype.TAB = 9;
    Keyboard.prototype.ENTER = 13;
    Keyboard.prototype.SHIFT = 16;
    Keyboard.prototype.CTRL = 17;
    Keyboard.prototype.ALT = 18;
    Keyboard.prototype.PAUSE_BREAK = 19;
    Keyboard.prototype.CAPS_LOCK = 20;
    Keyboard.prototype.ESCAPE = 27;
    Keyboard.prototype.SPACE = 32;
    Keyboard.prototype.PAGE_UP = 33;
    Keyboard.prototype.PAGE_DOWN = 34;
    Keyboard.prototype.END = 35;
    Keyboard.prototype.HOME = 36;
    Keyboard.prototype.LEFT_ARROW = 37;
    Keyboard.prototype.UP_ARROW = 38;
    Keyboard.prototype.RIGHT_ARROW = 39;
    Keyboard.prototype.DOWN_ARROW = 40;
    Keyboard.prototype.INSERT = 45;
    Keyboard.prototype.DELETE = 46;
    Keyboard.prototype.NUM_0 = 48;
    Keyboard.prototype.NUM_1 = 49;
    Keyboard.prototype.NUM_2 = 50;
    Keyboard.prototype.NUM_3 = 51;
    Keyboard.prototype.NUM_4 = 52;
    Keyboard.prototype.NUM_5 = 53;
    Keyboard.prototype.NUM_6 = 54;
    Keyboard.prototype.NUM_7 = 55;
    Keyboard.prototype.NUM_8 = 56;
    Keyboard.prototype.NUM_9 = 57;
    Keyboard.prototype.A = 65;
    Keyboard.prototype.B = 66;
    Keyboard.prototype.C = 67;
    Keyboard.prototype.D = 68;
    Keyboard.prototype.E = 69;
    Keyboard.prototype.F = 70;
    Keyboard.prototype.G = 71;
    Keyboard.prototype.H = 72;
    Keyboard.prototype.I = 73;
    Keyboard.prototype.J = 74;
    Keyboard.prototype.K = 75;
    Keyboard.prototype.L = 76;
    Keyboard.prototype.M = 77;
    Keyboard.prototype.N = 78;
    Keyboard.prototype.O = 79;
    Keyboard.prototype.P = 80;
    Keyboard.prototype.Q = 81;
    Keyboard.prototype.R = 82;
    Keyboard.prototype.S = 83;
    Keyboard.prototype.T = 84;
    Keyboard.prototype.U = 85;
    Keyboard.prototype.V = 86;
    Keyboard.prototype.W = 87;
    Keyboard.prototype.X = 88;
    Keyboard.prototype.Y = 89;
    Keyboard.prototype.Z = 90;
    Keyboard.prototype.LEFT_WINDOW = 91;
    Keyboard.prototype.RIGHT_WINDOW = 92;
    Keyboard.prototype.SELECT_KEY = 93;
    Keyboard.prototype.NUMPAD_0 = 96;
    Keyboard.prototype.NUMPAD_1 = 97;
    Keyboard.prototype.NUMPAD_2 = 98;
    Keyboard.prototype.NUMPAD_3 = 99;
    Keyboard.prototype.NUMPAD_4 = 100;
    Keyboard.prototype.NUMPAD_5 = 101;
    Keyboard.prototype.NUMPAD_6 = 102;
    Keyboard.prototype.NUMPAD_7 = 103;
    Keyboard.prototype.NUMPAD_8 = 104;
    Keyboard.prototype.NUMPAD_9 = 105;
    Keyboard.prototype.MULTIPLY = 106;
    Keyboard.prototype.ADD = 107;
    Keyboard.prototype.SUBTRACT = 109;
    Keyboard.prototype.DECIMAL_POINT = 110;
    Keyboard.prototype.DIVIDE = 111;
    Keyboard.prototype.F1 = 112;
    Keyboard.prototype.F2 = 113;
    Keyboard.prototype.F3 = 114;
    Keyboard.prototype.F4 = 115;
    Keyboard.prototype.F5 = 116;
    Keyboard.prototype.F6 = 117;
    Keyboard.prototype.F7 = 118;
    Keyboard.prototype.F8 = 119;
    Keyboard.prototype.F9 = 120;
    Keyboard.prototype.F10 = 121;
    Keyboard.prototype.F11 = 122;
    Keyboard.prototype.F12 = 123;
    Keyboard.prototype.NUM_LOCK = 144;
    Keyboard.prototype.SCROLL_LOCK = 145;
    Keyboard.prototype.SEMICOLON = 186;
    Keyboard.prototype.EQUAL_SIGN = 187;
    Keyboard.prototype.COMMA = 188;
    Keyboard.prototype.DASH = 189;
    Keyboard.prototype.PERIOD = 190;
    Keyboard.prototype.FORWARD_SLASH = 191;
    Keyboard.prototype.GRAVE_ACCENT = 192;
    Keyboard.prototype.OPEN_BRACKET = 219;
    Keyboard.prototype.BACK_SLASH = 220;
    Keyboard.prototype.CLOSE_BRAKET = 221;
    Keyboard.prototype.SINGLE_QUOTE = 222;

    Keyboard.prototype.isDown = function( keyCode ) {
      return ( this.pressed[ keyCode ] == -1 ) ? null : this.pressed[ keyCode ];
    };

    Keyboard.prototype.onKeyDown = function( event, timer ) {
      if( event.keyCode == Keyboard.prototype.BACKSPACE ||
        event.keyCode == Keyboard.prototype.UP_ARROW ||
        event.keyCode == Keyboard.prototype.DOWN_ARROW ||
        event.keyCode == Keyboard.prototype.LEFT_ARROW ||
        event.keyCode == Keyboard.prototype.RIGHT_ARROW ||
        event.keyCode == Keyboard.prototype.PAGE_UP ||
        event.keyCode == Keyboard.prototype.PAGE_DOWN ||
        event.keyCode == Keyboard.prototype.SPACE ) {

        event.preventDefault();
      }

      this.pressed[ event.keyCode ] = timer.time;
    };

    Keyboard.prototype.onKeyUp = function( event ) {
      this.pressed[ event.keyCode ] = -1;
    };

    return Keyboard;
  }
);

define(
  'input/Mouse',[ 'lib/Three' ], function( _Three ) {

    var Mouse = function() {
      this.pressed = new Int32Array( 8 );
      this.buffer = new THREE.Vector3( 0, 0, 0 );
      this.position = new THREE.Vector3( 0, 0, 0 );

      for( var i = 0, len = this.length; i < len; i++ ) {
        this.pressed[ i ] = -1;
      }
    };

    Mouse.prototype.LMB = 0;
    Mouse.prototype.MID = 1;
    Mouse.prototype.RMB = 2;
    Mouse.prototype.B3 = 3;
    Mouse.prototype.B4 = 4;
    Mouse.prototype.B5 = 5;
    Mouse.prototype.B6 = 6;
    Mouse.prototype.B7 = 7;

    Mouse.prototype.isDown = function( button ) {
      return ( this.pressed[ button ] === -1 ) ? null : this.pressed[ button ];
    };

    Mouse.prototype.onMouseMove = function( event ) {
      this.position.set( event.clientX, event.clientY, 0 );
    };

    Mouse.prototype.onMouseDown = function( event, timer ) {
      event.preventDefault();
      this.pressed[ event.button ] = timer.time;
    };

    Mouse.prototype.onMouseUp = function( event ) {
      this.pressed[ event.button ] = -1;
    };

    Mouse.prototype.getMousePositionOnElement = function( e ) {
      var rect = e.getBoundingClientRect();
      this.buffer.set( this.position.x - rect.left, this.position.y - rect.top, 0 );
      return this.buffer;
    };

    return Mouse;
  }
);

define(
  'core/Common',[],function() {

    var Common = {};

    /**
     * @link http://stackoverflow.com/a/2117523
     * @returns {string}
     */
    Common.createUniqueId = function() {
      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(
        /[xy]/g, function( c ) {
          var r = Math.random() * 16 | 0, v = c === 'x' ? r : ( r & 0x3 | 0x8 );
          return v.toString( 16 );
        }
      );
    };

    Common.equals = function( obj, other ) {
      if( obj === null || other === null ) {
        return obj === null && other === null;
      }
      if( typeof obj === 'string' ) {
        return obj === other;
      }
      if( typeof obj !== 'object' ) {
        return obj === other;
      }
      if( obj.equals instanceof Function ) {
        return obj.equals( other );
      }
      return obj === other;
    };

    /**
     * Usage: indexOf( value, array [, fromIndex] )
     *
     * @parameter value The value to search for.
     * @parameter array An array through which to search.
     * @parameter fromIndex The index of the array at which to begin the search. The default is 0, which will search the whole array.
     * @returns index of given value on the array, -1 if not found;
     */
    Common.indexOf = function( value, array, i ) {
      var len;

      if( this.isArray( array ) ) {
        if( array.indexOf && typeof array.indexOf === 'function' ) {
          return array.indexOf( value, i );
        }

        len = array.length;
        i = i ? i < 0 ? max( 0, len + i ) : i : 0;

        for( ; i < len; i++ ) {
          // Skip accessing in sparse arrays
          if( i in array && array[ i ] === value ) {
            return i;
          }
        }
      }

      return -1;
    };

    Common.typeOf = function( obj ) {
      return Object.prototype.toString.apply( obj );
    };

    Common.isArray = function( a ) {
      return this.typeOf( a ) === '[object Array]';
    };

    return Common;
  }
);

define(
  'collection/Map',[ 'core/Common' ], function( Common ) {

    var Map = function() {
      this.keySet = [];
      this.entries = [];
    };

    Map.prototype.indexOf = function( key ) {
      return Common.indexOf( key, this.keySet );
    };

    Map.prototype.contains = function( key ) {
      return this.indexOf( key ) > -1;
    };

    Map.prototype.size = function() {
      return this.keySet.length;
    };

    Map.prototype.put = function( key, value ) {
      if( key ) {
        if( !this.contains( key ) ) {
          this.keySet.push( key );
        }
        this.entries[ key ] = value;
      }
    };

    Map.prototype.get = function( key ) {
      return this.entries[ key ];
    };

    Map.prototype.remove = function( key ) {
      var keyIndex = this.indexOf( key );
      if( keyIndex >= 0 ) {
        this.keySet.splice( keyIndex, 1 );
        delete this.entries[ key ];
      }
    };

    Map.prototype.isEmpty = function() {
      return this.size() === 0;
    };

    Map.prototype.clear = function() {
      this.keySet.length = 0;
      this.entries.length = 0;
    };

    Map.prototype.iterator = function() {
      var Iterator = function( keys, values ) {
        this.index = -1;

        this.hasNext = function() {
          return this.index + 1 < keys.length;
        };

        this.hasPrevious = function() {
          return this.index > 0;
        };

        this.next = function() {
          return values[ keys[ ++this.index ] ];
        };

        this.previous = function() {
          return values[ keys[ --this.index ] ];
        };

        this.first = function() {
          this.index = -1;
          return ( keys.length > 0 ) ? values[ keys[ 0 ] ] : null;
        };

        this.last = function() {
          this.index = keys.length - 1;
          return ( keys.length > 0 ) ? values[ keys[ this.index ] ] : null;
        };
      };

      return new Iterator( this.keySet, this.entries );
    };

    return Map;
  }
);

/**
 * Utility class that holds the THREE camera and the information of which scenes should be rendered in which camera.
 */
define(
  'render/Camera2D',[ 'lib/Three' ], function ( _Three ) {

    var Camera2D = function ( left, right, top, bottom, near, far ) {
      // A THREE.Camera object
      this.cam = new THREE.OrthographicCamera( left, right, top, bottom, near, far );

      // Translates the point of origin (0,0,0), to the top left corner
      this.cam.position.set( right, bottom, far );

      this.scenes = [];
    };

    Camera2D.prototype.addScene = function ( sceneId, scene ) {
      if ( sceneId && typeof sceneId === 'string' ) {
        this.scenes.push( sceneId );
      }
    };

    return Camera2D;
  }
);

/**
 * @author alteredq / http://alteredqualia.com/
 * @author mr.doob / http://mrdoob.com/
 *
 * Copyright (C) 2010-2014 three.js authors http://github.com/mrdoob/three.js
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

var Detector = {

  canvas: !!window.CanvasRenderingContext2D,

  webgl: (function() {
    try {
      var canvas = document.createElement( 'canvas' );
      return !!window.WebGLRenderingContext && ( canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' ) );
    } catch( e ) { return false; }
  })(),

  workers: !!window.Worker,

  fileapi: window.File && window.FileReader && window.FileList && window.Blob,

  getWebGLErrorMessage: function() {
    var element = document.createElement( 'div' );
    element.id = 'webgl-error-message';
    element.style.fontFamily = 'monospace';
    element.style.fontSize = '13px';
    element.style.fontWeight = 'normal';
    element.style.textAlign = 'center';
    element.style.background = '#fff';
    element.style.color = '#000';
    element.style.padding = '1.5em';
    element.style.width = '400px';
    element.style.margin = '5em auto 0';

    if( !this.webgl ) {
      element.innerHTML = window.WebGLRenderingContext ? [
        'Your graphics card does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br />',
        'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
      ].join( '\n' ) : [
        'Your browser does not seem to support <a href="http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style="color:#000">WebGL</a>.<br/>',
        'Find out how to get it <a href="http://get.webgl.org/" style="color:#000">here</a>.'
      ].join( '\n' );
    }
    return element;
  },

  addGetWebGLMessage: function( parameters ) {
    var parent, id, element;

    parameters = parameters || {};

    parent = parameters.parent !== undefined ? parameters.parent : document.body;
    id = parameters.id !== undefined ? parameters.id : 'oldie';

    element = Detector.getWebGLErrorMessage();
    element.id = id;

    parent.appendChild( element );
  }
};
define("lib/Detector", function(){});

define(
  'manager/SceneManager',[ 'collection/Map', 'render/Camera2D', 'core/Math', 'lib/Detector', 'lib/Three' ],
  function( Map, Camera2D, Math, _Detector, _Three ) {

    var instance = null;

    var SceneManager = function() {
      this.cameras = new Map();
      this.cameraIterator = this.cameras.iterator();
      this.scenes = new Map();
    };

    SceneManager.prototype.DEFAULT_CAMERA_ID = 'default_camera_id';
    SceneManager.prototype.DEFAULT_SCENE_ID = 'default_scene_id';

    SceneManager.prototype.init = function( bgcolor, width, height, target ) {
      // If its not supported, instantiate the canvas renderer to support all non WebGL browsers
      this.renderer = Detector.webgl ? new THREE.WebGLRenderer( { antialias: false } ) : new THREE.CanvasRenderer();

      // Set the background color of the renderer, with full opacity
      this.renderer.setClearColor( ( bgcolor ) ? bgcolor : 0xFFFFFF, 1 );

      // if no dimensions are provided, get the size of the inner window (content area) to create a full size renderer
      this.canvasWidth = ( width ) ? width : window.innerWidth;
      this.canvasHeight = ( height ) ? height : window.innerHeight;

      // since the rendering area is actually 3D, a Z translation on camera is required.
      this.z = Math.max( this.canvasWidth, this.canvasHeight );

      // set the renderer size
      this.renderer.setSize( this.canvasWidth, this.canvasHeight );

      // attach a canvas tag on the body
      var body = ( target ) ? target : document.getElementsByTagName( 'body' )[ 0 ];
      body.appendChild( this.renderer.domElement );

      this.createScene();
      this.createCamera();
    };

    // create a THREE.scene
    SceneManager.prototype.createScene = function( sceneId ) {
      this.scenes.put( sceneId ? sceneId : this.DEFAULT_SCENE_ID, new THREE.Scene() );
    };

    // create a camera to a scene
    SceneManager.prototype.createCamera = function( cameraId, sceneId, width, height ) {
      var scene = this.scenes.get( ( sceneId ) ? sceneId : this.DEFAULT_SCENE_ID );

      if( !cameraId ) {
        cameraId = this.DEFAULT_CAMERA_ID;
      }

      if( !width ) {
        width = this.canvasWidth;
      }

      if( !height ) {
        height = this.canvasHeight;
      }

      if( scene ) {
        // left, right, top, bottom, near, far
        var camera = new Camera2D( width / -2, width / 2, height / -2, height / 2, 1, Math.max( width, height ) );

        camera.addScene( ( sceneId ) ? sceneId : this.DEFAULT_SCENE_ID, scene );
        this.cameras.put( cameraId, camera );

      } else {
        console.log( 'Scene not found:' + sceneId );
        return;
      }
    };

    // find all renderable components of a given Game Object and attach the on the scene to be rendered
    SceneManager.prototype.attachToScene = function( gameObject, sceneId ) {
      var list = gameObject.listRenderableComponents();
      var scene = this.scenes.get( sceneId ? sceneId : this.DEFAULT_SCENE_ID );

      for( var i = 0, len = list.length; i < len; i++ ) {
        scene.add( list[ i ].getMesh() );
      }
    };

    SceneManager.prototype.render = function() {
      var camera, scene;

      this.cameraIterator.first();

      // iterate all cameras
      while( this.cameraIterator.hasNext() ) {
        camera = this.cameraIterator.next();

        // iterate all scenes registered to render on this camera
        for( var i = 0, len = camera.scenes.length; i < len; i++ ) {
          scene = this.scenes.get( camera.scenes[ i ] );

          if( scene ) {
            this.renderer.render( scene, camera.cam );
          }
        }
      }
    };

    SceneManager.getInstance = function() {
      if( instance === null ) {
        instance = new SceneManager();
      }
      return instance;
    };

    return SceneManager.getInstance();
  }
);

define( 'manager/EventManager',[ 'collection/Map' ], function( _Map ) {

  var instance = null;

  var Event = function( type, handler ) {
    this.type = type;
    this.handler = handler;
  };

  var Message = function( from, to, type, message, handler ) {
    this.from = from;
    this.to = to;
    this.type = type;
    this.message = message;
    this.handler = handler;
  };

  var EventManager = function() {
    this.listeners = new _Map();
    this.iterator = this.listeners.iterator();
  }

  EventManager.prototype.addListener = function( eventType, handler ) {
    this.listeners.put( eventType, new Event( eventType, handler ) );
  };

  EventManager.prototype.notify = function( eventType, params ) {
    this.iterator.first();
    var evt;

    // iterate through listeners that observe that eventType
    while ( this.iterator.hasNext() ) {
      evt = this.iterator.next();

      if ( evt.type === eventType ) {
        evt.handler( params );
      }
    }
  };

  EventManager.prototype.removeListener = function( eventType ) {
    this.listeners.remove( eventType );
  };

  EventManager.getInstance = function() {
    if ( instance === null ) {
      instance = new EventManager();
    }
    return instance;
  };

  return EventManager.getInstance();
} );

function c(a){throw a;}var d=void 0,aa=!0,ba=null,ca=!1,e;e||(e=eval("(function() { try { return Module || {} } catch(e) { return {} } })()"));var da={},ea;for(ea in e)e.hasOwnProperty(ea)&&(da[ea]=e[ea]);var fa="object"===typeof process&&"function"===typeof require,ga="object"===typeof window,ia="function"===typeof importScripts,ja=!ga&&!fa&&!ia;
if(fa){e.print||(e.print=function(a){process.stdout.write(a+"\n")});e.printErr||(e.printErr=function(a){process.stderr.write(a+"\n")});var ka=require("fs"),la=require("path");e.read=function(a,b){var a=la.normalize(a),f=ka.readFileSync(a);!f&&a!=la.resolve(a)&&(a=path.join(__dirname,"..","src",a),f=ka.readFileSync(a));f&&!b&&(f=f.toString());return f};e.readBinary=function(a){return e.read(a,aa)};e.load=function(a){ma(read(a))};e.thisProgram=1<process.argv.length?process.argv[1].replace(/\\/g,"/"):
"unknown-program";e.arguments=process.argv.slice(2);"undefined"!==typeof module&&(module.exports=e);process.on("uncaughtException",function(a){a instanceof na||c(a)})}else ja?(e.print||(e.print=print),"undefined"!=typeof printErr&&(e.printErr=printErr),e.read="undefined"!=typeof read?read:function(){c("no read() available (jsc?)")},e.readBinary=function(a){if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));a=read(a,"binary");oa("object"===typeof a);return a},"undefined"!=typeof scriptArgs?
e.arguments=scriptArgs:"undefined"!=typeof arguments&&(e.arguments=arguments),this.Module=e,eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined")):ga||ia?(e.read=function(a){var b=new XMLHttpRequest;b.open("GET",a,ca);b.send(ba);return b.responseText},"undefined"!=typeof arguments&&(e.arguments=arguments),"undefined"!==typeof console?(e.print||(e.print=function(a){console.log(a)}),e.printErr||(e.printErr=function(a){console.log(a)})):e.print||(e.print=
function(){}),ga?window.Module=e:e.load=importScripts):c("Unknown runtime environment. Where are we?");function ma(a){eval.call(ba,a)}!e.load&&e.read&&(e.load=function(a){ma(e.read(a))});e.print||(e.print=function(){});e.printErr||(e.printErr=e.print);e.arguments||(e.arguments=[]);e.thisProgram||(e.thisProgram="./this.program");e.print=e.print;e.n=e.printErr;e.preRun=[];e.postRun=[];for(ea in da)da.hasOwnProperty(ea)&&(e[ea]=da[ea]);
var h={ga:function(a){qa=a},aa:function(){return qa},A:function(){return ra},J:function(a){ra=a},Q:function(a){switch(a){case "i1":case "i8":return 1;case "i16":return 2;case "i32":return 4;case "i64":return 8;case "float":return 4;case "double":return 8;default:return"*"===a[a.length-1]?h.B:"i"===a[0]?(a=parseInt(a.substr(1)),oa(0===a%8),a/8):0}},P:function(a){return Math.max(h.Q(a),h.B)},ha:16,ua:function(a,b,f){return!f&&("i64"==a||"double"==a)?8:!a?Math.min(b,8):Math.min(b||(a?h.P(a):0),h.B)},
r:function(a,b,f){return f&&f.length?(f.splice||(f=Array.prototype.slice.call(f)),f.splice(0,0,b),e["dynCall_"+a].apply(ba,f)):e["dynCall_"+a].call(ba,b)},p:[ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba,ba],V:function(a){for(var b=0;b<h.p.length;b++)if(!h.p[b])return h.p[b]=a,2*(1+b);c("Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.")},fa:function(a){h.p[(a-2)/2]=ba},O:function(a,b){h.F||(h.F={});var f=h.F[a];if(f)return f;for(var f=[],g=
0;g<b;g++)f.push(String.fromCharCode(36)+g);g=sa(a);'"'===g[0]&&(g.indexOf('"',1)===g.length-1?g=g.substr(1,g.length-2):ua("invalid EM_ASM input |"+g+"|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)"));try{var k=eval("(function(Module, FS) { return function("+f.join(",")+"){ "+g+" } })")(e,"undefined"!==typeof va?va:ba)}catch(n){e.n("error in executing inline EM_ASM code: "+n+" on: \n\n"+g+"\n\nwith args |"+f+"| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)"),
c(n)}return h.F[a]=k},q:function(a){h.q.I||(h.q.I={});h.q.I[a]||(h.q.I[a]=1,e.n(a))},G:{},wa:function(a,b){oa(b);h.G[b]||(h.G[b]={});var f=h.G[b];f[a]||(f[a]=function(){return h.r(b,a,arguments)});return f[a]},M:function(){var a=[],b=0;this.da=function(f){f&=255;if(0==a.length){if(0==(f&128))return String.fromCharCode(f);a.push(f);b=192==(f&224)?1:224==(f&240)?2:3;return""}if(b&&(a.push(f),b--,0<b))return"";var f=a[0],g=a[1],k=a[2],n=a[3];2==a.length?f=String.fromCharCode((f&31)<<6|g&63):3==a.length?
f=String.fromCharCode((f&15)<<12|(g&63)<<6|k&63):(f=(f&7)<<18|(g&63)<<12|(k&63)<<6|n&63,f=String.fromCharCode(((f-65536)/1024|0)+55296,(f-65536)%1024+56320));a.length=0;return f};this.ea=function(a){for(var a=unescape(encodeURIComponent(a)),b=[],k=0;k<a.length;k++)b.push(a.charCodeAt(k));return b}},va:function(){c("You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work")},u:function(a){var b=ra;ra=ra+a|0;ra=ra+15&-16;return b},U:function(a){var b=
wa;wa=wa+a|0;wa=wa+15&-16;return b},o:function(a){var b=xa;xa=xa+a|0;xa=xa+15&-16;xa>=ya&&ua("Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value "+ya+", (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.");return b},C:function(a,b){return Math.ceil(a/(b?b:16))*(b?b:16)},ca:function(a,b,f){return f?+(a>>>0)+4294967296*+(b>>>0):+(a>>>
0)+4294967296*+(b|0)},L:8,B:4,ia:0};e.Runtime=h;h.addFunction=h.V;h.removeFunction=h.fa;var za=ca,Ba,Da,qa;function oa(a,b){a||ua("Assertion failed: "+b)}function Ea(a){var b=e["_"+a];if(!b)try{b=eval("_"+a)}catch(f){}oa(b,"Cannot call unknown function "+a+" (perhaps LLVM optimizations or closure removed it?)");return b}var Fa,Ga;
(function(){function a(a){a=a.toString().match(k).slice(1);return{arguments:a[0],body:a[1],returnValue:a[2]}}var b=0,f={stackSave:function(){b=h.A()},stackRestore:function(){h.J(b)},arrayToC:function(a){var b=h.u(a.length);Ha(a,b);return b},stringToC:function(a){var b=0;a!==ba&&(a!==d&&0!==a)&&(b=h.u((a.length<<2)+1),Ia(a,b));return b}},g={string:f.stringToC,array:f.arrayToC};Ga=function(a,k,m,n){var a=Ea(a),ta=[];if(n)for(var Aa=0;Aa<n.length;Aa++){var ib=g[m[Aa]];ib?(0===b&&(b=h.A()),ta[Aa]=ib(n[Aa])):
ta[Aa]=n[Aa]}m=a.apply(ba,ta);"string"===k&&(m=sa(m));0!==b&&f.stackRestore();return m};var k=/^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/,n={},m;for(m in f)f.hasOwnProperty(m)&&(n[m]=a(f[m]));Fa=function(b,f,g){var g=g||[],k=Ea(b),b=g.every(function(a){return"number"===a}),m="string"!==f;if(m&&b)return k;var Aa=g.map(function(a,b){return"$"+b}),f="(function("+Aa.join(",")+") {",ib=g.length;if(!b)for(var f=f+(n.stackSave.body+";"),Va=0;Va<ib;Va++){var db=Aa[Va],Ca=g[Va];
"number"!==Ca&&(Ca=n[Ca+"ToC"],f+="var "+Ca.arguments+" = "+db+";",f+=Ca.body+";",f+=db+"="+Ca.returnValue+";")}g=a(function(){return k}).returnValue;f+="var ret = "+g+"("+Aa.join(",")+");";m||(g=a(function(){return sa}).returnValue,f+="ret = "+g+"(ret);");b||(f+=n.stackRestore.body+";");return eval(f+"return ret})")}})();e.cwrap=Fa;e.ccall=Ga;
function Ja(a,b,f){f=f||"i8";"*"===f.charAt(f.length-1)&&(f="i32");switch(f){case "i1":Ka[a>>0]=b;break;case "i8":Ka[a>>0]=b;break;case "i16":La[a>>1]=b;break;case "i32":Ma[a>>2]=b;break;case "i64":Da=[b>>>0,(Ba=b,1<=+Oa(Ba)?0<Ba?(Pa(+Qa(Ba/4294967296),4294967295)|0)>>>0:~~+Ra((Ba-+(~~Ba>>>0))/4294967296)>>>0:0)];Ma[a>>2]=Da[0];Ma[a+4>>2]=Da[1];break;case "float":Sa[a>>2]=b;break;case "double":Ta[a>>3]=b;break;default:ua("invalid type for setValue: "+f)}}e.setValue=Ja;
function Ua(a,b){b=b||"i8";"*"===b.charAt(b.length-1)&&(b="i32");switch(b){case "i1":return Ka[a>>0];case "i8":return Ka[a>>0];case "i16":return La[a>>1];case "i32":return Ma[a>>2];case "i64":return Ma[a>>2];case "float":return Sa[a>>2];case "double":return Ta[a>>3];default:ua("invalid type for setValue: "+b)}return ba}e.getValue=Ua;var Wa=1,Xa=2,Za=4;e.ALLOC_NORMAL=0;e.ALLOC_STACK=Wa;e.ALLOC_STATIC=Xa;e.ALLOC_DYNAMIC=3;e.ALLOC_NONE=Za;
function $a(a,b,f,g){var k,n;"number"===typeof a?(k=aa,n=a):(k=ca,n=a.length);var m="string"===typeof b?b:ba,f=f==Za?g:[ab,h.u,h.U,h.o][f===d?Xa:f](Math.max(n,m?1:b.length));if(k){g=f;oa(0==(f&3));for(a=f+(n&-4);g<a;g+=4)Ma[g>>2]=0;for(a=f+n;g<a;)Ka[g++>>0]=0;return f}if("i8"===m)return a.subarray||a.slice?bb.set(a,f):bb.set(new Uint8Array(a),f),f;for(var g=0,l,ha;g<n;){var Na=a[g];"function"===typeof Na&&(Na=h.xa(Na));k=m||b[g];0===k?g++:("i64"==k&&(k="i32"),Ja(f+g,Na,k),ha!==k&&(l=h.Q(k),ha=k),
g+=l)}return f}e.allocate=$a;function sa(a,b){if(0===b||!a)return"";for(var f=ca,g,k=0;;){g=bb[a+k>>0];if(128<=g)f=aa;else if(0==g&&!b)break;k++;if(b&&k==b)break}b||(b=k);var n="";if(!f){for(;0<b;)g=String.fromCharCode.apply(String,bb.subarray(a,a+Math.min(b,1024))),n=n?n+g:g,a+=1024,b-=1024;return n}f=new h.M;for(k=0;k<b;k++)g=bb[a+k>>0],n+=f.da(g);return n}e.Pointer_stringify=sa;e.UTF16ToString=function(a){for(var b=0,f="";;){var g=La[a+2*b>>1];if(0==g)return f;++b;f+=String.fromCharCode(g)}};
e.stringToUTF16=function(a,b){for(var f=0;f<a.length;++f)La[b+2*f>>1]=a.charCodeAt(f);La[b+2*a.length>>1]=0};e.UTF32ToString=function(a){for(var b=0,f="";;){var g=Ma[a+4*b>>2];if(0==g)return f;++b;65536<=g?(g-=65536,f+=String.fromCharCode(55296|g>>10,56320|g&1023)):f+=String.fromCharCode(g)}};e.stringToUTF32=function(a,b){for(var f=0,g=0;g<a.length;++g){var k=a.charCodeAt(g);if(55296<=k&&57343>=k)var n=a.charCodeAt(++g),k=65536+((k&1023)<<10)|n&1023;Ma[b+4*f>>2]=k;++f}Ma[b+4*f>>2]=0};
function cb(a){function b(f,g,k){var g=g||Infinity,m="",n=[],V;if("N"===a[l]){l++;"K"===a[l]&&l++;for(V=[];"E"!==a[l];)if("S"===a[l]){l++;var pa=a.indexOf("_",l);V.push(Na[a.substring(l,pa)||0]||"?");l=pa+1}else if("C"===a[l])V.push(V[V.length-1]),l+=2;else{var pa=parseInt(a.substr(l)),x=pa.toString().length;if(!pa||!x){l--;break}var ta=a.substr(l+x,pa);V.push(ta);Na.push(ta);l+=x+pa}l++;V=V.join("::");g--;if(0===g)return f?[V]:V}else if(("K"===a[l]||Ya&&"L"===a[l])&&l++,pa=parseInt(a.substr(l)))x=
pa.toString().length,V=a.substr(l+x,pa),l+=x+pa;Ya=ca;"I"===a[l]?(l++,pa=b(aa),x=b(aa,1,aa),m+=x[0]+" "+V+"<"+pa.join(", ")+">"):m=V;a:for(;l<a.length&&0<g--;)if(V=a[l++],V in ha)n.push(ha[V]);else switch(V){case "P":n.push(b(aa,1,aa)[0]+"*");break;case "R":n.push(b(aa,1,aa)[0]+"&");break;case "L":l++;pa=a.indexOf("E",l)-l;n.push(a.substr(l,pa));l+=pa+2;break;case "A":pa=parseInt(a.substr(l));l+=pa.toString().length;"_"!==a[l]&&c("?");l++;n.push(b(aa,1,aa)[0]+" ["+pa+"]");break;case "E":break a;default:m+=
"?"+V;break a}!k&&(1===n.length&&"void"===n[0])&&(n=[]);return f?(m&&n.push(m+"?"),n):m+("("+n.join(", ")+")")}var f=!!e.___cxa_demangle;if(f)try{var g=ab(a.length);Ia(a.substr(1),g);var k=ab(4),n=e.___cxa_demangle(g,0,0,k);if(0===Ua(k,"i32")&&n)return sa(n)}catch(m){}finally{g&&eb(g),k&&eb(k),n&&eb(n)}var l=3,ha={v:"void",b:"bool",c:"char",s:"short",i:"int",l:"long",f:"float",d:"double",w:"wchar_t",a:"signed char",h:"unsigned char",t:"unsigned short",j:"unsigned int",m:"unsigned long",x:"long long",
y:"unsigned long long",z:"..."},Na=[],Ya=aa,g=a;try{if("Object._main"==a||"_main"==a)return"main()";"number"===typeof a&&(a=sa(a));if("_"!==a[0]||"_"!==a[1]||"Z"!==a[2])return a;switch(a[3]){case "n":return"operator new()";case "d":return"operator delete()"}g=b()}catch(ta){g+="?"}0<=g.indexOf("?")&&!f&&h.q("warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");return g}
function fb(){var a;a:{a=Error();if(!a.stack){try{c(Error(0))}catch(b){a=b}if(!a.stack){a="(no stack trace available)";break a}}a=a.stack.toString()}return a.replace(/__Z[\w\d_]+/g,function(a){var b=cb(a);return a===b?a:a+" ["+b+"]"})}e.stackTrace=function(){return fb()};for(var Ka,bb,La,gb,Ma,hb,Sa,Ta,jb=0,wa=0,kb=0,ra=0,lb=0,mb=0,xa=0,nb=e.TOTAL_STACK||5242880,ya=e.TOTAL_MEMORY||16777216,ob=65536;ob<ya||ob<2*nb;)ob=16777216>ob?2*ob:ob+16777216;
ob!==ya&&(e.n("increasing TOTAL_MEMORY to "+ob+" to be compliant with the asm.js spec"),ya=ob);oa("undefined"!==typeof Int32Array&&"undefined"!==typeof Float64Array&&!!(new Int32Array(1)).subarray&&!!(new Int32Array(1)).set,"JS engine does not provide full typed array support");var pb=new ArrayBuffer(ya);Ka=new Int8Array(pb);La=new Int16Array(pb);Ma=new Int32Array(pb);bb=new Uint8Array(pb);gb=new Uint16Array(pb);hb=new Uint32Array(pb);Sa=new Float32Array(pb);Ta=new Float64Array(pb);Ma[0]=255;
oa(255===bb[0]&&0===bb[3],"Typed arrays 2 must be run on a little-endian system");e.HEAP=d;e.buffer=pb;e.HEAP8=Ka;e.HEAP16=La;e.HEAP32=Ma;e.HEAPU8=bb;e.HEAPU16=gb;e.HEAPU32=hb;e.HEAPF32=Sa;e.HEAPF64=Ta;function qb(a){for(;0<a.length;){var b=a.shift();if("function"==typeof b)b();else{var f=b.ta;"number"===typeof f?b.D===d?h.r("v",f):h.r("vi",f,[b.D]):f(b.D===d?ba:b.D)}}}var rb=[],sb=[],tb=[],ub=[],vb=[],wb=ca;function yb(a){rb.unshift(a)}e.addOnPreRun=e.na=yb;e.addOnInit=e.ka=function(a){sb.unshift(a)};
e.addOnPreMain=e.ma=function(a){tb.unshift(a)};e.addOnExit=e.ja=function(a){ub.unshift(a)};function zb(a){vb.unshift(a)}e.addOnPostRun=e.la=zb;function Ab(a,b,f){a=(new h.M).ea(a);f&&(a.length=f);b||a.push(0);return a}e.intArrayFromString=Ab;function Bb(a){for(var b=[],f=0;f<a.length;f++){var g=a[f];255<g&&(g&=255);b.push(String.fromCharCode(g))}return b.join("")}e.intArrayToString=Bb;function Ia(a,b,f){a=Ab(a,f);for(f=0;f<a.length;)Ka[b+f>>0]=a[f],f+=1}e.writeStringToMemory=Ia;
function Ha(a,b){for(var f=0;f<a.length;f++)Ka[b+f>>0]=a[f]}e.writeArrayToMemory=Ha;e.writeAsciiToMemory=function(a,b,f){for(var g=0;g<a.length;g++)Ka[b+g>>0]=a.charCodeAt(g);f||(Ka[b+a.length>>0]=0)};function Cb(a,b){return 0<=a?a:32>=b?2*Math.abs(1<<b-1)+a:Math.pow(2,b)+a}function Db(a,b){if(0>=a)return a;var f=32>=b?Math.abs(1<<b-1):Math.pow(2,b-1);if(a>=f&&(32>=b||a>f))a=-2*f+a;return a}
if(!Math.imul||-5!==Math.imul(4294967295,5))Math.imul=function(a,b){var f=a&65535,g=b&65535;return f*g+((a>>>16)*g+f*(b>>>16)<<16)|0};Math.za=Math.imul;var Oa=Math.abs,Eb=Math.cos,Fb=Math.sin,Gb=Math.atan2,Hb=Math.sqrt,Ra=Math.ceil,Qa=Math.floor,Pa=Math.min,Ib=0,Jb=ba,Kb=ba;function Lb(){Ib++;e.monitorRunDependencies&&e.monitorRunDependencies(Ib)}e.addRunDependency=Lb;
function Mb(){Ib--;e.monitorRunDependencies&&e.monitorRunDependencies(Ib);if(0==Ib&&(Jb!==ba&&(clearInterval(Jb),Jb=ba),Kb)){var a=Kb;Kb=ba;a()}}e.removeRunDependency=Mb;e.preloadedImages={};e.preloadedAudios={};var Nb=ba,jb=8,wa=jb+19808;sb.push();
$a([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,3,0,0,42,0,0,0,43,0,0,0,42,0,0,0,43,0,0,0,42,0,0,0,42,0,0,0,44,0,0,0,42,0,0,0,54,74,83,68,114,97,119,0,54,98,50,68,114,97,119,0,136,74,0,0,184,3,0,0,176,74,0,0,176,3,0,0,192,3,0,0,0,0,0,0,123,32,118,
97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,84,114,97,110,115,102,111,114,109,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,
117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,84,114,97,110,115,102,111,114,109,46,39,59,32,115,101,108,102,46,68,114,97,119,84,114,97,110,115,102,111,114,109,40,36,49,41,59,32,125,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,
80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,101,103,109,101,110,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,101,103,109,101,110,116,46,39,59,32,115,101,108,102,46,68,114,97,119,83,101,103,109,101,110,116,40,36,49,44,36,50,44,36,
51,41,59,32,125,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,
109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,46,39,59,32,115,101,108,102,46,68,114,97,119,83,111,108,105,100,67,105,114,99,108,101,40,36,49,44,36,50,44,36,51,44,36,52,41,59,32,125,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,
93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,67,105,114,99,108,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,67,105,114,99,108,101,46,39,59,32,115,101,108,
102,46,68,114,97,119,67,105,114,99,108,101,40,36,49,44,36,50,44,36,51,41,59,32,125,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,
109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,114,97,119,58,58,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,46,39,59,32,115,101,108,102,46,68,114,97,119,83,111,108,105,100,80,111,108,121,103,111,110,40,36,49,44,36,50,44,36,51,41,59,32,125,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,
67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,114,97,119,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,68,114,97,119,80,111,108,121,103,111,110,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,
83,68,114,97,119,58,58,68,114,97,119,80,111,108,121,103,111,110,46,39,59,32,115,101,108,102,46,68,114,97,119,80,111,108,121,103,111,110,40,36,49,44,36,50,44,36,51,41,59,32,125,0,0,0,0,0,56,9,0,0,44,0,0,0,45,0,0,0,42,0,0,0,0,0,0,0,49,53,74,83,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,0,0,0,0,176,74,0,0,32,9,0,0,40,49,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,
116,97,99,116,70,105,108,116,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,83,104,111,117,108,100,67,111,108,108,105,100,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,
70,105,108,116,101,114,58,58,83,104,111,117,108,100,67,111,108,108,105,100,101,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,83,104,111,117,108,100,67,111,108,108,105,100,101,40,36,49,44,36,50,41,59,32,125,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,104,0,0,0,0,0,0,0,0,208,10,0,0,46,0,0,0,47,0,0,0,43,0,0,0,44,0,0,0,42,0,0,0,43,0,0,0,49,55,74,
83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,0,0,0,0,49,55,98,50,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,0,0,0,0,0,136,74,0,0,176,10,0,0,176,74,0,0,152,10,0,0,200,10,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,
114,111,112,101,114,116,121,40,39,80,111,115,116,83,111,108,118,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,80,111,115,116,83,111,108,118,101,46,39,59,32,115,101,108,102,46,80,111,115,116,83,111,108,118,101,40,36,
49,44,36,50,41,59,32,125,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,80,114,101,83,111,108,118,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,
115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,80,114,101,83,111,108,118,101,46,39,59,32,115,101,108,102,46,80,114,101,83,111,108,118,101,40,36,49,44,36,50,41,59,32,125,0,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,
111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,69,110,100,67,111,110,116,97,99,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,
76,105,115,116,101,110,101,114,58,58,69,110,100,67,111,110,116,97,99,116,46,39,59,32,115,101,108,102,46,69,110,100,67,111,110,116,97,99,116,40,36,49,41,59,32,125,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,66,101,
103,105,110,67,111,110,116,97,99,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,67,111,110,116,97,99,116,76,105,115,116,101,110,101,114,58,58,66,101,103,105,110,67,111,110,116,97,99,116,46,39,59,32,115,101,108,102,46,66,101,103,105,110,67,111,110,116,97,99,116,40,36,49,41,59,
32,125,0,0,0,0,0,0,0,0,0,0,216,14,0,0,48,0,0,0,49,0,0,0,42,0,0,0,0,0,0,0,49,55,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,49,55,98,50,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,0,0,0,0,0,136,74,0,0,184,14,0,0,176,74,0,0,160,14,0,0,208,14,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,
59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,82,101,112,111,114,116,70,105,120,116,117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,82,97,121,67,97,115,116,67,97,108,108,98,97,99,107,58,58,82,101,112,111,114,116,70,
105,120,116,117,114,101,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,82,101,112,111,114,116,70,105,120,116,117,114,101,40,36,49,44,36,50,44,36,51,44,36,52,41,59,32,125,0,0,0,0,0,0,0,56,16,0,0,50,0,0,0,51,0,0,0,42,0,0,0,0,0,0,0,49,53,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,49,53,98,50,81,117,101,114,121,67,97,108,108,98,97,99,107,0,0,0,0,0,0,0,136,74,0,0,24,16,0,0,176,74,0,0,0,16,0,0,48,16,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,
108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,82,101,112,111,114,116,70,105,120,116,117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,
105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,81,117,101,114,121,67,97,108,108,98,97,99,107,58,58,82,101,112,111,114,116,70,105,120,116,117,114,101,46,39,59,32,114,101,116,117,114,110,32,115,101,108,102,46,82,101,112,111,114,116,70,105,120,116,117,114,101,40,36,49,41,59,32,125,0,0,0,0,0,0,0,0,48,32,60,61,32,99,104,105,108,100,73,110,100,101,120,32,38,38,32,99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,112,114,111,120,121,67,111,117,110,116,0,0,0,0,66,111,120,50,68,
95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,104,0,71,101,116,65,65,66,66,0,98,50,73,115,86,97,108,105,100,40,100,101,110,115,105,116,121,41,32,38,38,32,100,101,110,115,105,116,121,32,62,61,32,48,46,48,102,0,0,0,83,101,116,68,101,110,115,105,116,121,0,0,0,0,0,0,0,0,0,0,104,18,0,0,52,0,0,0,53,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,50,49,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,0,50,56,98,50,
68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,87,114,97,112,112,101,114,0,0,50,49,98,50,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,0,136,74,0,0,48,18,0,0,16,75,0,0,16,18,0,0,0,0,0,0,1,0,0,0,72,18,0,0,0,0,0,0,176,74,0,0,248,17,0,0,80,18,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,
115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,101,115,116,114,117,99,
116,105,111,110,76,105,115,116,101,110,101,114,58,58,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,46,39,59,32,115,101,108,102,46,83,97,121,71,111,111,100,98,121,101,70,105,120,116,117,114,101,40,36,49,41,59,32,125,0,0,0,0,0,0,0,123,32,118,97,114,32,115,101,108,102,32,61,32,77,111,100,117,108,101,91,39,103,101,116,67,97,99,104,101,39,93,40,77,111,100,117,108,101,91,39,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,39,93,41,91,36,48,93,59,32,105,102,
32,40,33,115,101,108,102,46,104,97,115,79,119,110,80,114,111,112,101,114,116,121,40,39,83,97,121,71,111,111,100,98,121,101,74,111,105,110,116,39,41,41,32,116,104,114,111,119,32,39,97,32,74,83,73,109,112,108,101,109,101,110,116,97,116,105,111,110,32,109,117,115,116,32,105,109,112,108,101,109,101,110,116,32,97,108,108,32,102,117,110,99,116,105,111,110,115,44,32,121,111,117,32,102,111,114,103,111,116,32,74,83,68,101,115,116,114,117,99,116,105,111,110,76,105,115,116,101,110,101,114,58,58,83,97,121,71,
111,111,100,98,121,101,74,111,105,110,116,46,39,59,32,115,101,108,102,46,83,97,121,71,111,111,100,98,121,101,74,111,105,110,116,40,36,49,41,59,32,125,0,0,0,0,0,0,0,0,0,248,21,0,0,49,0,0,0,50,0,0,0,42,0,0,0,42,0,0,0,54,0,0,0,51,0,0,0,55,0,0,0,56,0,0,0,52,0,0,0,53,0,0,0,43,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,77,111,116,111,114,74,111,105,110,116,46,99,112,112,0,0,0,0,0,98,50,73,115,86,97,108,105,
100,40,102,97,99,116,111,114,41,32,38,38,32,48,46,48,102,32,60,61,32,102,97,99,116,111,114,32,38,38,32,102,97,99,116,111,114,32,60,61,32,49,46,48,102,0,0,0,83,101,116,67,111,114,114,101,99,116,105,111,110,70,97,99,116,111,114,0,0,0,0,0,32,32,98,50,77,111,116,111,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,32,32,106,100,46,108,105,110,101,97,114,79,102,102,115,101,116,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,97,110,103,
117,108,97,114,79,102,102,115,101,116,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,106,100,46,99,111,114,114,101,99,116,105,111,110,70,97,99,116,111,114,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,49,50,98,50,77,111,116,111,114,74,111,105,110,116,0,0,55,98,50,74,111,105,110,116,0,0,0,0,0,0,0,0,136,74,0,0,224,21,0,0,176,74,0,0,208,21,0,0,240,21,0,0,0,0,0,0,100,101,110,32,62,32,48,46,48,102,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,
105,111,110,47,98,50,67,111,108,108,105,100,101,69,100,103,101,46,99,112,112,0,0,98,50,67,111,108,108,105,100,101,69,100,103,101,65,110,100,67,105,114,99,108,101,0,0,48,32,60,61,32,101,100,103,101,49,32,38,38,32,101,100,103,101,49,32,60,32,112,111,108,121,49,45,62,109,95,99,111,117,110,116,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,67,111,108,108,105,100,101,80,111,108,121,103,111,110,46,99,112,112,0,0,0,0,0,0,0,98,50,70,105,110,
100,73,110,99,105,100,101,110,116,69,100,103,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,99,104,97,105,110,45,62,109,95,99,111,117,110,116,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,99,112,112,0,0,0,0,0,98,50,68,105,115,116,97,110,99,101,0,0,0,0,0,0,71,101,116,77,101,116,114,105,99,0,0,0,0,0,0,0,71,101,
116,87,105,116,110,101,115,115,80,111,105,110,116,115,0,0,0,0,0,0,0,0,99,97,99,104,101,45,62,99,111,117,110,116,32,60,61,32,51,0,0,0,0,0,0,0,82,101,97,100,67,97,99,104,101,0,0,0,0,0,0,0,109,95,110,111,100,101,67,111,117,110,116,32,61,61,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,99,112,112,0,0,65,108,108,111,99,97,116,101,78,111,100,
101,0,0,0,0,48,32,60,61,32,110,111,100,101,73,100,32,38,38,32,110,111,100,101,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,70,114,101,101,78,111,100,101,0,0,0,0,0,0,0,0,48,32,60,32,109,95,110,111,100,101,67,111,117,110,116,0,68,101,115,116,114,111,121,80,114,111,120,121,0,0,0,0,109,95,110,111,100,101,115,91,112,114,111,120,121,73,100,93,46,73,115,76,101,97,102,40,41,0,0,0,0,0,0,0,77,111,118,101,80,114,111,120,121,0,0,0,0,0,0,0,99,104,105,108,100,49,32,33,61,32,40,45,49,41,
0,0,73,110,115,101,114,116,76,101,97,102,0,0,0,0,0,0,99,104,105,108,100,50,32,33,61,32,40,45,49,41,0,0,105,65,32,33,61,32,40,45,49,41,0,0,0,0,0,0,66,97,108,97,110,99,101,0,48,32,60,61,32,105,66,32,38,38,32,105,66,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,67,32,38,38,32,105,67,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,70,32,38,38,32,105,70,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,
105,71,32,38,38,32,105,71,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,100,101,115,91,67,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,32,61,61,32,105,65,0,48,32,60,61,32,105,68,32,38,38,32,105,68,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,48,32,60,61,32,105,69,32,38,38,32,105,69,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,109,95,110,111,100,101,115,91,66,45,62,112,97,114,101,110,116,93,46,99,104,105,108,100,50,
32,61,61,32,105,65,0,110,111,100,101,45,62,73,115,76,101,97,102,40,41,32,61,61,32,102,97,108,115,101,0,71,101,116,77,97,120,66,97,108,97,110,99,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,116,97,114,103,101,116,32,62,32,116,111,108,101,114,97,110,99,101,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,84,105,109,101,79,102,73,109,112,97,99,116,46,99,112,112,0,98,50,84,105,109,101,79,
102,73,109,112,97,99,116,0,0,69,118,97,108,117,97,116,101,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,105,115,116,97,110,99,101,46,104,0,0,0,0,0,0,0,71,101,116,86,101,114,116,101,120,0,0,0,0,0,0,0,70,105,110,100,77,105,110,83,101,112,97,114,97,116,105,111,110,0,0,0,0,0,0,0,48,32,60,32,99,111,117,110,116,32,38,38,
32,99,111,117,110,116,32,60,32,51,0,0,0,0,0,0,208,28,0,0,57,0,0,0,58,0,0,0,44,0,0,0,42,0,0,0,43,0,0,0,42,0,0,0,45,0,0,0,43,0,0,0,109,95,118,101,114,116,105,99,101,115,32,61,61,32,48,76,32,38,38,32,109,95,99,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,115,47,98,50,67,104,97,105,110,83,104,97,112,101,46,99,112,112,0,0,0,0,67,114,101,97,116,101,76,111,111,112,0,0,0,0,0,0,98,50,68,
105,115,116,97,110,99,101,83,113,117,97,114,101,100,40,118,49,44,32,118,50,41,32,62,32,48,46,48,48,53,102,32,42,32,48,46,48,48,53,102,0,0,0,0,0,67,114,101,97,116,101,67,104,97,105,110,0,0,0,0,0,99,111,117,110,116,32,62,61,32,50,0,0,0,0,0,0,98,50,68,105,115,116,97,110,99,101,83,113,117,97,114,101,100,40,118,101,114,116,105,99,101,115,91,105,45,49,93,44,32,118,101,114,116,105,99,101,115,91,105,93,41,32,62,32,48,46,48,48,53,102,32,42,32,48,46,48,48,53,102,0,48,32,60,61,32,105,110,100,101,120,32,38,38,
32,105,110,100,101,120,32,60,32,109,95,99,111,117,110,116,32,45,32,49,0,0,0,0,0,0,0,71,101,116,67,104,105,108,100,69,100,103,101,0,0,0,0,99,104,105,108,100,73,110,100,101,120,32,60,32,109,95,99,111,117,110,116,0,0,0,0,67,111,109,112,117,116,101,65,65,66,66,0,0,0,0,0,49,50,98,50,67,104,97,105,110,83,104,97,112,101,0,0,55,98,50,83,104,97,112,101,0,0,0,0,0,0,0,0,136,74,0,0,184,28,0,0,176,74,0,0,168,28,0,0,200,28,0,0,0,0,0,0,0,0,0,0,24,29,0,0,59,0,0,0,60,0,0,0,45,0,0,0,43,0,0,0,44,0,0,0,43,0,0,0,46,0,
0,0,44,0,0,0,49,51,98,50,67,105,114,99,108,101,83,104,97,112,101,0,176,74,0,0,8,29,0,0,200,28,0,0,0,0,0,0,0,0,0,0,96,29,0,0,61,0,0,0,62,0,0,0,46,0,0,0,44,0,0,0,45,0,0,0,44,0,0,0,47,0,0,0,45,0,0,0,49,49,98,50,69,100,103,101,83,104,97,112,101,0,0,0,176,74,0,0,80,29,0,0,200,28,0,0,0,0,0,0,51,32,60,61,32,99,111,117,110,116,32,38,38,32,99,111,117,110,116,32,60,61,32,56,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,83,104,97,112,101,
115,47,98,50,80,111,108,121,103,111,110,83,104,97,112,101,46,99,112,112,0,0,83,101,116,0,0,0,0,0,101,100,103,101,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,32,42,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,0,0,0,48,46,48,102,32,60,61,32,108,111,119,101,114,32,38,38,32,108,111,119,101,114,32,60,61,32,105,110,112,117,116,46,109,97,120,70,114,97,99,116,105,111,110,0,0,
0,0,0,109,95,99,111,117,110,116,32,62,61,32,51,0,0,0,0,67,111,109,112,117,116,101,77,97,115,115,0,0,0,0,0,97,114,101,97,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,0,208,30,0,0,63,0,0,0,64,0,0,0,47,0,0,0,45,0,0,0,46,0,0,0,45,0,0,0,48,0,0,0,46,0,0,0,49,52,98,50,80,111,108,121,103,111,110,83,104,97,112,101,0,0,0,0,0,0,0,0,176,74,0,0,184,30,0,0,200,28,0,0,0,0,0,0,99,111,117,110,116,32,62,61,32,51,0,0,0,0,0,0,67,111,109,112,117,116,101,67,101,110,116,114,111,
105,100,0,16,0,0,0,32,0,0,0,64,0,0,0,96,0,0,0,128,0,0,0,160,0,0,0,192,0,0,0,224,0,0,0,0,1,0,0,64,1,0,0,128,1,0,0,192,1,0,0,0,2,0,0,128,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,106,32,60,32,98,50,95,98,108,111,99,107,83,105,122,
101,115,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,98,50,66,108,111,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,0,48,32,60,32,115,105,122,101,0,0,0,0,0,0,0,0,48,32,60,61,32,105,110,100,101,120,32,38,38,32,105,110,100,101,120,32,60,32,98,50,95,98,108,111,99,107,83,105,122,101,115,0,0,0,0,0,98,108,111,99,107,67,111,117,110,116,32,42,32,98,108,111,99,107,83,
105,122,101,32,60,61,32,98,50,95,99,104,117,110,107,83,105,122,101,0,0,109,95,105,110,100,101,120,32,61,61,32,48,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,46,99,112,112,0,0,126,98,50,83,116,97,99,107,65,108,108,111,99,97,116,111,114,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,61,61,32,48,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,60,32,98,50,95,109,97,
120,83,116,97,99,107,69,110,116,114,105,101,115,0,0,0,0,0,0,0,65,108,108,111,99,97,116,101,0,0,0,0,0,0,0,0,109,95,101,110,116,114,121,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,70,114,101,101,0,0,0,0,112,32,61,61,32,101,110,116,114,121,45,62,100,97,116,97,0,0,0,0,0,0,0,0,98,100,45,62,112,111,115,105,116,105,111,110,46,73,115,86,97,108,105,100,40,41,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,66,111,100,121,46,99,112,112,0,0,98,50,66,
111,100,121,0,0,98,100,45,62,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,73,115,86,97,108,105,100,40,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,108,101,41,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,41,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,62,61,32,
48,46,48,102,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,41,32,38,38,32,98,100,45,62,108,105,110,101,97,114,68,97,109,112,105,110,103,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,109,95,119,111,114,108,100,45,62,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,83,101,116,84,121,112,101,0,67,114,101,97,116,101,70,105,120,116,117,114,101,0,0,0,68,101,115,116,114,111,121,70,105,120,116,117,114,101,0,0,102,105,120,116,117,
114,101,45,62,109,95,98,111,100,121,32,61,61,32,116,104,105,115,0,109,95,102,105,120,116,117,114,101,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,102,111,117,110,100,0,0,0,109,95,116,121,112,101,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,0,0,82,101,115,101,116,77,97,115,115,68,97,116,97,0,0,0,109,95,73,32,62,32,48,46,48,102,0,0,0,0,0,0,83,101,116,77,97,115,115,68,97,116,97,0,0,0,0,0,83,101,116,84,114,97,110,115,102,111,114,109,0,0,0,0,83,101,116,65,99,116,105,118,101,
0,0,0,0,0,0,0,32,32,98,50,66,111,100,121,68,101,102,32,98,100,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,116,121,112,101,32,61,32,98,50,66,111,100,121,84,121,112,101,40,37,100,41,59,10,0,0,0,0,32,32,98,100,46,112,111,115,105,116,105,111,110,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,32,98,100,46,97,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,108,105,110,101,97,114,86,101,108,111,99,105,116,121,46,83,101,116,40,37,46,49,53,108,
101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,98,100,46,97,110,103,117,108,97,114,86,101,108,111,99,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,108,105,110,101,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,98,100,46,97,110,103,117,108,97,114,68,97,109,112,105,110,103,32,61,32,37,46,49,53,108,101,102,59,10,0,32,32,98,100,46,97,108,108,111,119,83,108,101,101,112,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,
0,0,32,32,98,100,46,97,119,97,107,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,102,105,120,101,100,82,111,116,97,116,105,111,110,32,61,32,98,111,111,108,40,37,100,41,59,10,0,32,32,98,100,46,98,117,108,108,101,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,97,99,116,105,118,101,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,0,0,32,32,98,100,46,103,114,97,118,105,116,121,83,99,97,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,98,
111,100,105,101,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,66,111,100,121,40,38,98,100,41,59,10,0,0,0,0,0,0,0,32,32,123,10,0,0,0,0,32,32,125,10,0,0,0,0,0,49,0,0,0,0,0,0,224,39,0,0,0,0,0,0,109,95,99,111,117,110,116,32,62,32,48,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,71,114,111,119,97,98,108,101,83,116,97,99,107,46,104,0,0,0,0,0,80,111,112,0,0,0,0,0,0,0,0,0,200,10,0,0,65,0,0,0,66,0,0,0,54,0,0,0,55,
0,0,0,44,0,0,0,45,0,0,0,109,95,112,114,111,120,121,67,111,117,110,116,32,61,61,32],"i8",Za,h.L);
$a([48,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,70,105,120,116,117,114,101,46,99,112,112,0,0,0,0,0,0,0,67,114,101,97,116,101,80,114,111,120,105,101,115,0,0,0,32,32,32,32,98,50,70,105,120,116,117,114,101,68,101,102,32,102,100,59,10,0,0,0,32,32,32,32,102,100,46,102,114,105,99,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,32,32,102,100,46,114,101,115,116,105,116,117,116,105,111,110,32,61,32,37,46,49,53,
108,101,102,59,10,0,0,32,32,32,32,102,100,46,100,101,110,115,105,116,121,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,32,32,32,32,102,100,46,105,115,83,101,110,115,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,99,97,116,101,103,111,114,121,66,105,116,115,32,61,32,117,105,110,116,49,54,40,37,100,41,59,10,0,0,0,0,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,109,97,115,107,66,105,116,115,32,61,32,117,105,110,116,49,54,40,
37,100,41,59,10,0,0,0,32,32,32,32,102,100,46,102,105,108,116,101,114,46,103,114,111,117,112,73,110,100,101,120,32,61,32,105,110,116,49,54,40,37,100,41,59,10,0,0,32,32,32,32,98,50,67,105,114,99,108,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,114,97,100,105,117,115,32,61,32,37,46,49,53,108,101,102,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,112,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,32,
32,32,32,98,50,69,100,103,101,83,104,97,112,101,32,115,104,97,112,101,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,48,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,49,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,50,46,83,101,116,40,37,46,49,53,108,101,102,
44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,118,101,114,116,101,120,51,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,48,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,86,101,114,116,101,120,51,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,32,32,32,32,98,50,80,111,108,121,
103,111,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,32,32,32,32,98,50,86,101,99,50,32,118,115,91,37,100,93,59,10,0,0,0,0,0,32,32,32,32,118,115,91,37,100,93,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,83,101,116,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,98,50,67,104,97,105,110,83,104,97,112,101,32,115,104,97,112,101,59,10,0,0,0,0,0,0,0,0,32,32,32,32,115,104,97,112,101,46,67,114,101,97,116,101,67,
104,97,105,110,40,118,115,44,32,37,100,41,59,10,0,32,32,32,32,115,104,97,112,101,46,109,95,112,114,101,118,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,110,101,120,116,86,101,114,116,101,120,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,80,114,101,118,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,
41,59,10,0,0,32,32,32,32,115,104,97,112,101,46,109,95,104,97,115,78,101,120,116,86,101,114,116,101,120,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,10,0,0,0,0,0,0,0,32,32,32,32,102,100,46,115,104,97,112,101,32,61,32,38,115,104,97,112,101,59,10,0,32,32,32,32,98,111,100,105,101,115,91,37,100,93,45,62,67,114,101,97,116,101,70,105,120,116,117,114,101,40,38,102,100,41,59,10,0,0,0,0,116,111,105,73,110,100,101,120,65,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,66,111,120,50,68,95,118,50,46,51,
46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,99,112,112,0,0,0,0,0,0,0,0,116,111,105,73,110,100,101,120,66,32,60,32,109,95,98,111,100,121,67,111,117,110,116,0,73,115,76,111,99,107,101,100,40,41,32,61,61,32,102,97,108,115,101,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,87,111,114,108,100,46,99,112,112,0,67,114,101,97,116,101,66,111,100,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,
116,32,62,32,48,0,68,101,115,116,114,111,121,66,111,100,121,0,0,0,0,0,67,114,101,97,116,101,74,111,105,110,116,0,0,0,0,0,68,101,115,116,114,111,121,74,111,105,110,116,0,0,0,0,109,95,106,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,98,45,62,73,115,65,99,116,105,118,101,40,41,32,61,61,32,116,114,117,101,0,0,0,83,111,108,118,101,0,0,0,115,116,97,99,107,67,111,117,110,116,32,60,32,115,116,97,99,107,83,105,122,101,0,0,116,121,112,101,65,32,61,61,32,98,50,95,100,121,110,97,109,105,99,
66,111,100,121,32,124,124,32,116,121,112,101,66,32,61,61,32,98,50,95,100,121,110,97,109,105,99,66,111,100,121,0,0,0,0,0,0,83,111,108,118,101,84,79,73,0,0,0,0,0,0,0,0,97,108,112,104,97,48,32,60,32,49,46,48,102,0,0,0,118,101,114,116,101,120,67,111,117,110,116,32,60,61,32,56,0,0,0,0,0,0,0,0,68,114,97,119,83,104,97,112,101,0,0,0,0,0,0,0,98,50,86,101,99,50,32,103,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,109,95,119,111,114,108,100,45,62,83,101,116,71,114,97,118,105,116,
121,40,103,41,59,10,0,0,0,0,0,0,0,0,98,50,66,111,100,121,42,42,32,98,111,100,105,101,115,32,61,32,40,98,50,66,111,100,121,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,66,111,100,121,42,41,41,59,10,0,0,0,0,0,98,50,74,111,105,110,116,42,42,32,106,111,105,110,116,115,32,61,32,40,98,50,74,111,105,110,116,42,42,41,98,50,65,108,108,111,99,40,37,100,32,42,32,115,105,122,101,111,102,40,98,50,74,111,105,110,116,42,41,41,59,10,0,0,123,10,0,0,0,0,0,0,125,10,0,0,0,0,0,
0,98,50,70,114,101,101,40,106,111,105,110,116,115,41,59,10,0,0,0,0,0,0,0,0,98,50,70,114,101,101,40,98,111,100,105,101,115,41,59,10,0,0,0,0,0,0,0,0,106,111,105,110,116,115,32,61,32,78,85,76,76,59,10,0,98,111,100,105,101,115,32,61,32,78,85,76,76,59,10,0,114,46,76,101,110,103,116,104,83,113,117,97,114,101,100,40,41,32,62,32,48,46,48,102,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,108,108,105,115,105,111,110,47,98,50,68,121,110,97,109,105,99,84,114,101,101,46,
104,0,0,0,0,82,97,121,67,97,115,116,0,48,32,60,61,32,112,114,111,120,121,73,100,32,38,38,32,112,114,111,120,121,73,100,32,60,32,109,95,110,111,100,101,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,71,101,116,85,115,101,114,68,97,116,97,0,0,0,0,0,71,101,116,70,97,116,65,65,66,66,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,67,111,109,109,111,110,47,98,50,77,97,116,104,46,104,0,0,0,0,0,0,65,100,118,97,110,99,101,0,109,95,106,111,105,110,116,67,111,117,110,116,32,60,32,109,
95,106,111,105,110,116,67,97,112,97,99,105,116,121,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,98,50,73,115,108,97,110,100,46,104,0,0,65,100,100,0,0,0,0,0,109,95,99,111,110,116,97,99,116,67,111,117,110,116,32,60,32,109,95,99,111,110,116,97,99,116,67,97,112,97,99,105,116,121,0,0,0,0,0,0,109,95,98,111,100,121,67,111,117,110,116,32,60,32,109,95,98,111,100,121,67,97,112,97,99,105,116,121,0,0,0,0,0,0,0,0,40,49,0,0,67,0,0,0,68,0,0,0,47,0,0,0,0,0,0,0,
49,53,98,50,67,111,110,116,97,99,116,70,105,108,116,101,114,0,0,0,0,0,0,0,136,74,0,0,16,49,0,0,0,0,0,0,224,49,0,0,49,0,0,0,69,0,0,0,70,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,104,97,105,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,50,51,98,50,67,104,97,105,110,
65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,57,98,50,67,111,110,116,97,99,116,0,0,0,0,0,0,136,74,0,0,200,49,0,0,176,74,0,0,168,49,0,0,216,49,0,0,0,0,0,0,0,0,0,0,192,50,0,0,50,0,0,0,71,0,0,0,72,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,104,97,105,110,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,
97,99,116,115,47,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,50,52,98,50,67,104,97,105,110,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,176,74,0,0,160,50,0,0,216,49,0,0,0,0,0,0,0,0,0,0,128,51,0,0,51,0,0,0,73,0,0,0,74,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,
101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,49,53,98,50,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,176,74,0,0,104,51,0,0,216,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,49,32,38,38,32,116,121,112,101,49,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,
117,110,116,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,48,32,60,61,32,116,121,112,101,50,32,38,38,32,116,121,112,101,50,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,115,95,105,110,105,116,105,97,108,105,122,101,100,32,61,61,32,116,114,117,101,0,0,0,48,32,60,61,32,116,121,112,101,65,32,38,38,32,116,121,
112,101,66,32,60,32,98,50,83,104,97,112,101,58,58,101,95,116,121,112,101,67,111,117,110,116,0,0,0,0,0,0,112,111,105,110,116,67,111,117,110,116,32,62,32,48,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,46,99,112,112,0,0,0,0,0,0,0,0,98,50,67,111,110,116,97,99,116,83,111,108,118,101,114,0,109,97,110,105,102,111,108,100,45,62,112,111,105,110,116,67,111,117,110,116,
32,62,32,48,0,0,0,0,0,0,0,0,73,110,105,116,105,97,108,105,122,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,112,111,105,110,116,67,111,117,110,116,32,61,61,32,49,32,124,124,32,112,111,105,110,116,67,111,117,110,116,32,61,61,32,50,0,0,0,0,0,0,83,111,108,118,101,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,0,0,0,0,0,0,0,97,46,120,32,62,61,32,48,46,48,102,32,38,38,32,97,46,121,32,62,61,32,48,46,48,102,0,0,0,0,0,0,112,99,45,62,112,111,105,
110,116,67,111,117,110,116,32,62,32,48,0,0,0,0,0,0,0,0,0,0,232,54,0,0,52,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,99,112,112,0,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,50,50,98,50,69,100,103,101,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,
0,0,0,0,176,74,0,0,200,54,0,0,216,49,0,0,0,0,0,0,0,0,0,0,192,55,0,0,53,0,0,0,77,0,0,0,78,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,101,100,103,101,0,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,0,98,
50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,50,51,98,50,69,100,103,101,65,110,100,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,176,74,0,0,160,55,0,0,216,49,0,0,0,0,0,0,0,0,0,0,160,56,0,0,54,0,0,0,79,0,0,0,80,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,46,
99,112,112,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,99,105,114,99,108,101,0,0,0,0,0,0,50,53,98,50,80,111,108,121,103,111,110,65,110,100,67,105,114,99,108,101,67,111,110,116,97,99,116,0,0,0,0,0,176,74,0,0,128,56,0,0,216,49,0,0,0,0,0,0,0,0,0,0,152,57,0,0,55,0,0,0,81,0,0,0,82,0,0,0,0,0,0,0,109,95,102,105,
120,116,117,114,101,65,45,62,71,101,116,84,121,112,101,40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,67,111,110,116,97,99,116,115,47,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,46,99,112,112,0,0,0,0,0,0,0,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,109,95,102,105,120,116,117,114,101,66,45,62,71,101,116,84,121,112,101,
40,41,32,61,61,32,98,50,83,104,97,112,101,58,58,101,95,112,111,108,121,103,111,110,0,0,0,0,0,49,54,98,50,80,111,108,121,103,111,110,67,111,110,116,97,99,116,0,0,0,0,0,0,176,74,0,0,128,57,0,0,216,49,0,0,0,0,0,0,0,0,0,0,48,58,0,0,56,0,0,0,57,0,0,0,47,0,0,0,43,0,0,0,83,0,0,0,51,0,0,0,84,0,0,0,85,0,0,0,58,0,0,0,59,0,0,0,48,0,0,0,0,0,0,0,32,32,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,32,61,32,37,46,49,53,108,
101,102,59,10,0,49,53,98,50,68,105,115,116,97,110,99,101,74,111,105,110,116,0,0,0,0,0,0,0,176,74,0,0,24,58,0,0,240,21,0,0,0,0,0,0,0,0,0,0,152,59,0,0,60,0,0,0,61,0,0,0,48,0,0,0,44,0,0,0,86,0,0,0,51,0,0,0,87,0,0,0,88,0,0,0,62,0,0,0,63,0,0,0,49,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,102,111,114,99,101,41,32,38,38,32,102,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,
98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,46,99,112,112,0,0,83,101,116,77,97,120,70,111,114,99,101,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,116,111,114,113,117,101,41,32,38,38,32,116,111,114,113,117,101,32,62,61,32,48,46,48,102,0,0,0,0,0,83,101,116,77,97,120,84,111,114,113,117,101,0,0,0,0,32,32,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,
0,0,0,32,32,106,100,46,109,97,120,84,111,114,113,117,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,49,53,98,50,70,114,105,99,116,105,111,110,74,111,105,110,116,0,0,0,0,0,0,0,176,74,0,0,128,59,0,0,240,21,0,0,0,0,0,0,0,0,0,0,56,61,0,0,64,0,0,0,65,0,0,0,49,0,0,0,45,0,0,0,89,0,0,0,51,0,0,0,90,0,0,0,91,0,0,0,66,0,0,0,67,0,0,0,50,0,0,0,0,0,0,0,109,95,116,121,112,101,65,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,65,32,61,61,32,101,
95,112,114,105,115,109,97,116,105,99,74,111,105,110,116,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,71,101,97,114,74,111,105,110,116,46,99,112,112,0,0,0,0,0,0,98,50,71,101,97,114,74,111,105,110,116,0,0,0,0,0,109,95,116,121,112,101,66,32,61,61,32,101,95,114,101,118,111,108,117,116,101,74,111,105,110,116,32,124,124,32,109,95,116,121,112,101,66,32,61,61,32,101,95,112,114,105,115,109,97,116,105,99,74,111,105,
110,116,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,114,97,116,105,111,41,0,0,0,0,0,0,0,0,83,101,116,82,97,116,105,111,0,0,0,0,0,0,0,0,32,32,98,50,71,101,97,114,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,106,111,105,110,116,49,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,32,32,106,100,46,106,111,105,110,116,50,32,61,32,106,111,105,110,116,115,91,37,100,93,59,10,0,0,0,0,0,0,49,49,98,50,71,101,97,114,74,111,105,110,116,0,0,0,176,74,0,0,40,61,0,0,240,
21,0,0,0,0,0,0,102,97,108,115,101,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,74,111,105,110,116,46,99,112,112,0,0,67,114,101,97,116,101,0,0,68,101,115,116,114,111,121,0,0,0,0,0,240,21,0,0,42,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,92,0,0,0,51,0,0,0,93,0,0,0,94,0,0,0,42,0,0,0,42,0,0,0,42,0,0,0,0,0,0,0,100,101,102,45,62,98,111,100,121,65,32,33,61,32,100,101,102,45,62,98,111,100,121,66,0,0,0,0,0,0,0,0,98,50,74,111,105,
110,116,0,47,47,32,68,117,109,112,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,102,111,114,32,116,104,105,115,32,106,111,105,110,116,32,116,121,112,101,46,10,0,0,0,0,0,0,184,63,0,0,68,0,0,0,69,0,0,0,50,0,0,0,46,0,0,0,95,0,0,0,70,0,0,0,96,0,0,0,97,0,0,0,71,0,0,0,72,0,0,0,51,0,0,0,0,0,0,0,100,101,102,45,62,116,97,114,103,101,116,46,73,115,86,97,108,105,100,40,41,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,
116,115,47,98,50,77,111,117,115,101,74,111,105,110,116,46,99,112,112,0,0,0,0,0,98,50,77,111,117,115,101,74,111,105,110,116,0,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,109,97,120,70,111,114,99,101,41,32,38,38,32,100,101,102,45,62,109,97,120,70,111,114,99,101,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,41,32,38,38,32,100,101,102,45,62,102,114,101,113,117,101,110,99,121,72,122,32,62,61,32,48,46,48,
102,0,98,50,73,115,86,97,108,105,100,40,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,41,32,38,38,32,100,101,102,45,62,100,97,109,112,105,110,103,82,97,116,105,111,32,62,61,32,48,46,48,102,0,0,0,0,0,0,0,100,32,43,32,104,32,42,32,107,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,0,0,0,0,73,110,105,116,86,101,108,111,99,105,116,121,67,111,110,115,116,114,97,105,110,116,115,0,49,50,98,50,77,111,117,115,101,74,111,105,110,116,0,0,176,74,0,0,168,63,0,
0,240,21,0,0,0,0,0,0,77,111,117,115,101,32,106,111,105,110,116,32,100,117,109,112,105,110,103,32,105,115,32,110,111,116,32,115,117,112,112,111,114,116,101,100,46,10,0,0,0,0,0,0,8,65,0,0,73,0,0,0,74,0,0,0,51,0,0,0,47,0,0,0,98,0,0,0,51,0,0,0,99,0,0,0,100,0,0,0,75,0,0,0,76,0,0,0,52,0,0,0,0,0,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,114,105,115,109,97,116,105,99,74,111,105,110,116,46,99,112,112,0,32,32,98,50,80,
114,105,115,109,97,116,105,99,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,32,32,106,100,46,108,111,119,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,84,114,97,110,115,108,97,116,105,111,110,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,70,111,114,99,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,54,98,50,80,114,105,115,109,97,116,105,
99,74,111,105,110,116,0,0,0,0,0,0,176,74,0,0,240,64,0,0,240,21,0,0,0,0,0,0,114,97,116,105,111,32,62,32,49,46,49,57,50,48,57,50,56,57,53,53,48,55,56,49,50,53,101,45,48,55,70,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,80,117,108,108,101,121,74,111,105,110,116,46,99,112,112,0,0,0,0,73,110,105,116,105,97,108,105,122,101,0,0,0,0,0,0,0,0,0,0,192,66,0,0,77,0,0,0,78,0,0,0,52,0,0,0,48,0,0,0,101,0,0,0,79,0,0,0,102,0,0,0,103,
0,0,0,80,0,0,0,81,0,0,0,53,0,0,0,0,0,0,0,100,101,102,45,62,114,97,116,105,111,32,33,61,32,48,46,48,102,0,0,0,0,0,0,98,50,80,117,108,108,101,121,74,111,105,110,116,0,0,0,32,32,98,50,80,117,108,108,101,121,74,111,105,110,116,68,101,102,32,106,100,59,10,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,103,114,111,117,110,100,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,
53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,65,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,108,101,110,103,116,104,66,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,0,0,32,32,106,100,46,114,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,49,51,98,50,80,117,108,108,101,121,74,111,105,110,116,0,176,74,0,0,176,66,0,0,240,21,0,0,0,0,0,0,0,0,0,0,248,67,0,0,82,0,0,0,83,0,0,0,53,0,0,0,49,0,0,0,104,0,
0,0,51,0,0,0,105,0,0,0,106,0,0,0,84,0,0,0,85,0,0,0,54,0,0,0,0,0,0,0,108,111,119,101,114,32,60,61,32,117,112,112,101,114,0,0,66,111,120,50,68,95,118,50,46,51,46,49,47,66,111,120,50,68,47,68,121,110,97,109,105,99,115,47,74,111,105,110,116,115,47,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,46,99,112,112,0,0,83,101,116,76,105,109,105,116,115,0,0,0,0,0,0,0,32,32,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,0,0,0,0,32,32,106,100,46,101,110,97,98,
108,101,76,105,109,105,116,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,108,111,119,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,117,112,112,101,114,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,49,53,98,50,82,101,118,111,108,117,116,101,74,111,105,110,116,0,0,0,0,0,0,0,176,74,0,0,224,67,0,0,240,21,0,0,0,0,0,0,0,0,0,0,136,68,0,0,86,0,0,0,87,0,0,0,54,0,0,0,50,0,0,0,107,0,0,0,51,0,0,0,108,0,0,0,109,0,0,0,88,0,
0,0,89,0,0,0,55,0,0,0,0,0,0,0,32,32,98,50,82,111,112,101,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,0,32,32,106,100,46,109,97,120,76,101,110,103,116,104,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,0,49,49,98,50,82,111,112,101,74,111,105,110,116,0,0,0,176,74,0,0,120,68,0,0,240,21,0,0,0,0,0,0,0,0,0,0,24,69,0,0,90,0,0,0,91,0,0,0,55,0,0,0,51,0,0,0,110,0,0,0,51,0,0,0,111,0,0,0,112,0,0,0,92,0,0,0,93,0,0,0,56,0,0,0,0,0,0,0,32,32,98,50,87,101,108,100,74,111,105,110,116,68,101,102,32,106,100,
59,10,0,0,0,32,32,106,100,46,114,101,102,101,114,101,110,99,101,65,110,103,108,101,32,61,32,37,46,49,53,108,101,102,59,10,0,49,49,98,50,87,101,108,100,74,111,105,110,116,0,0,0,176,74,0,0,8,69,0,0,240,21,0,0,0,0,0,0,0,0,0,0,72,71,0,0,94,0,0,0,95,0,0,0,56,0,0,0,52,0,0,0,113,0,0,0,51,0,0,0,114,0,0,0,115,0,0,0,96,0,0,0,97,0,0,0,57,0,0,0,0,0,0,0,32,32,98,50,87,104,101,101,108,74,111,105,110,116,68,101,102,32,106,100,59,10,0,0,32,32,106,100,46,98,111,100,121,65,32,61,32,98,111,100,105,101,115,91,37,100,
93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,98,111,100,121,66,32,61,32,98,111,100,105,101,115,91,37,100,93,59,10,0,0,0,0,0,0,0,32,32,106,100,46,99,111,108,108,105,100,101,67,111,110,110,101,99,116,101,100,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,110,99,104,111,114,66,46,83,101,116,40,37,46,49,53,108,
101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,0,0,0,0,0,0,32,32,106,100,46,108,111,99,97,108,65,120,105,115,65,46,83,101,116,40,37,46,49,53,108,101,102,44,32,37,46,49,53,108,101,102,41,59,10,0,32,32,106,100,46,101,110,97,98,108,101,77,111,116,111,114,32,61,32,98,111,111,108,40,37,100,41,59,10,0,0,0,32,32,106,100,46,109,111,116,111,114,83,112,101,101,100,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,0,32,32,106,100,46,109,97,120,77,111,116,111,114,84,111,114,113,117,101,32,61,32,37,46,49,53,108,
101,102,59,10,0,32,32,106,100,46,102,114,101,113,117,101,110,99,121,72,122,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,0,32,32,106,100,46,100,97,109,112,105,110,103,82,97,116,105,111,32,61,32,37,46,49,53,108,101,102,59,10,0,0,0,32,32,106,111,105,110,116,115,91,37,100,93,32,61,32,109,95,119,111,114,108,100,45,62,67,114,101,97,116,101,74,111,105,110,116,40,38,106,100,41,59,10,0,0,0,0,0,0,49,50,98,50,87,104,101,101,108,74,111,105,110,116,0,0,176,74,0,0,56,71,0,0,240,21,0,0,0,0,0,0,43,0,0,0,0,0,0,0,
117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,
112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,
111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,248,72,0,0,116,0,0,0,117,0,0,0,46,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,176,74,0,0,232,72,0,0,128,73,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,
101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,136,74,0,0,112,73,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,136,74,0,0,136,73,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,
111,69,0,0,0,0,0,0,0,0,176,74,0,0,160,73,0,0,152,73,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,176,74,0,0,216,73,0,0,200,73,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,176,74,
0,0,56,74,0,0,200,73,0,0,0,0,0,0,176,74,0,0,16,74,0,0,96,74,0,0,0,0,0,0,0,0,0,0,0,74,0,0,118,0,0,0,119,0,0,0,120,0,0,0,121,0,0,0,48,0,0,0,42,0,0,0,42,0,0,0,56,0,0,0,0,0,0,0,248,74,0,0,118,0,0,0,122,0,0,0,120,0,0,0,121,0,0,0,48,0,0,0,43,0,0,0,43,0,0,0,57,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,176,74,0,0,208,74,0,0,0,74,0,0,0,0,0,0,0,0,0,0,88,75,0,0,118,0,0,0,123,0,0,0,120,0,0,0,121,0,0,0,48,0,0,0,44,
0,0,0,44,0,0,0,58,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,176,74,0,0,48,75,0,0,0,74,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"i8",Za,h.L+10240);var Ob=h.C($a(12,"i8",Xa),8);oa(0==Ob%8);var Pb=Qa;function Qb(){return!!Qb.K}var Rb=0,Sb=[],Tb={};function Ub(a){if(!a||Tb[a])return a;for(var b in Tb)if(Tb[b].N===a)return b;return a}
function Vb(){var a=Rb;if(!a)return(i.setTempRet0(0),0)|0;var b=Tb[a],f=b.type;if(!f)return(i.setTempRet0(0),a)|0;var g=Array.prototype.slice.call(arguments);e.___cxa_is_pointer_type(f);Vb.buffer||(Vb.buffer=ab(4));Ma[Vb.buffer>>2]=a;for(var a=Vb.buffer,k=0;k<g.length;k++)if(g[k]&&e.___cxa_can_catch(g[k],f,a))return a=Ma[a>>2],b.N=a,(i.setTempRet0(g[k]),a)|0;a=Ma[a>>2];return(i.setTempRet0(f),a)|0}e._memset=Wb;function Xb(a,b){Xb.H||(Xb.H={});a in Xb.H||(h.r("v",b),Xb.H[a]=1)}e._strlen=Yb;
var va=d,Zb=0;function $b(a){return Ma[Zb>>2]=a}var ac=9;function bc(a,b,f){a=va.$(a);if(!a)return $b(ac),-1;try{return va.write(a,Ka,b,f)}catch(g){return va.ba(g),-1}}function cc(a){a=va.R(a);return!a?-1:a.sa}function dc(a,b){var f=Cb(a&255);Ka[dc.T>>0]=f;var g=cc(b);if(-1==bc(g,dc.T,1)){if(f=va.R(b))f.error=aa;return-1}return f}var ec={},fc=1;function gc(a,b,f,g){f*=b;if(0==f)return 0;var k=cc(g),a=bc(k,a,f);if(-1==a){if(b=va.R(g))b.error=aa;return 0}return a/b|0}
function hc(a){return 0>a||0===a&&-Infinity===1/a}
function ic(a,b){function f(a){var f;"double"===a?f=(Ma[Ob>>2]=Ma[b+k>>2],Ma[Ob+4>>2]=Ma[b+(k+4)>>2],+Ta[Ob>>3]):"i64"==a?f=[Ma[b+k>>2],Ma[b+(k+4)>>2]]:(a="i32",f=Ma[b+k>>2]);k+=h.P(a);return f}for(var g=a,k=0,n=[],m,l;;){var ha=g;m=Ka[g>>0];if(0===m)break;l=Ka[g+1>>0];if(37==m){var Na=ca,Ya=ca,ta=ca,Aa=ca,ib=ca;a:for(;;){switch(l){case 43:Na=aa;break;case 45:Ya=aa;break;case 35:ta=aa;break;case 48:if(Aa)break a;else{Aa=aa;break}case 32:ib=aa;break;default:break a}g++;l=Ka[g+1>>0]}var Va=0;if(42==
l)Va=f("i32"),g++,l=Ka[g+1>>0];else for(;48<=l&&57>=l;)Va=10*Va+(l-48),g++,l=Ka[g+1>>0];var db=ca,Ca=-1;if(46==l){Ca=0;db=aa;g++;l=Ka[g+1>>0];if(42==l)Ca=f("i32"),g++;else for(;;){l=Ka[g+1>>0];if(48>l||57<l)break;Ca=10*Ca+(l-48);g++}l=Ka[g+1>>0]}0>Ca&&(Ca=6,db=ca);var V;switch(String.fromCharCode(l)){case "h":l=Ka[g+2>>0];104==l?(g++,V=1):V=2;break;case "l":l=Ka[g+2>>0];108==l?(g++,V=8):V=4;break;case "L":case "q":case "j":V=8;break;case "z":case "t":case "I":V=4;break;default:V=ba}V&&g++;l=Ka[g+
1>>0];switch(String.fromCharCode(l)){case "d":case "i":case "u":case "o":case "x":case "X":case "p":ha=100==l||105==l;V=V||4;var pa=m=f("i"+8*V),x;8==V&&(m=h.ca(m[0],m[1],117==l));4>=V&&(m=(ha?Db:Cb)(m&Math.pow(256,V)-1,8*V));var xb=Math.abs(m),ha="";if(100==l||105==l)x=8==V&&jc?jc.stringify(pa[0],pa[1],ba):Db(m,8*V).toString(10);else if(117==l)x=8==V&&jc?jc.stringify(pa[0],pa[1],aa):Cb(m,8*V).toString(10),m=Math.abs(m);else if(111==l)x=(ta?"0":"")+xb.toString(8);else if(120==l||88==l){ha=ta&&0!=
m?"0x":"";if(8==V&&jc)if(pa[1]){x=(pa[1]>>>0).toString(16);for(ta=(pa[0]>>>0).toString(16);8>ta.length;)ta="0"+ta;x+=ta}else x=(pa[0]>>>0).toString(16);else if(0>m){m=-m;x=(xb-1).toString(16);pa=[];for(ta=0;ta<x.length;ta++)pa.push((15-parseInt(x[ta],16)).toString(16));for(x=pa.join("");x.length<2*V;)x="f"+x}else x=xb.toString(16);88==l&&(ha=ha.toUpperCase(),x=x.toUpperCase())}else 112==l&&(0===xb?x="(nil)":(ha="0x",x=xb.toString(16)));if(db)for(;x.length<Ca;)x="0"+x;0<=m&&(Na?ha="+"+ha:ib&&(ha=" "+
ha));"-"==x.charAt(0)&&(ha="-"+ha,x=x.substr(1));for(;ha.length+x.length<Va;)Ya?x+=" ":Aa?x="0"+x:ha=" "+ha;x=ha+x;x.split("").forEach(function(a){n.push(a.charCodeAt(0))});break;case "f":case "F":case "e":case "E":case "g":case "G":m=f("double");if(isNaN(m))x="nan",Aa=ca;else if(isFinite(m)){db=ca;V=Math.min(Ca,20);if(103==l||71==l)db=aa,Ca=Ca||1,V=parseInt(m.toExponential(V).split("e")[1],10),Ca>V&&-4<=V?(l=(103==l?"f":"F").charCodeAt(0),Ca-=V+1):(l=(103==l?"e":"E").charCodeAt(0),Ca--),V=Math.min(Ca,
20);if(101==l||69==l)x=m.toExponential(V),/[eE][-+]\d$/.test(x)&&(x=x.slice(0,-1)+"0"+x.slice(-1));else if(102==l||70==l)x=m.toFixed(V),0===m&&hc(m)&&(x="-"+x);ha=x.split("e");if(db&&!ta)for(;1<ha[0].length&&-1!=ha[0].indexOf(".")&&("0"==ha[0].slice(-1)||"."==ha[0].slice(-1));)ha[0]=ha[0].slice(0,-1);else for(ta&&-1==x.indexOf(".")&&(ha[0]+=".");Ca>V++;)ha[0]+="0";x=ha[0]+(1<ha.length?"e"+ha[1]:"");69==l&&(x=x.toUpperCase());0<=m&&(Na?x="+"+x:ib&&(x=" "+x))}else x=(0>m?"-":"")+"inf",Aa=ca;for(;x.length<
Va;)x=Ya?x+" ":Aa&&("-"==x[0]||"+"==x[0])?x[0]+"0"+x.slice(1):(Aa?"0":" ")+x;97>l&&(x=x.toUpperCase());x.split("").forEach(function(a){n.push(a.charCodeAt(0))});break;case "s":Aa=(Na=f("i8*"))?Yb(Na):6;db&&(Aa=Math.min(Aa,Ca));if(!Ya)for(;Aa<Va--;)n.push(32);if(Na)for(ta=0;ta<Aa;ta++)n.push(bb[Na++>>0]);else n=n.concat(Ab("(null)".substr(0,Aa),aa));if(Ya)for(;Aa<Va--;)n.push(32);break;case "c":for(Ya&&n.push(f("i8"));0<--Va;)n.push(32);Ya||n.push(f("i8"));break;case "n":Ya=f("i32*");Ma[Ya>>2]=n.length;
break;case "%":n.push(m);break;default:for(ta=ha;ta<g+2;ta++)n.push(Ka[ta>>0])}g+=2}else n.push(m),g+=1}return n}function kc(a,b,f){f=ic(b,f);b=h.A();a=gc($a(f,"i8",Wa),1,f.length,a);h.J(b);return a}function lc(a,b){var f=ic(a,b),g=Bb(f);"\n"===g[g.length-1]&&(g=g.substr(0,g.length-1));e.print(g);return f.length}e._memcpy=mc;function nc(a){nc.Z||(xa=xa+4095&-4096,nc.Z=aa,oa(h.o),nc.W=h.o,h.o=function(){ua("cannot dynamically allocate, sbrk now has control")});var b=xa;0!=a&&nc.W(a);return b}
function ab(a){return h.o(a+8)+8&4294967288}e._malloc=ab;var oc=$a(1,"i32*",Xa);dc.T=$a([0],"i8",Xa);Zb=h.U(4);Ma[Zb>>2]=0;kb=ra=h.C(wa);lb=kb+nb;mb=xa=h.C(lb);oa(mb<ya,"TOTAL_MEMORY not big enough for stack");e.X={Math:Math,Int8Array:Int8Array,Int16Array:Int16Array,Int32Array:Int32Array,Uint8Array:Uint8Array,Uint16Array:Uint16Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};
e.Y={abort:ua,assert:oa,min:Pa,jsCall:function(){var a=Array.prototype.slice.call(arguments);return h.p[a[0]].apply(ba,a.slice(1))},invoke_iiii:function(a,b,f,g){try{return e.dynCall_iiii(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),i.setThrew(1,0)}},invoke_viiiii:function(a,b,f,g,k,n){try{e.dynCall_viiiii(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),i.setThrew(1,0)}},invoke_did:function(a,b,f){try{return e.dynCall_did(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==
g&&c(g),i.setThrew(1,0)}},invoke_vi:function(a,b){try{e.dynCall_vi(a,b)}catch(f){"number"!==typeof f&&"longjmp"!==f&&c(f),i.setThrew(1,0)}},invoke_diiiid:function(a,b,f,g,k,n){try{return e.dynCall_diiiid(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&"longjmp"!==m&&c(m),i.setThrew(1,0)}},invoke_vii:function(a,b,f){try{e.dynCall_vii(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==g&&c(g),i.setThrew(1,0)}},invoke_viidii:function(a,b,f,g,k,n){try{e.dynCall_viidii(a,b,f,g,k,n)}catch(m){"number"!==typeof m&&
"longjmp"!==m&&c(m),i.setThrew(1,0)}},invoke_ii:function(a,b){try{return e.dynCall_ii(a,b)}catch(f){"number"!==typeof f&&"longjmp"!==f&&c(f),i.setThrew(1,0)}},invoke_viidi:function(a,b,f,g,k){try{e.dynCall_viidi(a,b,f,g,k)}catch(n){"number"!==typeof n&&"longjmp"!==n&&c(n),i.setThrew(1,0)}},invoke_viii:function(a,b,f,g){try{e.dynCall_viii(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),i.setThrew(1,0)}},invoke_v:function(a){try{e.dynCall_v(a)}catch(b){"number"!==typeof b&&"longjmp"!==b&&
c(b),i.setThrew(1,0)}},invoke_viid:function(a,b,f,g){try{e.dynCall_viid(a,b,f,g)}catch(k){"number"!==typeof k&&"longjmp"!==k&&c(k),i.setThrew(1,0)}},invoke_viiiiii:function(a,b,f,g,k,n,m){try{e.dynCall_viiiiii(a,b,f,g,k,n,m)}catch(l){"number"!==typeof l&&"longjmp"!==l&&c(l),i.setThrew(1,0)}},invoke_iii:function(a,b,f){try{return e.dynCall_iii(a,b,f)}catch(g){"number"!==typeof g&&"longjmp"!==g&&c(g),i.setThrew(1,0)}},invoke_iiiiii:function(a,b,f,g,k,n){try{return e.dynCall_iiiiii(a,b,f,g,k,n)}catch(m){"number"!==
typeof m&&"longjmp"!==m&&c(m),i.setThrew(1,0)}},invoke_viiii:function(a,b,f,g,k){try{e.dynCall_viiii(a,b,f,g,k)}catch(n){"number"!==typeof n&&"longjmp"!==n&&c(n),i.setThrew(1,0)}},_cosf:Eb,_send:function(a,b,f){return!d.ya(a)?($b(ac),-1):bc(a,b,f)},_pthread_key_create:function(a){if(0==a)return 22;Ma[a>>2]=fc;ec[fc]=0;fc++;return 0},___cxa_guard_acquire:function(a){return!Ka[a>>0]?Ka[a>>0]=1:0},___setErrNo:$b,_vfprintf:function(a,b,f){return kc(a,b,Ma[f>>2])},_emscripten_asm_const_int:function(a){var b=
Array.prototype.slice.call(arguments,1);return h.O(a,b.length).apply(ba,b)|0},___assert_fail:function(a,b,f,g){za=aa;c("Assertion failed: "+sa(a)+", at: "+[b?sa(b):"unknown filename",f,g?sa(g):"unknown function"]+" at "+fb())},_atan2f:Gb,__ZSt18uncaught_exceptionv:Qb,___cxa_guard_release:function(){},_pwrite:function(a,b,f,g){a=va.$(a);if(!a)return $b(ac),-1;try{return va.write(a,Ka,b,f,g)}catch(k){return va.ba(k),-1}},_emscripten_asm_const_double:function(a){var b=Array.prototype.slice.call(arguments,
1);return+h.O(a,b.length).apply(ba,b)},_fprintf:kc,__reallyNegative:hc,_sbrk:nc,___cxa_begin_catch:function(a){Qb.K--;Sb.push(a);var b=Ub(a);b&&Tb[b].S++;return a},_sinf:Fb,_fileno:cc,___resumeException:function(a){Rb||(Rb=a);var b=Ub(a);b&&(Tb[b].S=0);c(a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.")},___cxa_find_matching_catch:Vb,_sysconf:function(a){switch(a){case 30:return 4096;case 132:case 133:case 12:case 137:case 138:case 15:case 235:case 16:case 17:case 18:case 19:case 20:case 149:case 13:case 10:case 236:case 153:case 9:case 21:case 22:case 159:case 154:case 14:case 77:case 78:case 139:case 80:case 81:case 79:case 82:case 68:case 67:case 164:case 11:case 29:case 47:case 48:case 95:case 52:case 51:case 46:return 200809;
case 27:case 246:case 127:case 128:case 23:case 24:case 160:case 161:case 181:case 182:case 242:case 183:case 184:case 243:case 244:case 245:case 165:case 178:case 179:case 49:case 50:case 168:case 169:case 175:case 170:case 171:case 172:case 97:case 76:case 32:case 173:case 35:return-1;case 176:case 177:case 7:case 155:case 8:case 157:case 125:case 126:case 92:case 93:case 129:case 130:case 131:case 94:case 91:return 1;case 74:case 60:case 69:case 70:case 4:return 1024;case 31:case 42:case 72:return 32;
case 87:case 26:case 33:return 2147483647;case 34:case 1:return 47839;case 38:case 36:return 99;case 43:case 37:return 2048;case 0:return 2097152;case 3:return 65536;case 28:return 32768;case 44:return 32767;case 75:return 16384;case 39:return 1E3;case 89:return 700;case 71:return 256;case 40:return 255;case 2:return 100;case 180:return 64;case 25:return 20;case 5:return 16;case 6:return 6;case 73:return 4;case 84:return"object"===typeof navigator?navigator.hardwareConcurrency||1:1}$b(22);return-1},
_pthread_getspecific:function(a){return ec[a]||0},_vprintf:function(a,b){return lc(a,Ma[b>>2])},_emscripten_memcpy_big:function(a,b,f){bb.set(bb.subarray(b,b+f),a);return a},_pthread_once:Xb,_printf:lc,_floorf:Pb,_sqrtf:Hb,_write:bc,___errno_location:function(){return Zb},_pthread_setspecific:function(a,b){if(!(a in ec))return 22;ec[a]=b;return 0},_fputc:dc,___cxa_throw:function(a,b,f){Tb[a]={e:a,N:a,type:b,qa:f,S:0};Rb=a;"uncaught_exception"in Qb?Qb.K++:Qb.K=1;c(a+" - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.")},
_abort:function(){e.abort()},_fwrite:gc,_time:function(a){var b=Date.now()/1E3|0;a&&(Ma[a>>2]=b);return b},___cxa_allocate_exception:function(a){return ab(a)},__formatString:ic,___cxa_pure_virtual:function(){za=aa;c("Pure virtual function called!")},STACKTOP:ra,STACK_MAX:lb,tempDoublePtr:Ob,ABORT:za,NaN:NaN,Infinity:Infinity,_stderr:oc};// EMSCRIPTEN_START_ASM

var i=(function(global,env,buffer) {
"use asm";var a=new global.Int8Array(buffer);var b=new global.Int16Array(buffer);var c=new global.Int32Array(buffer);var d=new global.Uint8Array(buffer);var e=new global.Uint16Array(buffer);var f=new global.Uint32Array(buffer);var g=new global.Float32Array(buffer);var h=new global.Float64Array(buffer);var i=env.STACKTOP|0;var j=env.STACK_MAX|0;var k=env.tempDoublePtr|0;var l=env.ABORT|0;var m=env._stderr|0;var n=0;var o=0;var p=0;var q=0;var r=+env.NaN,s=+env.Infinity;var t=0,u=0,v=0,w=0,x=0.0,y=0,z=0,A=0,B=0.0;var C=0;var D=0;var E=0;var F=0;var G=0;var H=0;var I=0;var J=0;var K=0;var L=0;var M=global.Math.floor;var N=global.Math.abs;var O=global.Math.sqrt;var P=global.Math.pow;var Q=global.Math.cos;var R=global.Math.sin;var S=global.Math.tan;var T=global.Math.acos;var U=global.Math.asin;var V=global.Math.atan;var W=global.Math.atan2;var X=global.Math.exp;var Y=global.Math.log;var Z=global.Math.ceil;var _=global.Math.imul;var $=env.abort;var aa=env.assert;var ba=env.min;var ca=env.jsCall;var da=env.invoke_iiii;var ea=env.invoke_viiiii;var fa=env.invoke_did;var ga=env.invoke_vi;var ha=env.invoke_diiiid;var ia=env.invoke_vii;var ja=env.invoke_viidii;var ka=env.invoke_ii;var la=env.invoke_viidi;var ma=env.invoke_viii;var na=env.invoke_v;var oa=env.invoke_viid;var pa=env.invoke_viiiiii;var qa=env.invoke_iii;var ra=env.invoke_iiiiii;var sa=env.invoke_viiii;var ta=env._cosf;var ua=env._send;var va=env._pthread_key_create;var wa=env.___cxa_guard_acquire;var xa=env.___setErrNo;var ya=env._vfprintf;var za=env._emscripten_asm_const_int;var Aa=env.___assert_fail;var Ba=env._atan2f;var Ca=env.__ZSt18uncaught_exceptionv;var Da=env.___cxa_guard_release;var Ea=env._pwrite;var Fa=env._emscripten_asm_const_double;var Ga=env._fprintf;var Ha=env.__reallyNegative;var Ia=env._sbrk;var Ja=env.___cxa_begin_catch;var Ka=env._sinf;var La=env._fileno;var Ma=env.___resumeException;var Na=env.___cxa_find_matching_catch;var Oa=env._sysconf;var Pa=env._pthread_getspecific;var Qa=env._vprintf;var Ra=env._emscripten_memcpy_big;var Sa=env._pthread_once;var Ta=env._printf;var Ua=env._floorf;var Va=env._sqrtf;var Wa=env._write;var Xa=env.___errno_location;var Ya=env._pthread_setspecific;var Za=env._fputc;var _a=env.___cxa_throw;var $a=env._abort;var ab=env._fwrite;var bb=env._time;var cb=env.___cxa_allocate_exception;var db=env.__formatString;var eb=env.___cxa_pure_virtual;var fb=0.0;
// EMSCRIPTEN_START_FUNCS
function wb(a){a=a|0;var b=0;b=i;i=i+a|0;i=i+15&-16;return b|0}function xb(){return i|0}function yb(a){a=a|0;i=a}function zb(a,b){a=a|0;b=b|0;if(!n){n=a;o=b}}function Ab(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0]}function Bb(b){b=b|0;a[k>>0]=a[b>>0];a[k+1>>0]=a[b+1>>0];a[k+2>>0]=a[b+2>>0];a[k+3>>0]=a[b+3>>0];a[k+4>>0]=a[b+4>>0];a[k+5>>0]=a[b+5>>0];a[k+6>>0]=a[b+6>>0];a[k+7>>0]=a[b+7>>0]}function Cb(a){a=a|0;C=a}function Db(){return C|0}function Eb(){var a=0,b=0,d=0;a=i;b=RB(4)|0;if(b){d=b;c[d>>2]=4576;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(4)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){c[d>>2]=4576;i=a;return d|0}return 0}function Fb(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+16>>2]&127](a,b);i=d;return}function Gb(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+20>>2]&127](a,b);i=d;return}function Hb(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ib(a){a=a|0;return c[a+16>>2]|0}function Jb(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function Kb(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Lb(a){a=a|0;return a+80|0}function Mb(a){a=a|0;return a+88|0}function Nb(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function Ob(a){a=a|0;return+(+g[a+104>>2])}function Pb(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function Qb(a){a=a|0;return+(+g[a+68>>2])}function Rb(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function Sb(a){a=a|0;return+(+g[a+72>>2])}function Tb(a){a=a|0;return c[a+4>>2]|0}function Ub(a){a=a|0;return c[a+48>>2]|0}function Vb(a){a=a|0;return c[a+52>>2]|0}function Wb(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[16]|0)==0?(wa(16)|0)!=0:0)Da(16);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=8;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 8}function Xb(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[32]|0)==0?(wa(32)|0)!=0:0)Da(32);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=24;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 24}function Yb(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[48]|0)==0?(wa(48)|0)!=0:0)Da(48);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=40;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 40}function Zb(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function _b(a){a=a|0;return c[a+12>>2]|0}function $b(a){a=a|0;return c[a+64>>2]|0}function ac(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function bc(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function cc(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function dc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function ec(){var a=0,b=0,d=0;a=i;b=RB(36)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(36)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function fc(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;f=RB(36)|0;a:do if(!f){while(1){f=c[4698]|0;c[4698]=f+0;if(!f)break;qb[f&63]();f=RB(36)|0;if(f)break a}f=cb(4)|0;c[f>>2]=18632;_a(f|0,18680,116)}while(0);h=f+12|0;g=f+24|0;c[f+0>>2]=c[a+0>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[h+0>>2]=c[b+0>>2];c[h+4>>2]=c[b+4>>2];c[h+8>>2]=c[b+8>>2];c[g+0>>2]=c[d+0>>2];c[g+4>>2]=c[d+4>>2];c[g+8>>2]=c[d+8>>2];i=e;return f|0}function gc(a){a=a|0;var b=0,d=0;b=i;d=a+0|0;a=d+36|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(a|0));i=b;return}function hc(b,d){b=b|0;d=d|0;var e=0,f=0;f=i;i=i+16|0;e=f;if((a[72]|0)==0?(wa(72)|0)!=0:0)Da(72);Lx(e,b,d);c[14]=c[e+0>>2];c[15]=c[e+4>>2];c[16]=c[e+8>>2];i=f;return 56}function ic(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;if((a[88]|0)==0?(wa(88)|0)!=0:0)Da(88);f=+g[b>>2];h=+g[b+12>>2];e=+g[b+4>>2];j=+g[b+16>>2];k=f*j-h*e;if(k!=0.0)k=1.0/k;l=+g[c>>2];m=+g[c+4>>2];j=+(k*(j*l-h*m));k=+(k*(f*m-e*l));b=80;g[b>>2]=j;g[b+4>>2]=k;i=d;return 80}function jc(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[a>>2];h=+g[a+12>>2];f=+g[a+4>>2];j=+g[a+16>>2];k=e*j-h*f;if(k!=0.0)k=1.0/k;g[b>>2]=j*k;j=-k;g[b+12>>2]=h*j;g[b+8>>2]=0.0;g[b+4>>2]=f*j;g[b+16>>2]=e*k;a=b+20|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=d;return}function kc(a,b){a=a|0;b=b|0;var c=0;c=i;Ox(a,b);i=c;return}function lc(a){a=a|0;return a|0}function mc(a,b){a=a|0;b=b|0;var d=0;d=i;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function nc(a){a=a|0;return a+12|0}function oc(a,b){a=a|0;b=b|0;var d=0;d=i;a=a+12|0;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function pc(a){a=a|0;return a+24|0}function qc(a,b){a=a|0;b=b|0;var d=0;d=i;a=a+24|0;c[a+0>>2]=c[b+0>>2];c[a+4>>2]=c[b+4>>2];c[a+8>>2]=c[b+8>>2];i=d;return}function rc(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function sc(a){a=a|0;return c[(c[a+12>>2]|0)+4>>2]|0}function tc(a){a=a|0;return c[a+12>>2]|0}function uc(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0;j=i;k=f+38|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}f=c[f+8>>2]|0;l=f+4|0;m=e[l>>1]|0;if(!(m&2)){b[l>>1]=m|2;g[f+144>>2]=0.0}a[k>>0]=h&1;i=j;return}function vc(b){b=b|0;return(a[b+38>>0]|0)!=0|0}function wc(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0;e=i;l=a+32|0;b[l+0>>1]=b[d+0>>1]|0;b[l+2>>1]=b[d+2>>1]|0;b[l+4>>1]=b[d+4>>1]|0;d=c[a+8>>2]|0;if(!d){i=e;return}g=c[d+112>>2]|0;if(g)do{f=c[g+4>>2]|0;if((c[f+48>>2]|0)==(a|0)?1:(c[f+52>>2]|0)==(a|0)){l=f+4|0;c[l>>2]=c[l>>2]|8}g=c[g+12>>2]|0}while((g|0)!=0);h=c[d+88>>2]|0;if(!h){i=e;return}d=a+28|0;if((c[d>>2]|0)<=0){i=e;return}a=a+24|0;g=h+102912|0;f=h+102908|0;k=h+102904|0;l=c[g>>2]|0;j=0;do{h=c[(c[a>>2]|0)+(j*28|0)+24>>2]|0;if((l|0)==(c[f>>2]|0)){m=c[k>>2]|0;c[f>>2]=l<<1;l=RB(l<<3)|0;c[k>>2]=l;WB(l|0,m|0,c[g>>2]<<2|0)|0;SB(m);l=c[g>>2]|0}c[(c[k>>2]|0)+(l<<2)>>2]=h;l=(c[g>>2]|0)+1|0;c[g>>2]=l;j=j+1|0}while((j|0)<(c[d>>2]|0));i=e;return}function xc(a){a=a|0;return a+32|0}function yc(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0;b=i;d=c[a+8>>2]|0;if(!d){i=b;return}f=c[d+112>>2]|0;if(f)do{e=c[f+4>>2]|0;if((c[e+48>>2]|0)==(a|0)?1:(c[e+52>>2]|0)==(a|0)){k=e+4|0;c[k>>2]=c[k>>2]|8}f=c[f+12>>2]|0}while((f|0)!=0);g=c[d+88>>2]|0;if(!g){i=b;return}d=a+28|0;if((c[d>>2]|0)<=0){i=b;return}a=a+24|0;f=g+102912|0;e=g+102908|0;g=g+102904|0;k=c[f>>2]|0;j=0;do{h=c[(c[a>>2]|0)+(j*28|0)+24>>2]|0;if((k|0)==(c[e>>2]|0)){l=c[g>>2]|0;c[e>>2]=k<<1;k=RB(k<<3)|0;c[g>>2]=k;WB(k|0,l|0,c[f>>2]<<2|0)|0;SB(l);k=c[f>>2]|0}c[(c[g>>2]|0)+(k<<2)>>2]=h;k=(c[f>>2]|0)+1|0;c[f>>2]=k;j=j+1|0}while((j|0)<(c[d>>2]|0));i=b;return}function zc(a){a=a|0;return c[a+8>>2]|0}function Ac(a){a=a|0;return c[a+4>>2]|0}function Bc(a){a=a|0;return c[a+40>>2]|0}function Cc(a,b){a=a|0;b=b|0;c[a+40>>2]=b;return}function Dc(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+12>>2]|0;a=gb[c[(c[e>>2]|0)+16>>2]&63](e,(c[a+8>>2]|0)+12|0,b)|0;i=d;return a|0}function Ec(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0;f=i;g=c[a+12>>2]|0;b=ub[c[(c[g>>2]|0)+20>>2]&63](g,b,d,(c[a+8>>2]|0)+12|0,e)|0;i=f;return b|0}function Fc(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;e=c[a+12>>2]|0;rb[c[(c[e>>2]|0)+28>>2]&63](e,b,+g[a>>2]);i=d;return}function Gc(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0){g[a>>2]=b;i=d;return}else Aa(4512,4464,295,4552)}function Hc(a){a=a|0;return+(+g[a>>2])}function Ic(a){a=a|0;return+(+g[a+16>>2])}function Jc(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function Kc(a){a=a|0;return+(+g[a+20>>2])}function Lc(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function Mc(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)>-1?(c[a+28>>2]|0)>(b|0):0){i=d;return(c[a+24>>2]|0)+(b*28|0)|0}Aa(4416,4464,341,4504);return 0}function Nc(a,b){a=a|0;b=b|0;var c=0;c=i;ry(a,b);i=c;return}function Oc(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Pc(){var a=0,d=0;a=i;d=RB(6)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(6)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);b[d>>1]=1;b[d+2>>1]=-1;b[d+4>>1]=0;i=a;return d|0}function Qc(a){a=a|0;return b[a>>1]|0}function Rc(a,c){a=a|0;c=c|0;b[a>>1]=c;return}function Sc(a){a=a|0;return b[a+2>>1]|0}function Tc(a,c){a=a|0;c=c|0;b[a+2>>1]=c;return}function Uc(a){a=a|0;return b[a+4>>1]|0}function Vc(a,c){a=a|0;c=c|0;b[a+4>>1]=c;return}function Wc(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Xc(){var a=0,b=0,d=0;a=i;b=RB(4)|0;if(b){d=b;c[d>>2]=4080;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(4)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){c[d>>2]=4080;i=a;return d|0}return 0}function Yc(a,b){a=a|0;b=b|0;var d=0;d=i;a=tb[c[(c[a>>2]|0)+8>>2]&63](a,b)|0;i=d;return a|0}function Zc(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function _c(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0,k=0;e=i;h=c[a+52>>2]|0;f=h+4|0;j=b[f>>1]|0;if((j&2)==0?(k=j&65535,(k&2|0)==0):0){b[f>>1]=k|2;g[h+144>>2]=0.0}h=d;j=c[h+4>>2]|0;k=a+76|0;c[k>>2]=c[h>>2];c[k+4>>2]=j;i=e;return}function $c(a){a=a|0;return a+76|0}function ad(a,b){a=a|0;b=+b;g[a+104>>2]=b;return}function bd(a){a=a|0;return+(+g[a+104>>2])}function cd(a,b){a=a|0;b=+b;g[a+84>>2]=b;return}function dd(a){a=a|0;return+(+g[a+84>>2])}function ed(a,b){a=a|0;b=+b;g[a+88>>2]=b;return}function fd(a){a=a|0;return+(+g[a+88>>2])}function gd(a){a=a|0;return c[a+4>>2]|0}function hd(a){a=a|0;return c[a+48>>2]|0}function id(a){a=a|0;return c[a+52>>2]|0}function jd(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[104]|0)==0?(wa(104)|0)!=0:0)Da(104);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=96;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 96}function kd(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[120]|0)==0?(wa(120)|0)!=0:0)Da(120);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=112;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 112}function ld(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[136]|0)==0?(wa(136)|0)!=0:0)Da(136);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=128;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 128}function md(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function nd(a){a=a|0;return c[a+12>>2]|0}function od(a){a=a|0;return c[a+64>>2]|0}function pd(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function qd(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function rd(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function sd(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function td(){var a=0,b=0,d=0;a=i;b=RB(8)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(8)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function ud(a){a=+a;var b=0,d=0;b=i;d=RB(8)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(8)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);g[d>>2]=+R(+a);g[d+4>>2]=+Q(+a);i=b;return d|0}function vd(a,b){a=a|0;b=+b;g[a>>2]=+R(+b);g[a+4>>2]=+Q(+b);return}function wd(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=1.0;return}function xd(a){a=a|0;var b=0.0;b=+W(+(+g[a>>2]),+(+g[a+4>>2]));return+b}function yd(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[152]|0)==0?(wa(152)|0)!=0:0)Da(152);e=+(+g[b+4>>2]);d=+(+g[b>>2]);b=144;g[b>>2]=e;g[b+4>>2]=d;i=c;return 144}function zd(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[168]|0)==0?(wa(168)|0)!=0:0)Da(168);e=+-+g[b>>2];d=+(+g[b+4>>2]);b=160;g[b>>2]=e;g[b+4>>2]=d;i=c;return 160}function Ad(a){a=a|0;return+(+g[a>>2])}function Bd(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Cd(a){a=a|0;return+(+g[a+4>>2])}function Dd(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Ed(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Fd(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,k=0,l=0;f=i;h=a+68|0;if(!(+g[d>>2]!=+g[h>>2])?!(+g[d+4>>2]!=+g[a+72>>2]):0){i=f;return}j=c[a+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[j+144>>2]=0.0}a=c[a+52>>2]|0;j=a+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[a+144>>2]=0.0}j=d;k=c[j+4>>2]|0;l=h;c[l>>2]=c[j>>2];c[l+4>>2]=k;i=f;return}function Gd(a){a=a|0;return a+68|0}function Hd(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0,l=0;f=i;h=a+76|0;if(!(+g[h>>2]!=d)){i=f;return}j=c[a+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[j+144>>2]=0.0}a=c[a+52>>2]|0;j=a+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[a+144>>2]=0.0}g[h>>2]=d;i=f;return}function Id(a){a=a|0;return+(+g[a+76>>2])}function Jd(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0){g[a+92>>2]=b;i=d;return}else Aa(14968,5304,228,15064)}function Kd(a){a=a|0;return+(+g[a+92>>2])}function Ld(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0){g[a+96>>2]=b;i=d;return}else Aa(15080,5304,239,15120)}function Md(a){a=a|0;return+(+g[a+96>>2])}function Nd(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0&b<=1.0){g[a+100>>2]=b;i=d;return}else Aa(5360,5304,250,5416)}function Od(a){a=a|0;return+(+g[a+100>>2])}function Pd(a){a=a|0;return c[a+4>>2]|0}function Qd(a){a=a|0;return c[a+48>>2]|0}function Rd(a){a=a|0;return c[a+52>>2]|0}function Sd(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[184]|0)==0?(wa(184)|0)!=0:0)Da(184);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=176;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 176}function Td(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[200]|0)==0?(wa(200)|0)!=0:0)Da(200);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=192;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 192}function Ud(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[216]|0)==0?(wa(216)|0)!=0:0)Da(216);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=208;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 208}function Vd(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Wd(a){a=a|0;return c[a+12>>2]|0}function Xd(a){a=a|0;return c[a+64>>2]|0}function Yd(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Zd(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function _d(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function $d(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function ae(a){a=a|0;return+(+g[a>>2])}function be(a,b){a=a|0;b=+b;g[a>>2]=b;return}function ce(a){a=a|0;return+(+g[a+4>>2])}function de(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function ee(a){a=a|0;return+(+g[a+8>>2])}function fe(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function ge(a){a=a|0;return+(+g[a+12>>2])}function he(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function ie(a){a=a|0;return+(+g[a+16>>2])}function je(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function ke(a){a=a|0;return+(+g[a+20>>2])}function le(a,b){a=a|0;b=+b;g[a+20>>2]=b;return}function me(a){a=a|0;return+(+g[a+24>>2])}function ne(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function oe(a){a=a|0;return+(+g[a+28>>2])}function pe(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function qe(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function re(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function se(){var b=0,d=0,e=0,f=0;b=i;d=RB(52)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(52)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+44>>2]=0;f=d+4|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;c[f+16>>2]=0;c[f+20>>2]=0;c[f+24>>2]=0;c[f+28>>2]=0;a[e>>0]=1;a[d+37>>0]=1;a[d+38>>0]=0;a[d+39>>0]=0;c[d>>2]=0;a[d+40>>0]=1;g[d+48>>2]=1.0;i=b;return d|0}function te(a){a=a|0;return c[a>>2]|0}function ue(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function ve(a){a=a|0;return a+4|0}function we(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+4|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function xe(a){a=a|0;return+(+g[a+12>>2])}function ye(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function ze(a){a=a|0;return a+16|0}function Ae(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+16|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Be(a){a=a|0;return+(+g[a+24>>2])}function Ce(a,b){a=a|0;b=+b;g[a+24>>2]=b;return}function De(a){a=a|0;return+(+g[a+28>>2])}function Ee(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function Fe(a){a=a|0;return+(+g[a+32>>2])}function Ge(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function He(b){b=b|0;return(a[b+36>>0]|0)!=0|0}function Ie(b,c){b=b|0;c=c|0;a[b+36>>0]=c&1;return}function Je(b){b=b|0;return(a[b+37>>0]|0)!=0|0}function Ke(b,c){b=b|0;c=c|0;a[b+37>>0]=c&1;return}function Le(b){b=b|0;return(a[b+38>>0]|0)!=0|0}function Me(b,c){b=b|0;c=c|0;a[b+38>>0]=c&1;return}function Ne(b){b=b|0;return(a[b+39>>0]|0)!=0|0}function Oe(b,c){b=b|0;c=c|0;a[b+39>>0]=c&1;return}function Pe(b){b=b|0;return(a[b+40>>0]|0)!=0|0}function Qe(b,c){b=b|0;c=c|0;a[b+40>>0]=c&1;return}function Re(a){a=a|0;return c[a+44>>2]|0}function Se(a,b){a=a|0;b=b|0;c[a+44>>2]=b;return}function Te(a){a=a|0;return+(+g[a+48>>2])}function Ue(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function Ve(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function We(){var a=0,b=0,d=0;a=i;b=RB(4)|0;if(b){d=b;c[d>>2]=3728;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(4)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){c[d>>2]=3728;i=a;return d|0}return 0}function Xe(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=+f;var g=0;g=i;f=+kb[c[(c[a>>2]|0)+8>>2]&63](a,b,d,e,f);i=g;return+f}function Ye(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ze(b){b=b|0;return a[b>>0]|0}function _e(b,c){b=b|0;c=c|0;a[b>>0]=c;return}function $e(b){b=b|0;return a[b+1>>0]|0}function af(b,c){b=b|0;c=c|0;a[b+1>>0]=c;return}function bf(b){b=b|0;return a[b+2>>0]|0}function cf(b,c){b=b|0;c=c|0;a[b+2>>0]=c;return}function df(b){b=b|0;return a[b+3>>0]|0}function ef(b,c){b=b|0;c=c|0;a[b+3>>0]=c;return}function ff(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function gf(){var a=0,b=0,d=0;a=i;b=RB(8)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(8)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function hf(a,b){a=+a;b=+b;var d=0,e=0;d=i;e=RB(8)|0;a:do if(!e){while(1){e=c[4698]|0;c[4698]=e+0;if(!e)break;qb[e&63]();e=RB(8)|0;if(e)break a}e=cb(4)|0;c[e>>2]=18632;_a(e|0,18680,116)}while(0);g[e>>2]=a;g[e+4>>2]=b;i=d;return e|0}function jf(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;return}function kf(a,b,c){a=a|0;b=+b;c=+c;g[a>>2]=b;g[a+4>>2]=c;return}function lf(a,b){a=a|0;b=b|0;g[a>>2]=+g[b>>2]+ +g[a>>2];a=a+4|0;g[a>>2]=+g[b+4>>2]+ +g[a>>2];return}function mf(a,b){a=a|0;b=b|0;g[a>>2]=+g[a>>2]- +g[b>>2];a=a+4|0;g[a>>2]=+g[a>>2]- +g[b+4>>2];return}function nf(a,b){a=a|0;b=+b;g[a>>2]=+g[a>>2]*b;a=a+4|0;g[a>>2]=+g[a>>2]*b;return}function of(a){a=a|0;var b=0.0,c=0.0;c=+g[a>>2];b=+g[a+4>>2];b=+O(+(c*c+b*b));return+b}function pf(a){a=a|0;var b=0.0,c=0.0;c=+g[a>>2];b=+g[a+4>>2];return+(c*c+b*b)}function qf(a){a=a|0;var b=0,c=0.0,d=0.0,e=0.0,f=0,h=0.0;b=i;d=+g[a>>2];f=a+4|0;e=+g[f>>2];c=+O(+(d*d+e*e));if(c<1.1920928955078125e-7){e=0.0;i=b;return+e}h=1.0/c;g[a>>2]=d*h;g[f>>2]=e*h;e=c;i=b;return+e}function rf(a){a=a|0;var b=0;b=i;if(((g[k>>2]=+g[a>>2],c[k>>2]|0)&2139095040|0)==2139095040){a=0;i=b;return a|0}a=((g[k>>2]=+g[a+4>>2],c[k>>2]|0)&2139095040|0)!=2139095040;i=b;return a|0}function sf(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[232]|0)==0?(wa(232)|0)!=0:0)Da(232);e=+-+g[b+4>>2];d=+(+g[b>>2]);b=224;g[b>>2]=e;g[b+4>>2]=d;i=c;return 224}function tf(a){a=a|0;return+(+g[a>>2])}function uf(a,b){a=a|0;b=+b;g[a>>2]=b;return}function vf(a){a=a|0;return+(+g[a+4>>2])}function wf(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function xf(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function yf(){var a=0,b=0,d=0;a=i;b=RB(12)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(12)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function zf(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0;e=i;f=RB(12)|0;a:do if(!f){while(1){f=c[4698]|0;c[4698]=f+0;if(!f)break;qb[f&63]();f=RB(12)|0;if(f)break a}f=cb(4)|0;c[f>>2]=18632;_a(f|0,18680,116)}while(0);g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;i=e;return f|0}function Af(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;return}function Bf(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;return}function Cf(a,b){a=a|0;b=b|0;var c=0;g[a>>2]=+g[b>>2]+ +g[a>>2];c=a+4|0;g[c>>2]=+g[b+4>>2]+ +g[c>>2];a=a+8|0;g[a>>2]=+g[b+8>>2]+ +g[a>>2];return}function Df(a,b){a=a|0;b=b|0;var c=0;g[a>>2]=+g[a>>2]- +g[b>>2];c=a+4|0;g[c>>2]=+g[c>>2]- +g[b+4>>2];a=a+8|0;g[a>>2]=+g[a>>2]- +g[b+8>>2];return}function Ef(a,b){a=a|0;b=+b;var c=0;g[a>>2]=+g[a>>2]*b;c=a+4|0;g[c>>2]=+g[c>>2]*b;a=a+8|0;g[a>>2]=+g[a>>2]*b;return}function Ff(a){a=a|0;return+(+g[a>>2])}function Gf(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Hf(a){a=a|0;return+(+g[a+4>>2])}function If(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Jf(a){a=a|0;return+(+g[a+8>>2])}function Kf(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Lf(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Mf(){var a=0,b=0;a=i;b=RB(16)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(16)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function Nf(a){a=a|0;var b=0,d=0.0,e=0.0,f=0.0,h=0.0;b=i;e=+g[a+8>>2];f=+g[a>>2];d=+g[a+12>>2];h=+g[a+4>>2];if(!(e-f>=0.0&d-h>=0.0)){a=0;i=b;return a|0}if(((g[k>>2]=f,c[k>>2]|0)&2139095040|0)==2139095040){a=0;i=b;return a|0}if(((g[k>>2]=h,c[k>>2]|0)&2139095040|0)==2139095040){a=0;i=b;return a|0}if(((g[k>>2]=e,c[k>>2]|0)&2139095040|0)==2139095040){a=0;i=b;return a|0}a=((g[k>>2]=d,c[k>>2]|0)&2139095040|0)!=2139095040;i=b;return a|0}function Of(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[248]|0)==0?(wa(248)|0)!=0:0)Da(248);e=+((+g[b>>2]+ +g[b+8>>2])*.5);d=+((+g[b+4>>2]+ +g[b+12>>2])*.5);b=240;g[b>>2]=e;g[b+4>>2]=d;i=c;return 240}function Pf(b){b=b|0;var c=0,d=0.0,e=0.0;c=i;if((a[264]|0)==0?(wa(264)|0)!=0:0)Da(264);e=+((+g[b+8>>2]- +g[b>>2])*.5);d=+((+g[b+12>>2]- +g[b+4>>2])*.5);b=256;g[b>>2]=e;g[b+4>>2]=d;i=c;return 256}function Qf(a){a=a|0;return+((+g[a+8>>2]- +g[a>>2]+(+g[a+12>>2]- +g[a+4>>2]))*2.0)}function Rf(a,b){a=a|0;b=b|0;var c=0,d=0.0,e=0.0,f=0,h=0.0,j=0.0;c=i;d=+g[a>>2];e=+g[b>>2];h=+g[a+4>>2];j=+g[b+4>>2];e=+(d<e?d:e);j=+(h<j?h:j);f=a;g[f>>2]=e;g[f+4>>2]=j;f=a+8|0;j=+g[f>>2];e=+g[b+8>>2];h=+g[a+12>>2];d=+g[b+12>>2];e=+(j>e?j:e);d=+(h>d?h:d);a=f;g[a>>2]=e;g[a+4>>2]=d;i=c;return}function Sf(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0;d=i;e=+g[b>>2];f=+g[c>>2];h=+g[b+4>>2];j=+g[c+4>>2];f=+(e<f?e:f);j=+(h<j?h:j);k=a;g[k>>2]=f;g[k+4>>2]=j;j=+g[b+8>>2];f=+g[c+8>>2];h=+g[b+12>>2];e=+g[c+12>>2];f=+(j>f?j:f);e=+(h>e?h:e);b=a+8|0;g[b>>2]=f;g[b+4>>2]=e;i=d;return}function Tf(a,b){a=a|0;b=b|0;var c=0;c=i;if((+g[a>>2]<=+g[b>>2]?+g[a+4>>2]<=+g[b+4>>2]:0)?+g[b+8>>2]<=+g[a+8>>2]:0)b=+g[b+12>>2]<=+g[a+12>>2];else b=0;i=c;return b|0}function Uf(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0;e=i;i=i+32|0;l=e+8|0;h=e+24|0;j=e+16|0;f=e;n=d;t=c[n>>2]|0;n=c[n+4>>2]|0;o=l;c[o>>2]=t;c[o+4>>2]=n;r=+g[d+8>>2]-(c[k>>2]=t,+g[k>>2]);p=+g[d+12>>2]- +g[d+4>>2];g[h>>2]=r;g[h+4>>2]=p;if(!(r>0.0))r=-r;if(!(p>0.0))p=-p;g[j>>2]=r;g[j+4>>2]=p;n=a+8|0;m=f+4|0;o=0;p=3.4028234663852886e+38;q=-3.4028234663852886e+38;while(1){if(r<1.1920928955078125e-7){r=+g[l+(o<<2)>>2];if(r<+g[a+(o<<2)>>2]){f=0;a=17;break}if(+g[n+(o<<2)>>2]<r){f=0;a=17;break}}else{s=1.0/+g[h+(o<<2)>>2];r=+g[l+(o<<2)>>2];u=s*(+g[a+(o<<2)>>2]-r);r=s*(+g[n+(o<<2)>>2]-r);t=u>r;s=t?r:u;r=t?u:r;if(s>q){g[f>>2]=0.0;g[m>>2]=0.0;g[f+(o<<2)>>2]=t?1.0:-1.0;q=s}p=p<r?p:r;if(q>p){f=0;a=17;break}}o=o+1|0;if((o|0)>=2){a=14;break}r=+g[j+(o<<2)>>2]}if((a|0)==14){if(q<0.0){t=0;i=e;return t|0}if(+g[d+16>>2]<q){t=0;i=e;return t|0}g[b+8>>2]=q;n=f;o=c[n+4>>2]|0;t=b;c[t>>2]=c[n>>2];c[t+4>>2]=o;t=1;i=e;return t|0}else if((a|0)==17){i=e;return f|0}return 0}function Vf(a){a=a|0;return a|0}function Wf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Xf(a){a=a|0;return a+8|0}function Yf(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zf(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function _f(){var d=0,e=0;d=i;e=RB(28)|0;a:do if(!e){while(1){e=c[4698]|0;c[4698]=e+0;if(!e)break;qb[e&63]();e=RB(28)|0;if(e)break a}e=cb(4)|0;c[e>>2]=18632;_a(e|0,18680,116)}while(0);b[e+22>>1]=1;b[e+24>>1]=-1;b[e+26>>1]=0;c[e>>2]=0;c[e+4>>2]=0;g[e+8>>2]=.20000000298023224;g[e+12>>2]=0.0;g[e+16>>2]=0.0;a[e+20>>0]=0;i=d;return e|0}function $f(a){a=a|0;return c[a>>2]|0}function ag(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function bg(a){a=a|0;return c[a+4>>2]|0}function cg(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function dg(a){a=a|0;return+(+g[a+8>>2])}function eg(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function fg(a){a=a|0;return+(+g[a+12>>2])}function gg(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function hg(a){a=a|0;return+(+g[a+16>>2])}function ig(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function jg(b){b=b|0;return(a[b+20>>0]|0)!=0|0}function kg(b,c){b=b|0;c=c|0;a[b+20>>0]=c&1;return}function lg(a){a=a|0;return a+22|0}function mg(a,c){a=a|0;c=c|0;var d=0;d=i;a=a+22|0;b[a+0>>1]=b[c+0>>1]|0;b[a+2>>1]=b[c+2>>1]|0;b[a+4>>1]=b[c+4>>1]|0;i=d;return}function ng(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function og(){var b=0,d=0,e=0;b=i;d=RB(44)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(44)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=9;e=d+20|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;i=b;return d|0}function pg(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);b=a+20|0;g[b>>2]=l;g[b+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);b=a+28|0;g[b>>2]=j;g[b+4>>2]=h;i=f;return}function qg(a){a=a|0;return a+20|0}function rg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function sg(a){a=a|0;return a+28|0}function tg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function ug(a){a=a|0;return+(+g[a+36>>2])}function vg(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function wg(a){a=a|0;return+(+g[a+40>>2])}function xg(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function yg(a){a=a|0;return c[a>>2]|0}function zg(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Ag(a){a=a|0;return c[a+4>>2]|0}function Bg(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Cg(a){a=a|0;return c[a+8>>2]|0}function Dg(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Eg(a){a=a|0;return c[a+12>>2]|0}function Fg(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Gg(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Hg(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Ig(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Jg(){var a=0,b=0,d=0,e=0;a=i;e=RB(64)|0;a:do if(!e){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();e=RB(64)|0;if(e)break a}e=cb(4)|0;c[e>>2]=18632;_a(e|0,18680,116)}while(0);d=e+0|0;b=d+64|0;do{c[d>>2]=0;d=d+4|0}while((d|0)<(b|0));i=a;return e|0}function Kg(a){a=a|0;return a+40|0}function Lg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+40|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Mg(a){a=a|0;return a+48|0}function Ng(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+48|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Og(a){a=a|0;return c[a+56>>2]|0}function Pg(a,b){a=a|0;b=b|0;c[a+56>>2]=b;return}function Qg(a){a=a|0;return c[a+60>>2]|0}function Rg(a,b){a=a|0;b=b|0;c[a+60>>2]=b;return}function Sg(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Tg(){var b=0,d=0,e=0,f=0;b=i;d=RB(72)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(72)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=2;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;g[d+44>>2]=0.0;a[d+48>>0]=0;g[d+52>>2]=0.0;g[d+56>>2]=0.0;a[d+60>>0]=0;g[d+64>>2]=0.0;g[d+68>>2]=0.0;i=b;return d|0}function Ug(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;k=+g[e>>2]- +g[b+12>>2];q=e+4|0;n=+g[q>>2]- +g[b+16>>2];p=b+24|0;l=+g[p>>2];o=b+20|0;j=+g[o>>2];m=+(k*l+n*j);j=+(l*n-k*j);r=a+20|0;g[r>>2]=m;g[r+4>>2]=j;j=+g[e>>2]- +g[d+12>>2];m=+g[q>>2]- +g[d+16>>2];k=+g[d+24>>2];n=+g[d+20>>2];l=+(j*k+m*n);n=+(k*m-j*n);e=a+28|0;g[e>>2]=l;g[e+4>>2]=n;n=+g[p>>2];l=+g[f>>2];j=+g[o>>2];m=+g[f+4>>2];k=+(n*l+j*m);j=+(n*m-l*j);e=a+36|0;g[e>>2]=k;g[e+4>>2]=j;g[a+44>>2]=+g[d+56>>2]- +g[b+56>>2];i=h;return}function Vg(a){a=a|0;return a+20|0}function Wg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Xg(a){a=a|0;return a+28|0}function Yg(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zg(a){a=a|0;return a+36|0}function _g(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function $g(a){a=a|0;return+(+g[a+44>>2])}function ah(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function bh(b){b=b|0;return(a[b+48>>0]|0)!=0|0}function ch(b,c){b=b|0;c=c|0;a[b+48>>0]=c&1;return}function dh(a){a=a|0;return+(+g[a+52>>2])}function eh(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function fh(a){a=a|0;return+(+g[a+56>>2])}function gh(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function hh(b){b=b|0;return(a[b+60>>0]|0)!=0|0}function ih(b,c){b=b|0;c=c|0;a[b+60>>0]=c&1;return}function jh(a){a=a|0;return+(+g[a+64>>2])}function kh(a,b){a=a|0;b=+b;g[a+64>>2]=b;return}function lh(a){a=a|0;return+(+g[a+68>>2])}function mh(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function nh(a){a=a|0;return c[a>>2]|0}function oh(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function ph(a){a=a|0;return c[a+4>>2]|0}function qh(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function rh(a){a=a|0;return c[a+8>>2]|0}function sh(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function th(a){a=a|0;return c[a+12>>2]|0}function uh(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function vh(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function wh(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function xh(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function yh(b){b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0;d=i;e=RB(103028)|0;a:do if(!e){while(1){e=c[4698]|0;c[4698]=e+0;if(!e)break;qb[e&63]();e=RB(103028)|0;if(e)break a}k=cb(4)|0;c[k>>2]=18632;_a(k|0,18680,116)}while(0);h=e+8|0;c[h>>2]=128;c[e+4>>2]=0;f=RB(1024)|0;c[e>>2]=f;UB(f|0,0,c[h>>2]<<3|0)|0;h=e+12|0;f=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(f|0));do if(!(a[8640]|0)){f=1;h=0;while(1){if((h|0)>=14){f=7;break}if((f|0)>(c[7936+(h<<2)>>2]|0)){h=h+1|0;a[7992+f>>0]=h}else a[7992+f>>0]=h;f=f+1|0;if((f|0)>=641){f=12;break}}if((f|0)==7)Aa(8648,8672,71,8720);else if((f|0)==12){a[8640]=1;break}}while(0);c[e+102468>>2]=0;c[e+102472>>2]=0;c[e+102476>>2]=0;c[e+102864>>2]=0;c[e+102872>>2]=-1;f=e+102884|0;c[f>>2]=16;c[e+102880>>2]=0;j=RB(576)|0;h=e+102876|0;c[h>>2]=j;UB(j|0,0,(c[f>>2]|0)*36|0)|0;j=(c[f>>2]|0)+ -1|0;h=c[h>>2]|0;if((j|0)>0){k=0;do{j=k;k=k+1|0;c[h+(j*36|0)+20>>2]=k;c[h+(j*36|0)+32>>2]=-1;j=(c[f>>2]|0)+ -1|0}while((k|0)<(j|0))}c[h+(j*36|0)+20>>2]=-1;c[h+(((c[f>>2]|0)+ -1|0)*36|0)+32>>2]=-1;j=e+102888|0;k=e+102920|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[k>>2]=16;c[e+102924>>2]=0;c[e+102916>>2]=RB(128)|0;c[e+102908>>2]=16;c[e+102912>>2]=0;c[e+102904>>2]=RB(64)|0;c[e+102932>>2]=0;c[e+102936>>2]=0;c[e+102940>>2]=10112;c[e+102944>>2]=10120;k=e+102948|0;j=e+102968|0;c[e+102980>>2]=0;c[e+102984>>2]=0;f=e+102992|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;a[f>>0]=1;a[e+102993>>0]=1;a[e+102994>>0]=0;a[e+102995>>0]=1;a[e+102976>>0]=1;f=b;h=c[f+4>>2]|0;c[j>>2]=c[f>>2];c[j+4>>2]=h;c[e+102868>>2]=4;g[e+102988>>2]=0.0;c[k>>2]=e;k=e+102996|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;c[k+16>>2]=0;c[k+20>>2]=0;c[k+24>>2]=0;c[k+28>>2]=0;i=d;return e|0}function zh(a,b){a=a|0;b=b|0;c[a+102980>>2]=b;return}function Ah(a,b){a=a|0;b=b|0;c[a+102940>>2]=b;return}function Bh(a,b){a=a|0;b=b|0;c[a+102944>>2]=b;return}function Ch(a,b){a=a|0;b=b|0;c[a+102984>>2]=b;return}function Dh(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0;f=i;if(c[d+102868>>2]&2)Aa(11528,11552,109,11592);h=Jx(d,152)|0;if(!h)h=0;else{l=e+4|0;if(((g[k>>2]=+g[l>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9064,9088,27,9128);if(((g[k>>2]=+g[e+8>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9064,9088,27,9128);o=e+16|0;if(((g[k>>2]=+g[o>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9136,9088,28,9128);if(((g[k>>2]=+g[e+20>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9136,9088,28,9128);p=e+12|0;if(((g[k>>2]=+g[p>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9168,9088,29,9128);q=e+24|0;if(((g[k>>2]=+g[q>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(9192,9088,30,9128);n=e+32|0;s=+g[n>>2];if(((g[k>>2]=s,c[k>>2]|0)&2139095040|0)==2139095040|!(s>=0.0))Aa(9224,9088,31,9128);m=e+28|0;s=+g[m>>2];if(((g[k>>2]=s,c[k>>2]|0)&2139095040|0)==2139095040|!(s>=0.0))Aa(9288,9088,32,9128);j=h+4|0;r=(a[e+39>>0]|0)==0?0:8;b[j>>1]=r;if(a[e+38>>0]|0){r=(r&65535|16)&65535;b[j>>1]=r}if(a[e+36>>0]|0){r=(r&65535|4)&65535;b[j>>1]=r}if(a[e+37>>0]|0){r=(r&65535|2)&65535;b[j>>1]=r}if(a[e+40>>0]|0)b[j>>1]=r&65535|32;c[h+88>>2]=d;r=l;l=c[r>>2]|0;r=c[r+4>>2]|0;j=h+12|0;c[j>>2]=l;c[j+4>>2]=r;s=+g[p>>2];g[h+20>>2]=+R(+s);g[h+24>>2]=+Q(+s);g[h+28>>2]=0.0;g[h+32>>2]=0.0;j=h+36|0;c[j>>2]=l;c[j+4>>2]=r;j=h+44|0;c[j>>2]=l;c[j+4>>2]=r;g[h+52>>2]=+g[p>>2];g[h+56>>2]=+g[p>>2];g[h+60>>2]=0.0;c[h+108>>2]=0;c[h+112>>2]=0;c[h+92>>2]=0;c[h+96>>2]=0;p=o;j=c[p+4>>2]|0;r=h+64|0;c[r>>2]=c[p>>2];c[r+4>>2]=j;g[h+72>>2]=+g[q>>2];g[h+132>>2]=+g[m>>2];g[h+136>>2]=+g[n>>2];g[h+140>>2]=+g[e+48>>2];g[h+76>>2]=0.0;g[h+80>>2]=0.0;g[h+84>>2]=0.0;g[h+144>>2]=0.0;r=c[e>>2]|0;c[h>>2]=r;j=h+116|0;if((r|0)==2){g[j>>2]=1.0;g[h+120>>2]=1.0}else{g[j>>2]=0.0;g[h+120>>2]=0.0}g[h+124>>2]=0.0;g[h+128>>2]=0.0;c[h+148>>2]=c[e+44>>2];c[h+100>>2]=0;c[h+104>>2]=0}c[h+92>>2]=0;j=d+102952|0;c[h+96>>2]=c[j>>2];e=c[j>>2]|0;if(!e){c[j>>2]=h;r=d+102960|0;q=c[r>>2]|0;q=q+1|0;c[r>>2]=q;i=f;return h|0}c[e+92>>2]=h;c[j>>2]=h;r=d+102960|0;q=c[r>>2]|0;q=q+1|0;c[r>>2]=q;i=f;return h|0}function Eh(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;f=b+102960|0;if((c[f>>2]|0)<=0)Aa(11608,11552,133,11624);if(c[b+102868>>2]&2)Aa(11528,11552,134,11624);j=d+108|0;k=c[j>>2]|0;if(k){h=b+102980|0;do{m=k;k=c[k+12>>2]|0;l=c[h>>2]|0;if(!l)l=m+4|0;else{o=m+4|0;lb[c[(c[l>>2]|0)+8>>2]&127](l,c[o>>2]|0);l=o}vy(b,c[l>>2]|0);c[j>>2]=k}while((k|0)!=0)}c[j>>2]=0;h=d+112|0;k=c[h>>2]|0;if(k){j=b+102872|0;do{o=k;k=c[k+12>>2]|0;Zx(j,c[o+4>>2]|0)}while((k|0)!=0)}c[h>>2]=0;h=d+100|0;m=c[h>>2]|0;a:do if(!m)g=d+104|0;else{l=b+102980|0;j=b+102872|0;k=d+104|0;while(1){n=m;m=c[m+4>>2]|0;o=c[l>>2]|0;if(o)lb[c[(c[o>>2]|0)+12>>2]&127](o,n);py(n,j);ny(n,b);o=a[8036]|0;if((o&255)>=14)break;o=b+((o&255)<<2)+12|0;c[n>>2]=c[o>>2];c[o>>2]=n;c[h>>2]=m;c[k>>2]=(c[k>>2]|0)+ -1;if(!m){g=k;break a}}Aa(8760,8672,171,9032)}while(0);c[h>>2]=0;c[g>>2]=0;h=d+92|0;j=c[h>>2]|0;g=d+96|0;if(j)c[j+96>>2]=c[g>>2];j=c[g>>2]|0;if(j)c[j+92>>2]=c[h>>2];h=b+102952|0;if((c[h>>2]|0)==(d|0))c[h>>2]=c[g>>2];c[f>>2]=(c[f>>2]|0)+ -1;f=a[8144]|0;if((f&255)<14){o=b+((f&255)<<2)+12|0;c[d>>2]=c[o>>2];c[o>>2]=d;i=e;return}else Aa(8760,8672,171,9032)}function Fh(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0.0;e=i;if(c[b+102868>>2]&2)Aa(11528,11552,214,11640);do switch(c[d>>2]|0){case 4:{f=Jx(b,196)|0;do if(f){c[f>>2]=15768;l=d+8|0;h=d+12|0;if((c[l>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[l>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];h=f+16|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=0;c[h+24>>2]=0;c[h+28>>2]=0;c[f>>2]=16776;h=d+20|0;l=c[h+4>>2]|0;B=f+68|0;c[B>>2]=c[h>>2];c[B+4>>2]=l;B=d+28|0;l=c[B+4>>2]|0;h=f+76|0;c[h>>2]=c[B>>2];c[h+4>>2]=l;h=d+36|0;l=c[h+4>>2]|0;B=f+92|0;c[B>>2]=c[h>>2];c[B+4>>2]=l;B=d+44|0;l=c[B+4>>2]|0;h=f+100|0;c[h>>2]=c[B>>2];c[h+4>>2]=l;h=d+52|0;g[f+84>>2]=+g[h>>2];l=d+56|0;g[f+88>>2]=+g[l>>2];x=+g[d+60>>2];if(x!=0.0){g[f+112>>2]=x;g[f+108>>2]=+g[h>>2]+x*+g[l>>2];g[f+116>>2]=0.0;j=f;break}else Aa(16824,16696,65,16848)}else j=0;while(0);f=j;break};case 9:{f=Jx(b,180)|0;do if(f){c[f>>2]=15768;h=d+8|0;j=d+12|0;if((c[h>>2]|0)==(c[j>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[h>>2];c[f+52>>2]=c[j>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];p=f+16|0;c[p+0>>2]=0;c[p+4>>2]=0;c[p+8>>2]=0;c[p+12>>2]=0;c[p+16>>2]=0;c[p+20>>2]=0;c[p+24>>2]=0;c[p+28>>2]=0;c[f>>2]=14920;p=d+20|0;B=c[p+4>>2]|0;w=f+68|0;c[w>>2]=c[p>>2];c[w+4>>2]=B;w=d+28|0;B=c[w+4>>2]|0;p=f+76|0;c[p>>2]=c[w>>2];c[p+4>>2]=B;g[f+84>>2]=0.0;g[f+88>>2]=0.0;g[f+92>>2]=0.0;g[f+96>>2]=+g[d+36>>2];g[f+100>>2]=+g[d+40>>2];p=f;break}}else p=0;while(0);f=p;break};case 2:{f=Jx(b,256)|0;if(!f)f=0;else{c[f>>2]=15768;h=d+8|0;j=d+12|0;if((c[h>>2]|0)==(c[j>>2]|0))Aa(15816,15696,185,15848);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[h>>2];c[f+52>>2]=c[j>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];h=f+16|0;c[h+0>>2]=0;c[h+4>>2]=0;c[h+8>>2]=0;c[h+12>>2]=0;c[h+16>>2]=0;c[h+20>>2]=0;c[h+24>>2]=0;c[h+28>>2]=0;c[f>>2]=16376;h=f+84|0;B=d+20|0;w=c[B+4>>2]|0;v=f+68|0;c[v>>2]=c[B>>2];c[v+4>>2]=w;v=d+28|0;w=c[v+4>>2]|0;B=f+76|0;c[B>>2]=c[v>>2];c[B+4>>2]=w;B=d+36|0;w=c[B>>2]|0;B=c[B+4>>2]|0;v=h;c[v>>2]=w;c[v+4>>2]=B;x=(c[k>>2]=w,+g[k>>2]);y=(c[k>>2]=B,+g[k>>2]);z=+O(+(x*x+y*y));if(!(z<1.1920928955078125e-7)){C=1.0/z;x=x*C;g[h>>2]=x;y=y*C;g[f+88>>2]=y}A=+-y;C=+x;w=f+92|0;g[w>>2]=A;g[w+4>>2]=C;g[f+100>>2]=+g[d+44>>2];w=f+104|0;g[f+252>>2]=0.0;B=d+52|0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;g[f+120>>2]=+g[B>>2];g[f+124>>2]=+g[d+56>>2];g[f+128>>2]=+g[d+64>>2];g[f+132>>2]=+g[d+68>>2];a[f+136>>0]=a[d+48>>0]|0;a[f+137>>0]=a[d+60>>0]|0;c[f+140>>2]=0;B=f+184|0;c[B+0>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;c[B+12>>2]=0}break};case 7:{j=Jx(b,224)|0;do if(j){c[j>>2]=15768;f=d+8|0;h=d+12|0;if((c[f>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[j+4>>2]=c[d>>2];c[j+8>>2]=0;c[j+12>>2]=0;c[j+48>>2]=c[f>>2];c[j+52>>2]=c[h>>2];c[j+56>>2]=0;a[j+61>>0]=a[d+16>>0]|0;a[j+60>>0]=0;c[j+64>>2]=c[d+4>>2];w=j+16|0;c[w+0>>2]=0;c[w+4>>2]=0;c[w+8>>2]=0;c[w+12>>2]=0;c[w+16>>2]=0;c[w+20>>2]=0;c[w+24>>2]=0;c[w+28>>2]=0;c[j>>2]=17712;w=d+20|0;B=c[w+4>>2]|0;q=j+76|0;c[q>>2]=c[w>>2];c[q+4>>2]=B;q=d+28|0;B=c[q+4>>2]|0;w=j+84|0;c[w>>2]=c[q>>2];c[w+4>>2]=B;w=d+36|0;B=c[w>>2]|0;w=c[w+4>>2]|0;q=j+92|0;c[q>>2]=B;c[q+4>>2]=w;q=j+100|0;g[q>>2]=-(c[k>>2]=w,+g[k>>2]);c[q+4>>2]=B;g[j+204>>2]=0.0;g[j+108>>2]=0.0;g[j+208>>2]=0.0;g[j+112>>2]=0.0;g[j+212>>2]=0.0;g[j+116>>2]=0.0;g[j+120>>2]=+g[d+48>>2];g[j+124>>2]=+g[d+52>>2];a[j+128>>0]=a[d+44>>0]|0;g[j+68>>2]=+g[d+56>>2];g[j+72>>2]=+g[d+60>>2];g[j+216>>2]=0.0;g[j+220>>2]=0.0;q=j+172|0;c[q+0>>2]=0;c[q+4>>2]=0;c[q+8>>2]=0;c[q+12>>2]=0;q=j;break}}else q=0;while(0);f=q;break};case 3:{f=Jx(b,176)|0;do if(f){c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];r=f+16|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[f>>2]=14768;r=d+20|0;B=c[r+4>>2]|0;w=f+80|0;c[w>>2]=c[r>>2];c[w+4>>2]=B;w=d+28|0;B=c[w+4>>2]|0;r=f+88|0;c[r>>2]=c[w>>2];c[r+4>>2]=B;g[f+104>>2]=+g[d+36>>2];g[f+68>>2]=+g[d+40>>2];g[f+72>>2]=+g[d+44>>2];g[f+100>>2]=0.0;g[f+96>>2]=0.0;g[f+76>>2]=0.0;r=f;break}}else r=0;while(0);f=r;break};case 1:{f=Jx(b,228)|0;do if(f){c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];B=f+16|0;c[B+0>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;c[B+12>>2]=0;c[B+16>>2]=0;c[B+20>>2]=0;c[B+24>>2]=0;c[B+28>>2]=0;c[f>>2]=17112;B=d+20|0;n=c[B+4>>2]|0;w=f+68|0;c[w>>2]=c[B>>2];c[w+4>>2]=n;w=d+28|0;n=c[w+4>>2]|0;B=f+76|0;c[B>>2]=c[w>>2];c[B+4>>2]=n;g[f+116>>2]=+g[d+36>>2];B=f+84|0;n=d+44|0;c[B+0>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;c[B+12>>2]=0;g[f+120>>2]=+g[n>>2];g[f+124>>2]=+g[d+48>>2];g[f+104>>2]=+g[d+60>>2];g[f+108>>2]=+g[d+56>>2];a[f+112>>0]=a[d+40>>0]|0;a[f+100>>0]=a[d+52>>0]|0;c[f+224>>2]=0;n=f;break}}else n=0;while(0);f=n;break};case 8:{f=Jx(b,208)|0;do if(f){c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];o=f+16|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;c[o+20>>2]=0;c[o+24>>2]=0;c[o+28>>2]=0;c[f>>2]=17568;o=d+20|0;B=c[o+4>>2]|0;w=f+80|0;c[w>>2]=c[o>>2];c[w+4>>2]=B;w=d+28|0;B=c[w+4>>2]|0;o=f+88|0;c[o>>2]=c[w>>2];c[o+4>>2]=B;g[f+96>>2]=+g[d+36>>2];g[f+68>>2]=+g[d+40>>2];g[f+72>>2]=+g[d+44>>2];g[f+104>>2]=0.0;g[f+108>>2]=0.0;g[f+112>>2]=0.0;o=f;break}}else o=0;while(0);f=o;break};case 6:{f=Jx(b,276)|0;if(!f)f=0;else{c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;B=f+48|0;c[B>>2]=c[j>>2];o=f+52|0;c[o>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];r=f+16|0;c[r+0>>2]=0;c[r+4>>2]=0;c[r+8>>2]=0;c[r+12>>2]=0;c[r+16>>2]=0;c[r+20>>2]=0;c[r+24>>2]=0;c[r+28>>2]=0;c[f>>2]=15280;r=f+92|0;j=f+100|0;t=f+108|0;m=f+116|0;s=f+124|0;h=f+132|0;w=d+20|0;v=c[w>>2]|0;c[f+68>>2]=v;n=d+24|0;p=c[n>>2]|0;c[f+72>>2]=p;q=c[v+4>>2]|0;c[f+76>>2]=q;l=c[p+4>>2]|0;c[f+80>>2]=l;if((q+ -1|0)>>>0>=2)Aa(15328,15392,53,15448);if((l+ -1|0)>>>0>=2)Aa(15464,15392,54,15448);u=c[v+48>>2]|0;c[f+84>>2]=u;v=c[v+52>>2]|0;c[B>>2]=v;z=+g[v+20>>2];A=+g[v+24>>2];x=+g[u+20>>2];y=+g[u+24>>2];w=c[w>>2]|0;if((q|0)==1){A=+g[v+56>>2];C=+g[u+56>>2];B=w+68|0;v=c[B+4>>2]|0;u=t;c[u>>2]=c[B>>2];c[u+4>>2]=v;u=w+76|0;v=c[u+4>>2]|0;B=r;c[B>>2]=c[u>>2];c[B+4>>2]=v;x=+g[w+116>>2];g[f+140>>2]=x;g[s>>2]=0.0;g[f+128>>2]=0.0;x=A-C-x}else{H=+g[u+16>>2];D=+g[u+12>>2];I=+g[v+16>>2];J=+g[v+12>>2];q=w+68|0;K=c[q>>2]|0;q=c[q+4>>2]|0;v=t;c[v>>2]=K;c[v+4>>2]=q;v=w+76|0;u=c[v>>2]|0;v=c[v+4>>2]|0;B=r;c[B>>2]=u;c[B+4>>2]=v;g[f+140>>2]=+g[w+100>>2];B=w+84|0;w=c[B>>2]|0;B=c[B+4>>2]|0;t=s;c[t>>2]=w;c[t+4>>2]=B;E=(c[k>>2]=K,+g[k>>2]);C=(c[k>>2]=q,+g[k>>2]);G=(c[k>>2]=u,+g[k>>2]);F=(c[k>>2]=v,+g[k>>2]);D=J-D+(A*G-z*F);A=I-H+(z*G+A*F);z=(c[k>>2]=w,+g[k>>2])*(y*D+x*A-E);x=z+(c[k>>2]=B,+g[k>>2])*(y*A-x*D-C)}q=c[p+48>>2]|0;c[f+88>>2]=q;p=c[p+52>>2]|0;c[o>>2]=p;A=+g[p+20>>2];z=+g[p+24>>2];y=+g[q+20>>2];C=+g[q+24>>2];n=c[n>>2]|0;if((l|0)==1){I=+g[p+56>>2];J=+g[q+56>>2];K=n+68|0;B=c[K+4>>2]|0;w=m;c[w>>2]=c[K>>2];c[w+4>>2]=B;w=n+76|0;B=c[w+4>>2]|0;K=j;c[K>>2]=c[w>>2];c[K+4>>2]=B;y=+g[n+116>>2];g[f+144>>2]=y;g[h>>2]=0.0;g[f+136>>2]=0.0;y=I-J-y}else{E=+g[q+16>>2];I=+g[q+12>>2];D=+g[p+16>>2];L=+g[p+12>>2];u=n+68|0;t=c[u>>2]|0;u=c[u+4>>2]|0;w=m;c[w>>2]=t;c[w+4>>2]=u;w=n+76|0;v=c[w>>2]|0;w=c[w+4>>2]|0;K=j;c[K>>2]=v;c[K+4>>2]=w;g[f+144>>2]=+g[n+100>>2];K=n+84|0;B=c[K>>2]|0;K=c[K+4>>2]|0;s=h;c[s>>2]=B;c[s+4>>2]=K;G=(c[k>>2]=t,+g[k>>2]);J=(c[k>>2]=u,+g[k>>2]);F=(c[k>>2]=v,+g[k>>2]);H=(c[k>>2]=w,+g[k>>2]);I=L-I+(z*F-A*H);H=D-E+(A*F+z*H);G=(c[k>>2]=B,+g[k>>2])*(C*I+y*H-G);y=G+(c[k>>2]=K,+g[k>>2])*(C*H-y*I-J)}L=+g[d+28>>2];g[f+152>>2]=L;g[f+148>>2]=x+y*L;g[f+156>>2]=0.0}break};case 5:{f=Jx(b,168)|0;do if(f){c[f>>2]=15768;j=d+8|0;l=d+12|0;if((c[j>>2]|0)==(c[l>>2]|0))Aa(15816,15696,185,15848);c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];l=c[l>>2]|0;c[f+52>>2]=l;c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];j=f+16|0;c[j+0>>2]=0;c[j+4>>2]=0;c[j+8>>2]=0;c[j+12>>2]=0;c[j+16>>2]=0;c[j+20>>2]=0;c[j+24>>2]=0;c[j+28>>2]=0;c[f>>2]=15912;j=d+20|0;if(((g[k>>2]=+g[j>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(15960,15984,34,16040);if(((g[k>>2]=+g[d+24>>2],c[k>>2]|0)&2139095040|0)==2139095040)Aa(15960,15984,34,16040);m=d+28|0;L=+g[m>>2];if(((g[k>>2]=L,c[k>>2]|0)&2139095040|0)==2139095040|!(L>=0.0))Aa(16056,15984,35,16040);n=d+32|0;L=+g[n>>2];if(((g[k>>2]=L,c[k>>2]|0)&2139095040|0)==2139095040|!(L>=0.0))Aa(16112,15984,36,16040);o=d+36|0;L=+g[o>>2];if(((g[k>>2]=L,c[k>>2]|0)&2139095040|0)==2139095040|!(L>=0.0))Aa(16168,15984,37,16040);else{h=j;K=c[h>>2]|0;h=c[h+4>>2]|0;B=f+76|0;c[B>>2]=K;c[B+4>>2]=h;I=(c[k>>2]=K,+g[k>>2])- +g[l+12>>2];H=(c[k>>2]=h,+g[k>>2])- +g[l+16>>2];G=+g[l+24>>2];L=+g[l+20>>2];J=+(I*G+H*L);L=+(G*H-I*L);h=f+68|0;g[h>>2]=J;g[h+4>>2]=L;g[f+104>>2]=+g[m>>2];g[f+96>>2]=0.0;g[f+100>>2]=0.0;g[f+84>>2]=+g[n>>2];g[f+88>>2]=+g[o>>2];g[f+92>>2]=0.0;g[f+108>>2]=0.0;h=f;break}}else h=0;while(0);f=h;break};case 10:{f=Jx(b,168)|0;do if(f){c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];l=f+16|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;c[l+16>>2]=0;c[l+20>>2]=0;c[l+24>>2]=0;c[l+28>>2]=0;c[f>>2]=17424;l=d+20|0;K=c[l+4>>2]|0;B=f+68|0;c[B>>2]=c[l>>2];c[B+4>>2]=K;B=d+28|0;K=c[B+4>>2]|0;l=f+76|0;c[l>>2]=c[B>>2];c[l+4>>2]=K;g[f+84>>2]=+g[d+36>>2];g[f+160>>2]=0.0;g[f+92>>2]=0.0;c[f+164>>2]=0;g[f+88>>2]=0.0;l=f;break}}else l=0;while(0);f=l;break};case 11:{f=Jx(b,192)|0;do if(f){c[f>>2]=15768;j=d+8|0;h=d+12|0;if((c[j>>2]|0)==(c[h>>2]|0))Aa(15816,15696,185,15848);else{c[f+4>>2]=c[d>>2];c[f+8>>2]=0;c[f+12>>2]=0;c[f+48>>2]=c[j>>2];c[f+52>>2]=c[h>>2];c[f+56>>2]=0;a[f+61>>0]=a[d+16>>0]|0;a[f+60>>0]=0;c[f+64>>2]=c[d+4>>2];B=f+16|0;c[B+0>>2]=0;c[B+4>>2]=0;c[B+8>>2]=0;c[B+12>>2]=0;c[B+16>>2]=0;c[B+20>>2]=0;c[B+24>>2]=0;c[B+28>>2]=0;c[f>>2]=5256;B=d+20|0;K=c[B+4>>2]|0;m=f+68|0;c[m>>2]=c[B>>2];c[m+4>>2]=K;g[f+76>>2]=+g[d+28>>2];g[f+80>>2]=0.0;g[f+84>>2]=0.0;g[f+88>>2]=0.0;g[f+92>>2]=+g[d+32>>2];g[f+96>>2]=+g[d+36>>2];g[f+100>>2]=+g[d+40>>2];m=f;break}}else m=0;while(0);f=m;break};default:Aa(15688,15696,121,15744)}while(0);c[f+8>>2]=0;j=b+102956|0;c[f+12>>2]=c[j>>2];h=c[j>>2]|0;if(h)c[h+8>>2]=f;c[j>>2]=f;j=b+102964|0;c[j>>2]=(c[j>>2]|0)+1;j=f+16|0;c[f+20>>2]=f;b=f+52|0;c[j>>2]=c[b>>2];c[f+24>>2]=0;h=f+48|0;l=c[h>>2]|0;m=l+108|0;c[f+28>>2]=c[m>>2];m=c[m>>2]|0;if(m){c[m+8>>2]=j;l=c[h>>2]|0}c[l+108>>2]=j;j=f+32|0;c[f+36>>2]=f;c[j>>2]=c[h>>2];c[f+40>>2]=0;h=c[b>>2]|0;l=h+108|0;c[f+44>>2]=c[l>>2];l=c[l>>2]|0;if(l){c[l+8>>2]=j;h=c[b>>2]|0}c[h+108>>2]=j;b=c[d+8>>2]|0;if(a[d+16>>0]|0){i=e;return f|0}d=c[(c[d+12>>2]|0)+112>>2]|0;if(!d){i=e;return f|0}do{if((c[d>>2]|0)==(b|0)){K=(c[d+4>>2]|0)+4|0;c[K>>2]=c[K>>2]|8}d=c[d+12>>2]|0}while((d|0)!=0);i=e;return f|0}function Gh(a,b){a=a|0;b=b|0;var c=0;c=i;vy(a,b);i=c;return}function Hh(a,b,c,d){a=a|0;b=+b;c=c|0;d=d|0;var e=0;e=i;yy(a,b,c,d);i=e;return}function Ih(a){a=a|0;var b=0;b=i;a=c[a+102952>>2]|0;if(!a){i=b;return}do{g[a+76>>2]=0.0;g[a+80>>2]=0.0;g[a+84>>2]=0.0;a=c[a+96>>2]|0}while((a|0)!=0);i=b;return}function Jh(a){a=a|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0.0,W=0.0,X=0.0,Y=0.0;d=i;i=i+208|0;o=d+40|0;n=d+24|0;r=d+80|0;t=d+104|0;q=d+48|0;p=d+32|0;s=d;x=d+160|0;w=d+64|0;v=d+176|0;y=d+192|0;z=d+88|0;h=d+144|0;l=d+112|0;f=d+8|0;e=a+102984|0;j=c[e>>2]|0;if(!j){i=d;return}j=c[j+4>>2]|0;if((j&1|0)!=0?(P=c[a+102952>>2]|0,(P|0)!=0):0){O=x+4|0;A=x+8|0;B=x+12|0;F=y+4|0;G=y+8|0;H=y+12|0;I=z+4|0;J=z+8|0;K=z+12|0;L=w+4|0;M=w+8|0;N=w+12|0;C=v+4|0;D=v+8|0;E=v+12|0;do{Q=P+12|0;S=c[P+100>>2]|0;if(S){R=P+4|0;do{T=b[R>>1]|0;do if(T&32){U=c[P>>2]|0;if((U|0)==1){g[v>>2]=.5;g[C>>2]=.5;g[D>>2]=.8999999761581421;g[E>>2]=1.0;zy(a,c[S+12>>2]|0,Q,v);break}else if(U)if(!(T&2)){g[y>>2]=.6000000238418579;g[F>>2]=.6000000238418579;g[G>>2]=.6000000238418579;g[H>>2]=1.0;zy(a,c[S+12>>2]|0,Q,y);break}else{g[z>>2]=.8999999761581421;g[I>>2]=.699999988079071;g[J>>2]=.699999988079071;g[K>>2]=1.0;zy(a,c[S+12>>2]|0,Q,z);break}else{g[w>>2]=.5;g[L>>2]=.8999999761581421;g[M>>2]=.5;g[N>>2]=1.0;zy(a,c[S+12>>2]|0,Q,w);break}}else{g[x>>2]=.5;g[O>>2]=.5;g[A>>2]=.30000001192092896;g[B>>2]=1.0;zy(a,c[S+12>>2]|0,Q,x)}while(0);S=c[S+4>>2]|0}while((S|0)!=0)}P=c[P+96>>2]|0}while((P|0)!=0)}if((j&2|0)!=0?(u=c[a+102956>>2]|0,(u|0)!=0):0){v=q+4|0;w=q+8|0;x=q+12|0;do{T=(c[u+52>>2]|0)+12|0;S=(c[u+48>>2]|0)+12|0;y=c[S+4>>2]|0;U=o;c[U>>2]=c[S>>2];c[U+4>>2]=y;U=c[T+4>>2]|0;y=n;c[y>>2]=c[T>>2];c[y+4>>2]=U;lb[c[c[u>>2]>>2]&127](r,u);lb[c[(c[u>>2]|0)+4>>2]&127](t,u);g[q>>2]=.5;g[v>>2]=.800000011920929;g[w>>2]=.800000011920929;g[x>>2]=1.0;y=c[u+4>>2]|0;if((y|0)==3){U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,r,t,q)}else if((y|0)==4){U=u+68|0;T=c[U+4>>2]|0;S=p;c[S>>2]=c[U>>2];c[S+4>>2]=T;S=u+76|0;T=c[S+4>>2]|0;U=s;c[U>>2]=c[S>>2];c[U+4>>2]=T;U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,p,r,q);U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,s,t,q);U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,p,s,q)}else if((y|0)!=5){U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,o,r,q);U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,r,t,q);U=c[e>>2]|0;vb[c[(c[U>>2]|0)+24>>2]&63](U,n,t,q)}u=c[u+12>>2]|0}while((u|0)!=0)}if(j&8){n=a+102932|0;while(1){n=c[n>>2]|0;if(!n)break;else n=n+12|0}}a:do if((j&4|0)!=0?(g[h>>2]=.8999999761581421,g[h+4>>2]=.30000001192092896,g[h+8>>2]=.8999999761581421,g[h+12>>2]=1.0,m=c[a+102952>>2]|0,(m|0)!=0):0){o=a+102884|0;v=a+102876|0;n=l+4|0;u=l+8|0;t=l+12|0;s=l+16|0;r=l+20|0;q=l+24|0;p=l+28|0;b:while(1){if((b[m+4>>1]&32)!=0?(k=c[m+100>>2]|0,(k|0)!=0):0){A=k;do{z=A+28|0;if((c[z>>2]|0)>0){y=A+24|0;x=0;do{w=c[(c[y>>2]|0)+(x*28|0)+24>>2]|0;if((w|0)<=-1){h=37;break b}if((c[o>>2]|0)<=(w|0)){h=37;break b}U=c[v>>2]|0;W=+g[U+(w*36|0)>>2];Y=+g[U+(w*36|0)+4>>2];X=+g[U+(w*36|0)+8>>2];V=+g[U+(w*36|0)+12>>2];g[l>>2]=W;g[n>>2]=Y;g[u>>2]=X;g[t>>2]=Y;g[s>>2]=X;g[r>>2]=V;g[q>>2]=W;g[p>>2]=V;U=c[e>>2]|0;vb[c[(c[U>>2]|0)+8>>2]&63](U,l,4,h);x=x+1|0}while((x|0)<(c[z>>2]|0))}A=c[A+4>>2]|0}while((A|0)!=0)}m=c[m+96>>2]|0;if(!m)break a}if((h|0)==37)Aa(12256,12200,164,12320)}while(0);if(!(j&16)){i=d;return}a=c[a+102952>>2]|0;if(!a){i=d;return}do{S=a+12|0;c[f+0>>2]=c[S+0>>2];c[f+4>>2]=c[S+4>>2];c[f+8>>2]=c[S+8>>2];c[f+12>>2]=c[S+12>>2];S=a+44|0;T=c[S+4>>2]|0;U=f;c[U>>2]=c[S>>2];c[U+4>>2]=T;U=c[e>>2]|0;lb[c[(c[U>>2]|0)+28>>2]&127](U,f);a=c[a+96>>2]|0}while((a|0)!=0);i=d;return}function Kh(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;j=i;i=i+1040|0;f=j;h=f+4|0;c[f>>2]=h;k=f+1028|0;c[k>>2]=0;l=f+1032|0;c[l>>2]=256;n=c[f>>2]|0;c[n+(c[k>>2]<<2)>>2]=c[a+102872>>2];u=c[k>>2]|0;s=u+1|0;c[k>>2]=s;do if((u|0)>-1){q=a+102876|0;p=d+4|0;o=d+8|0;n=d+12|0;a=a+102884|0;a:while(1){if((s|0)<=0){k=4;break}s=s+ -1|0;c[k>>2]=s;u=c[f>>2]|0;r=c[u+(s<<2)>>2]|0;do if((r|0)!=-1?(m=c[q>>2]|0,!((+g[d>>2]- +g[m+(r*36|0)+8>>2]>0.0?1:+g[p>>2]- +g[m+(r*36|0)+12>>2]>0.0)|+g[m+(r*36|0)>>2]- +g[o>>2]>0.0|+g[m+(r*36|0)+4>>2]- +g[n>>2]>0.0)):0){t=m+(r*36|0)+24|0;if((c[t>>2]|0)==-1){if((r|0)<=-1){k=11;break a}if((c[a>>2]|0)<=(r|0)){k=11;break a}if(!(tb[c[(c[b>>2]|0)+8>>2]&63](b,c[(c[m+(r*36|0)+16>>2]|0)+16>>2]|0)|0)){k=21;break a}s=c[k>>2]|0;break}if((s|0)==(c[l>>2]|0)?(c[l>>2]=s<<1,s=RB(s<<3)|0,c[f>>2]=s,WB(s|0,u|0,c[k>>2]<<2|0)|0,(u|0)!=(h|0)):0)SB(u);s=c[f>>2]|0;c[s+(c[k>>2]<<2)>>2]=c[t>>2];t=(c[k>>2]|0)+1|0;c[k>>2]=t;r=m+(r*36|0)+28|0;if((t|0)==(c[l>>2]|0)?(c[l>>2]=t<<1,u=RB(t<<3)|0,c[f>>2]=u,WB(u|0,s|0,c[k>>2]<<2|0)|0,(s|0)!=(h|0)):0)SB(s);c[(c[f>>2]|0)+(c[k>>2]<<2)>>2]=c[r>>2];s=(c[k>>2]|0)+1|0;c[k>>2]=s}while(0);if((s|0)<=0){k=21;break}}if((k|0)==4)Aa(10128,10144,67,10192);else if((k|0)==11)Aa(12256,12200,158,12304);else if((k|0)==21){e=c[f>>2]|0;break}}else e=n;while(0);if((e|0)==(h|0)){i=j;return}SB(e);c[f>>2]=0;i=j;return}function Lh(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0,p=0,q=0.0,r=0.0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0,D=0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0,L=0.0,M=0,N=0,P=0.0,Q=0.0,R=0.0,S=0.0,T=0,U=0,V=0,W=0,X=0.0,Y=0.0,Z=0.0;f=i;i=i+1088|0;l=f+1064|0;j=f+1056|0;h=f+20|0;o=f;s=c[d>>2]|0;d=c[d+4>>2]|0;x=e;e=c[x>>2]|0;x=c[x+4>>2]|0;w=(c[k>>2]=s,+g[k>>2]);t=(c[k>>2]=d,+g[k>>2]);u=(c[k>>2]=e,+g[k>>2]);u=u-w;v=(c[k>>2]=x,+g[k>>2])-t;z=u*u+v*v;if(!(z>0.0))Aa(12168,12200,209,12248);z=+O(+z);if(z<1.1920928955078125e-7){B=v;A=u}else{A=1.0/z;B=v*A;A=u*A}z=-B;G=B<-0.0?z:B;if(A>0.0)B=A;else B=-A;Q=w+u;R=t+v;y=h+4|0;c[h>>2]=y;D=h+1028|0;c[D>>2]=0;C=h+1032|0;c[C>>2]=256;c[(c[h>>2]|0)+(c[D>>2]<<2)>>2]=c[a+102872>>2];W=c[D>>2]|0;V=W+1|0;c[D>>2]=V;a:do if((W|0)>-1){E=a+102876|0;F=o+8|0;H=o+16|0;I=a+102884|0;J=l+8|0;K=o+4|0;M=o+8|0;a=o+12|0;N=j+4|0;L=w<Q?w:Q;P=t>R?t:R;Q=w>Q?w:Q;R=t<R?t:R;S=1.0;b:while(1){c:while(1){if((V|0)<=0){j=11;break b}V=V+ -1|0;c[D>>2]=V;U=c[h>>2]|0;T=c[U+(V<<2)>>2]|0;do if((T|0)!=-1?(p=c[E>>2]|0,q=+g[p+(T*36|0)+8>>2],m=+g[p+(T*36|0)+12>>2],n=+g[p+(T*36|0)>>2],r=+g[p+(T*36|0)+4>>2],!(L-q>0.0|R-m>0.0|n-Q>0.0|r-P>0.0)):0){X=(w-(q+n)*.5)*z+A*(t-(m+r)*.5);if(!(X>0.0))X=-X;if(!(X-(G*(q-n)*.5+B*(m-r)*.5)>0.0)){W=p+(T*36|0)+24|0;if((c[W>>2]|0)!=-1){if((V|0)==(c[C>>2]|0)?(c[C>>2]=V<<1,V=RB(V<<3)|0,c[h>>2]=V,WB(V|0,U|0,c[D>>2]<<2|0)|0,(U|0)!=(y|0)):0)SB(U);U=c[h>>2]|0;c[U+(c[D>>2]<<2)>>2]=c[W>>2];V=(c[D>>2]|0)+1|0;c[D>>2]=V;T=p+(T*36|0)+28|0;if((V|0)==(c[C>>2]|0)?(c[C>>2]=V<<1,W=RB(V<<3)|0,c[h>>2]=W,WB(W|0,U|0,c[D>>2]<<2|0)|0,(U|0)!=(y|0)):0)SB(U);c[(c[h>>2]|0)+(c[D>>2]<<2)>>2]=c[T>>2];V=(c[D>>2]|0)+1|0;c[D>>2]=V;break}W=o;c[W>>2]=s;c[W+4>>2]=d;W=F;c[W>>2]=e;c[W+4>>2]=x;g[H>>2]=S;if((T|0)<=-1){j=21;break b}if((c[I>>2]|0)<=(T|0)){j=21;break b}W=c[p+(T*36|0)+16>>2]|0;T=c[W+16>>2]|0;V=c[T+12>>2]|0;if(ub[c[(c[V>>2]|0)+20>>2]&63](V,l,o,(c[T+8>>2]|0)+12|0,c[W+20>>2]|0)|0){X=+g[J>>2];Z=1.0-X;Y=Z*+g[K>>2]+X*+g[a>>2];g[j>>2]=+g[o>>2]*Z+X*+g[M>>2];g[N>>2]=Y;X=+kb[c[(c[b>>2]|0)+8>>2]&63](b,T,j,l,X)}else X=+g[H>>2];if(X==0.0)break a;if(X>0.0)break c;V=c[D>>2]|0}}while(0);if((V|0)<=0)break a}Q=w+u*X;R=t+v*X;V=c[D>>2]|0;if((V|0)<=0)break a;else{L=w<Q?w:Q;P=t>R?t:R;Q=w>Q?w:Q;R=t<R?t:R;S=X}}if((j|0)==11)Aa(10128,10144,67,10192);else if((j|0)==21)Aa(12256,12200,158,12304)}while(0);j=c[h>>2]|0;if((j|0)==(y|0)){i=f;return}SB(j);c[h>>2]=0;i=f;return}function Mh(a){a=a|0;return c[a+102952>>2]|0}function Nh(a){a=a|0;return c[a+102956>>2]|0}function Oh(a){a=a|0;return c[a+102932>>2]|0}function Ph(f,h){f=f|0;h=h|0;var j=0,k=0;j=i;k=f+102976|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}a[k>>0]=h&1;if(h){i=j;return}f=c[f+102952>>2]|0;if(!f){i=j;return}do{k=f+4|0;h=e[k>>1]|0;if(!(h&2)){b[k>>1]=h|2;g[f+144>>2]=0.0}f=c[f+96>>2]|0}while((f|0)!=0);i=j;return}function Qh(b){b=b|0;return(a[b+102976>>0]|0)!=0|0}function Rh(b,c){b=b|0;c=c|0;a[b+102992>>0]=c&1;return}function Sh(b){b=b|0;return(a[b+102992>>0]|0)!=0|0}function Th(b,c){b=b|0;c=c|0;a[b+102993>>0]=c&1;return}function Uh(b){b=b|0;return(a[b+102993>>0]|0)!=0|0}function Vh(b,c){b=b|0;c=c|0;a[b+102994>>0]=c&1;return}function Wh(b){b=b|0;return(a[b+102994>>0]|0)!=0|0}function Xh(a){a=a|0;return c[a+102900>>2]|0}function Yh(a){a=a|0;return c[a+102960>>2]|0}function Zh(a){a=a|0;return c[a+102964>>2]|0}function _h(a){a=a|0;return c[a+102936>>2]|0}function $h(a){a=a|0;var b=0,d=0;b=i;d=c[a+102872>>2]|0;if((d|0)==-1){d=0;i=b;return d|0}d=c[(c[a+102876>>2]|0)+(d*36|0)+32>>2]|0;i=b;return d|0}function ai(a){a=a|0;var b=0,d=0,e=0,f=0,g=0;b=i;d=c[a+102884>>2]|0;if((d|0)<=0){g=0;i=b;return g|0}a=c[a+102876>>2]|0;e=0;f=0;while(1){if((c[a+(e*36|0)+32>>2]|0)>=2){g=c[a+(e*36|0)+24>>2]|0;if((g|0)==-1){d=5;break}g=(c[a+((c[a+(e*36|0)+28>>2]|0)*36|0)+32>>2]|0)-(c[a+(g*36|0)+32>>2]|0)|0;g=(g|0)>0?g:0-g|0;f=(f|0)>(g|0)?f:g}e=e+1|0;if((e|0)>=(d|0)){d=8;break}}if((d|0)==5)Aa(6616,6088,683,6640);else if((d|0)==8){i=b;return f|0}return 0}function bi(a){a=a|0;var b=0,d=0.0,e=0,f=0,h=0.0;b=i;f=c[a+102872>>2]|0;if((f|0)==-1){h=0.0;i=b;return+h}e=c[a+102876>>2]|0;d=(+g[e+(f*36|0)+8>>2]- +g[e+(f*36|0)>>2]+(+g[e+(f*36|0)+12>>2]- +g[e+(f*36|0)+4>>2]))*2.0;a=c[a+102884>>2]|0;if((a|0)>0){f=0;h=0.0;do{if((c[e+(f*36|0)+32>>2]|0)>=0)h=h+(+g[e+(f*36|0)+8>>2]- +g[e+(f*36|0)>>2]+(+g[e+(f*36|0)+12>>2]- +g[e+(f*36|0)+4>>2]))*2.0;f=f+1|0}while((f|0)<(a|0))}else h=0.0;h=h/d;i=b;return+h}function ci(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+102968|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function di(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[280]|0)==0?(wa(280)|0)!=0:0)Da(280);f=b+102968|0;e=c[f+4>>2]|0;b=272;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 272}function ei(a){a=a|0;return(c[a+102868>>2]&2|0)!=0|0}function fi(a,b){a=a|0;b=b|0;var d=0;a=a+102868|0;d=c[a>>2]|0;c[a>>2]=b?d|4:d&-5;return}function gi(a){a=a|0;return(c[a+102868>>2]&4|0)!=0|0}function hi(a){a=a|0;return a+102996|0}function ii(a){a=a|0;var b=0,d=0,e=0,f=0,j=0.0;d=i;i=i+16|0;b=d;if(c[a+102868>>2]&2){i=d;return}j=+g[a+102972>>2];h[k>>3]=+g[a+102968>>2];c[b>>2]=c[k>>2];c[b+4>>2]=c[k+4>>2];e=b+8|0;h[k>>3]=j;c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(11880,b);Px(11912,b);c[b>>2]=c[a+102960>>2];Px(11944,b);c[b>>2]=c[a+102964>>2];Px(12008,b);e=c[a+102952>>2]|0;if(e){f=0;while(1){c[e+8>>2]=f;Wx(e);e=c[e+96>>2]|0;if(!e)break;else f=f+1|0}}a=a+102956|0;f=c[a>>2]|0;if(f){e=0;while(1){c[f+56>>2]=e;f=c[f+12>>2]|0;if(!f)break;else e=e+1|0}e=c[a>>2]|0;if(e){do{if((c[e+4>>2]|0)!=6){Px(12072,b);jb[c[(c[e>>2]|0)+16>>2]&127](e);Px(12080,b)}e=c[e+12>>2]|0}while((e|0)!=0);a=c[a>>2]|0;if(a)do{if((c[a+4>>2]|0)==6){Px(12072,b);jb[c[(c[a>>2]|0)+16>>2]&127](a);Px(12080,b)}a=c[a+12>>2]|0}while((a|0)!=0)}}Px(12088,b);Px(12112,b);Px(12136,b);Px(12152,b);i=d;return}function ji(a){a=a|0;var b=0,d=0,e=0,f=0;b=i;if(!a){i=b;return}d=c[a+102952>>2]|0;if(d)do{e=d;d=c[d+96>>2]|0;e=c[e+100>>2]|0;while(1){if(!e)break;f=c[e+4>>2]|0;c[e+28>>2]=0;ny(e,a);e=f}}while((d|0)!=0);SB(c[a+102904>>2]|0);SB(c[a+102916>>2]|0);SB(c[a+102876>>2]|0);if(c[a+102468>>2]|0)Aa(8840,8856,32,8904);if(c[a+102864>>2]|0)Aa(8928,8856,33,8904);d=a+4|0;f=c[a>>2]|0;if((c[d>>2]|0)>0){e=0;do{SB(c[f+(e<<3)+4>>2]|0);e=e+1|0;f=c[a>>2]|0}while((e|0)<(c[d>>2]|0))}SB(f);SB(a);i=b;return}function ki(a){a=a|0;return a+68|0}function li(a){a=a|0;return a+76|0}function mi(a){a=a|0;return a+84|0}function ni(a){a=a|0;return+(+g[a+100>>2])}function oi(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0,h=0,i=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;h=c[a+48>>2]|0;d=+g[h+24>>2];j=+g[a+68>>2];f=+g[h+20>>2];i=+g[a+72>>2];k=c[a+52>>2]|0;m=+g[k+24>>2];o=+g[a+76>>2];n=+g[k+20>>2];l=+g[a+80>>2];e=+g[a+84>>2];b=+g[a+88>>2];return+((+g[k+12>>2]+(m*o-n*l)-(+g[h+12>>2]+(d*j-f*i)))*(d*e-f*b)+(o*n+m*l+ +g[k+16>>2]-(j*f+d*i+ +g[h+16>>2]))*(f*e+d*b))}function pi(a){a=a|0;var b=0.0,d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0,r=0;d=i;q=c[a+48>>2]|0;r=c[a+52>>2]|0;o=+g[a+68>>2]- +g[q+28>>2];f=+g[a+72>>2]- +g[q+32>>2];l=+g[q+24>>2];n=+g[q+20>>2];e=o*l-f*n;o=l*f+o*n;f=+g[a+76>>2]- +g[r+28>>2];k=+g[a+80>>2]- +g[r+32>>2];p=+g[r+24>>2];m=+g[r+20>>2];j=f*p-k*m;m=p*k+f*m;f=+g[a+84>>2];k=+g[a+88>>2];p=l*f-n*k;k=n*f+l*k;a=q+64|0;l=+g[a>>2];f=+g[a+4>>2];a=r+64|0;n=+g[a>>2];b=+g[q+72>>2];h=+g[r+72>>2];b=(m+ +g[r+48>>2]-(o+ +g[q+48>>2]))*p*b-(j+ +g[r+44>>2]-(e+ +g[q+44>>2]))*k*b+(p*(o*b+(n-m*h-l))+k*(+g[a+4>>2]+j*h-f-e*b));i=d;return+b}function qi(b){b=b|0;return(a[b+136>>0]|0)!=0|0}function ri(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;k=f+136|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}l=c[f+48>>2]|0;m=l+4|0;n=e[m>>1]|0;if(!(n&2)){b[m>>1]=n|2;g[l+144>>2]=0.0}l=c[f+52>>2]|0;m=l+4|0;n=e[m>>1]|0;if(!(n&2)){b[m>>1]=n|2;g[l+144>>2]=0.0}a[k>>0]=h&1;g[f+112>>2]=0.0;i=j;return}function si(a){a=a|0;return+(+g[a+120>>2])}function ti(a){a=a|0;return+(+g[a+124>>2])}function ui(a,d,f){a=a|0;d=+d;f=+f;var h=0,j=0,k=0,l=0,m=0;j=i;if(!(d<=f))Aa(17160,16424,567,17232);h=a+120|0;if(!(+g[h>>2]!=d)?!(+g[a+124>>2]!=f):0){i=j;return}m=c[a+48>>2]|0;k=m+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[m+144>>2]=0.0}l=c[a+52>>2]|0;m=l+4|0;k=e[m>>1]|0;if(!(k&2)){b[m>>1]=k|2;g[l+144>>2]=0.0}g[h>>2]=d;g[a+124>>2]=f;g[a+112>>2]=0.0;i=j;return}function vi(b){b=b|0;return(a[b+137>>0]|0)!=0|0}function wi(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if(j&2){l=d+137|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+137|0;k=f&1;a[l>>0]=k;i=h;return}function xi(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+132|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+132|0;g[k>>2]=d;i=f;return}function yi(a){a=a|0;return+(+g[a+132>>2])}function zi(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+128|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+128|0;g[k>>2]=d;i=f;return}function Ai(a){a=a|0;return+(+g[a+128>>2])}function Bi(a,b){a=a|0;b=+b;return+(+g[a+116>>2]*b)}function Ci(a){a=a|0;return c[a+4>>2]|0}function Di(a){a=a|0;return c[a+48>>2]|0}function Ei(a){a=a|0;return c[a+52>>2]|0}function Fi(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[296]|0)==0?(wa(296)|0)!=0:0)Da(296);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=288;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 288}function Gi(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[312]|0)==0?(wa(312)|0)!=0:0)Da(312);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=304;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 304}function Hi(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[328]|0)==0?(wa(328)|0)!=0:0)Da(328);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=320;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 320}function Ii(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Ji(a){a=a|0;return c[a+12>>2]|0}function Ki(a){a=a|0;return c[a+64>>2]|0}function Li(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Mi(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Ni(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Oi(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function Pi(a){a=a|0;return a|0}function Qi(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ri(a){a=a|0;return+(+g[a+8>>2])}function Si(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Ti(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Ui(a){a=a|0;return a|0}function Vi(b,c){b=b|0;c=c|0;c=d[c>>0]|d[c+1>>0]<<8|d[c+2>>0]<<16|d[c+3>>0]<<24;a[b>>0]=c;a[b+1>>0]=c>>8;a[b+2>>0]=c>>16;a[b+3>>0]=c>>24;return}function Wi(a){a=a|0;return c[a>>2]|0}function Xi(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Yi(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Zi(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function _i(){var a=0,b=0,d=0;a=i;b=RB(4)|0;if(b){d=b;c[d>>2]=2688;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(4)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){c[d>>2]=2688;i=a;return d|0}return 0}function $i(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+8>>2]&127](a,b);i=d;return}function aj(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+12>>2]&127](a,b);i=d;return}function bj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;pb[c[(c[a>>2]|0)+16>>2]&63](a,b,d);i=e;return}function cj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;pb[c[(c[a>>2]|0)+20>>2]&63](a,b,d);i=e;return}function dj(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function ej(){var a=0,b=0,d=0;a=i;b=RB(16)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(16)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function fj(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=RB(16)|0;a:do if(!e){while(1){e=c[4698]|0;c[4698]=e+0;if(!e)break;qb[e&63]();e=RB(16)|0;if(e)break a}e=cb(4)|0;c[e>>2]=18632;_a(e|0,18680,116)}while(0);g=a;a=c[g+4>>2]|0;f=e;c[f>>2]=c[g>>2];c[f+4>>2]=a;f=b;a=c[f+4>>2]|0;b=e+8|0;c[b>>2]=c[f>>2];c[b+4>>2]=a;i=d;return e|0}function gj(a,b,d,e){a=+a;b=+b;d=+d;e=+e;var f=0,h=0;f=i;h=RB(16)|0;a:do if(!h){while(1){h=c[4698]|0;c[4698]=h+0;if(!h)break;qb[h&63]();h=RB(16)|0;if(h)break a}h=cb(4)|0;c[h>>2]=18632;_a(h|0,18680,116)}while(0);g[h>>2]=a;g[h+4>>2]=d;g[h+8>>2]=b;g[h+12>>2]=e;i=f;return h|0}function hj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;f=b;b=c[f+4>>2]|0;e=a;c[e>>2]=c[f>>2];c[e+4>>2]=b;e=d;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function ij(a){a=a|0;g[a>>2]=1.0;g[a+8>>2]=0.0;g[a+4>>2]=0.0;g[a+12>>2]=1.0;return}function jj(a){a=a|0;var b=0;b=i;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=b;return}function kj(b){b=b|0;var c=0,d=0.0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;c=i;if((a[352]|0)==0?(wa(352)|0)!=0:0)Da(352);d=+g[b>>2];e=+g[b+8>>2];f=+g[b+4>>2];h=+g[b+12>>2];j=d*h-e*f;if(j!=0.0)j=1.0/j;k=-j;g[84]=h*j;g[85]=f*k;g[86]=e*k;g[87]=d*j;i=c;return 336}function lj(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=i;if((a[368]|0)==0?(wa(368)|0)!=0:0)Da(368);f=+g[b>>2];h=+g[b+8>>2];e=+g[b+4>>2];j=+g[b+12>>2];k=f*j-h*e;if(k!=0.0)k=1.0/k;l=+g[c>>2];m=+g[c+4>>2];j=+(k*(j*l-h*m));k=+(k*(f*m-e*l));b=360;g[b>>2]=j;g[b+4>>2]=k;i=d;return 360}function mj(a){a=a|0;return a|0}function nj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function oj(a){a=a|0;return a+8|0}function pj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function qj(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function rj(){var b=0,d=0,e=0,f=0;b=i;d=RB(64)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(64)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=7;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;a[d+44>>0]=0;g[d+48>>2]=0.0;g[d+52>>2]=0.0;g[d+56>>2]=2.0;g[d+60>>2]=.699999988079071;i=b;return d|0}function sj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;k=+g[e>>2]- +g[b+12>>2];p=e+4|0;n=+g[p>>2]- +g[b+16>>2];o=b+24|0;l=+g[o>>2];b=b+20|0;j=+g[b>>2];m=+(k*l+n*j);j=+(l*n-k*j);q=a+20|0;g[q>>2]=m;g[q+4>>2]=j;j=+g[e>>2]- +g[d+12>>2];m=+g[p>>2]- +g[d+16>>2];k=+g[d+24>>2];n=+g[d+20>>2];l=+(j*k+m*n);n=+(k*m-j*n);e=a+28|0;g[e>>2]=l;g[e+4>>2]=n;n=+g[o>>2];l=+g[f>>2];j=+g[b>>2];m=+g[f+4>>2];k=+(n*l+j*m);j=+(n*m-l*j);b=a+36|0;g[b>>2]=k;g[b+4>>2]=j;i=h;return}function tj(a){a=a|0;return a+20|0}function uj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function vj(a){a=a|0;return a+28|0}function wj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function xj(a){a=a|0;return a+36|0}function yj(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function zj(b){b=b|0;return(a[b+44>>0]|0)!=0|0}function Aj(b,c){b=b|0;c=c|0;a[b+44>>0]=c&1;return}function Bj(a){a=a|0;return+(+g[a+48>>2])}function Cj(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function Dj(a){a=a|0;return+(+g[a+52>>2])}function Ej(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function Fj(a){a=a|0;return+(+g[a+56>>2])}function Gj(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function Hj(a){a=a|0;return+(+g[a+60>>2])}function Ij(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function Jj(a){a=a|0;return c[a>>2]|0}function Kj(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Lj(a){a=a|0;return c[a+4>>2]|0}function Mj(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Nj(a){a=a|0;return c[a+8>>2]|0}function Oj(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Pj(a){a=a|0;return c[a+12>>2]|0}function Qj(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Rj(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Sj(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Tj(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Uj(){var a=0,b=0,d=0;a=i;b=RB(20)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(20)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b>>2]=7400;d=b+4|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;i=a;return b|0}function Vj(a){a=a|0;return c[a+4>>2]|0}function Wj(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function Xj(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Yj(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function Zj(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function _j(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function $j(a){a=a|0;return a+12|0}function ak(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function bk(a){a=a|0;return c[a+4>>2]|0}function ck(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function dk(a){a=a|0;return+(+g[a+8>>2])}function ek(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function fk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function gk(){var b=0,d=0,e=0;b=i;d=RB(48)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(48)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=8;e=d+20|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;c[e+20>>2]=0;c[e+24>>2]=0;i=b;return d|0}function hk(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);o=a+20|0;g[o>>2]=l;g[o+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);e=a+28|0;g[e>>2]=j;g[e+4>>2]=h;g[a+36>>2]=+g[d+56>>2]- +g[b+56>>2];i=f;return}function ik(a){a=a|0;return a+20|0}function jk(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function kk(a){a=a|0;return a+28|0}function lk(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function mk(a){a=a|0;return+(+g[a+36>>2])}function nk(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function ok(a){a=a|0;return+(+g[a+40>>2])}function pk(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function qk(a){a=a|0;return+(+g[a+44>>2])}function rk(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function sk(a){a=a|0;return c[a>>2]|0}function tk(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function uk(a){a=a|0;return c[a+4>>2]|0}function vk(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function wk(a){a=a|0;return c[a+8>>2]|0}function xk(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function yk(a){a=a|0;return c[a+12>>2]|0}function zk(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Ak(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Bk(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Ck(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Dk(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Ek(a){a=a|0;return c[a+4>>2]|0}function Fk(a,b){a=a|0;b=b|0;a=a+4|0;c[a>>2]=c[a>>2]|b;return}function Gk(a,b){a=a|0;b=b|0;a=a+4|0;c[a>>2]=c[a>>2]&~b;return}function Hk(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Ik(){var a=0,b=0;a=i;b=RB(16)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(16)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function Jk(a){a=a|0;return+(+g[a>>2])}function Kk(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Lk(a){a=a|0;return a+4|0}function Mk(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+4|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Nk(a){a=a|0;return+(+g[a+12>>2])}function Ok(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Pk(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Qk(a){a=a|0;return c[a+4>>2]|0}function Rk(a){a=a|0;return c[a+48>>2]|0}function Sk(a){a=a|0;return c[a+52>>2]|0}function Tk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[384]|0)==0?(wa(384)|0)!=0:0)Da(384);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=376;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 376}function Uk(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[400]|0)==0?(wa(400)|0)!=0:0)Da(400);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=392;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 392}function Vk(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[416]|0)==0?(wa(416)|0)!=0:0)Da(416);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=408;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 408}function Wk(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Xk(a){a=a|0;return c[a+12>>2]|0}function Yk(a){a=a|0;return c[a+64>>2]|0}function Zk(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function _k(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function $k(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function al(a){a=a|0;var b=0;b=i;jb[c[(c[a>>2]|0)+16>>2]&127](a);i=b;return}function bl(a){a=a|0;return c[a+68>>2]|0}function cl(a){a=a|0;return c[a+72>>2]|0}function dl(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)==2139095040)Aa(15528,15392,394,15552);else{g[a+152>>2]=b;i=d;return}}function el(a){a=a|0;return+(+g[a+152>>2])}function fl(a){a=a|0;return c[a+4>>2]|0}function gl(a){a=a|0;return c[a+48>>2]|0}function hl(a){a=a|0;return c[a+52>>2]|0}function il(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[432]|0)==0?(wa(432)|0)!=0:0)Da(432);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=424;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 424}function jl(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[448]|0)==0?(wa(448)|0)!=0:0)Da(448);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=440;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 440}function kl(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[464]|0)==0?(wa(464)|0)!=0:0)Da(464);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=456;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 456}function ll(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function ml(a){a=a|0;return c[a+12>>2]|0}function nl(a){a=a|0;return c[a+64>>2]|0}function ol(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function pl(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function ql(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function rl(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function sl(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function tl(a){a=a|0;return a+80|0}function ul(a){a=a|0;return a+88|0}function vl(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function wl(a){a=a|0;return+(+g[a+68>>2])}function xl(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function yl(a){a=a|0;return+(+g[a+72>>2])}function zl(a){a=a|0;var b=0;b=i;jb[c[(c[a>>2]|0)+16>>2]&127](a);i=b;return}function Al(a){a=a|0;return c[a+4>>2]|0}function Bl(a){a=a|0;return c[a+48>>2]|0}function Cl(a){a=a|0;return c[a+52>>2]|0}function Dl(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[480]|0)==0?(wa(480)|0)!=0:0)Da(480);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=472;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 472}function El(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[496]|0)==0?(wa(496)|0)!=0:0)Da(496);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=488;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 488}function Fl(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[512]|0)==0?(wa(512)|0)!=0:0)Da(512);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=504;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 504}function Gl(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Hl(a){a=a|0;return c[a+12>>2]|0}function Il(a){a=a|0;return c[a+64>>2]|0}function Jl(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Kl(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Ll(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Ml(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function Nl(){var a=0,b=0;a=i;b=RB(16)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(16)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function Ol(a){a=a|0;return c[a>>2]|0}function Pl(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Ql(a){a=a|0;return c[a+4>>2]|0}function Rl(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Sl(a){a=a|0;return c[a+8>>2]|0}function Tl(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Ul(a){a=a|0;return c[a+12>>2]|0}function Vl(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Wl(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Xl(){var b=0,d=0;b=i;d=RB(64)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(64)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d>>2]=4;g[d+20>>2]=-1.0;g[d+24>>2]=1.0;g[d+28>>2]=1.0;g[d+32>>2]=1.0;g[d+36>>2]=-1.0;g[d+40>>2]=0.0;g[d+44>>2]=1.0;g[d+48>>2]=0.0;g[d+52>>2]=0.0;g[d+56>>2]=0.0;g[d+60>>2]=1.0;a[d+16>>0]=1;i=b;return d|0}function Yl(a,b,d,e,f,h,j,k){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;j=j|0;k=+k;var l=0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0,t=0;l=i;c[a+8>>2]=b;c[a+12>>2]=d;o=e;s=c[o+4>>2]|0;t=a+20|0;c[t>>2]=c[o>>2];c[t+4>>2]=s;t=f;s=c[t+4>>2]|0;o=a+28|0;c[o>>2]=c[t>>2];c[o+4>>2]=s;r=+g[h>>2]- +g[b+12>>2];o=h+4|0;m=+g[o>>2]- +g[b+16>>2];n=+g[b+24>>2];p=+g[b+20>>2];q=+(r*n+m*p);p=+(n*m-r*p);b=a+36|0;g[b>>2]=q;g[b+4>>2]=p;p=+g[j>>2]- +g[d+12>>2];b=j+4|0;q=+g[b>>2]- +g[d+16>>2];r=+g[d+24>>2];m=+g[d+20>>2];n=+(p*r+q*m);m=+(r*q-p*m);d=a+44|0;g[d>>2]=n;g[d+4>>2]=m;m=+g[h>>2]- +g[e>>2];n=+g[o>>2]- +g[e+4>>2];g[a+52>>2]=+O(+(m*m+n*n));n=+g[j>>2]- +g[f>>2];m=+g[b>>2]- +g[f+4>>2];g[a+56>>2]=+O(+(n*n+m*m));g[a+60>>2]=k;if(k>1.1920928955078125e-7){i=l;return}else Aa(16664,16696,51,16752)}function Zl(a){a=a|0;return a+20|0}function _l(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function $l(a){a=a|0;return a+28|0}function am(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function bm(a){a=a|0;return a+36|0}function cm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function dm(a){a=a|0;return a+44|0}function em(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+44|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function fm(a){a=a|0;return+(+g[a+52>>2])}function gm(a,b){a=a|0;b=+b;g[a+52>>2]=b;return}function hm(a){a=a|0;return+(+g[a+56>>2])}function im(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function jm(a){a=a|0;return+(+g[a+60>>2])}function km(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function lm(a){a=a|0;return c[a>>2]|0}function mm(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function nm(a){a=a|0;return c[a+4>>2]|0}function om(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function pm(a){a=a|0;return c[a+8>>2]|0}function qm(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function rm(a){a=a|0;return c[a+12>>2]|0}function sm(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function tm(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function um(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function vm(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function wm(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function xm(){var a=0,b=0;a=i;b=RB(20)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(20)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;c[b+16>>2]=0;i=a;return b|0}function ym(a){a=a|0;return a|0}function zm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Am(a){a=a|0;return+(+g[a+8>>2])}function Bm(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Cm(a){a=a|0;return+(+g[a+12>>2])}function Dm(a,b){a=a|0;b=+b;g[a+12>>2]=b;return}function Em(a){a=a|0;return a+16|0}function Fm(a,b){a=a|0;b=b|0;c[a+16>>2]=c[b>>2];return}function Gm(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Hm(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Im(){var b=0,d=0;b=i;d=RB(20)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(20)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;i=b;return d|0}function Jm(a){a=a|0;return c[a>>2]|0}function Km(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Lm(a){a=a|0;return c[a+4>>2]|0}function Mm(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Nm(a){a=a|0;return c[a+8>>2]|0}function Om(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Pm(a){a=a|0;return c[a+12>>2]|0}function Qm(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Rm(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Sm(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Tm(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Um(){var a=0,b=0,d=0;a=i;b=RB(16)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(16)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function Vm(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;e=RB(16)|0;a:do if(!e){while(1){e=c[4698]|0;c[4698]=e+0;if(!e)break;qb[e&63]();e=RB(16)|0;if(e)break a}e=cb(4)|0;c[e>>2]=18632;_a(e|0,18680,116)}while(0);g=a;a=c[g+4>>2]|0;f=e;c[f>>2]=c[g>>2];c[f+4>>2]=a;f=b;a=c[f+4>>2]|0;b=e+8|0;c[b>>2]=c[f>>2];c[b+4>>2]=a;i=d;return e|0}function Wm(a){a=a|0;g[a>>2]=0.0;g[a+4>>2]=0.0;g[a+8>>2]=0.0;g[a+12>>2]=1.0;return}function Xm(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0;f=b;e=c[f+4>>2]|0;b=a;c[b>>2]=c[f>>2];c[b+4>>2]=e;g[a+8>>2]=+R(+d);g[a+12>>2]=+Q(+d);return}function Ym(a){a=a|0;return a|0}function Zm(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function _m(a){a=a|0;return a+8|0}function $m(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function an(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function bn(){var b=0,d=0;b=i;d=RB(40)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(40)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d>>2]=6952;c[d+4>>2]=3;g[d+8>>2]=.009999999776482582;c[d+12>>2]=0;c[d+16>>2]=0;a[d+36>>0]=0;a[d+37>>0]=0;i=b;return d|0}function cn(a){a=a|0;var b=0,d=0;b=i;d=a+12|0;SB(c[d>>2]|0);c[d>>2]=0;c[a+16>>2]=0;i=b;return}function dn(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,l=0,m=0,n=0,o=0.0,p=0.0,q=0.0,r=0;h=i;f=b+12|0;if(c[f>>2]|0)Aa(6984,7024,38,7080);j=b+16|0;if(c[j>>2]|0)Aa(6984,7024,38,7080);if((e|0)<=2)Aa(7904,7024,39,7080);m=d;n=c[m>>2]|0;m=c[m+4>>2]|0;l=1;while(1){q=(c[k>>2]=n,+g[k>>2]);o=(c[k>>2]=m,+g[k>>2]);r=d+(l<<3)|0;n=c[r>>2]|0;m=c[r+4>>2]|0;p=(c[k>>2]=n,+g[k>>2]);p=q-p;o=o-(c[k>>2]=m,+g[k>>2]);l=l+1|0;if(!(p*p+o*o>2499999936844688.0e-20)){l=9;break}if((l|0)>=(e|0)){l=10;break}}if((l|0)==9)Aa(7096,7024,45,7080);else if((l|0)==10){m=e+1|0;c[j>>2]=m;m=RB(m<<3)|0;c[f>>2]=m;WB(m|0,d|0,e<<3|0)|0;m=c[f>>2]|0;r=m;l=c[r+4>>2]|0;m=m+(e<<3)|0;c[m>>2]=c[r>>2];c[m+4>>2]=l;m=c[f>>2]|0;l=m+((c[j>>2]|0)+ -2<<3)|0;r=c[l+4>>2]|0;n=b+20|0;c[n>>2]=c[l>>2];c[n+4>>2]=r;m=m+8|0;n=c[m+4>>2]|0;r=b+28|0;c[r>>2]=c[m>>2];c[r+4>>2]=n;a[b+36>>0]=1;a[b+37>>0]=1;i=h;return}}function en(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;jx(a,b,c);i=d;return}function fn(b,d){b=b|0;d=d|0;var e=0,f=0;f=d;e=c[f+4>>2]|0;d=b+20|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+36>>0]=1;return}function gn(b,d){b=b|0;d=d|0;var e=0,f=0;f=d;e=c[f+4>>2]|0;d=b+28|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+37>>0]=1;return}function hn(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;mx(a,b,c);i=d;return}function jn(a){a=a|0;return c[a+4>>2]|0}function kn(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function ln(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function mn(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function nn(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function on(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function pn(a){a=a|0;return c[a+12>>2]|0}function qn(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function rn(a){a=a|0;return c[a+16>>2]|0}function sn(a,b){a=a|0;b=b|0;c[a+16>>2]=b;return}function tn(a){a=a|0;return a+20|0}function un(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function vn(a){a=a|0;return a+28|0}function wn(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function xn(b){b=b|0;return(a[b+36>>0]|0)!=0|0}function yn(b,c){b=b|0;c=c|0;a[b+36>>0]=c&1;return}function zn(b){b=b|0;return(a[b+37>>0]|0)!=0|0}function An(b,c){b=b|0;c=c|0;a[b+37>>0]=c&1;return}function Bn(a){a=a|0;return c[a+4>>2]|0}function Cn(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Dn(a){a=a|0;return+(+g[a+8>>2])}function En(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Fn(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Gn(){var a=0,b=0,d=0;a=i;b=RB(16)|0;if(b){d=b;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(16)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){i=a;return d|0}return 0}function Hn(a,b,d){a=+a;b=+b;d=+d;var e=0,f=0;e=i;f=RB(16)|0;a:do if(!f){while(1){f=c[4698]|0;c[4698]=f+0;if(!f)break;qb[f&63]();f=RB(16)|0;if(f)break a}f=cb(4)|0;c[f>>2]=18632;_a(f|0,18680,116)}while(0);g[f>>2]=a;g[f+4>>2]=b;g[f+8>>2]=d;g[f+12>>2]=1.0;i=e;return f|0}function In(a,b,c,d){a=a|0;b=+b;c=+c;d=+d;g[a>>2]=b;g[a+4>>2]=c;g[a+8>>2]=d;g[a+12>>2]=1.0;return}function Jn(a){a=a|0;return+(+g[a>>2])}function Kn(a,b){a=a|0;b=+b;g[a>>2]=b;return}function Ln(a){a=a|0;return+(+g[a+4>>2])}function Mn(a,b){a=a|0;b=+b;g[a+4>>2]=b;return}function Nn(a){a=a|0;return+(+g[a+8>>2])}function On(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Pn(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Qn(a){a=a|0;return a+68|0}function Rn(a){a=a|0;return a+76|0}function Sn(a,b){a=a|0;b=+b;g[a+84>>2]=b;return}function Tn(a){a=a|0;return+(+g[a+84>>2])}function Un(a){a=a|0;return c[a+164>>2]|0}function Vn(a){a=a|0;return c[a+4>>2]|0}function Wn(a){a=a|0;return c[a+48>>2]|0}function Xn(a){a=a|0;return c[a+52>>2]|0}function Yn(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[528]|0)==0?(wa(528)|0)!=0:0)Da(528);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=520;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 520}function Zn(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[544]|0)==0?(wa(544)|0)!=0:0)Da(544);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=536;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 536}function _n(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[560]|0)==0?(wa(560)|0)!=0:0)Da(560);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=552;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 552}function $n(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function ao(a){a=a|0;return c[a+12>>2]|0}function bo(a){a=a|0;return c[a+64>>2]|0}function co(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function eo(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function fo(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function go(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function ho(a){a=a|0;return a|0}function io(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function jo(a){a=a|0;return a+8|0}function ko(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+8|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function lo(a){a=a|0;return+(+g[a+16>>2])}function mo(a,b){a=a|0;b=+b;g[a+16>>2]=b;return}function no(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function oo(){var a=0,b=0;a=i;b=RB(152)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(152)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b>>2]=7832;c[b+4>>2]=2;g[b+8>>2]=.009999999776482582;c[b+148>>2]=0;g[b+12>>2]=0.0;g[b+16>>2]=0.0;i=a;return b|0}function po(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0;e=i;i=i+96|0;o=e+32|0;n=e;if((d+ -3|0)>>>0>=6)Aa(7536,7568,122,7624);v=~d;v=(v|0)>-9?v:-9;p=~v;WB(o|0,b|0,-8-(v<<3)|0)|0;if((v|0)>-4)Aa(15688,7568,159,7624);q=0;b=1;w=+g[o>>2];do{x=+g[o+(b<<3)>>2];if(!(x>w)){if(x==w?+g[o+(b<<3)+4>>2]<+g[o+(q<<3)+4>>2]:0)l=9}else l=9;if((l|0)==9){l=0;q=b;w=x}b=b+1|0}while((b|0)!=(p|0));r=q;s=1;b=0;while(1){c[n+(b<<2)>>2]=r;u=o+(r<<3)|0;d=o+(r<<3)+4|0;v=0;t=1;do{if((v|0)!=(r|0)){z=+g[u>>2];x=+g[o+(v<<3)>>2]-z;w=+g[d>>2];y=+g[o+(v<<3)+4>>2]-w;z=+g[o+(t<<3)>>2]-z;w=+g[o+(t<<3)+4>>2]-w;A=x*w-y*z;v=A<0.0?t:v;if(A==0.0?z*z+w*w>x*x+y*y:0)v=t}else v=t;t=t+1|0}while((t|0)!=(p|0));d=b+1|0;if((v|0)==(q|0))break;else{r=v;s=s+1|0;b=d}}if((d|0)<3)Aa(15688,7568,224,7624);c[a+148>>2]=d;if((b|0)>-1)m=0;else Aa(7904,7568,76,7920);do{t=o+(c[n+(m<<2)>>2]<<3)|0;u=c[t+4>>2]|0;v=a+(m<<3)+20|0;c[v>>2]=c[t>>2];c[v+4>>2]=u;m=m+1|0}while((m|0)!=(s|0));o=0;do{p=o;o=o+1|0;n=(o|0)<(d|0);v=n?o:0;y=+g[a+(v<<3)+20>>2]- +g[a+(p<<3)+20>>2];w=+g[a+(v<<3)+24>>2]- +g[a+(p<<3)+24>>2];x=w*w;if(!(y*y+x>1.4210854715202004e-14)){l=23;break}m=a+(p<<3)+84|0;A=+w;y=+-y;v=m;g[v>>2]=A;g[v+4>>2]=y;p=a+(p<<3)+88|0;y=+g[p>>2];x=+O(+(x+y*y));if(!(x<1.1920928955078125e-7)){A=1.0/x;g[m>>2]=w*A;g[p>>2]=y*A}}while(n);if((l|0)==23)Aa(7632,7568,243,7624);l=a+12|0;m=a+20|0;if((b|0)>1){h=0.0;j=0.0;f=0.0;k=0}else Aa(7904,7568,76,7920);do{v=a+(k<<3)+20|0;w=+g[v>>2];x=+g[v+4>>2];k=k+1|0;if((k|0)<(d|0))b=a+(k<<3)+20|0;else b=m;v=b;y=+g[v>>2];z=+g[v+4>>2];A=(w*z-x*y)*.5;f=f+A;A=A*.3333333432674408;h=h+(w+0.0+y)*A;j=j+(x+0.0+z)*A}while((k|0)!=(d|0));if(f>1.1920928955078125e-7){A=1.0/f;z=+(h*A);A=+(j*A);v=l;g[v>>2]=z;g[v+4>>2]=A;i=e;return}else Aa(7792,7568,115,7920)}function qo(a,b,d){a=a|0;b=+b;d=+d;var e=0.0,f=0.0;c[a+148>>2]=4;e=-b;f=-d;g[a+20>>2]=e;g[a+24>>2]=f;g[a+28>>2]=b;g[a+32>>2]=f;g[a+36>>2]=b;g[a+40>>2]=d;g[a+44>>2]=e;g[a+48>>2]=d;g[a+84>>2]=0.0;g[a+88>>2]=-1.0;g[a+92>>2]=1.0;g[a+96>>2]=0.0;g[a+100>>2]=0.0;g[a+104>>2]=1.0;g[a+108>>2]=-1.0;g[a+112>>2]=0.0;g[a+12>>2]=0.0;g[a+16>>2]=0.0;return}function ro(a,b,d,e,f){a=a|0;b=+b;d=+d;e=e|0;f=+f;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0.0,r=0.0;j=i;h=a+148|0;c[h>>2]=4;k=-b;m=-d;g[a+20>>2]=k;g[a+24>>2]=m;g[a+28>>2]=b;g[a+32>>2]=m;g[a+36>>2]=b;g[a+40>>2]=d;g[a+44>>2]=k;g[a+48>>2]=d;g[a+84>>2]=0.0;g[a+88>>2]=-1.0;g[a+92>>2]=1.0;g[a+96>>2]=0.0;g[a+100>>2]=0.0;g[a+104>>2]=1.0;g[a+108>>2]=-1.0;g[a+112>>2]=0.0;p=e;o=c[p+4>>2]|0;n=a+12|0;c[n>>2]=c[p>>2];c[n+4>>2]=o;d=+g[e>>2];k=+g[e+4>>2];b=+R(+f);f=+Q(+f);l=-1.0;e=0;while(1){p=a+(e<<3)+20|0;r=+g[p>>2];q=+(d+(f*r-b*m));m=+(k+(b*r+f*m));g[p>>2]=q;g[p+4>>2]=m;p=a+(e<<3)+84|0;m=+g[p>>2];q=+(f*m-b*l);m=+(b*m+f*l);g[p>>2]=q;g[p+4>>2]=m;e=e+1|0;if((e|0)>=(c[h>>2]|0))break;m=+g[a+(e<<3)+24>>2];l=+g[a+(e<<3)+88>>2]}i=j;return}function so(a){a=a|0;return c[a+148>>2]|0}function to(a,b){a=a|0;b=b|0;var d=0;d=i;if((b|0)>-1?(c[a+148>>2]|0)>(b|0):0){i=d;return a+(b<<3)+20|0}Aa(6800,2624,97,6880);return 0}function uo(a){a=a|0;return c[a+4>>2]|0}function vo(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function wo(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function xo(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function yo(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function zo(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function Ao(a){a=a|0;return a+12|0}function Bo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Co(a){a=a|0;return c[a+148>>2]|0}function Do(a,b){a=a|0;b=b|0;c[a+148>>2]=b;return}function Eo(a){a=a|0;return c[a+4>>2]|0}function Fo(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Go(a){a=a|0;return+(+g[a+8>>2])}function Ho(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Io(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Jo(){var a=0,d=0,e=0;a=i;d=RB(48)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(48)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d>>2]=7472;c[d+4>>2]=1;g[d+8>>2]=.009999999776482582;e=d+28|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;b[e+16>>1]=0;i=a;return d|0}function Ko(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0;g=d;d=c[g+4>>2]|0;f=b+12|0;c[f>>2]=c[g>>2];c[f+4>>2]=d;f=e;e=c[f+4>>2]|0;d=b+20|0;c[d>>2]=c[f>>2];c[d+4>>2]=e;a[b+44>>0]=0;a[b+45>>0]=0;return}function Lo(a){a=a|0;return c[a+4>>2]|0}function Mo(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function No(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Oo(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function Po(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function Qo(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function Ro(a){a=a|0;return a+12|0}function So(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+12|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function To(a){a=a|0;return a+20|0}function Uo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Vo(a){a=a|0;return a+28|0}function Wo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Xo(a){a=a|0;return a+36|0}function Yo(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+36|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Zo(b){b=b|0;return(a[b+44>>0]|0)!=0|0}function _o(b,c){b=b|0;c=c|0;a[b+44>>0]=c&1;return}function $o(b){b=b|0;return(a[b+45>>0]|0)!=0|0}function ap(b,c){b=b|0;c=c|0;a[b+45>>0]=c&1;return}function bp(a){a=a|0;return c[a+4>>2]|0}function cp(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function dp(a){a=a|0;return+(+g[a+8>>2])}function ep(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function fp(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function gp(){var a=0,b=0,d=0;a=i;b=RB(4)|0;if(b){d=b;c[d>>2]=2320;i=a;return d|0}while(1){b=c[4698]|0;c[4698]=b+0;if(!b){b=4;break}qb[b&63]();d=RB(4)|0;if(d){b=5;break}}if((b|0)==4){d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}else if((b|0)==5){c[d>>2]=2320;i=a;return d|0}return 0}function hp(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+8>>2]&63](a,b,d)|0;i=e;return a|0}function ip(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function jp(){var b=0,d=0,e=0;b=i;d=RB(64)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(64)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=1;e=d+20|0;g[d+44>>2]=0.0;g[d+48>>2]=0.0;g[d+60>>2]=0.0;g[d+56>>2]=0.0;a[d+52>>0]=0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0;c[e+16>>2]=0;a[e+20>>0]=0;i=b;return d|0}function kp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0;f=i;c[a+8>>2]=b;c[a+12>>2]=d;m=+g[e>>2]- +g[b+12>>2];n=e+4|0;h=+g[n>>2]- +g[b+16>>2];j=+g[b+24>>2];k=+g[b+20>>2];l=+(m*j+h*k);k=+(j*h-m*k);o=a+20|0;g[o>>2]=l;g[o+4>>2]=k;k=+g[e>>2]- +g[d+12>>2];l=+g[n>>2]- +g[d+16>>2];m=+g[d+24>>2];h=+g[d+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);e=a+28|0;g[e>>2]=j;g[e+4>>2]=h;g[a+36>>2]=+g[d+56>>2]- +g[b+56>>2];i=f;return}function lp(a){a=a|0;return a+20|0}function mp(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function np(a){a=a|0;return a+28|0}function op(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function pp(a){a=a|0;return+(+g[a+36>>2])}function qp(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function rp(b){b=b|0;return(a[b+40>>0]|0)!=0|0}function sp(b,c){b=b|0;c=c|0;a[b+40>>0]=c&1;return}function tp(a){a=a|0;return+(+g[a+44>>2])}function up(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function vp(a){a=a|0;return+(+g[a+48>>2])}function wp(a,b){a=a|0;b=+b;g[a+48>>2]=b;return}function xp(b){b=b|0;return(a[b+52>>0]|0)!=0|0}function yp(b,c){b=b|0;c=c|0;a[b+52>>0]=c&1;return}function zp(a){a=a|0;return+(+g[a+56>>2])}function Ap(a,b){a=a|0;b=+b;g[a+56>>2]=b;return}function Bp(a){a=a|0;return+(+g[a+60>>2])}function Cp(a,b){a=a|0;b=+b;g[a+60>>2]=b;return}function Dp(a){a=a|0;return c[a>>2]|0}function Ep(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Fp(a){a=a|0;return c[a+4>>2]|0}function Gp(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Hp(a){a=a|0;return c[a+8>>2]|0}function Ip(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Jp(a){a=a|0;return c[a+12>>2]|0}function Kp(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Lp(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Mp(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Np(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Op(){var a=0,b=0,d=0;a=i;b=RB(8)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(8)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);d=b;c[d>>2]=0;c[d+4>>2]=0;c[b+4>>2]=0;c[b>>2]=912;i=a;return b|0}function Pp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+8>>2]&63](a,b,d,e);i=f;return}function Qp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+12>>2]&63](a,b,d,e);i=f;return}function Rp(a,b,d,e){a=a|0;b=b|0;d=+d;e=e|0;var f=0;f=i;ob[c[(c[a>>2]|0)+16>>2]&63](a,b,d,e);i=f;return}function Sp(a,b,d,e,f){a=a|0;b=b|0;d=+d;e=e|0;f=f|0;var g=0;g=i;mb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f);i=g;return}function Tp(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function Up(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+28>>2]&127](a,b);i=d;return}function Vp(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Wp(a){a=a|0;return a+76|0}function Xp(a){a=a|0;return a+84|0}function Yp(a){a=a|0;return a+92|0}function Zp(a){a=a|0;var b=0.0,d=0.0,e=0.0,f=0.0,h=0,i=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;h=c[a+48>>2]|0;k=c[a+52>>2]|0;d=+g[h+24>>2];j=+g[a+76>>2];f=+g[h+20>>2];i=+g[a+80>>2];m=+g[k+24>>2];o=+g[a+84>>2];n=+g[k+20>>2];l=+g[a+88>>2];e=+g[a+92>>2];b=+g[a+96>>2];return+((+g[k+12>>2]+(m*o-n*l)-(+g[h+12>>2]+(d*j-f*i)))*(d*e-f*b)+(o*n+m*l+ +g[k+16>>2]-(j*f+d*i+ +g[h+16>>2]))*(f*e+d*b))}function _p(a){a=a|0;return+(+g[(c[a+52>>2]|0)+72>>2]- +g[(c[a+48>>2]|0)+72>>2])}function $p(b){b=b|0;return(a[b+128>>0]|0)!=0|0}function aq(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if(j&2){l=d+128|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+128|0;k=f&1;a[l>>0]=k;i=h;return}function bq(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+124|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+124|0;g[k>>2]=d;i=f;return}function cq(a){a=a|0;return+(+g[a+124>>2])}function dq(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+120|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+120|0;g[k>>2]=d;i=f;return}function eq(a){a=a|0;return+(+g[a+120>>2])}function fq(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function gq(a,b){a=a|0;b=+b;g[a+68>>2]=b;return}function hq(a){a=a|0;return+(+g[a+68>>2])}function iq(a,b){a=a|0;b=+b;g[a+72>>2]=b;return}function jq(a){a=a|0;return+(+g[a+72>>2])}function kq(a){a=a|0;return c[a+4>>2]|0}function lq(a){a=a|0;return c[a+48>>2]|0}function mq(a){a=a|0;return c[a+52>>2]|0}function nq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[576]|0)==0?(wa(576)|0)!=0:0)Da(576);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=568;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 568}function oq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[592]|0)==0?(wa(592)|0)!=0:0)Da(592);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=584;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 584}function pq(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[608]|0)==0?(wa(608)|0)!=0:0)Da(608);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=600;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 600}function qq(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function rq(a){a=a|0;return c[a+12>>2]|0}function sq(a){a=a|0;return c[a+64>>2]|0}function tq(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function uq(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function vq(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function wq(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function xq(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[624]|0)==0?(wa(624)|0)!=0:0)Da(624);f=b+68|0;e=c[f+4>>2]|0;b=616;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 616}function yq(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[640]|0)==0?(wa(640)|0)!=0:0)Da(640);f=b+76|0;e=c[f+4>>2]|0;b=632;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 632}function zq(a){a=a|0;return+(+g[a+84>>2])}function Aq(a){a=a|0;return+(+g[a+88>>2])}function Bq(a){a=a|0;return+(+g[a+112>>2])}function Cq(a){a=a|0;var b=0.0,d=0,e=0.0,f=0,h=0.0,j=0.0,k=0.0;d=i;f=c[a+48>>2]|0;h=+g[f+24>>2];k=+g[a+92>>2];j=+g[f+20>>2];b=+g[a+96>>2];a=a+68|0;e=+g[a>>2];e=+g[f+12>>2]+(h*k-j*b)-e;b=k*j+h*b+ +g[f+16>>2]- +g[a+4>>2];b=+O(+(e*e+b*b));i=d;return+b}function Dq(a){a=a|0;var b=0.0,d=0,e=0.0,f=0,h=0.0,j=0.0,k=0.0;d=i;f=c[a+52>>2]|0;h=+g[f+24>>2];k=+g[a+100>>2];j=+g[f+20>>2];b=+g[a+104>>2];a=a+76|0;e=+g[a>>2];e=+g[f+12>>2]+(h*k-j*b)-e;b=k*j+h*b+ +g[f+16>>2]- +g[a+4>>2];b=+O(+(e*e+b*b));i=d;return+b}function Eq(a){a=a|0;return c[a+4>>2]|0}function Fq(a){a=a|0;return c[a+48>>2]|0}function Gq(a){a=a|0;return c[a+52>>2]|0}function Hq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[656]|0)==0?(wa(656)|0)!=0:0)Da(656);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=648;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 648}function Iq(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[672]|0)==0?(wa(672)|0)!=0:0)Da(672);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=664;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 664}function Jq(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[688]|0)==0?(wa(688)|0)!=0:0)Da(688);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=680;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 680}function Kq(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function Lq(a){a=a|0;return c[a+12>>2]|0}function Mq(a){a=a|0;return c[a+64>>2]|0}function Nq(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function Oq(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function Pq(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function Qq(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function Rq(){var b=0,d=0;b=i;d=RB(40)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(40)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=5;g[d+20>>2]=0.0;g[d+24>>2]=0.0;g[d+28>>2]=0.0;g[d+32>>2]=5.0;g[d+36>>2]=.699999988079071;i=b;return d|0}function Sq(a){a=a|0;return a+20|0}function Tq(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Uq(a){a=a|0;return+(+g[a+28>>2])}function Vq(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function Wq(a){a=a|0;return+(+g[a+32>>2])}function Xq(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function Yq(a){a=a|0;return+(+g[a+36>>2])}function Zq(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function _q(a){a=a|0;return c[a>>2]|0}function $q(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function ar(a){a=a|0;return c[a+4>>2]|0}function br(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function cr(a){a=a|0;return c[a+8>>2]|0}function dr(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function er(a){a=a|0;return c[a+12>>2]|0}function fr(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function gr(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function hr(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function ir(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function jr(a){a=a|0;return a+64|0}function kr(a){a=a|0;return(c[a+4>>2]&2|0)!=0|0}function lr(a,b){a=a|0;b=b|0;var d=0;a=a+4|0;d=c[a>>2]|0;c[a>>2]=b?d|4:d&-5;return}function mr(a){a=a|0;return(c[a+4>>2]&4|0)!=0|0}function nr(a){a=a|0;return c[a+12>>2]|0}function or(a){a=a|0;return c[a+48>>2]|0}function pr(a){a=a|0;return c[a+56>>2]|0}function qr(a){a=a|0;return c[a+52>>2]|0}function rr(a){a=a|0;return c[a+60>>2]|0}function sr(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function tr(a){a=a|0;return+(+g[a+136>>2])}function ur(a){a=a|0;g[a+136>>2]=+O(+(+g[(c[a+48>>2]|0)+16>>2]*+g[(c[a+52>>2]|0)+16>>2]));return}function vr(a,b){a=a|0;b=+b;g[a+140>>2]=b;return}function wr(a){a=a|0;return+(+g[a+140>>2])}function xr(a){a=a|0;var b=0.0,d=0.0;d=+g[(c[a+48>>2]|0)+20>>2];b=+g[(c[a+52>>2]|0)+20>>2];g[a+140>>2]=d>b?d:b;return}function yr(a,b){a=a|0;b=+b;g[a+144>>2]=b;return}function zr(a){a=a|0;return+(+g[a+144>>2])}function Ar(a){a=a|0;return c[a+4>>2]|0}function Br(a){a=a|0;var b=0;b=i;a=nb[c[(c[a>>2]|0)+12>>2]&63](a)|0;i=b;return a|0}function Cr(a,b,d){a=a|0;b=b|0;d=d|0;var e=0;e=i;a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,d)|0;i=e;return a|0}function Dr(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0;g=i;a=ub[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f)|0;i=g;return a|0}function Er(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;vb[c[(c[a>>2]|0)+24>>2]&63](a,b,d,e);i=f;return}function Fr(a,b,d){a=a|0;b=b|0;d=+d;var e=0;e=i;rb[c[(c[a>>2]|0)+28>>2]&63](a,b,d);i=e;return}function Gr(a){a=a|0;return c[a+4>>2]|0}function Hr(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Ir(a){a=a|0;return+(+g[a+8>>2])}function Jr(a,b){a=a|0;b=+b;g[a+8>>2]=b;return}function Kr(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Lr(){var b=0,d=0,e=0,f=0;b=i;d=RB(48)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(48)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=3;f=d+20|0;e=d+36|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;g[e>>2]=1.0;g[d+40>>2]=0.0;g[d+44>>2]=0.0;i=b;return d|0}function Mr(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0;h=i;c[a+8>>2]=b;c[a+12>>2]=d;o=+g[e>>2]- +g[b+12>>2];l=e+4|0;k=+g[l>>2]- +g[b+16>>2];j=+g[b+24>>2];m=+g[b+20>>2];n=+(o*j+k*m);m=+(j*k-o*m);b=a+20|0;g[b>>2]=n;g[b+4>>2]=m;m=+g[f>>2]- +g[d+12>>2];b=f+4|0;n=+g[b>>2]- +g[d+16>>2];o=+g[d+24>>2];k=+g[d+20>>2];j=+(m*o+n*k);k=+(o*n-m*k);d=a+28|0;g[d>>2]=j;g[d+4>>2]=k;k=+g[f>>2]- +g[e>>2];j=+g[b>>2]- +g[l>>2];g[a+36>>2]=+O(+(k*k+j*j));i=h;return}function Nr(a){a=a|0;return a+20|0}function Or(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Pr(a){a=a|0;return a+28|0}function Qr(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Rr(a){a=a|0;return+(+g[a+36>>2])}function Sr(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function Tr(a){a=a|0;return+(+g[a+40>>2])}function Ur(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function Vr(a){a=a|0;return+(+g[a+44>>2])}function Wr(a,b){a=a|0;b=+b;g[a+44>>2]=b;return}function Xr(a){a=a|0;return c[a>>2]|0}function Yr(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Zr(a){a=a|0;return c[a+4>>2]|0}function _r(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function $r(a){a=a|0;return c[a+8>>2]|0}function as(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function bs(a){a=a|0;return c[a+12>>2]|0}function cs(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function ds(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function es(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function fs(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function gs(a,b){a=a|0;b=b|0;var c=0;c=i;a=Ux(a,b)|0;i=c;return a|0}function hs(d,e,f){d=d|0;e=e|0;f=+f;var h=0,j=0;h=i;i=i+32|0;j=h;b[j+22>>1]=1;b[j+24>>1]=-1;b[j+26>>1]=0;c[j+4>>2]=0;g[j+8>>2]=.20000000298023224;g[j+12>>2]=0.0;a[j+20>>0]=0;c[j>>2]=e;g[j+16>>2]=f;e=Ux(d,j)|0;i=h;return e|0}function is(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;f=i;j=d+88|0;if(c[(c[j>>2]|0)+102868>>2]&2)Aa(9352,9088,216,9408);h=e+8|0;if((c[h>>2]|0)!=(d|0))Aa(9424,9088,222,9408);g=d+104|0;if((c[g>>2]|0)<=0)Aa(9448,9088,225,9408);o=d+100|0;n=c[o>>2]|0;if(!n)Aa(9472,9088,241,9408);else{m=n;k=o}while(1){n=m+4|0;if((m|0)==(e|0))break;m=c[n>>2]|0;if(!m){l=11;break}else k=n}if((l|0)==11)Aa(9472,9088,241,9408);l=e+4|0;c[k>>2]=c[l>>2];k=c[d+112>>2]|0;if(k)do{m=c[k+4>>2]|0;k=c[k+12>>2]|0;if((c[m+48>>2]|0)==(e|0)?1:(c[m+52>>2]|0)==(e|0))Zx((c[j>>2]|0)+102872|0,m)}while((k|0)!=0);j=c[j>>2]|0;if(b[d+4>>1]&32)py(e,j+102872|0);ny(e,j);c[h>>2]=0;c[l>>2]=0;h=a[8036]|0;if((h&255)<14){o=j+((h&255)<<2)+12|0;c[e>>2]=c[o>>2];c[o>>2]=e;c[g>>2]=(c[g>>2]|0)+ -1;Sx(d);i=f;return}else Aa(8760,8672,171,9032)}function js(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0,j=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0;e=i;h=c[a+88>>2]|0;if(c[h+102868>>2]&2)Aa(9352,9088,419,9560);f=a+12|0;n=+R(+d);g[a+20>>2]=n;m=+Q(+d);g[a+24>>2]=m;p=c[b>>2]|0;b=c[b+4>>2]|0;q=f;c[q>>2]=p;c[q+4>>2]=b;o=+g[a+28>>2];j=+g[a+32>>2];l=(c[k>>2]=p,+g[k>>2])+(m*o-n*j);j=o*n+m*j+(c[k>>2]=b,+g[k>>2]);l=+l;j=+j;b=a+44|0;g[b>>2]=l;g[b+4>>2]=j;g[a+56>>2]=d;b=a+36|0;g[b>>2]=l;g[b+4>>2]=j;g[a+52>>2]=d;h=h+102872|0;a=c[a+100>>2]|0;if(!a){i=e;return}do{qy(a,h,f,f);a=c[a+4>>2]|0}while((a|0)!=0);i=e;return}function ks(a){a=a|0;return a+12|0}function ls(a){a=a|0;return a+12|0}function ms(a){a=a|0;return+(+g[a+56>>2])}function ns(a){a=a|0;return a+44|0}function os(a){a=a|0;return a+28|0}function ps(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,k=0.0,l=0.0;f=i;if(!(c[a>>2]|0)){i=f;return}l=+g[d>>2];k=+g[d+4>>2];if(l*l+k*k>0.0?(j=a+4|0,h=e[j>>1]|0,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}h=d;j=c[h+4>>2]|0;d=a+64|0;c[d>>2]=c[h>>2];c[d+4>>2]=j;i=f;return}function qs(b){b=b|0;var d=0,e=0,f=0;d=i;if((a[704]|0)==0?(wa(704)|0)!=0:0)Da(704);f=b+64|0;e=c[f+4>>2]|0;b=696;c[b>>2]=c[f>>2];c[b+4>>2]=e;i=d;return 696}function rs(a,d){a=a|0;d=+d;var f=0,h=0,j=0;f=i;if(!(c[a>>2]|0)){i=f;return}if(d*d>0.0?(j=a+4|0,h=e[j>>1]|0,(h&2|0)==0):0){b[j>>1]=h|2;g[a+144>>2]=0.0}g[a+72>>2]=d;i=f;return}function ss(a){a=a|0;return+(+g[a+72>>2])}function ts(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;if((c[a>>2]|0)!=2){i=h;return}k=a+4|0;l=b[k>>1]|0;if((f?(l&2)==0:0)?(j=l&65535,(j&2|0)==0):0){l=(j|2)&65535;b[k>>1]=l;g[a+144>>2]=0.0}if(!(l&2)){i=h;return}k=a+76|0;g[k>>2]=+g[d>>2]+ +g[k>>2];k=d+4|0;l=a+80|0;g[l>>2]=+g[k>>2]+ +g[l>>2];l=a+84|0;g[l>>2]=+g[l>>2]+((+g[e>>2]- +g[a+44>>2])*+g[k>>2]-(+g[e+4>>2]- +g[a+48>>2])*+g[d>>2]);i=h;return}function us(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0;f=i;if((c[a>>2]|0)!=2){i=f;return}j=a+4|0;k=b[j>>1]|0;if((e?(k&2)==0:0)?(h=k&65535,(h&2|0)==0):0){k=(h|2)&65535;b[j>>1]=k;g[a+144>>2]=0.0}if(!(k&2)){i=f;return}k=a+76|0;g[k>>2]=+g[d>>2]+ +g[k>>2];k=a+80|0;g[k>>2]=+g[d+4>>2]+ +g[k>>2];i=f;return}function vs(a,d,e){a=a|0;d=+d;e=e|0;var f=0,h=0,j=0,k=0;f=i;if((c[a>>2]|0)!=2){i=f;return}j=a+4|0;k=b[j>>1]|0;if((e?(k&2)==0:0)?(h=k&65535,(h&2|0)==0):0){k=(h|2)&65535;b[j>>1]=k;g[a+144>>2]=0.0}if(!(k&2)){i=f;return}k=a+84|0;g[k>>2]=+g[k>>2]+d;i=f;return}function ws(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0,m=0.0,n=0.0;h=i;if((c[a>>2]|0)!=2){i=h;return}k=a+4|0;l=b[k>>1]|0;if((f?(l&2)==0:0)?(j=l&65535,(j&2|0)==0):0){l=(j|2)&65535;b[k>>1]=l;g[a+144>>2]=0.0}if(!(l&2)){i=h;return}n=+g[a+120>>2];k=d+4|0;m=n*+g[k>>2];l=a+64|0;g[l>>2]=n*+g[d>>2]+ +g[l>>2];l=a+68|0;g[l>>2]=m+ +g[l>>2];l=a+72|0;g[l>>2]=+g[l>>2]+ +g[a+128>>2]*((+g[e>>2]- +g[a+44>>2])*+g[k>>2]-(+g[e+4>>2]- +g[a+48>>2])*+g[d>>2]);i=h;return}function xs(a,d,e){a=a|0;d=+d;e=e|0;var f=0,h=0,j=0,k=0;f=i;if((c[a>>2]|0)!=2){i=f;return}j=a+4|0;k=b[j>>1]|0;if((e?(k&2)==0:0)?(h=k&65535,(h&2|0)==0):0){k=(h|2)&65535;b[j>>1]=k;g[a+144>>2]=0.0}if(!(k&2)){i=f;return}k=a+72|0;g[k>>2]=+g[k>>2]+ +g[a+128>>2]*d;i=f;return}function ys(a){a=a|0;return+(+g[a+116>>2])}function zs(a){a=a|0;var b=0.0,c=0.0;c=+g[a+28>>2];b=+g[a+32>>2];return+(+g[a+124>>2]+ +g[a+116>>2]*(c*c+b*b))}function As(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0;d=a+116|0;g[b>>2]=+g[d>>2];e=a+28|0;h=+g[e>>2];f=+g[a+32>>2];g[b+12>>2]=+g[a+124>>2]+ +g[d>>2]*(h*h+f*f);d=c[e+4>>2]|0;a=b+4|0;c[a>>2]=c[e>>2];c[a+4>>2]=d;return}function Bs(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0.0,l=0.0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0;e=i;if(c[(c[a+88>>2]|0)+102868>>2]&2)Aa(9352,9088,355,9544);if((c[a>>2]|0)!=2){i=e;return}m=a+120|0;g[m>>2]=0.0;h=a+124|0;g[h>>2]=0.0;f=a+128|0;g[f>>2]=0.0;j=+g[d>>2];j=!(j<=0.0)?j:1.0;g[a+116>>2]=j;g[m>>2]=1.0/j;l=+g[d+12>>2];do if(l>0.0?(b[a+4>>1]&16)==0:0){o=+g[d+4>>2];n=+g[d+8>>2];j=l-j*(o*o+n*n);g[h>>2]=j;if(j>0.0){g[f>>2]=1.0/j;break}else Aa(9528,9088,381,9544)}while(0);m=a+44|0;h=m;o=+g[h>>2];j=+g[h+4>>2];h=d+4|0;f=c[h>>2]|0;h=c[h+4>>2]|0;d=a+28|0;c[d>>2]=f;c[d+4>>2]=h;q=+g[a+24>>2];r=(c[k>>2]=f,+g[k>>2]);l=+g[a+20>>2];p=(c[k>>2]=h,+g[k>>2]);n=+g[a+12>>2]+(q*r-l*p);p=r*l+q*p+ +g[a+16>>2];q=+n;l=+p;g[m>>2]=q;g[m+4>>2]=l;m=a+36|0;g[m>>2]=q;g[m+4>>2]=l;l=+g[a+72>>2];m=a+64|0;g[m>>2]=+g[m>>2]-l*(p-j);m=a+68|0;g[m>>2]=l*(n-o)+ +g[m>>2];i=e;return}function Cs(a){a=a|0;var b=0;b=i;Sx(a);i=b;return}function Ds(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[720]|0)==0?(wa(720)|0)!=0:0)Da(720);h=+g[b+24>>2];k=+g[c>>2];j=+g[b+20>>2];e=+g[c+4>>2];f=+(+g[b+12>>2]+(h*k-j*e));e=+(k*j+h*e+ +g[b+16>>2]);c=712;g[c>>2]=f;g[c+4>>2]=e;i=d;return 712}function Es(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[736]|0)==0?(wa(736)|0)!=0:0)Da(736);h=+g[b+24>>2];k=+g[c>>2];j=+g[b+20>>2];e=+g[c+4>>2];f=+(h*k-j*e);e=+(k*j+h*e);c=728;g[c>>2]=f;g[c+4>>2]=e;i=d;return 728}function Fs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[752]|0)==0?(wa(752)|0)!=0:0)Da(752);h=+g[c>>2]- +g[b+12>>2];j=+g[c+4>>2]- +g[b+16>>2];k=+g[b+24>>2];e=+g[b+20>>2];f=+(h*k+j*e);e=+(k*j-h*e);b=744;g[b>>2]=f;g[b+4>>2]=e;i=d;return 744}function Gs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;if((a[768]|0)==0?(wa(768)|0)!=0:0)Da(768);k=+g[b+24>>2];h=+g[c>>2];e=+g[b+20>>2];j=+g[c+4>>2];f=+(k*h+e*j);e=+(k*j-h*e);c=760;g[c>>2]=f;g[c+4>>2]=e;i=d;return 760}function Hs(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0;d=i;if((a[784]|0)==0?(wa(784)|0)!=0:0)Da(784);e=+g[b+72>>2];f=+(+g[b+64>>2]-e*(+g[c+4>>2]- +g[b+48>>2]));e=+(e*(+g[c>>2]- +g[b+44>>2])+ +g[b+68>>2]);c=776;g[c>>2]=f;g[c+4>>2]=e;i=d;return 776}function Is(b,c){b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;d=i;if((a[800]|0)==0?(wa(800)|0)!=0:0)Da(800);k=+g[b+24>>2];j=+g[c>>2];h=+g[b+20>>2];e=+g[c+4>>2];l=+g[b+72>>2];f=+(+g[b+64>>2]-l*(j*h+k*e+ +g[b+16>>2]- +g[b+48>>2]));e=+(l*(+g[b+12>>2]+(k*j-h*e)- +g[b+44>>2])+ +g[b+68>>2]);c=792;g[c>>2]=f;g[c+4>>2]=e;i=d;return 792}function Js(a){a=a|0;return+(+g[a+132>>2])}function Ks(a,b){a=a|0;b=+b;g[a+132>>2]=b;return}function Ls(a){a=a|0;return+(+g[a+136>>2])}function Ms(a,b){a=a|0;b=+b;g[a+136>>2]=b;return}function Ns(a){a=a|0;return+(+g[a+140>>2])}function Os(a,b){a=a|0;b=+b;g[a+140>>2]=b;return}function Ps(a,d){a=a|0;d=d|0;var f=0,h=0,j=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0;f=i;i=i+16|0;l=f;h=a+88|0;if(c[(c[h>>2]|0)+102868>>2]&2)Aa(9352,9088,115,9384);if((c[a>>2]|0)==(d|0)){i=f;return}c[a>>2]=d;Sx(a);if((c[a>>2]|0)==0?(g[a+64>>2]=0.0,g[a+68>>2]=0.0,g[a+72>>2]=0.0,s=+g[a+56>>2],g[a+52>>2]=s,j=a+44|0,m=c[j>>2]|0,j=c[j+4>>2]|0,p=a+36|0,c[p>>2]=m,c[p+4>>2]=j,t=+R(+s),g[l+8>>2]=t,s=+Q(+s),g[l+12>>2]=s,u=+g[a+28>>2],q=+g[a+32>>2],r=(c[k>>2]=m,+g[k>>2])-(s*u-t*q),q=(c[k>>2]=j,+g[k>>2])-(u*t+s*q),r=+r,q=+q,j=l,g[j>>2]=r,g[j+4>>2]=q,j=(c[h>>2]|0)+102872|0,m=c[a+100>>2]|0,(m|0)!=0):0){d=a+12|0;do{qy(m,j,l,d);m=c[m+4>>2]|0}while((m|0)!=0)}l=a+4|0;j=e[l>>1]|0;if(!(j&2)){b[l>>1]=j|2;g[a+144>>2]=0.0}g[a+76>>2]=0.0;g[a+80>>2]=0.0;g[a+84>>2]=0.0;j=a+112|0;l=c[j>>2]|0;if(l)do{p=l;l=c[l+12>>2]|0;Zx((c[h>>2]|0)+102872|0,c[p+4>>2]|0)}while((l|0)!=0);c[j>>2]=0;j=c[h>>2]|0;n=c[a+100>>2]|0;if(!n){i=f;return}h=j+102912|0;a=j+102908|0;j=j+102904|0;do{o=c[n+28>>2]|0;if((o|0)>0){d=n+24|0;p=c[h>>2]|0;l=0;do{m=c[(c[d>>2]|0)+(l*28|0)+24>>2]|0;if((p|0)==(c[a>>2]|0)){v=c[j>>2]|0;c[a>>2]=p<<1;p=RB(p<<3)|0;c[j>>2]=p;WB(p|0,v|0,c[h>>2]<<2|0)|0;SB(v);p=c[h>>2]|0}c[(c[j>>2]|0)+(p<<2)>>2]=m;p=(c[h>>2]|0)+1|0;c[h>>2]=p;l=l+1|0}while((l|0)!=(o|0))}n=c[n+4>>2]|0}while((n|0)!=0);i=f;return}function Qs(a){a=a|0;return c[a>>2]|0}function Rs(a,c){a=a|0;c=c|0;var d=0;a=a+4|0;d=e[a>>1]|0;b[a>>1]=c?d|8:d&65527;return}function Ss(a){a=a|0;return(b[a+4>>1]&8)!=0|0}function Ts(a,c){a=a|0;c=c|0;var d=0,f=0,h=0;d=i;f=a+4|0;h=e[f>>1]|0;if(c){b[f>>1]=h|4;i=d;return}c=h&65531;b[f>>1]=c;if(h&2){i=d;return}b[f>>1]=c|2;g[a+144>>2]=0.0;i=d;return}function Us(a){a=a|0;return(b[a+4>>1]&4)!=0|0}function Vs(a,d){a=a|0;d=d|0;var f=0,h=0,j=0;f=i;h=a+4|0;j=e[h>>1]|0;if(!d){b[h>>1]=j&65533;g[a+144>>2]=0.0;d=a+64|0;c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;c[d+16>>2]=0;c[d+20>>2]=0;i=f;return}if(j&2){i=f;return}b[h>>1]=j|2;g[a+144>>2]=0.0;i=f;return}function Ws(a){a=a|0;return(b[a+4>>1]&2)!=0|0}



function yy(f,h,j,l){f=f|0;h=+h;j=j|0;l=l|0;var m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0.0,E=0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,N=0,P=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0,wa=0,xa=0,ya=0,za=0,Ba=0,Ca=0,Da=0,Ea=0,Fa=0,Ga=0,Ha=0,Ia=0,Ja=0,Ka=0,La=0,Ma=0,Na=0,Oa=0,Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=0,Ya=0,Za=0,_a=0,$a=0,ab=0,bb=0,cb=0,db=0,eb=0,fb=0,hb=0,ib=0,jb=0,kb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Db=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0.0,Lb=0,Mb=0.0,Nb=0.0,Ob=0,Pb=0.0,Qb=0.0,Rb=0.0,Sb=0.0,Tb=0.0,Ub=0.0,Vb=0.0,Wb=0.0,Xb=0.0,Yb=0.0,Zb=0.0,_b=0.0,$b=0.0,ac=0.0,bc=0.0,cc=0.0,dc=0.0,ec=0.0,fc=0.0,gc=0.0,hc=0.0,ic=0,jc=0.0,kc=0.0,lc=0.0,mc=0.0,nc=0.0,oc=0.0,pc=0.0,qc=0.0,rc=0.0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=0,Bc=0,Cc=0.0,Dc=0.0,Ec=0.0,Fc=0.0,Gc=0,Hc=0,Ic=0.0,Jc=0.0,Kc=0,Lc=0.0,Mc=0.0,Nc=0,Oc=0,Pc=0,Qc=0,Rc=0,Sc=0,Tc=0.0;m=i;i=i+608|0;p=m;q=m+16|0;r=m+112|0;x=m+236|0;y=m+404|0;o=m+136|0;z=m+536|0;t=m+456|0;u=m+492|0;s=m+528|0;v=m+368|0;w=m+591|0;J=m+588|0;n=f+102868|0;C=c[n>>2]|0;if(C&1){_x(f+102872|0);C=c[n>>2]&-2;c[n>>2]=C}c[n>>2]=C|2;C=h>0.0;if(C)D=1.0/h;else D=0.0;G=f+102988|0;Kb=+g[G>>2]*h;K=a[f+102992>>0]|0;E=f+102872|0;F=f+102932|0;S=c[F>>2]|0;a:do if(S){H=f+102884|0;L=f+102876|0;P=f+102944|0;N=f+102940|0;b:while(1){W=c[S+48>>2]|0;U=c[S+52>>2]|0;V=c[S+56>>2]|0;T=c[S+60>>2]|0;Z=c[W+8>>2]|0;X=c[U+8>>2]|0;Y=S+4|0;$=c[Y>>2]|0;c:do if(!($&8))B=16;else{if(!(Vx(X,Z)|0)){Sc=c[S+12>>2]|0;Zx(E,S);S=Sc;break}_=c[N>>2]|0;do if(_)if(gb[c[(c[_>>2]|0)+8>>2]&63](_,W,U)|0){$=c[Y>>2]|0;break}else{Sc=c[S+12>>2]|0;Zx(E,S);S=Sc;break c}while(0);c[Y>>2]=$&-9;B=16}while(0);do if((B|0)==16){B=0;if(!(b[Z+4>>1]&2))Y=0;else Y=(c[Z>>2]|0)!=0;if(!(b[X+4>>1]&2))X=0;else X=(c[X>>2]|0)!=0;if(!(Y|X)){S=c[S+12>>2]|0;break}V=c[(c[W+24>>2]|0)+(V*28|0)+24>>2]|0;U=c[(c[U+24>>2]|0)+(T*28|0)+24>>2]|0;if((V|0)<=-1){B=24;break b}W=c[H>>2]|0;if((W|0)<=(V|0)){B=24;break b}T=c[L>>2]|0;if(!((U|0)>-1&(W|0)>(U|0))){B=26;break b}if((+g[T+(U*36|0)>>2]- +g[T+(V*36|0)+8>>2]>0.0?1:+g[T+(U*36|0)+4>>2]- +g[T+(V*36|0)+12>>2]>0.0)|+g[T+(V*36|0)>>2]- +g[T+(U*36|0)+8>>2]>0.0|+g[T+(V*36|0)+4>>2]- +g[T+(U*36|0)+12>>2]>0.0){Sc=c[S+12>>2]|0;Zx(E,S);S=Sc;break}else{Qy(S,c[P>>2]|0);S=c[S+12>>2]|0;break}}while(0);if(!S)break a}if((B|0)==24)Aa(12256,12200,164,12320);else if((B|0)==26)Aa(12256,12200,164,12320)}while(0);g[f+103e3>>2]=0.0;H=f+102995|0;if(!((a[H>>0]|0)==0|C^1)){L=f+103008|0;g[L>>2]=0.0;N=f+103012|0;g[N>>2]=0.0;P=f+103016|0;g[P>>2]=0.0;U=f+102960|0;S=f+68|0;sy(z,c[U>>2]|0,c[f+102936>>2]|0,c[f+102964>>2]|0,S,c[f+102944>>2]|0);T=f+102952|0;V=c[T>>2]|0;if(V)do{Sc=V+4|0;b[Sc>>1]=e[Sc>>1]&65534;V=c[V+96>>2]|0}while((V|0)!=0);V=c[F>>2]|0;if(V)do{Sc=V+4|0;c[Sc>>2]=c[Sc>>2]&-2;V=c[V+12>>2]|0}while((V|0)!=0);V=c[f+102956>>2]|0;if(V)do{a[V+60>>0]=0;V=c[V+12>>2]|0}while((V|0)!=0);Oa=c[U>>2]|0;Na=Qx(S,Oa<<2)|0;Qa=c[T>>2]|0;d:do if(Qa){Ka=z+28|0;Y=z+36|0;Ja=z+32|0;La=f+102976|0;Ga=z+8|0;Ha=z+48|0;Ia=z+16|0;ca=f+102968|0;da=f+102972|0;wa=z+20|0;Fa=z+24|0;ta=x+4|0;qa=x+8|0;na=x+12|0;ma=x+16|0;la=x+20|0;ka=x+21|0;ja=x+24|0;ea=x+28|0;ua=y+4|0;ga=y+8|0;Da=y+12|0;Ea=y+16|0;Ma=y+20|0;V=y+21|0;W=z+12|0;X=y+24|0;Z=y+28|0;_=y+32|0;$=y+36|0;aa=y+40|0;ba=K<<24>>24==0;ia=(j|0)>0;Pa=o+48|0;ha=o+40|0;oa=o+44|0;pa=(l|0)>0;sa=o+36|0;ra=o+24|0;U=p+8|0;va=p+12|0;xa=q+8|0;ya=q+12|0;za=r+8|0;Ba=r+16|0;Ca=o+32|0;fa=o+28|0;e:while(1){Ra=Qa+4|0;Sa=b[Ra>>1]|0;do if((Sa&35)==34?(c[Qa>>2]|0)!=0:0){c[Ka>>2]=0;c[Y>>2]=0;c[Ja>>2]=0;c[Na>>2]=Qa;b[Ra>>1]=Sa&65535|1;Ta=1;do{Ta=Ta+ -1|0;Ra=c[Na+(Ta<<2)>>2]|0;Ua=Ra+4|0;if(!(b[Ua>>1]&32)){B=43;break e}wy(z,Ra);Sa=e[Ua>>1]|0;if(!(Sa&2)){b[Ua>>1]=Sa|2;g[Ra+144>>2]=0.0}do if(c[Ra>>2]|0){Sa=c[Ra+112>>2]|0;if(Sa)do{Ua=c[Sa+4>>2]|0;Va=Ua+4|0;do if((c[Va>>2]&7|0)==6){if(a[(c[Ua+48>>2]|0)+38>>0]|0)break;if(a[(c[Ua+52>>2]|0)+38>>0]|0)break;xy(z,Ua);c[Va>>2]=c[Va>>2]|1;Ua=c[Sa>>2]|0;Va=Ua+4|0;Wa=b[Va>>1]|0;if(Wa&1)break;if((Ta|0)>=(Oa|0)){B=54;break e}c[Na+(Ta<<2)>>2]=Ua;b[Va>>1]=Wa&65535|1;Ta=Ta+1|0}while(0);Sa=c[Sa+12>>2]|0}while((Sa|0)!=0);Ra=c[Ra+108>>2]|0;if(!Ra)break;do{Va=Ra+4|0;Sa=c[Va>>2]|0;do if(!(a[Sa+60>>0]|0)){Wa=c[Ra>>2]|0;Ya=Wa+4|0;Xa=b[Ya>>1]|0;if(!(Xa&32))break;Ua=c[Ja>>2]|0;if((Ua|0)>=(c[Ha>>2]|0)){B=61;break e}c[Ja>>2]=Ua+1;c[(c[Ia>>2]|0)+(Ua<<2)>>2]=Sa;a[(c[Va>>2]|0)+60>>0]=1;if(Xa&1)break;if((Ta|0)>=(Oa|0)){B=64;break e}c[Na+(Ta<<2)>>2]=Wa;b[Ya>>1]=Xa&65535|1;Ta=Ta+1|0}while(0);Ra=c[Ra+12>>2]|0}while((Ra|0)!=0)}while(0)}while((Ta|0)>0);Ra=(a[La>>0]|0)==0;Sa=c[Ka>>2]|0;Va=(Sa|0)>0;if(Va){Wa=c[Ga>>2]|0;Xa=0;do{Ta=c[Wa+(Xa<<2)>>2]|0;Ua=Ta+44|0;Ya=c[Ua>>2]|0;Ua=c[Ua+4>>2]|0;Nb=+g[Ta+56>>2];Sc=Ta+64|0;Mb=+g[Sc>>2];Pb=+g[Sc+4>>2];Qb=+g[Ta+72>>2];Sc=Ta+36|0;c[Sc>>2]=Ya;c[Sc+4>>2]=Ua;g[Ta+52>>2]=Nb;if((c[Ta>>2]|0)==2){Jc=+g[Ta+140>>2];Lc=+g[Ta+120>>2];Mc=1.0/(+g[Ta+132>>2]*h+1.0);Mb=(Mb+(Jc*+g[ca>>2]+Lc*+g[Ta+76>>2])*h)*Mc;Pb=(Pb+(Jc*+g[da>>2]+Lc*+g[Ta+80>>2])*h)*Mc;Qb=(Qb+ +g[Ta+128>>2]*h*+g[Ta+84>>2])*(1.0/(+g[Ta+136>>2]*h+1.0))}Ta=c[wa>>2]|0;Sc=Ta+(Xa*12|0)|0;c[Sc>>2]=Ya;c[Sc+4>>2]=Ua;g[Ta+(Xa*12|0)+8>>2]=Nb;Ua=c[Fa>>2]|0;Lc=+Mb;Mc=+Pb;Sc=Ua+(Xa*12|0)|0;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[Ua+(Xa*12|0)+8>>2]=Qb;Xa=Xa+1|0}while((Xa|0)<(Sa|0))}else{Ua=c[Fa>>2]|0;Ta=c[wa>>2]|0}g[x>>2]=h;g[ta>>2]=D;g[qa>>2]=Kb;c[na>>2]=j;c[ma>>2]=l;a[la>>0]=K;a[ka+0>>0]=a[J+0>>0]|0;a[ka+1>>0]=a[J+1>>0]|0;a[ka+2>>0]=a[J+2>>0]|0;c[ja>>2]=Ta;c[ea>>2]=Ua;g[y>>2]=h;g[ua>>2]=D;g[ga>>2]=Kb;c[Da>>2]=j;c[Ea>>2]=l;a[Ma>>0]=K;a[V+0>>0]=a[J+0>>0]|0;a[V+1>>0]=a[J+1>>0]|0;a[V+2>>0]=a[J+2>>0]|0;c[X>>2]=c[W>>2];c[Z>>2]=c[Y>>2];c[_>>2]=Ta;c[$>>2]=Ua;c[aa>>2]=c[z>>2];Ry(o,y);Sy(o);if(!ba?(I=c[Pa>>2]|0,(I|0)>0):0){$a=c[fa>>2]|0;ab=c[ha>>2]|0;Wa=0;do{Ya=c[ab+(Wa*156|0)+112>>2]|0;_a=c[ab+(Wa*156|0)+116>>2]|0;Mb=+g[ab+(Wa*156|0)+120>>2];Sb=+g[ab+(Wa*156|0)+128>>2];Rb=+g[ab+(Wa*156|0)+124>>2];Qb=+g[ab+(Wa*156|0)+132>>2];bb=c[ab+(Wa*156|0)+148>>2]|0;Za=$a+(Ya*12|0)|0;Xa=Za;Ub=+g[Xa>>2];Wb=+g[Xa+4>>2];Ya=$a+(Ya*12|0)+8|0;Vb=+g[Ya>>2];Xa=$a+(_a*12|0)|0;Sc=Xa;Xb=+g[Sc>>2];Yb=+g[Sc+4>>2];_a=$a+(_a*12|0)+8|0;Tb=+g[_a>>2];Sc=ab+(Wa*156|0)+72|0;Pb=+g[Sc>>2];Nb=+g[Sc+4>>2];if((bb|0)>0){cb=0;do{Jc=+g[ab+(Wa*156|0)+(cb*36|0)+16>>2];Mc=+g[ab+(Wa*156|0)+(cb*36|0)+20>>2];Lc=Pb*Jc+Nb*Mc;Mc=Nb*Jc-Pb*Mc;Vb=Vb-Sb*(+g[ab+(Wa*156|0)+(cb*36|0)>>2]*Mc- +g[ab+(Wa*156|0)+(cb*36|0)+4>>2]*Lc);Ub=Ub-Mb*Lc;Wb=Wb-Mb*Mc;Tb=Tb+Qb*(Mc*+g[ab+(Wa*156|0)+(cb*36|0)+8>>2]-Lc*+g[ab+(Wa*156|0)+(cb*36|0)+12>>2]);Xb=Xb+Rb*Lc;Yb=Yb+Rb*Mc;cb=cb+1|0}while((cb|0)!=(bb|0))}Mc=+Ub;Lc=+Wb;Sc=Za;g[Sc>>2]=Mc;g[Sc+4>>2]=Lc;g[Ya>>2]=Vb;Lc=+Xb;Mc=+Yb;Sc=Xa;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[_a>>2]=Tb;Wa=Wa+1|0}while((Wa|0)<(I|0))}Wa=c[Ja>>2]|0;Xa=(Wa|0)>0;if(Xa){Za=c[Ia>>2]|0;Ya=0;do{Sc=c[Za+(Ya<<2)>>2]|0;lb[c[(c[Sc>>2]|0)+32>>2]&127](Sc,x);Ya=Ya+1|0}while((Ya|0)<(Wa|0))}if(ia){_a=0;do{if(Xa){Ya=c[Ia>>2]|0;Za=0;do{Sc=c[Ya+(Za<<2)>>2]|0;lb[c[(c[Sc>>2]|0)+36>>2]&127](Sc,x);Za=Za+1|0}while((Za|0)<(Wa|0))}Ty(o);_a=_a+1|0}while((_a|0)<(j|0))}$a=c[Pa>>2]|0;if(($a|0)>0){_a=c[ha>>2]|0;Za=c[oa>>2]|0;Ya=0;do{ab=c[Za+(c[_a+(Ya*156|0)+152>>2]<<2)>>2]|0;Xa=c[_a+(Ya*156|0)+148>>2]|0;if((Xa|0)>0){Wa=0;do{g[ab+(Wa*20|0)+72>>2]=+g[_a+(Ya*156|0)+(Wa*36|0)+16>>2];g[ab+(Wa*20|0)+76>>2]=+g[_a+(Ya*156|0)+(Wa*36|0)+20>>2];Wa=Wa+1|0}while((Wa|0)<(Xa|0))}Ya=Ya+1|0}while((Ya|0)<($a|0))}if(Va){Va=0;do{Sa=Ta+(Va*12|0)|0;Sc=Sa;Mb=+g[Sc>>2];Nb=+g[Sc+4>>2];Pb=+g[Ta+(Va*12|0)+8>>2];Sc=Ua+(Va*12|0)|0;Qb=+g[Sc>>2];Sb=+g[Sc+4>>2];Rb=+g[Ua+(Va*12|0)+8>>2];Mc=Qb*h;Tb=Sb*h;Tb=Mc*Mc+Tb*Tb;if(Tb>4.0){Mc=2.0/+O(+Tb);Qb=Qb*Mc;Sb=Sb*Mc}Tb=Rb*h;if(Tb*Tb>2.4674012660980225){if(!(Tb>0.0))Tb=-Tb;Rb=Rb*(1.5707963705062866/Tb)}Mc=+(Mb+Qb*h);Lc=+(Nb+Sb*h);Ta=Sa;g[Ta>>2]=Mc;g[Ta+4>>2]=Lc;Ta=c[wa>>2]|0;g[Ta+(Va*12|0)+8>>2]=Pb+Rb*h;Ua=c[Fa>>2]|0;Lc=+Qb;Mc=+Sb;Sa=Ua+(Va*12|0)|0;g[Sa>>2]=Lc;g[Sa+4>>2]=Mc;g[Ua+(Va*12|0)+8>>2]=Rb;Va=Va+1|0;Sa=c[Ka>>2]|0}while((Va|0)<(Sa|0))}f:do if(pa){Wa=c[Pa>>2]|0;Va=0;while(1){if((Wa|0)>0){Xa=c[ra>>2]|0;_a=c[sa>>2]|0;Za=0;Wb=0.0;do{db=_a+(Za*88|0)|0;bb=c[_a+(Za*88|0)+32>>2]|0;$a=c[_a+(Za*88|0)+36>>2]|0;cb=_a+(Za*88|0)+48|0;Sb=+g[cb>>2];Tb=+g[cb+4>>2];Rb=+g[_a+(Za*88|0)+40>>2];Mb=+g[_a+(Za*88|0)+64>>2];cb=_a+(Za*88|0)+56|0;Ub=+g[cb>>2];Vb=+g[cb+4>>2];Pb=+g[_a+(Za*88|0)+44>>2];Qb=+g[_a+(Za*88|0)+68>>2];cb=c[_a+(Za*88|0)+84>>2]|0;Ya=Xa+(bb*12|0)|0;ab=Ya;Xb=+g[ab>>2];Yb=+g[ab+4>>2];bb=Xa+(bb*12|0)+8|0;ac=+g[bb>>2];ab=Xa+($a*12|0)|0;Sc=ab;Zb=+g[Sc>>2];_b=+g[Sc+4>>2];$a=Xa+($a*12|0)+8|0;$b=+g[$a>>2];if((cb|0)>0){Nb=Rb+Pb;eb=0;do{gc=+R(+ac);g[U>>2]=gc;hc=+Q(+ac);g[va>>2]=hc;fc=+R(+$b);g[xa>>2]=fc;cc=+Q(+$b);g[ya>>2]=cc;bc=+(Xb-(Sb*hc-Tb*gc));gc=+(Yb-(Tb*hc+Sb*gc));Sc=p;g[Sc>>2]=bc;g[Sc+4>>2]=gc;gc=+(Zb-(Ub*cc-Vb*fc));fc=+(_b-(Vb*cc+Ub*fc));Sc=q;g[Sc>>2]=gc;g[Sc+4>>2]=fc;Uy(r,db,p,q,eb);Sc=r;fc=+g[Sc>>2];gc=+g[Sc+4>>2];Sc=za;cc=+g[Sc>>2];bc=+g[Sc+4>>2];hc=+g[Ba>>2];ec=cc-Xb;dc=bc-Yb;cc=cc-Zb;bc=bc-_b;Wb=Wb<hc?Wb:hc;hc=(hc+.004999999888241291)*.20000000298023224;hc=hc<0.0?hc:0.0;jc=gc*ec-fc*dc;Mc=gc*cc-fc*bc;jc=Mc*Qb*Mc+(Nb+jc*Mb*jc);if(jc>0.0)hc=-(hc<-.20000000298023224?-.20000000298023224:hc)/jc;else hc=0.0;Mc=fc*hc;Lc=gc*hc;Xb=Xb-Rb*Mc;Yb=Yb-Rb*Lc;ac=ac-Mb*(ec*Lc-dc*Mc);Zb=Zb+Pb*Mc;_b=_b+Pb*Lc;$b=$b+Qb*(cc*Lc-bc*Mc);eb=eb+1|0}while((eb|0)!=(cb|0))}Mc=+Xb;Lc=+Yb;Sc=Ya;g[Sc>>2]=Mc;g[Sc+4>>2]=Lc;g[bb>>2]=ac;Lc=+Zb;Mc=+_b;Sc=ab;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;g[$a>>2]=$b;Za=Za+1|0}while((Za|0)<(Wa|0))}else Wb=0.0;Xa=Wb>=-.014999999664723873;Za=c[Ja>>2]|0;if((Za|0)>0){_a=c[Ia>>2]|0;Ya=0;$a=1;do{Sc=c[_a+(Ya<<2)>>2]|0;$a=$a&(tb[c[(c[Sc>>2]|0)+40>>2]&63](Sc,x)|0);Ya=Ya+1|0}while((Ya|0)<(Za|0))}else $a=1;Va=Va+1|0;if(Xa&$a){Va=0;break f}if((Va|0)>=(l|0)){Va=1;break}}}else Va=1;while(0);if((Sa|0)>0){Xa=c[Ga>>2]|0;Wa=0;do{Sc=c[Xa+(Wa<<2)>>2]|0;Rc=Ta+(Wa*12|0)|0;Qc=c[Rc>>2]|0;Rc=c[Rc+4>>2]|0;Nc=Sc+44|0;c[Nc>>2]=Qc;c[Nc+4>>2]=Rc;Jc=+g[Ta+(Wa*12|0)+8>>2];g[Sc+56>>2]=Jc;Nc=Ua+(Wa*12|0)|0;Oc=c[Nc+4>>2]|0;Pc=Sc+64|0;c[Pc>>2]=c[Nc>>2];c[Pc+4>>2]=Oc;g[Sc+72>>2]=+g[Ua+(Wa*12|0)+8>>2];Fc=+R(+Jc);g[Sc+20>>2]=Fc;Jc=+Q(+Jc);g[Sc+24>>2]=Jc;Ic=+g[Sc+28>>2];Mc=+g[Sc+32>>2];Lc=(c[k>>2]=Qc,+g[k>>2])-(Jc*Ic-Fc*Mc);Mc=(c[k>>2]=Rc,+g[k>>2])-(Fc*Ic+Jc*Mc);Lc=+Lc;Mc=+Mc;Sc=Sc+12|0;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Wa=Wa+1|0}while((Wa|0)<(Sa|0))}Sa=c[ha>>2]|0;uy(z,Sa);do if(!Ra){Ra=c[Ka>>2]|0;if((Ra|0)<=0)break;Ta=c[Ga>>2]|0;Ua=0;Mb=3.4028234663852886e+38;do{Wa=c[Ta+(Ua<<2)>>2]|0;g:do if(c[Wa>>2]|0){do if(b[Wa+4>>1]&4){Mc=+g[Wa+72>>2];if(Mc*Mc>.001218469929881394)break;Lc=+g[Wa+64>>2];Mc=+g[Wa+68>>2];if(Lc*Lc+Mc*Mc>9999999747378752.0e-20)break;Sc=Wa+144|0;Mc=+g[Sc>>2]+h;g[Sc>>2]=Mc;Mb=Mb<Mc?Mb:Mc;break g}while(0);g[Wa+144>>2]=0.0;Mb=0.0}while(0);Ua=Ua+1|0}while((Ua|0)<(Ra|0));if(!(Mb>=.5)|Va)break;else Ua=0;do{Sc=c[Ta+(Ua<<2)>>2]|0;Rc=Sc+4|0;b[Rc>>1]=e[Rc>>1]&65533;g[Sc+144>>2]=0.0;Sc=Sc+64|0;c[Sc+0>>2]=0;c[Sc+4>>2]=0;c[Sc+8>>2]=0;c[Sc+12>>2]=0;c[Sc+16>>2]=0;c[Sc+20>>2]=0;Ua=Ua+1|0}while((Ua|0)<(Ra|0))}while(0);Ra=c[Ca>>2]|0;Rx(Ra,Sa);Rx(Ra,c[sa>>2]|0);g[L>>2]=+g[L>>2]+0.0;g[N>>2]=+g[N>>2]+0.0;g[P>>2]=+g[P>>2]+0.0;Ra=c[Ka>>2]|0;if((Ra|0)<=0)break;Sa=c[Ga>>2]|0;Ta=0;do{Ua=c[Sa+(Ta<<2)>>2]|0;if(!(c[Ua>>2]|0)){Sc=Ua+4|0;b[Sc>>1]=e[Sc>>1]&65534}Ta=Ta+1|0}while((Ta|0)<(Ra|0))}while(0);Qa=c[Qa+96>>2]|0;if(!Qa)break d}if((B|0)==43)Aa(11696,11552,445,11720);else if((B|0)==54)Aa(11728,11552,495,11720);else if((B|0)==61)Aa(12384,12416,68,12456);else if((B|0)==64)Aa(11728,11552,524,11720)}while(0);Rx(S,Na);I=c[T>>2]|0;if(I)do{if((b[I+4>>1]&1)!=0?(c[I>>2]|0)!=0:0)Tx(I);I=c[I+96>>2]|0}while((I|0)!=0);_x(E);g[f+103020>>2]=0.0;ty(z);g[f+103004>>2]=0.0}if(a[f+102993>>0]|0){if(C){I=f+102944|0;sy(z,64,32,0,f+68|0,c[I>>2]|0);if(a[H>>0]|0){J=c[f+102952>>2]|0;if(J)do{Sc=J+4|0;b[Sc>>1]=e[Sc>>1]&65534;g[J+60>>2]=0.0;J=c[J+96>>2]|0}while((J|0)!=0);J=c[F>>2]|0;if(J)do{Sc=J+4|0;c[Sc>>2]=c[Sc>>2]&-34;c[J+128>>2]=0;g[J+132>>2]=1.0;J=c[J+12>>2]|0}while((J|0)!=0)}qa=z+28|0;pa=z+36|0;oa=z+32|0;na=s+4|0;ma=z+40|0;la=z+44|0;K=f+102994|0;ka=z+8|0;va=x+16|0;Ea=x+20|0;kb=x+24|0;Ba=x+44|0;Ca=x+48|0;jb=x+52|0;hb=x+28|0;ra=x+56|0;Gb=x+92|0;Fb=x+128|0;Eb=x+56|0;Db=x+60|0;Cb=x+64|0;Bb=x+68|0;Ab=x+72|0;zb=x+76|0;yb=x+80|0;nb=x+84|0;xb=x+88|0;wb=x+92|0;vb=x+96|0;ub=x+100|0;sb=x+104|0;rb=x+108|0;qb=x+112|0;pb=x+116|0;mb=x+120|0;ob=x+124|0;ib=p+4|0;fb=q+28|0;eb=q+88|0;db=q+56|0;cb=q+64|0;bb=q+68|0;ab=q+72|0;$a=q+80|0;_a=q+84|0;Za=r+16|0;Ya=o+4|0;Xa=o+8|0;Wa=o+12|0;Va=o+16|0;Ua=o+20|0;Ta=o+24|0;Sa=o+28|0;Ra=o+32|0;Qa=o+36|0;Pa=o+40|0;Oa=o+44|0;Na=o+48|0;Ma=o+52|0;La=o+56|0;Ka=o+60|0;Ja=o+64|0;Ia=o+68|0;Ha=o+72|0;Ga=o+76|0;Fa=o+80|0;Da=p+9|0;ya=o+92|0;xa=o+96|0;za=p+10|0;wa=o+84|0;ua=o+92|0;N=o+84|0;sa=o+88|0;ja=z+20|0;ia=z+24|0;ha=z+12|0;ga=x+24|0;fa=x+28|0;ea=x+40|0;da=x+4|0;ca=x+8|0;ba=x+12|0;aa=x+16|0;$=x+20|0;_=x+21|0;Z=x+32|0;Y=x+36|0;Hb=(j|0)>0;ta=y+40|0;L=y+32|0;W=y+36|0;X=y+48|0;V=y+24|0;U=p+8|0;T=p+12|0;P=q+8|0;l=q+12|0;J=r+8|0;S=r+16|0;h:while(1){Ib=c[F>>2]|0;if(!Ib){B=255;break}else{Kb=1.0;Jb=0}do{Lb=Ib+4|0;Ob=c[Lb>>2]|0;do if((Ob&4|0)!=0?(c[Ib+128>>2]|0)<=8:0){if(!(Ob&32)){ic=c[Ib+48>>2]|0;Ob=c[Ib+52>>2]|0;if(a[ic+38>>0]|0)break;if(a[Ob+38>>0]|0)break;sc=c[ic+8>>2]|0;uc=c[Ob+8>>2]|0;vc=c[sc>>2]|0;wc=c[uc>>2]|0;if(!((vc|0)==2|(wc|0)==2)){B=158;break h}tc=b[sc+4>>1]|0;xc=b[uc+4>>1]|0;if(!((tc&2)!=0&(vc|0)!=0|(xc&2)!=0&(wc|0)!=0))break;if(!((tc&8)!=0|(vc|0)!=2|((xc&8)!=0|(wc|0)!=2)))break;vc=sc+28|0;xc=sc+60|0;Nb=+g[xc>>2];tc=uc+28|0;wc=uc+60|0;Mb=+g[wc>>2];do if(Nb<Mb){if(!(Nb<1.0)){B=163;break h}Lc=(Mb-Nb)/(1.0-Nb);Rc=sc+36|0;Ic=+g[Rc>>2];Sc=sc+40|0;Jc=+g[Sc>>2];Mc=Lc*(+g[sc+48>>2]-Jc);g[Rc>>2]=Ic+Lc*(+g[sc+44>>2]-Ic);g[Sc>>2]=Jc+Mc;Sc=sc+52|0;Mc=+g[Sc>>2];g[Sc>>2]=Mc+Lc*(+g[sc+56>>2]-Mc);g[xc>>2]=Mb}else{if(!(Mb<Nb)){Mb=Nb;break}if(!(Mb<1.0)){B=167;break h}Mc=(Nb-Mb)/(1.0-Mb);Rc=uc+36|0;Jc=+g[Rc>>2];Sc=uc+40|0;Lc=+g[Sc>>2];Mb=Mc*(+g[uc+48>>2]-Lc);g[Rc>>2]=Jc+Mc*(+g[uc+44>>2]-Jc);g[Sc>>2]=Lc+Mb;Sc=uc+52|0;Mb=+g[Sc>>2];g[Sc>>2]=Mb+Mc*(+g[uc+56>>2]-Mb);g[wc>>2]=Nb;Mb=Nb}while(0);if(!(Mb<1.0)){B=170;break h}Sc=c[Ib+56>>2]|0;sc=c[Ib+60>>2]|0;c[va>>2]=0;c[Ea>>2]=0;g[kb>>2]=0.0;c[Ba>>2]=0;c[Ca>>2]=0;g[jb>>2]=0.0;Zw(x,c[ic+12>>2]|0,Sc);Zw(hb,c[Ob+12>>2]|0,sc);Ob=ra+0|0;ic=vc+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Ob=Gb+0|0;ic=tc+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));g[Fb>>2]=1.0;c[1664]=(c[1664]|0)+1;Sb=+g[Eb>>2];Rb=+g[Db>>2];Zb=+g[Cb>>2];_b=+g[Bb>>2];hc=+g[Ab>>2];gc=+g[zb>>2];ec=+g[yb>>2];ac=+g[xb>>2];Yb=+g[wb>>2];$b=+g[vb>>2];Qb=+g[ub>>2];dc=+g[sb>>2];fc=+g[rb>>2];Tb=+g[qb>>2];Ub=+g[pb>>2];Pb=+g[ob>>2];bc=+M(+(ec/6.2831854820251465))*6.2831854820251465;ec=ec-bc;bc=+g[nb>>2]-bc;Xb=+M(+(Ub/6.2831854820251465))*6.2831854820251465;Ub=Ub-Xb;Xb=+g[mb>>2]-Xb;cc=+g[kb>>2]+ +g[jb>>2]+-.014999999664723873;cc=cc<.004999999888241291?.004999999888241291:cc;if(!(cc>.0012499999720603228)){B=172;break h}b[ib>>1]=0;c[q+0>>2]=c[x+0>>2];c[q+4>>2]=c[x+4>>2];c[q+8>>2]=c[x+8>>2];c[q+12>>2]=c[x+12>>2];c[q+16>>2]=c[x+16>>2];c[q+20>>2]=c[x+20>>2];c[q+24>>2]=c[x+24>>2];c[fb+0>>2]=c[hb+0>>2];c[fb+4>>2]=c[hb+4>>2];c[fb+8>>2]=c[hb+8>>2];c[fb+12>>2]=c[hb+12>>2];c[fb+16>>2]=c[hb+16>>2];c[fb+20>>2]=c[hb+20>>2];c[fb+24>>2]=c[hb+24>>2];a[eb>>0]=0;Vb=cc+.0012499999720603228;Wb=cc+-.0012499999720603228;Ob=0;Nb=0.0;i:while(1){mc=1.0-Nb;kc=mc*ec+Nb*bc;jc=+R(+kc);kc=+Q(+kc);pc=mc*Zb+Nb*hc-(kc*Sb-jc*Rb);lc=mc*_b+Nb*gc-(jc*Sb+kc*Rb);oc=mc*Ub+Nb*Xb;nc=+R(+oc);oc=+Q(+oc);qc=mc*Qb+Nb*fc-(oc*Yb-nc*$b);mc=mc*dc+Nb*Tb-(nc*Yb+oc*$b);rc=+pc;Mc=+lc;Sc=db;g[Sc>>2]=rc;g[Sc+4>>2]=Mc;g[cb>>2]=jc;g[bb>>2]=kc;Mc=+qc;rc=+mc;Sc=ab;g[Sc>>2]=Mc;g[Sc+4>>2]=rc;g[$a>>2]=nc;g[_a>>2]=oc;_w(r,p,q);rc=+g[Za>>2];if(rc<=0.0){ic=2;Nb=0.0;break}if(rc<Vb){ic=3;break}c[o>>2]=x;c[Ya>>2]=hb;sc=c[ib>>2]|0;uc=sc&65535;ic=sc>>>16;vc=ic&255;sc=sc>>>24;tc=sc&255;if(!(uc<<16>>16!=0&(uc&65535)<3)){B=177;break h}g[Xa>>2]=Sb;g[Wa>>2]=Rb;g[Va>>2]=Zb;g[Ua>>2]=_b;g[Ta>>2]=hc;g[Sa>>2]=gc;g[Ra>>2]=ec;g[Qa>>2]=bc;g[Pa>>2]=ac;g[Oa>>2]=Yb;g[Na>>2]=$b;g[Ma>>2]=Qb;g[La>>2]=dc;g[Ka>>2]=fc;g[Ja>>2]=Tb;g[Ia>>2]=Ub;g[Ha>>2]=Xb;g[Ga>>2]=Pb;do if(uc<<16>>16!=1)if(vc<<24>>24==tc<<24>>24){c[Fa>>2]=2;uc=d[Da>>0]|0;sc=c[Ca>>2]|0;if((sc|0)<=(uc|0)){B=187;break h}tc=c[Ba>>2]|0;uc=tc+(uc<<3)|0;Cc=+g[uc>>2];rc=+g[uc+4>>2];uc=d[za>>0]|0;if((sc|0)<=(uc|0)){B=189;break h}Sc=tc+(uc<<3)|0;Fc=+g[Sc>>2];Dc=+g[Sc+4>>2];Jc=Fc-Cc;Ic=Dc-rc;Ec=-Jc;Lc=+Ic;Mc=+Ec;Sc=ya;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Jc=+O(+(Ic*Ic+Jc*Jc));if(!(Jc<1.1920928955078125e-7)){Mc=1.0/Jc;Ic=Ic*Mc;g[ya>>2]=Ic;Ec=Mc*Ec;g[xa>>2]=Ec}Cc=(Cc+Fc)*.5;rc=(rc+Dc)*.5;Lc=+Cc;Mc=+rc;Sc=wa;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;ic=ic&255;if((c[Ea>>2]|0)<=(ic|0)){B=193;break h}Sc=(c[va>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];if(!((oc*Ic-nc*Ec)*(pc+(kc*Lc-jc*Mc)-(qc+(oc*Cc-nc*rc)))+(nc*Ic+oc*Ec)*(lc+(jc*Lc+kc*Mc)-(mc+(nc*Cc+oc*rc)))<0.0)){Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=2;ic=1;jc=1.0;break}nc=+-Ic;Mc=+-Ec;sc=ya;g[sc>>2]=nc;g[sc+4>>2]=Mc;Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=2;ic=1;jc=1.0;break}else{c[Fa>>2]=1;uc=ic&255;ic=c[Ea>>2]|0;if((ic|0)<=(uc|0)){B=197;break h}tc=c[va>>2]|0;Sc=tc+(uc<<3)|0;Cc=+g[Sc>>2];rc=+g[Sc+4>>2];if((ic|0)<=(sc|0)){B=199;break h}Sc=tc+(sc<<3)|0;Ic=+g[Sc>>2];Dc=+g[Sc+4>>2];Jc=Ic-Cc;Fc=Dc-rc;Ec=-Jc;Lc=+Fc;Mc=+Ec;Sc=ya;g[Sc>>2]=Lc;g[Sc+4>>2]=Mc;Jc=+O(+(Fc*Fc+Jc*Jc));if(!(Jc<1.1920928955078125e-7)){Mc=1.0/Jc;Fc=Fc*Mc;g[ya>>2]=Fc;Ec=Mc*Ec;g[xa>>2]=Ec}Cc=(Cc+Ic)*.5;rc=(rc+Dc)*.5;Lc=+Cc;Mc=+rc;ic=wa;g[ic>>2]=Lc;g[ic+4>>2]=Mc;ic=d[Da>>0]|0;if((c[Ca>>2]|0)<=(ic|0)){B=203;break h}Sc=(c[Ba>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];if(!((kc*Fc-jc*Ec)*(qc+(oc*Lc-nc*Mc)-(pc+(kc*Cc-jc*rc)))+(jc*Fc+kc*Ec)*(mc+(nc*Lc+oc*Mc)-(lc+(jc*Cc+kc*rc)))<0.0)){Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=1;ic=1;jc=1.0;break}nc=+-Fc;Mc=+-Ec;sc=ya;g[sc>>2]=nc;g[sc+4>>2]=Mc;Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=1;ic=1;jc=1.0;break}else{c[Fa>>2]=0;ic=ic&255;if((c[Ea>>2]|0)<=(ic|0)){B=180;break h}ic=(c[va>>2]|0)+(ic<<3)|0;Cc=+g[ic>>2];rc=+g[ic+4>>2];ic=d[Da>>0]|0;if((c[Ca>>2]|0)<=(ic|0)){B=182;break h}Sc=(c[Ba>>2]|0)+(ic<<3)|0;Lc=+g[Sc>>2];Mc=+g[Sc+4>>2];pc=qc+(oc*Lc-nc*Mc)-(pc+(kc*Cc-jc*rc));jc=mc+(nc*Lc+oc*Mc)-(lc+(jc*Cc+kc*rc));Mc=+pc;kc=+jc;Sc=ya;g[Sc>>2]=Mc;g[Sc+4>>2]=kc;kc=+O(+(pc*pc+jc*jc));if(kc<1.1920928955078125e-7){Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=0;ic=1;jc=1.0;break}Mc=1.0/kc;g[ya>>2]=pc*Mc;g[xa>>2]=jc*Mc;Mc=Zb;nc=_b;mc=hc;Lc=gc;lc=ec;kc=bc;Jc=Sb;Ic=Rb;Fc=Qb;Dc=dc;qc=fc;Ec=Tb;oc=Ub;pc=Xb;Cc=Yb;rc=$b;sc=0;ic=1;jc=1.0}while(0);while(1){Tc=1.0-jc;kc=Tc*lc+kc*jc;lc=+R(+kc);kc=+Q(+kc);mc=Tc*Mc+mc*jc-(kc*Jc-lc*Ic);nc=Tc*nc+Lc*jc-(lc*Jc+kc*Ic);oc=Tc*oc+pc*jc;pc=+R(+oc);oc=+Q(+oc);qc=Tc*Fc+qc*jc-(oc*Cc-pc*rc);rc=Tc*Dc+Ec*jc-(pc*Cc+oc*rc);if(!sc){Cc=+g[ua>>2];Dc=+g[xa>>2];Jc=kc*Cc+lc*Dc;Ic=kc*Dc-lc*Cc;Fc=-Cc;Tc=-Dc;Ec=oc*Fc+pc*Tc;Fc=oc*Tc-pc*Fc;sc=c[o>>2]|0;tc=c[sc+16>>2]|0;sc=c[sc+20>>2]|0;if((sc|0)>1){uc=0;Lc=Ic*+g[tc+4>>2]+Jc*+g[tc>>2];wc=1;while(1){Mc=Jc*+g[tc+(wc<<3)>>2]+Ic*+g[tc+(wc<<3)+4>>2];vc=Mc>Lc;uc=vc?wc:uc;wc=wc+1|0;if((wc|0)==(sc|0))break;else Lc=vc?Mc:Lc}}else uc=0;vc=c[Ya>>2]|0;wc=c[vc+16>>2]|0;vc=c[vc+20>>2]|0;if((vc|0)>1){zc=0;Jc=Fc*+g[wc+4>>2]+Ec*+g[wc>>2];xc=1;while(1){Ic=Ec*+g[wc+(xc<<3)>>2]+Fc*+g[wc+(xc<<3)+4>>2];yc=Ic>Jc;zc=yc?xc:zc;xc=xc+1|0;if((xc|0)==(vc|0))break;else Jc=yc?Ic:Jc}}else zc=0;if(!((uc|0)>-1&(sc|0)>(uc|0))){B=214;break h}Sc=tc+(uc<<3)|0;Ec=+g[Sc>>2];Fc=+g[Sc+4>>2];if(!((zc|0)>-1&(vc|0)>(zc|0))){B=216;break h}Sc=wc+(zc<<3)|0;Mc=+g[Sc>>2];Tc=+g[Sc+4>>2];pc=Cc*(qc+(oc*Mc-pc*Tc)-(mc+(kc*Ec-lc*Fc)))+Dc*(rc+(pc*Mc+oc*Tc)-(nc+(lc*Ec+kc*Fc)))}else if((sc|0)==1){Tc=+g[ua>>2];Dc=+g[xa>>2];Cc=kc*Tc-lc*Dc;Dc=lc*Tc+kc*Dc;Tc=+g[N>>2];Fc=+g[sa>>2];mc=mc+(kc*Tc-lc*Fc);kc=nc+(lc*Tc+kc*Fc);Fc=-Cc;Tc=-Dc;Ec=oc*Fc+pc*Tc;Fc=oc*Tc-pc*Fc;sc=c[Ya>>2]|0;tc=c[sc+16>>2]|0;sc=c[sc+20>>2]|0;if((sc|0)>1){zc=0;lc=Fc*+g[tc+4>>2]+Ec*+g[tc>>2];uc=1;while(1){nc=Ec*+g[tc+(uc<<3)>>2]+Fc*+g[tc+(uc<<3)+4>>2];vc=nc>lc;zc=vc?uc:zc;uc=uc+1|0;if((uc|0)==(sc|0))break;else lc=vc?nc:lc}if((zc|0)<=-1){B=223;break h}}else zc=0;if((sc|0)<=(zc|0)){B=223;break h}uc=tc+(zc<<3)|0;Mc=+g[uc>>2];Tc=+g[uc+4>>2];pc=Cc*(qc+(oc*Mc-pc*Tc)-mc)+Dc*(rc+(pc*Mc+oc*Tc)-kc);uc=-1}else if((sc|0)==2){Mc=+g[ua>>2];Dc=+g[xa>>2];Cc=oc*Mc-pc*Dc;Dc=pc*Mc+oc*Dc;Mc=+g[N>>2];Tc=+g[sa>>2];qc=qc+(oc*Mc-pc*Tc);oc=rc+(pc*Mc+oc*Tc);rc=-Cc;Tc=-Dc;pc=kc*rc+lc*Tc;rc=kc*Tc-lc*rc;sc=c[o>>2]|0;tc=c[sc+16>>2]|0;sc=c[sc+20>>2]|0;if((sc|0)>1){uc=0;Ec=rc*+g[tc+4>>2]+pc*+g[tc>>2];vc=1;while(1){Fc=pc*+g[tc+(vc<<3)>>2]+rc*+g[tc+(vc<<3)+4>>2];wc=Fc>Ec;uc=wc?vc:uc;vc=vc+1|0;if((vc|0)==(sc|0))break;else Ec=wc?Fc:Ec}if((uc|0)<=-1){B=230;break h}}else uc=0;if((sc|0)<=(uc|0)){B=230;break h}zc=tc+(uc<<3)|0;Tc=+g[zc>>2];pc=+g[zc+4>>2];pc=Cc*(mc+(kc*Tc-lc*pc)-qc)+Dc*(nc+(lc*Tc+kc*pc)-oc);zc=-1}else{B=232;break h}if(pc>Vb){ic=4;Nb=1.0;B=246;break i}if(pc>Wb){Nb=jc;break}mc=+gx(o,uc,zc,Nb);if(mc<Wb){ic=1;B=246;break i}if(!(mc<=Vb)){kc=Nb;lc=jc;sc=0}else{ic=3;B=246;break i}while(1){if(!(sc&1))oc=(kc+lc)*.5;else oc=kc+(cc-mc)*(lc-kc)/(pc-mc);sc=sc+1|0;c[1670]=(c[1670]|0)+1;nc=+gx(o,uc,zc,oc);qc=nc-cc;if(!(qc>0.0))qc=-qc;if(qc<.0012499999720603228){jc=oc;break}tc=nc>cc;if((sc|0)==50)break;else{kc=tc?oc:kc;lc=tc?lc:oc;mc=tc?nc:mc;pc=tc?pc:nc}}Sc=c[1672]|0;c[1672]=(Sc|0)>(sc|0)?Sc:sc;if((ic|0)==8)break;Mc=+g[Va>>2];nc=+g[Ua>>2];mc=+g[Ta>>2];Lc=+g[Sa>>2];lc=+g[Ra>>2];kc=+g[Qa>>2];Jc=+g[Xa>>2];Ic=+g[Wa>>2];Fc=+g[Ma>>2];Dc=+g[La>>2];qc=+g[Ka>>2];Ec=+g[Ja>>2];oc=+g[Ia>>2];pc=+g[Ha>>2];Cc=+g[Oa>>2];rc=+g[Na>>2];sc=c[Fa>>2]|0;ic=ic+1|0}Ob=Ob+1|0;c[1666]=(c[1666]|0)+1;if((Ob|0)==20){Ob=20;ic=1;break}}if((B|0)==246){B=0;c[1666]=(c[1666]|0)+1;Ob=Ob+1|0}Sc=c[1668]|0;c[1668]=(Sc|0)>(Ob|0)?Sc:Ob;if((ic|0)==3){Mb=Mb+(1.0-Mb)*Nb;Mb=Mb<1.0?Mb:1.0}else Mb=1.0;g[Ib+132>>2]=Mb;c[Lb>>2]=c[Lb>>2]|32}else Mb=+g[Ib+132>>2];if(Mb<Kb){Kb=Mb;Jb=Ib}}while(0);Ib=c[Ib+12>>2]|0}while((Ib|0)!=0);if((Jb|0)==0|Kb>.9999988079071045){B=255;break}Lb=c[(c[Jb+48>>2]|0)+8>>2]|0;Ib=c[(c[Jb+52>>2]|0)+8>>2]|0;uc=Lb+28|0;Ob=t+0|0;ic=uc+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));tc=Ib+28|0;Ob=u+0|0;ic=tc+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Ob=Lb+60|0;Mb=+g[Ob>>2];if(!(Mb<1.0)){B=257;break}Jc=(Kb-Mb)/(1.0-Mb);wc=Lb+44|0;Sc=Lb+36|0;Mb=+g[Sc>>2];xc=Lb+48|0;vc=Lb+40|0;Lc=+g[vc>>2];Mc=Jc*(+g[xc>>2]-Lc);g[Sc>>2]=Mb+Jc*(+g[wc>>2]-Mb);g[vc>>2]=Lc+Mc;vc=Lb+56|0;Sc=Lb+52|0;Mc=+g[Sc>>2];Mc=Mc+Jc*(+g[vc>>2]-Mc);g[Sc>>2]=Mc;g[Ob>>2]=Kb;Ob=Lb+36|0;Sc=c[Ob>>2]|0;Ob=c[Ob+4>>2]|0;yc=Lb+44|0;c[yc>>2]=Sc;c[yc+4>>2]=Ob;g[vc>>2]=Mc;Jc=+R(+Mc);yc=Lb+20|0;g[yc>>2]=Jc;Mc=+Q(+Mc);Ac=Lb+24|0;g[Ac>>2]=Mc;Gc=Lb+12|0;Bc=Lb+28|0;Lc=+g[Bc>>2];zc=Lb+32|0;Mb=+g[zc>>2];Tc=(c[k>>2]=Sc,+g[k>>2])-(Mc*Lc-Jc*Mb);Mb=(c[k>>2]=Ob,+g[k>>2])-(Jc*Lc+Mc*Mb);Tc=+Tc;Mb=+Mb;Ob=Gc;g[Ob>>2]=Tc;g[Ob+4>>2]=Mb;Ob=Ib+60|0;Mb=+g[Ob>>2];if(!(Mb<1.0)){B=259;break}Ic=(Kb-Mb)/(1.0-Mb);Kc=Ib+44|0;ic=Ib+36|0;Tc=+g[ic>>2];Hc=Ib+48|0;Nc=Ib+40|0;Jc=+g[Nc>>2];Lc=Ic*(+g[Hc>>2]-Jc);g[ic>>2]=Tc+Ic*(+g[Kc>>2]-Tc);g[Nc>>2]=Jc+Lc;Nc=Ib+56|0;ic=Ib+52|0;Lc=+g[ic>>2];Lc=Lc+Ic*(+g[Nc>>2]-Lc);g[ic>>2]=Lc;g[Ob>>2]=Kb;Ob=Ib+36|0;ic=c[Ob>>2]|0;Ob=c[Ob+4>>2]|0;Oc=Ib+44|0;c[Oc>>2]=ic;c[Oc+4>>2]=Ob;g[Nc>>2]=Lc;Ic=+R(+Lc);Oc=Ib+20|0;g[Oc>>2]=Ic;Lc=+Q(+Lc);Pc=Ib+24|0;g[Pc>>2]=Lc;Sc=Ib+12|0;Qc=Ib+28|0;Jc=+g[Qc>>2];Rc=Ib+32|0;Tc=+g[Rc>>2];Mc=(c[k>>2]=ic,+g[k>>2])-(Lc*Jc-Ic*Tc);Tc=(c[k>>2]=Ob,+g[k>>2])-(Ic*Jc+Lc*Tc);Mc=+Mc;Tc=+Tc;Ob=Sc;g[Ob>>2]=Mc;g[Ob+4>>2]=Tc;Qy(Jb,c[I>>2]|0);Ob=Jb+4|0;ic=c[Ob>>2]|0;c[Ob>>2]=ic&-33;sc=Jb+128|0;c[sc>>2]=(c[sc>>2]|0)+1;if((ic&6|0)!=6){c[Ob>>2]=ic&-37;Ob=uc+0|0;ic=t+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Ob=tc+0|0;ic=u+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Jc=+g[vc>>2];Mc=+R(+Jc);g[yc>>2]=Mc;Jc=+Q(+Jc);g[Ac>>2]=Jc;Tc=+g[Bc>>2];Lc=+g[zc>>2];Ic=+(+g[wc>>2]-(Jc*Tc-Mc*Lc));Lc=+(+g[xc>>2]-(Mc*Tc+Jc*Lc));g[Gc>>2]=Ic;g[Gc+4>>2]=Lc;Lc=+g[Nc>>2];Ic=+R(+Lc);g[Oc>>2]=Ic;Lc=+Q(+Lc);g[Pc>>2]=Lc;Jc=+g[Qc>>2];Tc=+g[Rc>>2];Mc=+(+g[Kc>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[Hc>>2]-(Ic*Jc+Lc*Tc));g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;continue}ic=Lb+4|0;sc=e[ic>>1]|0;if(!(sc&2)){b[ic>>1]=sc|2;g[Lb+144>>2]=0.0}tc=Ib+4|0;sc=e[tc>>1]|0;if(!(sc&2)){b[tc>>1]=sc|2;g[Ib+144>>2]=0.0}c[qa>>2]=0;c[pa>>2]=0;c[oa>>2]=0;wy(z,Lb);wy(z,Ib);xy(z,Jb);b[ic>>1]=e[ic>>1]|1;b[tc>>1]=e[tc>>1]|1;c[Ob>>2]=c[Ob>>2]|1;c[s>>2]=Lb;c[na>>2]=Ib;Ob=Lb;Jb=1;while(1){j:do if((c[Ob>>2]|0)==2?(A=c[Ob+112>>2]|0,(A|0)!=0):0){vc=Ob+4|0;uc=A;do{if((c[qa>>2]|0)==(c[ma>>2]|0))break j;if((c[pa>>2]|0)==(c[la>>2]|0))break j;yc=c[uc+4>>2]|0;xc=yc+4|0;k:do if(!(c[xc>>2]&1)){tc=c[uc>>2]|0;do if((c[tc>>2]|0)==2){if(b[vc>>1]&8)break;if(!(b[tc+4>>1]&8))break k}while(0);if(a[(c[yc+48>>2]|0)+38>>0]|0)break;if(a[(c[yc+52>>2]|0)+38>>0]|0)break;wc=tc+28|0;Ob=v+0|0;ic=wc+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Ob=tc+4|0;if(!(b[Ob>>1]&1)){ic=tc+60|0;Mb=+g[ic>>2];if(!(Mb<1.0)){B=280;break h}Ic=(Kb-Mb)/(1.0-Mb);Sc=tc+36|0;Tc=+g[Sc>>2];Qc=tc+40|0;Jc=+g[Qc>>2];Lc=Ic*(+g[tc+48>>2]-Jc);g[Sc>>2]=Tc+Ic*(+g[tc+44>>2]-Tc);g[Qc>>2]=Jc+Lc;Qc=tc+56|0;Sc=tc+52|0;Lc=+g[Sc>>2];Lc=Lc+Ic*(+g[Qc>>2]-Lc);g[Sc>>2]=Lc;g[ic>>2]=Kb;Sc=tc+36|0;Rc=c[Sc>>2]|0;Sc=c[Sc+4>>2]|0;Pc=tc+44|0;c[Pc>>2]=Rc;c[Pc+4>>2]=Sc;g[Qc>>2]=Lc;Ic=+R(+Lc);g[tc+20>>2]=Ic;Lc=+Q(+Lc);g[tc+24>>2]=Lc;Jc=+g[tc+28>>2];Tc=+g[tc+32>>2];Mc=(c[k>>2]=Rc,+g[k>>2])-(Lc*Jc-Ic*Tc);Tc=(c[k>>2]=Sc,+g[k>>2])-(Ic*Jc+Lc*Tc);Mc=+Mc;Tc=+Tc;Sc=tc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc}Qy(yc,c[I>>2]|0);ic=c[xc>>2]|0;if(!(ic&4)){Ob=wc+0|0;ic=v+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Lc=+g[tc+56>>2];Ic=+R(+Lc);g[tc+20>>2]=Ic;Lc=+Q(+Lc);g[tc+24>>2]=Lc;Jc=+g[tc+28>>2];Tc=+g[tc+32>>2];Mc=+(+g[tc+44>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[tc+48>>2]-(Ic*Jc+Lc*Tc));Sc=tc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;break}if(!(ic&2)){Ob=wc+0|0;ic=v+0|0;sc=Ob+36|0;do{c[Ob>>2]=c[ic>>2];Ob=Ob+4|0;ic=ic+4|0}while((Ob|0)<(sc|0));Lc=+g[tc+56>>2];Ic=+R(+Lc);g[tc+20>>2]=Ic;Lc=+Q(+Lc);g[tc+24>>2]=Lc;Jc=+g[tc+28>>2];Tc=+g[tc+32>>2];Mc=+(+g[tc+44>>2]-(Lc*Jc-Ic*Tc));Tc=+(+g[tc+48>>2]-(Ic*Jc+Lc*Tc));Sc=tc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;break}c[xc>>2]=ic|1;xy(z,yc);ic=e[Ob>>1]|0;if(ic&1)break;b[Ob>>1]=ic|1;do if(c[tc>>2]|0){if(ic&2)break;b[Ob>>1]=ic|3;g[tc+144>>2]=0.0}while(0);wy(z,tc)}while(0);uc=c[uc+12>>2]|0}while((uc|0)!=0)}while(0);if((Jb|0)>=2)break;Ob=c[s+(Jb<<2)>>2]|0;Jb=Jb+1|0}Kb=(1.0-Kb)*h;Mb=1.0/Kb;Jb=c[Lb+8>>2]|0;Lb=c[Ib+8>>2]|0;uc=c[qa>>2]|0;if((uc|0)<=(Jb|0)){B=295;break}if((uc|0)<=(Lb|0)){B=300;break}Ib=(uc|0)>0;if(Ib){sc=c[ka>>2]|0;ic=c[ja>>2]|0;Ob=c[ia>>2]|0;tc=0;do{Sc=c[sc+(tc<<2)>>2]|0;Rc=Sc+44|0;Qc=c[Rc+4>>2]|0;Pc=ic+(tc*12|0)|0;c[Pc>>2]=c[Rc>>2];c[Pc+4>>2]=Qc;g[ic+(tc*12|0)+8>>2]=+g[Sc+56>>2];Pc=Sc+64|0;Qc=c[Pc+4>>2]|0;Rc=Ob+(tc*12|0)|0;c[Rc>>2]=c[Pc>>2];c[Rc+4>>2]=Qc;g[Ob+(tc*12|0)+8>>2]=+g[Sc+72>>2];tc=tc+1|0}while((tc|0)<(uc|0))}else{ic=c[ja>>2]|0;Ob=c[ia>>2]|0}c[ga>>2]=c[ha>>2];c[fa>>2]=c[pa>>2];c[ea>>2]=c[z>>2];g[x>>2]=Kb;g[da>>2]=Mb;g[ca>>2]=1.0;c[ba>>2]=j;c[aa>>2]=20;a[$>>0]=0;a[_+0>>0]=a[w+0>>0]|0;a[_+1>>0]=a[w+1>>0]|0;a[_+2>>0]=a[w+2>>0]|0;c[Z>>2]=ic;c[Y>>2]=Ob;Ry(y,x);uc=c[X>>2]|0;tc=(uc|0)>0;vc=c[W>>2]|0;wc=c[V>>2]|0;sc=0;do{if(tc){xc=0;Wb=0.0;do{Hc=vc+(xc*88|0)|0;zc=c[vc+(xc*88|0)+32>>2]|0;Bc=c[vc+(xc*88|0)+36>>2]|0;Gc=vc+(xc*88|0)+48|0;Qb=+g[Gc>>2];Ub=+g[Gc+4>>2];Gc=vc+(xc*88|0)+56|0;Tb=+g[Gc>>2];Sb=+g[Gc+4>>2];Gc=c[vc+(xc*88|0)+84>>2]|0;if((zc|0)==(Jb|0)|(zc|0)==(Lb|0)){Mb=+g[vc+(xc*88|0)+64>>2];Rb=+g[vc+(xc*88|0)+40>>2]}else{Mb=0.0;Rb=0.0}if((Bc|0)==(Jb|0)|(Bc|0)==(Lb|0)){Nb=+g[vc+(xc*88|0)+68>>2];Pb=+g[vc+(xc*88|0)+44>>2]}else{Nb=0.0;Pb=0.0}yc=wc+(zc*12|0)|0;Ac=yc;Xb=+g[Ac>>2];Yb=+g[Ac+4>>2];Ac=wc+(zc*12|0)+8|0;cc=+g[Ac>>2];zc=wc+(Bc*12|0)|0;Sc=zc;Zb=+g[Sc>>2];_b=+g[Sc+4>>2];Bc=wc+(Bc*12|0)+8|0;$b=+g[Bc>>2];if((Gc|0)>0){Vb=Rb+Pb;Kc=0;do{fc=+R(+cc);g[U>>2]=fc;hc=+Q(+cc);g[T>>2]=hc;gc=+R(+$b);g[P>>2]=gc;bc=+Q(+$b);g[l>>2]=bc;ac=+(Xb-(Qb*hc-Ub*fc));fc=+(Yb-(Ub*hc+Qb*fc));Sc=p;g[Sc>>2]=ac;g[Sc+4>>2]=fc;fc=+(Zb-(Tb*bc-Sb*gc));gc=+(_b-(Sb*bc+Tb*gc));Sc=q;g[Sc>>2]=fc;g[Sc+4>>2]=gc;Uy(r,Hc,p,q,Kc);Sc=r;gc=+g[Sc>>2];fc=+g[Sc+4>>2];Sc=J;bc=+g[Sc>>2];ac=+g[Sc+4>>2];hc=+g[S>>2];dc=bc-Xb;ec=ac-Yb;bc=bc-Zb;ac=ac-_b;Wb=Wb<hc?Wb:hc;hc=(hc+.004999999888241291)*.75;hc=hc<0.0?hc:0.0;jc=fc*dc-gc*ec;Tc=fc*bc-gc*ac;jc=Tc*Nb*Tc+(Vb+jc*Mb*jc);if(jc>0.0)hc=-(hc<-.20000000298023224?-.20000000298023224:hc)/jc;else hc=0.0;Tc=gc*hc;Mc=fc*hc;Xb=Xb-Rb*Tc;Yb=Yb-Rb*Mc;cc=cc-Mb*(dc*Mc-ec*Tc);Zb=Zb+Pb*Tc;_b=_b+Pb*Mc;$b=$b+Nb*(bc*Mc-ac*Tc);Kc=Kc+1|0}while((Kc|0)!=(Gc|0))}Tc=+Xb;Mc=+Yb;Sc=yc;g[Sc>>2]=Tc;g[Sc+4>>2]=Mc;g[Ac>>2]=cc;Mc=+Zb;Tc=+_b;Sc=zc;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;g[Bc>>2]=$b;xc=xc+1|0}while((xc|0)<(uc|0))}else Wb=0.0;sc=sc+1|0}while(!(Wb>=-.007499999832361937)&(sc|0)<20);Sc=c[ka>>2]|0;Pc=Sc+(Jb<<2)|0;Oc=ic+(Jb*12|0)|0;Rc=c[Oc+4>>2]|0;Qc=(c[Pc>>2]|0)+36|0;c[Qc>>2]=c[Oc>>2];c[Qc+4>>2]=Rc;g[(c[Pc>>2]|0)+52>>2]=+g[ic+(Jb*12|0)+8>>2];Sc=Sc+(Lb<<2)|0;Pc=ic+(Lb*12|0)|0;Qc=c[Pc+4>>2]|0;Rc=(c[Sc>>2]|0)+36|0;c[Rc>>2]=c[Pc>>2];c[Rc+4>>2]=Qc;g[(c[Sc>>2]|0)+52>>2]=+g[ic+(Lb*12|0)+8>>2];Sy(y);if(Hb){Jb=0;do{Ty(y);Jb=Jb+1|0}while((Jb|0)<(j|0))}if(Ib){Jb=0;do{Ib=ic+(Jb*12|0)|0;Sc=Ib;Nb=+g[Sc>>2];Mb=+g[Sc+4>>2];Pb=+g[ic+(Jb*12|0)+8>>2];Sc=Ob+(Jb*12|0)|0;Qb=+g[Sc>>2];Rb=+g[Sc+4>>2];Sb=+g[Ob+(Jb*12|0)+8>>2];Tc=Kb*Qb;Tb=Kb*Rb;Tb=Tc*Tc+Tb*Tb;if(Tb>4.0){Tc=2.0/+O(+Tb);Qb=Qb*Tc;Rb=Rb*Tc}Tb=Kb*Sb;if(Tb*Tb>2.4674012660980225){if(!(Tb>0.0))Tb=-Tb;Sb=Sb*(1.5707963705062866/Tb)}Mc=Nb+Kb*Qb;Fc=Mb+Kb*Rb;Lc=Pb+Kb*Sb;Ec=+Mc;Tc=+Fc;ic=Ib;g[ic>>2]=Ec;g[ic+4>>2]=Tc;ic=c[ja>>2]|0;g[ic+(Jb*12|0)+8>>2]=Lc;Ob=c[ia>>2]|0;Jc=+Qb;Ic=+Rb;Sc=Ob+(Jb*12|0)|0;g[Sc>>2]=Jc;g[Sc+4>>2]=Ic;g[Ob+(Jb*12|0)+8>>2]=Sb;Sc=c[(c[ka>>2]|0)+(Jb<<2)>>2]|0;Rc=Sc+44|0;g[Rc>>2]=Ec;g[Rc+4>>2]=Tc;g[Sc+56>>2]=Lc;Rc=Sc+64|0;g[Rc>>2]=Jc;g[Rc+4>>2]=Ic;g[Sc+72>>2]=Sb;Ic=+R(+Lc);g[Sc+20>>2]=Ic;Lc=+Q(+Lc);g[Sc+24>>2]=Lc;Jc=+g[Sc+28>>2];Tc=+g[Sc+32>>2];Mc=+(Mc-(Lc*Jc-Ic*Tc));Tc=+(Fc-(Ic*Jc+Lc*Tc));Sc=Sc+12|0;g[Sc>>2]=Mc;g[Sc+4>>2]=Tc;Jb=Jb+1|0}while((Jb|0)<(c[qa>>2]|0))}Sc=c[ta>>2]|0;uy(z,Sc);Lb=c[L>>2]|0;Rx(Lb,Sc);Rx(Lb,c[W>>2]|0);Lb=c[qa>>2]|0;if((Lb|0)>0){Ib=c[ka>>2]|0;Jb=0;do{Ob=c[Ib+(Jb<<2)>>2]|0;Sc=Ob+4|0;b[Sc>>1]=e[Sc>>1]&65534;do if((c[Ob>>2]|0)==2){Tx(Ob);Ob=c[Ob+112>>2]|0;if(!Ob)break;do{Sc=(c[Ob+4>>2]|0)+4|0;c[Sc>>2]=c[Sc>>2]&-34;Ob=c[Ob+12>>2]|0}while((Ob|0)!=0)}while(0);Jb=Jb+1|0}while((Jb|0)<(Lb|0))}_x(E);if(a[K>>0]|0){B=332;break}}switch(B|0){case 158:{Aa(11752,11552,641,11808);break};case 163:{Aa(11824,12336,704,12376);break};case 167:{Aa(11824,12336,704,12376);break};case 170:{Aa(11824,11552,676,11808);break};case 172:{Aa(6696,6720,279,6768);break};case 177:{Aa(6920,6720,52,16752);break};case 180:{Aa(6800,6832,103,6880);break};case 182:{Aa(6800,6832,103,6880);break};case 187:{Aa(6800,6832,103,6880);break};case 189:{Aa(6800,6832,103,6880);break};case 193:{Aa(6800,6832,103,6880);break};case 197:{Aa(6800,6832,103,6880);break};case 199:{Aa(6800,6832,103,6880);break};case 203:{Aa(6800,6832,103,6880);break};case 214:{Aa(6800,6832,103,6880);break};case 216:{Aa(6800,6832,103,6880);break};case 223:{Aa(6800,6832,103,6880);break};case 230:{Aa(6800,6832,103,6880);break};case 232:{Aa(15688,6720,186,6896);break};case 255:{a[H>>0]=1;break};case 257:{Aa(11824,12336,704,12376);break};case 259:{Aa(11824,12336,704,12376);break};case 280:{Aa(11824,12336,704,12376);break};case 295:{Aa(11432,11456,386,11808);break};case 300:{Aa(11504,11456,387,11808);break};case 332:{a[H>>0]=0;break}}ty(z);g[f+103024>>2]=0.0;B=334}}else B=334;if((B|0)==334?C:0)g[G>>2]=D;o=c[n>>2]|0;if(!(o&4)){Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}p=c[f+102952>>2]|0;if(!p){Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}do{g[p+76>>2]=0.0;g[p+80>>2]=0.0;g[p+84>>2]=0.0;p=c[p+96>>2]|0}while((p|0)!=0);Sc=o&-3;c[n>>2]=Sc;Sc=f+102996|0;g[Sc>>2]=0.0;i=m;return}function zy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0;f=i;i=i+112|0;o=f+16|0;n=f+88|0;m=f+96|0;l=f+104|0;h=f+8|0;j=f;k=f+24|0;t=c[b+4>>2]|0;if((t|0)==3){k=c[b+16>>2]|0;m=c[b+12>>2]|0;b=d+12|0;p=+g[b>>2];v=+g[m>>2];o=d+8|0;q=+g[o>>2];u=+g[m+4>>2];s=+g[d>>2];n=d+4|0;r=+g[n>>2];g[h>>2]=s+(p*v-q*u);g[h+4>>2]=v*q+p*u+r;if((k|0)<=1){i=f;return}l=j+4|0;a=a+102984|0;t=1;while(1){u=+g[m+(t<<3)>>2];v=+g[m+(t<<3)+4>>2];g[j>>2]=s+(p*u-q*v);g[l>>2]=u*q+p*v+r;y=c[a>>2]|0;vb[c[(c[y>>2]|0)+24>>2]&63](y,h,j,e);y=c[a>>2]|0;ob[c[(c[y>>2]|0)+16>>2]&63](y,h,.05000000074505806,e);y=j;x=c[y+4>>2]|0;w=h;c[w>>2]=c[y>>2];c[w+4>>2]=x;t=t+1|0;if((t|0)==(k|0))break;p=+g[b>>2];q=+g[o>>2];s=+g[d>>2];r=+g[n>>2]}i=f;return}else if(!t){u=+g[d+12>>2];q=+g[b+12>>2];s=+g[d+8>>2];r=+g[b+16>>2];v=q*s+u*r+ +g[d+4>>2];g[o>>2]=+g[d>>2]+(u*q-s*r);g[o+4>>2]=v;v=+g[b+8>>2];g[n>>2]=u-s*0.0;g[n+4>>2]=s+u*0.0;y=c[a+102984>>2]|0;mb[c[(c[y>>2]|0)+20>>2]&63](y,o,v,n,e);i=f;return}else if((t|0)==2){h=c[b+148>>2]|0;if((h|0)>=9)Aa(11840,11552,1077,11864);if((h|0)>0){j=b+20|0;q=+g[d+12>>2];r=+g[d+8>>2];p=+g[d>>2];s=+g[d+4>>2];d=0;do{z=+g[j+(d<<3)>>2];v=+g[j+(d<<3)+4>>2];u=+(p+(q*z-r*v));v=+(z*r+q*v+s);y=k+(d<<3)|0;g[y>>2]=u;g[y+4>>2]=v;d=d+1|0}while((d|0)!=(h|0))}y=c[a+102984>>2]|0;vb[c[(c[y>>2]|0)+12>>2]&63](y,k,h,e);i=f;return}else if((t|0)==1){u=+g[d+12>>2];v=+g[b+12>>2];s=+g[d+8>>2];r=+g[b+16>>2];q=+g[d>>2];z=+g[d+4>>2];g[m>>2]=q+(u*v-s*r);g[m+4>>2]=v*s+u*r+z;y=b+20|0;r=+g[y>>2];v=+g[y+4>>2];g[l>>2]=q+(u*r-s*v);g[l+4>>2]=r*s+u*v+z;y=c[a+102984>>2]|0;vb[c[(c[y>>2]|0)+24>>2]&63](y,m,l,e);i=f;return}else{i=f;return}}function Ay(a,c,d){a=a|0;c=c|0;d=d|0;var e=0;a=i;e=b[c+36>>1]|0;if(!(e<<16>>16==0?1:e<<16>>16!=(b[d+36>>1]|0))){e=e<<16>>16>0;i=a;return e|0}if(!((b[d+32>>1]&b[c+34>>1])<<16>>16)){e=0;i=a;return e|0}e=(b[d+34>>1]&b[c+32>>1])<<16>>16!=0;i=a;return e|0}function By(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;h=i;f=Jx(f,148)|0;if(!f){j=0;i=h;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=b;c[f+60>>2]=e;c[f+124>>2]=0;c[f+128>>2]=0;e=a+16|0;j=f+8|0;b=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(b|0));g[f+136>>2]=+O(+(+g[e>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=12600;if((c[(c[a+12>>2]|0)+4>>2]|0)!=3)Aa(12808,12616,42,12688);if(!(c[(c[d+12>>2]|0)+4>>2]|0)){j=f;i=h;return j|0}else Aa(14416,12616,43,12688);return 0}function Cy(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function Dy(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;i=i+48|0;j=h;k=c[(c[a+48>>2]|0)+12>>2]|0;c[j>>2]=7472;c[j+4>>2]=1;g[j+8>>2]=.009999999776482582;l=j+28|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;b[l+16>>1]=0;mx(k,j,c[a+56>>2]|0);Vw(d,j,e,c[(c[a+52>>2]|0)+12>>2]|0,f);i=h;return}function Ey(a){a=a|0;return}function Fy(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Gy(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;h=i;f=Jx(f,148)|0;if(!f){j=0;i=h;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=b;c[f+60>>2]=e;c[f+124>>2]=0;c[f+128>>2]=0;e=a+16|0;j=f+8|0;b=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(b|0));g[f+136>>2]=+O(+(+g[e>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=12792;if((c[(c[a+12>>2]|0)+4>>2]|0)!=3)Aa(12808,12856,42,12928);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=h;return j|0}else Aa(14672,12856,43,12928);return 0}function Hy(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function Iy(a,d,e,f){a=a|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;i=i+48|0;j=h;k=c[(c[a+48>>2]|0)+12>>2]|0;c[j>>2]=7472;c[j+4>>2]=1;g[j+8>>2]=.009999999776482582;l=j+28|0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;b[l+16>>1]=0;mx(k,j,c[a+56>>2]|0);Ww(d,j,e,c[(c[a+52>>2]|0)+12>>2]|0,f);i=h;return}function Jy(a){a=a|0;return}function Ky(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Ly(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=Jx(f,148)|0;if(!f){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=13016;if(c[(c[a+12>>2]|0)+4>>2]|0)Aa(13032,13080,43,13144);if(!(c[(c[d+12>>2]|0)+4>>2]|0)){j=f;i=b;return j|0}else Aa(14416,13080,44,13144);return 0}function My(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function Ny(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0;f=i;o=c[(c[a+48>>2]|0)+12>>2]|0;n=c[(c[a+52>>2]|0)+12>>2]|0;h=b+60|0;c[h>>2]=0;a=o+12|0;k=+g[d+12>>2];q=+g[a>>2];p=+g[d+8>>2];l=+g[o+16>>2];j=n+12|0;s=+g[e+12>>2];u=+g[j>>2];t=+g[e+8>>2];r=+g[n+16>>2];m=+g[e>>2]+(s*u-t*r)-(+g[d>>2]+(k*q-p*l));l=u*t+s*r+ +g[e+4>>2]-(q*p+k*l+ +g[d+4>>2]);k=+g[o+8>>2]+ +g[n+8>>2];if(m*m+l*l>k*k){i=f;return}c[b+56>>2]=0;o=c[a+4>>2]|0;n=b+48|0;c[n>>2]=c[a>>2];c[n+4>>2]=o;g[b+40>>2]=0.0;g[b+44>>2]=0.0;c[h>>2]=1;n=c[j+4>>2]|0;o=b;c[o>>2]=c[j>>2];c[o+4>>2]=n;c[b+16>>2]=0;i=f;return}function Oy(a){a=a|0;return}function Py(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Qy(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0;j=i;i=i+192|0;q=j+100|0;s=j+88|0;p=j+64|0;h=j;r=d+64|0;k=h+0|0;m=r+0|0;l=k+64|0;do{c[k>>2]=c[m>>2];k=k+4|0;m=m+4|0}while((k|0)<(l|0));l=d+4|0;o=c[l>>2]|0;c[l>>2]=o|4;o=o>>>1;t=c[d+48>>2]|0;u=c[d+52>>2]|0;k=(a[u+38>>0]|a[t+38>>0])<<24>>24!=0;n=c[t+8>>2]|0;m=c[u+8>>2]|0;v=n+12|0;w=m+12|0;if(!k){vb[c[c[d>>2]>>2]&63](d,r,v,w);u=d+124|0;p=(c[u>>2]|0)>0;if(p){w=c[h+60>>2]|0;x=(w|0)>0;t=0;do{s=d+(t*20|0)+72|0;g[s>>2]=0.0;r=d+(t*20|0)+76|0;g[r>>2]=0.0;q=c[d+(t*20|0)+80>>2]|0;a:do if(x){y=0;while(1){v=y+1|0;if((c[h+(y*20|0)+16>>2]|0)==(q|0))break;if((v|0)<(w|0))y=v;else break a}g[s>>2]=+g[h+(y*20|0)+8>>2];g[r>>2]=+g[h+(y*20|0)+12>>2]}while(0);t=t+1|0}while((t|0)<(c[u>>2]|0))}o=o&1;if(p^(o|0)!=0){r=n+4|0;q=e[r>>1]|0;if(!(q&2)){b[r>>1]=q|2;g[n+144>>2]=0.0}q=m+4|0;n=e[q>>1]|0;if(!(n&2)){b[q>>1]=n|2;g[m+144>>2]=0.0}}}else{t=c[t+12>>2]|0;x=c[u+12>>2]|0;u=c[d+56>>2]|0;y=c[d+60>>2]|0;c[q+16>>2]=0;c[q+20>>2]=0;g[q+24>>2]=0.0;c[q+44>>2]=0;c[q+48>>2]=0;g[q+52>>2]=0.0;Zw(q,t,u);Zw(q+28|0,x,y);y=q+56|0;c[y+0>>2]=c[v+0>>2];c[y+4>>2]=c[v+4>>2];c[y+8>>2]=c[v+8>>2];c[y+12>>2]=c[v+12>>2];y=q+72|0;c[y+0>>2]=c[w+0>>2];c[y+4>>2]=c[w+4>>2];c[y+8>>2]=c[w+8>>2];c[y+12>>2]=c[w+12>>2];a[q+88>>0]=1;b[s+4>>1]=0;_w(p,s,q);p=+g[p+16>>2]<11920928955078125.0e-22;c[d+124>>2]=0;o=o&1}m=c[l>>2]|0;c[l>>2]=p?m|2:m&-3;l=(o|0)==0;m=p^1;n=(f|0)==0;if(!(l^1|m|n))lb[c[(c[f>>2]|0)+8>>2]&127](f,d);if(!(l|p|n))lb[c[(c[f>>2]|0)+12>>2]&127](f,d);if(k|m|n){i=j;return}pb[c[(c[f>>2]|0)+16>>2]&63](f,d,h);i=j;return}function Ry(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0;e=i;c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];c[b+12>>2]=c[d+12>>2];c[b+16>>2]=c[d+16>>2];c[b+20>>2]=c[d+20>>2];r=c[d+40>>2]|0;m=b+32|0;c[m>>2]=r;f=c[d+28>>2]|0;j=b+48|0;c[j>>2]=f;h=b+36|0;c[h>>2]=Qx(r,f*88|0)|0;f=b+40|0;c[f>>2]=Qx(c[m>>2]|0,(c[j>>2]|0)*156|0)|0;c[b+24>>2]=c[d+32>>2];c[b+28>>2]=c[d+36>>2];m=c[d+24>>2]|0;d=b+44|0;c[d>>2]=m;if((c[j>>2]|0)<=0){i=e;return}k=b+20|0;b=b+8|0;l=0;while(1){n=c[m+(l<<2)>>2]|0;o=c[n+48>>2]|0;p=c[n+52>>2]|0;r=c[o+8>>2]|0;q=c[p+8>>2]|0;m=c[n+124>>2]|0;if((m|0)<=0){f=4;break}s=+g[(c[p+12>>2]|0)+8>>2];t=+g[(c[o+12>>2]|0)+8>>2];p=c[f>>2]|0;g[p+(l*156|0)+136>>2]=+g[n+136>>2];g[p+(l*156|0)+140>>2]=+g[n+140>>2];g[p+(l*156|0)+144>>2]=+g[n+144>>2];z=r+8|0;c[p+(l*156|0)+112>>2]=c[z>>2];y=q+8|0;c[p+(l*156|0)+116>>2]=c[y>>2];w=r+120|0;g[p+(l*156|0)+120>>2]=+g[w>>2];x=q+120|0;g[p+(l*156|0)+124>>2]=+g[x>>2];v=r+128|0;g[p+(l*156|0)+128>>2]=+g[v>>2];u=q+128|0;g[p+(l*156|0)+132>>2]=+g[u>>2];c[p+(l*156|0)+152>>2]=l;c[p+(l*156|0)+148>>2]=m;o=p+(l*156|0)+80|0;c[o+0>>2]=0;c[o+4>>2]=0;c[o+8>>2]=0;c[o+12>>2]=0;c[o+16>>2]=0;c[o+20>>2]=0;c[o+24>>2]=0;c[o+28>>2]=0;o=c[h>>2]|0;c[o+(l*88|0)+32>>2]=c[z>>2];c[o+(l*88|0)+36>>2]=c[y>>2];g[o+(l*88|0)+40>>2]=+g[w>>2];g[o+(l*88|0)+44>>2]=+g[x>>2];x=r+28|0;r=c[x+4>>2]|0;w=o+(l*88|0)+48|0;c[w>>2]=c[x>>2];c[w+4>>2]=r;w=q+28|0;r=c[w+4>>2]|0;q=o+(l*88|0)+56|0;c[q>>2]=c[w>>2];c[q+4>>2]=r;g[o+(l*88|0)+64>>2]=+g[v>>2];g[o+(l*88|0)+68>>2]=+g[u>>2];q=n+104|0;r=c[q+4>>2]|0;u=o+(l*88|0)+16|0;c[u>>2]=c[q>>2];c[u+4>>2]=r;u=n+112|0;r=c[u+4>>2]|0;q=o+(l*88|0)+24|0;c[q>>2]=c[u>>2];c[q+4>>2]=r;c[o+(l*88|0)+84>>2]=m;g[o+(l*88|0)+76>>2]=t;g[o+(l*88|0)+80>>2]=s;c[o+(l*88|0)+72>>2]=c[n+120>>2];q=0;do{r=n+(q*20|0)+64|0;if(!(a[k>>0]|0)){g[p+(l*156|0)+(q*36|0)+16>>2]=0.0;g[p+(l*156|0)+(q*36|0)+20>>2]=0.0}else{g[p+(l*156|0)+(q*36|0)+16>>2]=+g[b>>2]*+g[n+(q*20|0)+72>>2];g[p+(l*156|0)+(q*36|0)+20>>2]=+g[b>>2]*+g[n+(q*20|0)+76>>2]}x=p+(l*156|0)+(q*36|0)|0;g[p+(l*156|0)+(q*36|0)+24>>2]=0.0;g[p+(l*156|0)+(q*36|0)+28>>2]=0.0;g[p+(l*156|0)+(q*36|0)+32>>2]=0.0;z=o+(l*88|0)+(q<<3)|0;c[x+0>>2]=0;c[x+4>>2]=0;c[x+8>>2]=0;c[x+12>>2]=0;x=r;y=c[x+4>>2]|0;c[z>>2]=c[x>>2];c[z+4>>2]=y;q=q+1|0}while((q|0)!=(m|0));l=l+1|0;if((l|0)>=(c[j>>2]|0)){f=12;break}m=c[d>>2]|0}if((f|0)==4)Aa(13624,13640,73,13704);else if((f|0)==12){i=e;return}}function Sy(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,P=0.0,S=0.0,T=0.0,U=0,V=0,W=0,X=0,Y=0,Z=0.0,_=0.0,$=0.0,aa=0.0,ba=0.0;b=i;i=i+32|0;e=b;d=a+48|0;if((c[d>>2]|0)<=0){i=b;return}j=a+40|0;h=a+36|0;k=a+44|0;f=a+24|0;n=a+28|0;a=e+4|0;p=e+8|0;m=e+24|0;l=0;while(1){o=c[j>>2]|0;U=c[h>>2]|0;G=c[(c[k>>2]|0)+(c[o+(l*156|0)+152>>2]<<2)>>2]|0;W=c[o+(l*156|0)+112>>2]|0;H=c[o+(l*156|0)+116>>2]|0;D=+g[o+(l*156|0)+120>>2];C=+g[o+(l*156|0)+124>>2];q=+g[o+(l*156|0)+128>>2];r=+g[o+(l*156|0)+132>>2];X=U+(l*88|0)+48|0;S=+g[X>>2];N=+g[X+4>>2];X=U+(l*88|0)+56|0;M=+g[X>>2];T=+g[X+4>>2];X=c[f>>2]|0;Y=X+(W*12|0)|0;x=+g[Y>>2];y=+g[Y+4>>2];I=+g[X+(W*12|0)+8>>2];Y=c[n>>2]|0;V=Y+(W*12|0)|0;t=+g[V>>2];w=+g[V+4>>2];u=+g[Y+(W*12|0)+8>>2];W=X+(H*12|0)|0;z=+g[W>>2];A=+g[W+4>>2];J=+g[X+(H*12|0)+8>>2];X=Y+(H*12|0)|0;B=+g[X>>2];v=+g[X+4>>2];s=+g[Y+(H*12|0)+8>>2];H=c[G+124>>2]|0;if((H|0)<=0){d=4;break}E=+g[U+(l*88|0)+80>>2];F=+g[U+(l*88|0)+76>>2];K=+R(+I);L=+Q(+I);I=+R(+J);J=+Q(+J);P=x-(S*L-N*K);S=y-(N*L+S*K);N=z-(M*J-T*I);M=A-(T*J+M*I);U=c[G+120>>2]|0;a:do if(!U){g[e>>2]=1.0;g[a>>2]=0.0;Z=+g[G+112>>2];T=+g[G+116>>2];P=P+(L*Z-K*T);K=Z*K+L*T+S;T=+g[G+64>>2];S=+g[G+68>>2];L=N+(J*T-I*S);I=T*I+J*S+M;S=P-L;T=K-I;if(S*S+T*T>1.4210854715202004e-14){M=L-P;J=I-K;Z=+M;N=+J;Y=e;g[Y>>2]=Z;g[Y+4>>2]=N;N=+O(+(M*M+J*J));if(!(N<1.1920928955078125e-7)){Z=1.0/N;M=M*Z;g[e>>2]=M;J=J*Z;g[a>>2]=J}}else{M=1.0;J=0.0}S=P+M*F;Z=K+J*F;P=L-M*E;T=I-J*E;L=+((S+P)*.5);N=+((Z+T)*.5);Y=p;g[Y>>2]=L;g[Y+4>>2]=N;g[m>>2]=M*(P-S)+J*(T-Z)}else if((U|0)==2){_=+g[G+104>>2];Z=+g[G+108>>2];T=J*_-I*Z;Z=_*I+J*Z;_=+T;$=+Z;U=e;g[U>>2]=_;g[U+4>>2]=$;$=+g[G+112>>2];_=+g[G+116>>2];N=N+(J*$-I*_);M=$*I+J*_+M;J=T;I=Z;U=0;do{$=+g[G+(U*20|0)+64>>2];_=+g[G+(U*20|0)+68>>2];T=P+(L*$-K*_);_=$*K+L*_+S;$=E-(J*(T-N)+(_-M)*I);Z=T+J*$;$=_+I*$;T=T-J*F;_=_-I*F;ba=+((T+Z)*.5);aa=+((_+$)*.5);Y=e+(U<<3)+8|0;g[Y>>2]=ba;g[Y+4>>2]=aa;g[e+(U<<2)+24>>2]=+g[e>>2]*(T-Z)+ +g[a>>2]*(_-$);U=U+1|0;J=+g[e>>2];I=+g[a>>2]}while((U|0)<(H|0));aa=+-J;ba=+-I;Y=e;g[Y>>2]=aa;g[Y+4>>2]=ba}else if((U|0)==1){$=+g[G+104>>2];ba=+g[G+108>>2];aa=L*$-K*ba;ba=$*K+L*ba;$=+aa;_=+ba;U=e;g[U>>2]=$;g[U+4>>2]=_;_=+g[G+112>>2];$=+g[G+116>>2];P=P+(L*_-K*$);K=_*K+L*$+S;S=aa;L=ba;U=0;while(1){ba=+g[G+(U*20|0)+64>>2];aa=+g[G+(U*20|0)+68>>2];_=N+(J*ba-I*aa);aa=ba*I+J*aa+M;ba=F-(S*(_-P)+(aa-K)*L);$=_+S*ba;ba=aa+L*ba;_=_-S*E;aa=aa-L*E;T=+((_+$)*.5);Z=+((aa+ba)*.5);Y=e+(U<<3)+8|0;g[Y>>2]=T;g[Y+4>>2]=Z;g[e+(U<<2)+24>>2]=+g[e>>2]*(_-$)+ +g[a>>2]*(aa-ba);U=U+1|0;if((U|0)>=(H|0))break a;S=+g[e>>2];L=+g[a>>2]}}while(0);H=o+(l*156|0)+72|0;Y=e;U=c[Y+4>>2]|0;G=H;c[G>>2]=c[Y>>2];c[G+4>>2]=U;G=o+(l*156|0)+148|0;U=c[G>>2]|0;do if((U|0)>0){V=o+(l*156|0)+76|0;C=D+C;W=o+(l*156|0)+140|0;X=0;do{I=+g[e+(X<<3)+8>>2];E=I-x;aa=+g[e+(X<<3)+12>>2];J=+E;F=+(aa-y);Y=o+(l*156|0)+(X*36|0)|0;g[Y>>2]=J;g[Y+4>>2]=F;I=I-z;F=+I;aa=+(aa-A);Y=o+(l*156|0)+(X*36|0)+8|0;g[Y>>2]=F;g[Y+4>>2]=aa;aa=+g[V>>2];F=+g[o+(l*156|0)+(X*36|0)+4>>2];J=+g[H>>2];ba=E*aa-F*J;D=+g[o+(l*156|0)+(X*36|0)+12>>2];J=aa*I-J*D;J=C+ba*q*ba+J*r*J;if(J>0.0)J=1.0/J;else J=0.0;g[o+(l*156|0)+(X*36|0)+24>>2]=J;J=+g[V>>2];aa=-+g[H>>2];ba=E*aa-J*F;J=I*aa-J*D;J=C+ba*q*ba+J*r*J;if(J>0.0)J=1.0/J;else J=0.0;g[o+(l*156|0)+(X*36|0)+28>>2]=J;Y=o+(l*156|0)+(X*36|0)+32|0;g[Y>>2]=0.0;D=+g[H>>2]*(B-s*D-t+u*F)+ +g[V>>2]*(v+s*I-w-u*E);if(D<-1.0)g[Y>>2]=-(D*+g[W>>2]);X=X+1|0}while((X|0)!=(U|0));if((c[G>>2]|0)==2){$=+g[V>>2];t=+g[H>>2];_=+g[o+(l*156|0)>>2]*$- +g[o+(l*156|0)+4>>2]*t;s=$*+g[o+(l*156|0)+8>>2]-t*+g[o+(l*156|0)+12>>2];aa=$*+g[o+(l*156|0)+36>>2]-t*+g[o+(l*156|0)+40>>2];t=$*+g[o+(l*156|0)+44>>2]-t*+g[o+(l*156|0)+48>>2];$=q*_;ba=r*s;s=C+_*$+s*ba;q=C+aa*q*aa+t*r*t;r=C+$*aa+ba*t;t=s*q-r*r;if(!(s*s<t*1.0e3)){c[G>>2]=1;break}g[o+(l*156|0)+96>>2]=s;g[o+(l*156|0)+100>>2]=r;g[o+(l*156|0)+104>>2]=r;g[o+(l*156|0)+108>>2]=q;if(t!=0.0)t=1.0/t;ba=-(t*r);g[o+(l*156|0)+80>>2]=q*t;g[o+(l*156|0)+84>>2]=ba;g[o+(l*156|0)+88>>2]=ba;g[o+(l*156|0)+92>>2]=s*t}}while(0);l=l+1|0;if((l|0)>=(c[d>>2]|0)){d=32;break}}if((d|0)==4)Aa(13720,13640,171,13752);else if((d|0)==32){i=b;return}}function Ty(a){a=a|0;var b=0,d=0,e=0,f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0.0,K=0,L=0.0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0,S=0,T=0.0,U=0.0;b=i;e=a+48|0;if((c[e>>2]|0)<=0){i=b;return}d=a+40|0;h=a+28|0;H=c[h>>2]|0;j=0;a:while(1){r=c[d>>2]|0;a=c[r+(j*156|0)+112>>2]|0;f=c[r+(j*156|0)+116>>2]|0;o=+g[r+(j*156|0)+120>>2];m=+g[r+(j*156|0)+128>>2];n=+g[r+(j*156|0)+124>>2];l=+g[r+(j*156|0)+132>>2];K=c[r+(j*156|0)+148>>2]|0;k=H+(a*12|0)|0;S=k;R=H+(f*12|0)|0;Q=r+(j*156|0)+72|0;q=+g[Q>>2];p=+g[Q+4>>2];y=-q;z=+g[r+(j*156|0)+136>>2];Q=(K|0)==1;if((K+ -1|0)>>>0>=2){d=5;break}u=+g[R+4>>2];w=+g[R>>2];v=+g[S+4>>2];R=r+(j*156|0)+144|0;x=+g[S>>2];S=0;t=+g[H+(a*12|0)+8>>2];s=+g[H+(f*12|0)+8>>2];do{O=+g[r+(j*156|0)+(S*36|0)+12>>2];M=+g[r+(j*156|0)+(S*36|0)+8>>2];L=+g[r+(j*156|0)+(S*36|0)+4>>2];J=+g[r+(j*156|0)+(S*36|0)>>2];P=z*+g[r+(j*156|0)+(S*36|0)+16>>2];H=r+(j*156|0)+(S*36|0)+20|0;N=+g[H>>2];G=N- +g[r+(j*156|0)+(S*36|0)+28>>2]*(p*(w-s*O-x+t*L)+(u+s*M-v-t*J)*y- +g[R>>2]);I=-P;P=G<P?G:P;P=P<I?I:P;N=P-N;g[H>>2]=P;P=p*N;N=N*y;x=x-o*P;v=v-o*N;t=t-m*(J*N-L*P);w=w+n*P;u=u+n*N;s=s+l*(M*N-O*P);S=S+1|0}while((S|0)!=(K|0));do if(!Q){K=r+(j*156|0)+16|0;M=+g[K>>2];H=r+(j*156|0)+52|0;L=+g[H>>2];if(!(M>=0.0)|!(L>=0.0)){d=10;break a}A=+g[r+(j*156|0)+12>>2];z=+g[r+(j*156|0)+8>>2];C=+g[r+(j*156|0)+4>>2];F=+g[r+(j*156|0)>>2];y=+g[r+(j*156|0)+48>>2];B=+g[r+(j*156|0)+44>>2];E=+g[r+(j*156|0)+40>>2];D=+g[r+(j*156|0)+36>>2];J=+g[r+(j*156|0)+104>>2];N=+g[r+(j*156|0)+100>>2];G=q*(w-s*A-x+t*C)+p*(u+s*z-v-t*F)- +g[r+(j*156|0)+32>>2]-(M*+g[r+(j*156|0)+96>>2]+L*J);I=q*(w-s*y-x+t*E)+p*(u+s*B-v-t*D)- +g[r+(j*156|0)+68>>2]-(M*N+L*+g[r+(j*156|0)+108>>2]);U=+g[r+(j*156|0)+80>>2]*G+ +g[r+(j*156|0)+88>>2]*I;T=G*+g[r+(j*156|0)+84>>2]+I*+g[r+(j*156|0)+92>>2];O=-U;P=-T;if(!(!(U<=-0.0)|!(T<=-0.0))){M=O-M;T=P-L;N=q*M;M=p*M;U=q*T;T=p*T;J=N+U;L=M+T;g[K>>2]=O;g[H>>2]=P;x=x-o*J;v=v-o*L;w=w+n*J;u=u+n*L;t=t-m*(F*M-C*N+(D*T-E*U));s=s+l*(z*M-A*N+(B*T-y*U));break}U=G*+g[r+(j*156|0)+24>>2];O=-U;if(U<=-0.0?I+N*O>=0.0:0){N=O-M;T=0.0-L;P=q*N;N=p*N;U=q*T;T=p*T;L=U+P;M=T+N;g[K>>2]=O;g[H>>2]=0.0;x=x-o*L;v=v-o*M;w=w+n*L;u=u+n*M;t=t-m*(N*F-P*C+(T*D-U*E));s=s+l*(N*z-P*A+(T*B-U*y));break}U=I*+g[r+(j*156|0)+60>>2];N=-U;if(U<=-0.0?G+J*N>=0.0:0){O=0.0-M;T=N-L;P=q*O;O=p*O;U=q*T;T=p*T;L=P+U;M=O+T;g[K>>2]=0.0;g[H>>2]=N;x=x-o*L;v=v-o*M;w=w+n*L;u=u+n*M;t=t-m*(O*F-P*C+(T*D-U*E));s=s+l*(O*z-P*A+(T*B-U*y));break}if(!(!(G>=0.0)|!(I>=0.0))){O=0.0-M;T=0.0-L;P=q*O;O=p*O;U=q*T;T=p*T;M=P+U;N=O+T;g[K>>2]=0.0;g[H>>2]=0.0;x=x-o*M;v=v-o*N;w=w+n*M;u=u+n*N;t=t-m*(O*F-P*C+(T*D-U*E));s=s+l*(O*z-P*A+(T*B-U*y))}}else{H=0;while(1){T=+g[r+(j*156|0)+(H*36|0)+12>>2];O=+g[r+(j*156|0)+(H*36|0)+8>>2];N=+g[r+(j*156|0)+(H*36|0)+4>>2];M=+g[r+(j*156|0)+(H*36|0)>>2];S=r+(j*156|0)+(H*36|0)+16|0;P=+g[S>>2];U=P- +g[r+(j*156|0)+(H*36|0)+24>>2]*(q*(w-s*T-x+t*N)+p*(u+s*O-v-t*M)- +g[r+(j*156|0)+(H*36|0)+32>>2]);U=U>0.0?U:0.0;P=U-P;g[S>>2]=U;U=q*P;P=p*P;x=x-o*U;v=v-o*P;t=t-m*(M*P-N*U);w=w+n*U;u=u+n*P;s=s+l*(O*P-T*U);if(!H)break;else H=H+1|0}}while(0);U=+x;T=+v;H=k;g[H>>2]=U;g[H+4>>2]=T;H=c[h>>2]|0;g[H+(a*12|0)+8>>2]=t;T=+w;U=+u;H=H+(f*12|0)|0;g[H>>2]=T;g[H+4>>2]=U;H=c[h>>2]|0;g[H+(f*12|0)+8>>2]=s;j=j+1|0;if((j|0)>=(c[e>>2]|0)){d=22;break}}if((d|0)==5)Aa(13784,13640,314,13824);else if((d|0)==10)Aa(13856,13640,412,13824);else if((d|0)==22){i=b;return}}function Uy(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0,w=0;h=i;if((c[b+84>>2]|0)<=0)Aa(13888,13640,623,16752);r=c[b+72>>2]|0;if(!r){o=+g[d+12>>2];n=+g[b+24>>2];q=+g[d+8>>2];l=+g[b+28>>2];j=+g[d>>2]+(o*n-q*l);l=n*q+o*l+ +g[d+4>>2];o=+g[e+12>>2];q=+g[b>>2];n=+g[e+8>>2];m=+g[b+4>>2];k=+g[e>>2]+(o*q-n*m);m=q*n+o*m+ +g[e+4>>2];o=k-j;n=m-l;q=+o;p=+n;f=a;g[f>>2]=q;g[f+4>>2]=p;p=+O(+(o*o+n*n));if(p<1.1920928955078125e-7){q=o;p=n}else{p=1.0/p;q=o*p;g[a>>2]=q;p=n*p;g[a+4>>2]=p}k=+((j+k)*.5);m=+((l+m)*.5);f=a+8|0;g[f>>2]=k;g[f+4>>2]=m;g[a+16>>2]=o*q+n*p- +g[b+76>>2]- +g[b+80>>2];i=h;return}else if((r|0)==1){v=d+12|0;k=+g[v>>2];l=+g[b+16>>2];r=d+8|0;m=+g[r>>2];o=+g[b+20>>2];j=k*l-m*o;o=l*m+k*o;k=+j;m=+o;w=a;g[w>>2]=k;g[w+4>>2]=m;m=+g[v>>2];k=+g[b+24>>2];l=+g[r>>2];n=+g[b+28>>2];s=+g[e+12>>2];u=+g[b+(f<<3)>>2];t=+g[e+8>>2];q=+g[b+(f<<3)+4>>2];p=+g[e>>2]+(s*u-t*q);q=u*t+s*q+ +g[e+4>>2];g[a+16>>2]=j*(p-(+g[d>>2]+(m*k-l*n)))+(q-(k*l+m*n+ +g[d+4>>2]))*o- +g[b+76>>2]- +g[b+80>>2];p=+p;q=+q;f=a+8|0;g[f>>2]=p;g[f+4>>2]=q;i=h;return}else if((r|0)==2){v=e+12|0;m=+g[v>>2];n=+g[b+16>>2];w=e+8|0;o=+g[w>>2];u=+g[b+20>>2];t=m*n-o*u;u=n*o+m*u;m=+t;o=+u;r=a;g[r>>2]=m;g[r+4>>2]=o;o=+g[v>>2];m=+g[b+24>>2];n=+g[w>>2];p=+g[b+28>>2];l=+g[d+12>>2];j=+g[b+(f<<3)>>2];k=+g[d+8>>2];s=+g[b+(f<<3)+4>>2];q=+g[d>>2]+(l*j-k*s);s=j*k+l*s+ +g[d+4>>2];g[a+16>>2]=t*(q-(+g[e>>2]+(o*m-n*p)))+(s-(m*n+o*p+ +g[e+4>>2]))*u- +g[b+76>>2]- +g[b+80>>2];q=+q;s=+s;w=a+8|0;g[w>>2]=q;g[w+4>>2]=s;t=+-t;u=+-u;w=a;g[w>>2]=t;g[w+4>>2]=u;i=h;return}else{i=h;return}}function Vy(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=Jx(f,148)|0;if(!f){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=13920;if((c[(c[a+12>>2]|0)+4>>2]|0)!=1)Aa(14096,13936,40,14e3);if(!(c[(c[d+12>>2]|0)+4>>2]|0)){j=f;i=b;return j|0}else Aa(14416,13936,41,14e3);return 0}function Wy(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function Xy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Vw(b,c[(c[a+48>>2]|0)+12>>2]|0,d,c[(c[a+52>>2]|0)+12>>2]|0,e);i=f;return}function Yy(a){a=a|0;return}function Zy(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function _y(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=Jx(f,148)|0;if(!f){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=14080;if((c[(c[a+12>>2]|0)+4>>2]|0)!=1)Aa(14096,14144,40,14216);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=b;return j|0}else Aa(14672,14144,41,14216);return 0}function $y(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function az(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;Ww(b,c[(c[a+48>>2]|0)+12>>2]|0,d,c[(c[a+52>>2]|0)+12>>2]|0,e);i=f;return}function bz(a){a=a|0;return}function cz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function dz(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=Jx(f,148)|0;if(!f){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=14296;if((c[(c[a+12>>2]|0)+4>>2]|0)!=2)Aa(14536,14312,40,14384);if(!(c[(c[d+12>>2]|0)+4>>2]|0)){j=f;i=b;return j|0}else Aa(14416,14312,41,14384);return 0}function ez(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function fz(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,l=0.0,m=0.0,n=0.0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0;f=i;j=c[(c[a+48>>2]|0)+12>>2]|0;p=c[(c[a+52>>2]|0)+12>>2]|0;h=b+60|0;c[h>>2]=0;a=p+12|0;x=+g[e+12>>2];m=+g[a>>2];n=+g[e+8>>2];y=+g[p+16>>2];l=+g[e>>2]+(x*m-n*y)- +g[d>>2];y=m*n+x*y+ +g[e+4>>2]- +g[d+4>>2];x=+g[d+12>>2];n=+g[d+8>>2];m=l*x+y*n;n=x*y-l*n;l=+g[j+8>>2]+ +g[p+8>>2];p=c[j+148>>2]|0;do if((p|0)>0){d=0;e=0;r=-3.4028234663852886e+38;while(1){s=(m- +g[j+(d<<3)+20>>2])*+g[j+(d<<3)+84>>2]+(n- +g[j+(d<<3)+24>>2])*+g[j+(d<<3)+88>>2];if(s>l){d=19;break}z=s>r;r=z?s:r;e=z?d:e;d=d+1|0;if((d|0)>=(p|0)){d=4;break}}if((d|0)==4){z=r<1.1920928955078125e-7;break}else if((d|0)==19){i=f;return}}else{e=0;z=1}while(0);q=e+1|0;o=j+(e<<3)+20|0;d=c[o>>2]|0;o=c[o+4>>2]|0;x=(c[k>>2]=d,+g[k>>2]);t=(c[k>>2]=o,+g[k>>2]);q=j+(((q|0)<(p|0)?q:0)<<3)+20|0;p=c[q>>2]|0;q=c[q+4>>2]|0;y=(c[k>>2]=p,+g[k>>2]);w=(c[k>>2]=q,+g[k>>2]);if(z){c[h>>2]=1;c[b+56>>2]=1;z=j+(e<<3)+84|0;q=c[z+4>>2]|0;p=b+40|0;c[p>>2]=c[z>>2];c[p+4>>2]=q;x=+((x+y)*.5);y=+((t+w)*.5);p=b+48|0;g[p>>2]=x;g[p+4>>2]=y;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}s=m-x;u=n-t;r=m-y;v=n-w;if(s*(y-x)+u*(w-t)<=0.0){m=s*s+u*u;if(m>l*l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;h=b+40|0;y=+s;l=+u;z=h;g[z>>2]=y;g[z+4>>2]=l;l=+O(+m);if(!(l<1.1920928955078125e-7)){y=1.0/l;g[h>>2]=s*y;g[b+44>>2]=u*y}p=b+48|0;c[p>>2]=d;c[p+4>>2]=o;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}if(!(r*(x-y)+v*(t-w)<=0.0)){r=(x+y)*.5;s=(t+w)*.5;d=j+(e<<3)+84|0;if((m-r)*+g[d>>2]+(n-s)*+g[j+(e<<3)+88>>2]>l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;z=d;q=c[z+4>>2]|0;p=b+40|0;c[p>>2]=c[z>>2];c[p+4>>2]=q;x=+r;y=+s;p=b+48|0;g[p>>2]=x;g[p+4>>2]=y;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}m=r*r+v*v;if(m>l*l){i=f;return}c[h>>2]=1;c[b+56>>2]=1;h=b+40|0;y=+r;l=+v;z=h;g[z>>2]=y;g[z+4>>2]=l;l=+O(+m);if(!(l<1.1920928955078125e-7)){y=1.0/l;g[h>>2]=r*y;g[b+44>>2]=v*y}z=b+48|0;c[z>>2]=p;c[z+4>>2]=q;p=a;q=c[p+4>>2]|0;z=b;c[z>>2]=c[p>>2];c[z+4>>2]=q;c[b+16>>2]=0;i=f;return}function gz(a){a=a|0;return}function hz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function iz(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0;b=i;f=Jx(f,148)|0;if(!f){j=0;i=b;return j|0}c[f+4>>2]=4;c[f+48>>2]=a;c[f+52>>2]=d;c[f+56>>2]=0;c[f+60>>2]=0;c[f+124>>2]=0;c[f+128>>2]=0;h=a+16|0;j=f+8|0;e=j+40|0;do{c[j>>2]=0;j=j+4|0}while((j|0)<(e|0));g[f+136>>2]=+O(+(+g[h>>2]*+g[d+16>>2]));l=+g[a+20>>2];k=+g[d+20>>2];g[f+140>>2]=l>k?l:k;g[f+144>>2]=0.0;c[f>>2]=14520;if((c[(c[a+12>>2]|0)+4>>2]|0)!=2)Aa(14536,14584,43,14648);if((c[(c[d+12>>2]|0)+4>>2]|0)==2){j=f;i=b;return j|0}else Aa(14672,14584,44,14648);return 0}function jz(a,b){a=a|0;b=b|0;var d=0;d=i;jb[c[(c[a>>2]|0)+4>>2]&127](a);Kx(b,a,148);i=d;return}function kz(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0,I=0,J=0.0,K=0,L=0.0,M=0.0,N=0.0;h=i;i=i+80|0;F=h+76|0;r=h+72|0;p=h;q=h+48|0;j=h+24|0;A=c[(c[b+48>>2]|0)+12>>2]|0;E=c[(c[b+52>>2]|0)+12>>2]|0;b=d+60|0;c[b>>2]=0;k=+g[A+8>>2]+ +g[E+8>>2];c[F>>2]=0;l=+Xw(F,A,e,E,f);if(l>k){i=h;return}c[r>>2]=0;m=+Xw(r,E,f,A,e);if(m>k){i=h;return}if(m>l+.0005000000237487257){s=+g[f>>2];v=+g[f+4>>2];u=+g[f+8>>2];t=+g[f+12>>2];o=+g[e>>2];l=+g[e+4>>2];m=+g[e+8>>2];n=+g[e+12>>2];r=c[r>>2]|0;c[d+56>>2]=2;f=1;e=E}else{s=+g[e>>2];v=+g[e+4>>2];u=+g[e+8>>2];t=+g[e+12>>2];o=+g[f>>2];l=+g[f+4>>2];m=+g[f+8>>2];n=+g[f+12>>2];r=c[F>>2]|0;c[d+56>>2]=1;f=0;e=A;A=E}E=c[A+148>>2]|0;if((r|0)<=-1)Aa(5728,5768,74,5824);F=c[e+148>>2]|0;if((F|0)<=(r|0))Aa(5728,5768,74,5824);w=+g[e+(r<<3)+84>>2];L=+g[e+(r<<3)+88>>2];x=t*w-u*L;L=u*w+t*L;w=n*x+m*L;x=n*L-m*x;if((E|0)>0){H=0;K=0;y=3.4028234663852886e+38;while(1){z=w*+g[A+(H<<3)+84>>2]+x*+g[A+(H<<3)+88>>2];I=z<y;K=I?H:K;H=H+1|0;if((H|0)==(E|0))break;else y=I?z:y}}else K=0;I=K+1|0;I=(I|0)<(E|0)?I:0;z=+g[A+(K<<3)+20>>2];D=+g[A+(K<<3)+24>>2];B=+(o+(n*z-m*D));D=+(l+(m*z+n*D));H=p;g[H>>2]=B;g[H+4>>2]=D;H=r&255;E=p+8|0;a[E>>0]=H;a[E+1>>0]=K;a[E+2>>0]=1;a[E+3>>0]=0;D=+g[A+(I<<3)+20>>2];B=+g[A+(I<<3)+24>>2];z=+(o+(n*D-m*B));B=+(l+(m*D+n*B));A=p+12|0;g[A>>2]=z;g[A+4>>2]=B;A=p+20|0;a[A>>0]=H;a[A+1>>0]=I;a[A+2>>0]=1;a[A+3>>0]=0;A=r+1|0;A=(A|0)<(F|0)?A:0;K=e+(r<<3)+20|0;B=+g[K>>2];z=+g[K+4>>2];K=e+(A<<3)+20|0;D=+g[K>>2];C=+g[K+4>>2];G=D-B;L=C-z;w=+O(+(G*G+L*L));if(!(w<1.1920928955078125e-7)){J=1.0/w;G=G*J;L=L*J}J=t*G-u*L;x=t*L+u*G;y=-J;N=s+(t*B-u*z);M=v+(u*B+t*z);w=N*x+M*y;if((Yw(q,p,y,-x,k-(N*J+M*x),r)|0)<2){i=h;return}if((Yw(j,q,J,x,k+((s+(t*D-u*C))*J+(v+(u*D+t*C))*x),A)|0)<2){i=h;return}N=+L;M=+-G;p=d+40|0;g[p>>2]=N;g[p+4>>2]=M;M=+((B+D)*.5);N=+((z+C)*.5);p=d+48|0;g[p>>2]=M;g[p+4>>2]=N;p=f<<24>>24==0;q=0;r=0;do{s=+g[j+(q*12|0)>>2];t=+g[j+(q*12|0)+4>>2];if(x*s+t*y-w<=k){N=s-o;L=t-l;M=+(n*N+m*L);N=+(n*L-m*N);e=d+(r*20|0)|0;g[e>>2]=M;g[e+4>>2]=N;e=d+(r*20|0)+16|0;f=c[j+(q*12|0)+8>>2]|0;c[e>>2]=f;if(!p){a[e>>0]=f>>>8;a[e+1>>0]=f;a[e+2>>0]=f>>>24;a[e+3>>0]=f>>>16}r=r+1|0}q=q+1|0}while((q|0)!=2);c[b>>2]=r;i=h;return}function lz(a){a=a|0;return}function mz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function nz(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,P=0,S=0,T=0,U=0,V=0.0;o=i;A=c[b+48>>2]|0;T=c[A+8>>2]|0;l=b+108|0;c[l>>2]=T;S=c[b+52>>2]|0;N=c[S+8>>2]|0;n=b+112|0;c[n>>2]=N;L=A+28|0;M=c[L>>2]|0;L=c[L+4>>2]|0;H=b+140|0;c[H>>2]=M;c[H+4>>2]=L;H=S+28|0;K=c[H>>2]|0;H=c[H+4>>2]|0;J=b+148|0;c[J>>2]=K;c[J+4>>2]=H;J=b+156|0;g[J>>2]=+g[A+120>>2];H=b+160|0;g[H>>2]=+g[S+120>>2];I=b+164|0;g[I>>2]=+g[A+128>>2];A=b+168|0;g[A>>2]=+g[S+128>>2];S=c[d+24>>2]|0;m=S+(T*12|0)|0;v=+g[m>>2];w=+g[m+4>>2];e=+g[S+(T*12|0)+8>>2];m=d+28|0;P=c[m>>2]|0;U=P+(T*12|0)|0;u=+g[U>>2];t=+g[U+4>>2];h=+g[P+(T*12|0)+8>>2];T=S+(N*12|0)|0;C=+g[T>>2];G=+g[T+4>>2];E=+g[S+(N*12|0)+8>>2];S=P+(N*12|0)|0;s=+g[S>>2];f=+g[S+4>>2];j=+g[P+(N*12|0)+8>>2];r=+R(+e);e=+Q(+e);D=+R(+E);E=+Q(+E);F=+g[b+80>>2]-(c[k>>2]=M,+g[k>>2]);q=+g[b+84>>2]-(c[k>>2]=L,+g[k>>2]);p=e*F-r*q;q=r*F+e*q;e=+p;F=+q;L=b+124|0;g[L>>2]=e;g[L+4>>2]=F;F=+g[b+88>>2]-(c[k>>2]=K,+g[k>>2]);e=+g[b+92>>2]- +g[b+152>>2];r=E*F-D*e;e=D*F+E*e;E=+r;F=+e;K=b+132|0;g[K>>2]=E;g[K+4>>2]=F;K=b+116|0;v=C+r-v-p;w=G+e-w-q;G=+v;C=+w;L=K;g[L>>2]=G;g[L+4>>2]=C;C=+O(+(v*v+w*w));if(C>.004999999888241291){G=1.0/C;v=v*G;g[K>>2]=v;w=G*w}else{g[K>>2]=0.0;w=0.0;v=0.0}g[b+120>>2]=w;G=w*p-q*v;D=w*r-v*e;x=+g[J>>2];y=+g[I>>2];z=+g[H>>2];B=+g[A>>2];D=z+(x+G*G*y)+D*D*B;if(D!=0.0)G=1.0/D;else G=0.0;A=b+172|0;g[A>>2]=G;E=+g[b+68>>2];if(E>0.0){C=C- +g[b+104>>2];V=E*6.2831854820251465;F=V*G*V;E=+g[d>>2];G=E*(V*G*2.0*+g[b+72>>2]+F*E);H=b+96|0;g[H>>2]=G;if(G!=0.0)G=1.0/G;else G=0.0;g[H>>2]=G;g[b+76>>2]=F*C*E*G;C=D+G;if(C!=0.0)C=1.0/C;else C=0.0;g[A>>2]=C}else{g[b+96>>2]=0.0;g[b+76>>2]=0.0}if(!(a[d+20>>0]|0)){g[b+100>>2]=0.0;C=u;D=t;F=s;G=f;E=h;V=j;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)|0;C=+C;D=+D;T=U;g[T>>2]=C;U=U+4|0;g[U>>2]=D;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=E;U=c[n>>2]|0;U=T+(U*12|0)|0;F=+F;G=+G;T=U;g[T>>2]=F;U=U+4|0;g[U>>2]=G;U=c[n>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=V;i=o;return}else{U=b+100|0;C=+g[d+8>>2]*+g[U>>2];g[U>>2]=C;V=v*C;w=C*w;C=u-V*x;D=t-w*x;F=s+V*z;G=f+w*z;E=h-y*(w*p-V*q);V=j+B*(w*r-V*e);U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)|0;C=+C;D=+D;T=U;g[T>>2]=C;U=U+4|0;g[U>>2]=D;U=c[l>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=E;U=c[n>>2]|0;U=T+(U*12|0)|0;F=+F;G=+G;T=U;g[T>>2]=F;U=U+4|0;g[U>>2]=G;U=c[n>>2]|0;T=c[m>>2]|0;U=T+(U*12|0)+8|0;g[U>>2]=V;i=o;return}}function oz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0,A=0;d=i;n=a+108|0;w=c[n>>2]|0;e=b+28|0;z=c[e>>2]|0;r=z+(w*12|0)|0;b=r;q=+g[b>>2];s=+g[b+4>>2];v=+g[z+(w*12|0)+8>>2];b=a+112|0;w=c[b>>2]|0;A=z+(w*12|0)|0;m=+g[A>>2];l=+g[A+4>>2];u=+g[z+(w*12|0)+8>>2];o=+g[a+128>>2];h=+g[a+124>>2];f=+g[a+136>>2];t=+g[a+132>>2];j=+g[a+116>>2];p=+g[a+120>>2];w=a+100|0;y=+g[w>>2];x=+g[a+172>>2]*(+g[a+76>>2]+(j*(m-u*f-(q-v*o))+p*(l+u*t-(s+v*h)))+ +g[a+96>>2]*y);k=-x;g[w>>2]=y-x;j=j*k;k=p*k;p=+g[a+156>>2];o=v- +g[a+164>>2]*(h*k-j*o);h=+g[a+160>>2];f=u+ +g[a+168>>2]*(k*t-j*f);q=+(q-p*j);p=+(s-p*k);a=r;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m+j*h);h=+(l+k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function pz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0;d=i;if(+g[a+68>>2]>0.0){q=1;i=d;return q|0}e=a+108|0;q=c[e>>2]|0;p=b+24|0;x=c[p>>2]|0;b=x+(q*12|0)|0;w=b;n=+g[w>>2];o=+g[w+4>>2];f=+g[x+(q*12|0)+8>>2];q=a+112|0;w=c[q>>2]|0;y=x+(w*12|0)|0;r=+g[y>>2];s=+g[y+4>>2];k=+g[x+(w*12|0)+8>>2];l=+R(+f);t=+Q(+f);v=+R(+k);u=+Q(+k);m=+g[a+80>>2]- +g[a+140>>2];j=+g[a+84>>2]- +g[a+144>>2];h=t*m-l*j;j=l*m+t*j;t=+g[a+88>>2]- +g[a+148>>2];m=+g[a+92>>2]- +g[a+152>>2];l=u*t-v*m;m=v*t+u*m;u=r+l-n-h;t=s+m-o-j;v=+O(+(u*u+t*t));if(v<1.1920928955078125e-7)v=0.0;else{z=1.0/v;u=u*z;t=t*z}v=v- +g[a+104>>2];v=v<.20000000298023224?v:.20000000298023224;v=v<-.20000000298023224?-.20000000298023224:v;B=-(+g[a+172>>2]*v);A=u*B;u=t*B;B=+g[a+156>>2];t=f- +g[a+164>>2]*(h*u-j*A);j=+g[a+160>>2];z=k+ +g[a+168>>2]*(l*u-m*A);n=+(n-B*A);o=+(o-B*u);y=b;g[y>>2]=n;g[y+4>>2]=o;y=c[p>>2]|0;g[y+((c[e>>2]|0)*12|0)+8>>2]=t;t=+(r+j*A);u=+(s+j*u);y=y+((c[q>>2]|0)*12|0)|0;g[y>>2]=t;g[y+4>>2]=u;g[(c[p>>2]|0)+((c[q>>2]|0)*12|0)+8>>2]=z;if(!(v>0.0))v=-v;y=v<.004999999888241291;i=d;return y|0}function qz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+80>>2];f=+g[j+20>>2];e=+g[b+84>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function rz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+88>>2];f=+g[j+20>>2];e=+g[b+92>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function sz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+100>>2]*c;c=d*+g[b+120>>2];g[a>>2]=+g[b+116>>2]*d;g[a+4>>2]=c;return}function tz(a,b){a=a|0;b=+b;return 0.0}function uz(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(14816,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+84>>2];h[k>>3]=+g[a+80>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+92>>2];h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+104>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(14848,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18120,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18152,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function vz(a){a=a|0;return}function wz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function xz(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0.0,O=0.0;q=i;o=c[b+48>>2]|0;L=c[o+8>>2]|0;n=b+104|0;c[n>>2]=L;K=c[b+52>>2]|0;I=c[K+8>>2]|0;p=b+108|0;c[p>>2]=I;G=o+28|0;H=c[G>>2]|0;G=c[G+4>>2]|0;D=b+128|0;c[D>>2]=H;c[D+4>>2]=G;D=K+28|0;F=c[D>>2]|0;D=c[D+4>>2]|0;J=b+136|0;c[J>>2]=F;c[J+4>>2]=D;r=+g[o+120>>2];g[b+144>>2]=r;s=+g[K+120>>2];g[b+148>>2]=s;t=+g[o+128>>2];g[b+152>>2]=t;w=+g[K+128>>2];g[b+156>>2]=w;K=c[d+24>>2]|0;y=+g[K+(L*12|0)+8>>2];o=d+28|0;J=c[o>>2]|0;M=J+(L*12|0)|0;u=+g[M>>2];f=+g[M+4>>2];l=+g[J+(L*12|0)+8>>2];A=+g[K+(I*12|0)+8>>2];K=J+(I*12|0)|0;h=+g[K>>2];j=+g[K+4>>2];m=+g[J+(I*12|0)+8>>2];x=+R(+y);y=+Q(+y);C=+R(+A);A=+Q(+A);E=+g[b+68>>2]-(c[k>>2]=H,+g[k>>2]);v=+g[b+72>>2]-(c[k>>2]=G,+g[k>>2]);e=y*E-x*v;v=x*E+y*v;y=+e;E=+v;G=b+112|0;g[G>>2]=y;g[G+4>>2]=E;E=+g[b+76>>2]-(c[k>>2]=F,+g[k>>2]);y=+g[b+80>>2]-(c[k>>2]=D,+g[k>>2]);x=A*E-C*y;y=C*E+A*y;A=+x;E=+y;D=b+120|0;g[D>>2]=A;g[D+4>>2]=E;E=r+s;A=E+v*t*v+y*w*y;C=t*e;z=w*x;B=-(v*C)-y*z;z=E+e*C+x*z;C=A*z-B*B;if(C!=0.0)C=1.0/C;E=-(B*C);g[b+160>>2]=z*C;g[b+164>>2]=E;g[b+168>>2]=E;g[b+172>>2]=A*C;z=t+w;if(z>0.0)z=1.0/z;g[b+176>>2]=z;D=b+84|0;if(!(a[d+20>>0]|0)){g[D>>2]=0.0;g[b+88>>2]=0.0;g[b+92>>2]=0.0;y=u;z=f;B=h;C=j;A=l;E=m;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)|0;y=+y;z=+z;L=M;g[L>>2]=y;M=M+4|0;g[M>>2]=z;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=A;M=c[p>>2]|0;M=L+(M*12|0)|0;B=+B;C=+C;L=M;g[L>>2]=B;M=M+4|0;g[M>>2]=C;M=c[p>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=E;i=q;return}else{L=d+8|0;N=+g[L>>2];E=N*+g[D>>2];g[D>>2]=E;M=b+88|0;N=N*+g[M>>2];g[M>>2]=N;M=b+92|0;O=+g[L>>2]*+g[M>>2];g[M>>2]=O;u=u-r*E;z=f-r*N;B=h+s*E;C=j+s*N;A=l-t*(O+(N*e-E*v));E=m+w*(O+(N*x-E*y));M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)|0;y=+u;z=+z;L=M;g[L>>2]=y;M=M+4|0;g[M>>2]=z;M=c[n>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=A;M=c[p>>2]|0;M=L+(M*12|0)|0;B=+B;C=+C;L=M;g[L>>2]=B;M=M+4|0;g[M>>2]=C;M=c[p>>2]|0;L=c[o>>2]|0;M=L+(M*12|0)+8|0;g[M>>2]=E;i=q;return}}function yz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0;q=i;k=a+104|0;o=c[k>>2]|0;j=b+28|0;E=c[j>>2]|0;z=E+(o*12|0)|0;l=+g[z>>2];h=+g[z+4>>2];y=+g[E+(o*12|0)+8>>2];o=a+108|0;z=c[o>>2]|0;F=E+(z*12|0)|0;m=+g[F>>2];n=+g[F+4>>2];x=+g[E+(z*12|0)+8>>2];f=+g[a+144>>2];e=+g[a+148>>2];d=+g[a+152>>2];p=+g[a+156>>2];B=+g[b>>2];b=a+92|0;s=+g[b>>2];w=B*+g[a+100>>2];t=s-(x-y)*+g[a+176>>2];v=-w;w=t<w?t:w;w=w<v?v:w;g[b>>2]=w;s=w-s;y=y-d*s;s=x+p*s;x=+g[a+124>>2];w=+g[a+120>>2];v=+g[a+116>>2];t=+g[a+112>>2];D=v*y+(m-x*s-l);C=n+w*s-h-t*y;A=+g[a+164>>2]*D+ +g[a+172>>2]*C;b=a+84|0;z=b;u=+g[z>>2];r=+g[z+4>>2];C=u-(+g[a+160>>2]*D+ +g[a+168>>2]*C);g[b>>2]=C;z=a+88|0;A=+g[z>>2]-A;g[z>>2]=A;B=B*+g[a+96>>2];D=C*C+A*A;if(D>B*B){D=+O(+D);if(!(D<1.1920928955078125e-7)){D=1.0/D;C=C*D;g[b>>2]=C;A=A*D;g[z>>2]=A}C=B*C;g[b>>2]=C;A=B*A;g[z>>2]=A}D=C-u;C=A-r;B=+(l-f*D);A=+(h-f*C);F=(c[j>>2]|0)+((c[k>>2]|0)*12|0)|0;g[F>>2]=B;g[F+4>>2]=A;F=c[j>>2]|0;g[F+((c[k>>2]|0)*12|0)+8>>2]=y-d*(t*C-D*v);A=+(m+e*D);B=+(n+e*C);F=F+((c[o>>2]|0)*12|0)|0;g[F>>2]=A;g[F+4>>2]=B;g[(c[j>>2]|0)+((c[o>>2]|0)*12|0)+8>>2]=s+p*(C*w-D*x);i=q;return}function zz(a,b){a=a|0;b=b|0;return 1}function Az(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Bz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Cz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+88>>2]*c;g[a>>2]=+g[b+84>>2]*c;g[a+4>>2]=d;return}function Dz(a,b){a=a|0;b=+b;return+(+g[a+92>>2]*b)}function Ez(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(15136,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+96>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(15168,e);h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(15200,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function Fz(a){a=a|0;return}function Gz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Hz(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0,t=0,u=0.0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,P=0.0,S=0.0,T=0.0,U=0.0,V=0,W=0,X=0,Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0.0,fa=0.0,ga=0.0,ha=0.0,ia=0.0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0;x=i;ba=c[b+48>>2]|0;aa=c[ba+8>>2]|0;s=b+160|0;c[s>>2]=aa;Y=c[b+52>>2]|0;$=c[Y+8>>2]|0;e=b+164|0;c[e>>2]=$;t=c[b+84>>2]|0;_=c[t+8>>2]|0;v=b+168|0;c[v>>2]=_;Z=c[b+88>>2]|0;H=c[Z+8>>2]|0;w=b+172|0;c[w>>2]=H;W=b+176|0;ca=ba+28|0;X=c[ca+4>>2]|0;O=W;c[O>>2]=c[ca>>2];c[O+4>>2]=X;O=b+184|0;X=Y+28|0;ca=c[X+4>>2]|0;V=O;c[V>>2]=c[X>>2];c[V+4>>2]=ca;V=b+192|0;ca=t+28|0;X=c[ca+4>>2]|0;da=V;c[da>>2]=c[ca>>2];c[da+4>>2]=X;da=Z+28|0;X=c[da>>2]|0;da=c[da+4>>2]|0;ca=b+200|0;c[ca>>2]=X;c[ca+4>>2]=da;y=+g[ba+120>>2];g[b+208>>2]=y;z=+g[Y+120>>2];g[b+212>>2]=z;A=+g[t+120>>2];g[b+216>>2]=A;B=+g[Z+120>>2];g[b+220>>2]=B;C=+g[ba+128>>2];g[b+224>>2]=C;D=+g[Y+128>>2];g[b+228>>2]=D;E=+g[t+128>>2];g[b+232>>2]=E;F=+g[Z+128>>2];g[b+236>>2]=F;Z=c[d+24>>2]|0;I=+g[Z+(aa*12|0)+8>>2];t=d+28|0;Y=c[t>>2]|0;ba=Y+(aa*12|0)|0;G=+g[ba>>2];u=+g[ba+4>>2];o=+g[Y+(aa*12|0)+8>>2];S=+g[Z+($*12|0)+8>>2];aa=Y+($*12|0)|0;f=+g[aa>>2];h=+g[aa+4>>2];p=+g[Y+($*12|0)+8>>2];K=+g[Z+(_*12|0)+8>>2];$=Y+(_*12|0)|0;j=+g[$>>2];l=+g[$+4>>2];q=+g[Y+(_*12|0)+8>>2];T=+g[Z+(H*12|0)+8>>2];Z=Y+(H*12|0)|0;m=+g[Z>>2];n=+g[Z+4>>2];r=+g[Y+(H*12|0)+8>>2];L=+R(+I);I=+Q(+I);M=+R(+S);S=+Q(+S);J=+R(+K);K=+Q(+K);N=+R(+T);T=+Q(+T);H=b+272|0;g[H>>2]=0.0;P=(c[k>>2]=X,+g[k>>2]);if((c[b+76>>2]|0)==1){g[b+240>>2]=0.0;g[b+244>>2]=0.0;g[b+256>>2]=1.0;g[b+264>>2]=1.0;U=C+E;L=0.0;I=0.0;K=1.0;J=1.0}else{ia=+g[b+124>>2];ea=+g[b+128>>2];fa=K*ia-J*ea;ea=J*ia+K*ea;ia=+g[b+108>>2]- +g[V>>2];ha=+g[b+112>>2]- +g[b+196>>2];ga=+g[b+92>>2]- +g[W>>2];U=+g[b+96>>2]- +g[b+180>>2];ka=+fa;ja=+ea;da=b+240|0;g[da>>2]=ka;g[da+4>>2]=ja;J=ea*(K*ia-J*ha)-fa*(J*ia+K*ha);g[b+264>>2]=J;K=ea*(I*ga-L*U)-fa*(L*ga+I*U);g[b+256>>2]=K;U=A+y+J*E*J+K*C*K;L=fa;I=ea}U=U+0.0;g[H>>2]=U;if((c[b+80>>2]|0)==1){g[b+248>>2]=0.0;g[b+252>>2]=0.0;N=+g[b+152>>2];g[b+260>>2]=N;g[b+268>>2]=N;T=N*N*(D+F);M=0.0;P=0.0;S=N}else{la=+g[b+132>>2];fa=+g[b+136>>2];ga=T*la-N*fa;fa=N*la+T*fa;la=+g[b+116>>2]-P;ea=+g[b+120>>2]- +g[b+204>>2];ha=+g[b+100>>2]- +g[O>>2];ia=+g[b+104>>2]- +g[b+188>>2];ja=+g[b+152>>2];ka=ga*ja;P=fa*ja;na=+ka;ma=+P;da=b+248|0;g[da>>2]=na;g[da+4>>2]=ma;N=(fa*(T*la-N*ea)-ga*(N*la+T*ea))*ja;g[b+268>>2]=N;S=ja*(fa*(S*ha-M*ia)-ga*(M*ha+S*ia));g[b+260>>2]=S;T=ja*ja*(B+z)+N*F*N+S*S*D;M=ka}T=U+T;g[H>>2]=T;if(T>0.0)T=1.0/T;else T=0.0;g[H>>2]=T;H=b+156|0;if(!(a[d+20>>0]|0)){g[H>>2]=0.0;T=G;U=u;fa=f;ga=h;ia=j;ja=l;la=m;ma=n;ea=o;ha=p;ka=q;na=r;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)|0;T=+T;U=+U;ca=da;g[ca>>2]=T;da=da+4|0;g[da>>2]=U;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ea;da=c[e>>2]|0;da=ca+(da*12|0)|0;fa=+fa;ga=+ga;ca=da;g[ca>>2]=fa;da=da+4|0;g[da>>2]=ga;da=c[e>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ha;da=c[v>>2]|0;da=ca+(da*12|0)|0;ia=+ia;ja=+ja;ca=da;g[ca>>2]=ia;da=da+4|0;g[da>>2]=ja;da=c[v>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ka;da=c[w>>2]|0;da=ca+(da*12|0)|0;la=+la;ma=+ma;ca=da;g[ca>>2]=la;da=da+4|0;g[da>>2]=ma;da=c[w>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=na;i=x;return}else{na=+g[H>>2];U=y*na;ga=na*z;ja=na*A;ma=na*B;T=G+L*U;U=u+U*I;fa=f+M*ga;ga=h+ga*P;ia=j-L*ja;ja=l-I*ja;la=m-M*ma;ma=n-P*ma;ea=o+na*C*K;ha=p+na*D*S;ka=q-na*E*J;na=r-na*F*N;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)|0;T=+T;U=+U;ca=da;g[ca>>2]=T;da=da+4|0;g[da>>2]=U;da=c[s>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ea;da=c[e>>2]|0;da=ca+(da*12|0)|0;fa=+fa;ga=+ga;ca=da;g[ca>>2]=fa;da=da+4|0;g[da>>2]=ga;da=c[e>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ha;da=c[v>>2]|0;da=ca+(da*12|0)|0;ia=+ia;ja=+ja;ca=da;g[ca>>2]=ia;da=da+4|0;g[da>>2]=ja;da=c[v>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=ka;da=c[w>>2]|0;da=ca+(da*12|0)|0;la=+la;ma=+ma;ca=da;g[ca>>2]=la;da=da+4|0;g[da>>2]=ma;da=c[w>>2]|0;ca=c[t>>2]|0;da=ca+(da*12|0)+8|0;g[da>>2]=na;i=x;return}}function Iz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0;d=i;z=a+160|0;u=c[z>>2]|0;e=b+28|0;H=c[e>>2]|0;n=H+(u*12|0)|0;C=+g[n>>2];D=+g[n+4>>2];w=+g[H+(u*12|0)+8>>2];u=a+164|0;n=c[u>>2]|0;b=H+(n*12|0)|0;x=+g[b>>2];y=+g[b+4>>2];p=+g[H+(n*12|0)+8>>2];n=a+168|0;b=c[n>>2]|0;G=H+(b*12|0)|0;t=+g[G>>2];s=+g[G+4>>2];h=+g[H+(b*12|0)+8>>2];b=a+172|0;G=c[b>>2]|0;I=H+(G*12|0)|0;m=+g[I>>2];l=+g[I+4>>2];F=+g[H+(G*12|0)+8>>2];q=+g[a+240>>2];r=+g[a+244>>2];j=+g[a+248>>2];k=+g[a+252>>2];A=+g[a+256>>2];o=+g[a+264>>2];v=+g[a+260>>2];f=+g[a+268>>2];B=+g[a+272>>2]*((C-t)*q+(D-s)*r+((x-m)*j+(y-l)*k)+(w*A-h*o+(p*v-F*f)));E=-B;G=a+156|0;g[G>>2]=+g[G>>2]-B;B=+g[a+208>>2]*E;A=w+ +g[a+224>>2]*E*A;w=+g[a+212>>2]*E;v=p+ +g[a+228>>2]*E*v;p=+g[a+216>>2]*E;o=h- +g[a+232>>2]*E*o;h=+g[a+220>>2]*E;f=F- +g[a+236>>2]*E*f;C=+(C+q*B);B=+(D+r*B);a=(c[e>>2]|0)+((c[z>>2]|0)*12|0)|0;g[a>>2]=C;g[a+4>>2]=B;a=c[e>>2]|0;g[a+((c[z>>2]|0)*12|0)+8>>2]=A;x=+(x+j*w);w=+(y+w*k);a=a+((c[u>>2]|0)*12|0)|0;g[a>>2]=x;g[a+4>>2]=w;a=c[e>>2]|0;g[a+((c[u>>2]|0)*12|0)+8>>2]=v;q=+(t-q*p);p=+(s-r*p);a=a+((c[n>>2]|0)*12|0)|0;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m-j*h);h=+(l-k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function Jz(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0,r=0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,S=0,T=0,U=0.0,V=0.0,W=0.0,X=0.0,Y=0.0,Z=0.0,_=0.0;e=i;d=a+160|0;n=c[d>>2]|0;q=b+24|0;S=c[q>>2]|0;u=S+(n*12|0)|0;b=u;w=+g[b>>2];v=+g[b+4>>2];t=+g[S+(n*12|0)+8>>2];b=a+164|0;n=c[b>>2]|0;r=S+(n*12|0)|0;h=+g[r>>2];j=+g[r+4>>2];k=+g[S+(n*12|0)+8>>2];n=a+168|0;r=c[n>>2]|0;P=S+(r*12|0)|0;l=+g[P>>2];m=+g[P+4>>2];o=+g[S+(r*12|0)+8>>2];r=a+172|0;P=c[r>>2]|0;T=S+(P*12|0)|0;p=+g[T>>2];f=+g[T+4>>2];s=+g[S+(P*12|0)+8>>2];x=+R(+t);y=+Q(+t);G=+R(+k);H=+Q(+k);F=+R(+o);I=+Q(+o);E=+R(+s);D=+Q(+s);if((c[a+76>>2]|0)==1){O=+g[a+224>>2];I=+g[a+232>>2];B=0.0;C=0.0;z=O;x=I;A=1.0;y=1.0;F=t-o- +g[a+140>>2];I=O+I}else{X=+g[a+124>>2];V=+g[a+128>>2];B=I*X-F*V;C=F*X+I*V;W=+g[a+108>>2]- +g[a+192>>2];K=+g[a+112>>2]- +g[a+196>>2];L=+g[a+92>>2]- +g[a+176>>2];U=+g[a+96>>2]- +g[a+180>>2];J=y*L-x*U;U=x*L+y*U;L=C*(I*W-F*K)-B*(F*W+I*K);O=C*J-B*U;M=+g[a+232>>2];N=+g[a+224>>2];J=w-l+J;U=v-m+U;z=N;x=M;A=O;y=L;F=X*(I*J+F*U-W)+V*(I*U-F*J-K);I=+g[a+216>>2]+ +g[a+208>>2]+L*L*M+O*N*O}if((c[a+80>>2]|0)==1){G=+g[a+152>>2];M=+g[a+228>>2];H=+g[a+236>>2];O=G*G*(M+H);N=G;J=0.0;K=0.0;L=G;D=k-s- +g[a+144>>2]}else{Z=+g[a+132>>2];U=+g[a+136>>2];J=D*Z-E*U;_=E*Z+D*U;Y=+g[a+116>>2]- +g[a+200>>2];X=+g[a+120>>2]- +g[a+204>>2];K=+g[a+100>>2]- +g[a+184>>2];V=+g[a+104>>2]- +g[a+188>>2];W=H*K-G*V;V=G*K+H*V;K=+g[a+152>>2];G=K*(_*(D*Y-E*X)-J*(E*Y+D*X));L=K*(_*W-J*V);H=+g[a+236>>2];M=+g[a+228>>2];W=h-p+W;V=j-f+V;O=K*K*(+g[a+220>>2]+ +g[a+212>>2])+G*G*H+L*M*L;N=K;J=J*K;K=_*K;D=Z*(D*W+E*V-Y)+U*(D*V-E*W-X)}E=I+0.0+O;if(E>0.0)D=-(F+D*N- +g[a+148>>2])/E;else D=0.0;X=D*+g[a+208>>2];Y=D*+g[a+212>>2];Z=D*+g[a+216>>2];_=D*+g[a+220>>2];W=+(w+B*X);X=+(v+C*X);T=u;g[T>>2]=W;g[T+4>>2]=X;T=c[q>>2]|0;g[T+((c[d>>2]|0)*12|0)+8>>2]=t+A*D*z;X=+(h+J*Y);Y=+(j+K*Y);T=T+((c[b>>2]|0)*12|0)|0;g[T>>2]=X;g[T+4>>2]=Y;T=c[q>>2]|0;g[T+((c[b>>2]|0)*12|0)+8>>2]=k+L*D*M;Y=+(l-B*Z);Z=+(m-C*Z);T=T+((c[n>>2]|0)*12|0)|0;g[T>>2]=Y;g[T+4>>2]=Z;T=c[q>>2]|0;g[T+((c[n>>2]|0)*12|0)+8>>2]=o-y*D*x;Z=+(p-J*_);_=+(f-K*_);T=T+((c[r>>2]|0)*12|0)|0;g[T>>2]=Z;g[T+4>>2]=_;g[(c[q>>2]|0)+((c[r>>2]|0)*12|0)+8>>2]=s-G*D*H;i=e;return 1}function Kz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+92>>2];f=+g[j+20>>2];e=+g[b+96>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Lz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+100>>2];f=+g[j+20>>2];e=+g[b+104>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Mz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0;e=+g[b+156>>2];d=e*+g[b+244>>2]*c;g[a>>2]=e*+g[b+240>>2]*c;g[a+4>>2]=d;return}function Nz(a,b){a=a|0;b=+b;return+(+g[a+156>>2]*+g[a+256>>2]*b)}function Oz(a){a=a|0;var b=0,e=0,f=0,j=0,l=0,m=0;b=i;i=i+16|0;e=b;m=c[(c[a+48>>2]|0)+8>>2]|0;l=c[(c[a+52>>2]|0)+8>>2]|0;j=c[(c[a+68>>2]|0)+56>>2]|0;f=c[(c[a+72>>2]|0)+56>>2]|0;Px(15568,e);c[e>>2]=m;Px(17784,e);c[e>>2]=l;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);c[e>>2]=j;Px(15592,e);c[e>>2]=f;Px(15624,e);h[k>>3]=+g[a+152>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17048,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function Pz(a){a=a|0;return}function Qz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Rz(a){a=a|0;a=i;i=i+16|0;Px(15856,a);i=a;return}function Sz(a){a=a|0;return}function Tz(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Uz(b,d){b=b|0;d=d|0;var e=0.0,f=0,h=0,j=0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0,C=0,D=0;l=i;B=c[b+52>>2]|0;h=c[B+8>>2]|0;j=b+116|0;c[j>>2]=h;z=B+28|0;A=c[z>>2]|0;z=c[z+4>>2]|0;f=b+128|0;c[f>>2]=A;c[f+4>>2]=z;m=+g[B+120>>2];g[b+136>>2]=m;e=+g[B+128>>2];g[b+140>>2]=e;f=c[d+24>>2]|0;C=f+(h*12|0)|0;r=+g[C>>2];p=+g[C+4>>2];u=+g[f+(h*12|0)+8>>2];f=d+28|0;C=c[f>>2]|0;D=C+(h*12|0)|0;o=+g[D>>2];n=+g[D+4>>2];q=+g[C+(h*12|0)+8>>2];w=+R(+u);u=+Q(+u);y=+g[B+116>>2];x=+g[b+84>>2]*6.2831854820251465;v=+g[d>>2];s=v*y*x*x;y=x*y*2.0*+g[b+88>>2]+s;x=(c[k>>2]=A,+g[k>>2]);t=(c[k>>2]=z,+g[k>>2]);if(!(y>1.1920928955078125e-7))Aa(16232,15984,125,16272);v=v*y;if(v!=0.0)v=1.0/v;g[b+108>>2]=v;s=s*v;g[b+92>>2]=s;x=+g[b+68>>2]-x;y=+g[b+72>>2]-t;t=u*x-w*y;u=w*x+u*y;y=+t;x=+u;D=b+120|0;g[D>>2]=y;g[D+4>>2]=x;x=v+(m+u*e*u);y=e*t;w=u*y;v=v+(m+t*y);y=x*v-w*w;if(y!=0.0)y=1.0/y;w=w*y;g[b+144>>2]=v*y;g[b+148>>2]=w;g[b+152>>2]=w;g[b+156>>2]=x*y;z=b+160|0;y=r+t- +g[b+76>>2];p=p+u- +g[b+80>>2];w=+y;x=+p;D=z;g[D>>2]=w;g[D+4>>2]=x;g[z>>2]=s*y;g[b+164>>2]=s*p;p=q*.9800000190734863;z=b+96|0;if(!(a[d+20>>0]|0)){g[z>>2]=0.0;g[b+100>>2]=0.0;w=o;x=n;y=p;D=c[f>>2]|0;D=D+(h*12|0)|0;w=+w;x=+x;C=D;g[C>>2]=w;D=D+4|0;g[D>>2]=x;D=c[j>>2]|0;C=c[f>>2]|0;D=C+(D*12|0)+8|0;g[D>>2]=y;i=l;return}else{v=+g[d+8>>2];y=v*+g[z>>2];g[z>>2]=y;D=b+100|0;v=v*+g[D>>2];g[D>>2]=v;w=o+m*y;x=n+v*m;y=p+e*(v*t-y*u);D=c[f>>2]|0;D=D+(h*12|0)|0;w=+w;x=+x;C=D;g[C>>2]=w;D=D+4|0;g[D>>2]=x;D=c[j>>2]|0;C=c[f>>2]|0;D=C+(D*12|0)+8|0;g[D>>2]=y;i=l;return}}function Vz(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0;o=i;e=a+116|0;s=c[e>>2]|0;f=b+28|0;r=c[f>>2]|0;h=r+(s*12|0)|0;x=h;k=+g[x>>2];j=+g[x+4>>2];n=+g[r+(s*12|0)+8>>2];l=+g[a+124>>2];m=+g[a+120>>2];t=+g[a+108>>2];s=a+96|0;w=+g[s>>2];r=a+100|0;q=+g[r>>2];u=-(k-n*l+ +g[a+160>>2]+t*w);t=-(j+n*m+ +g[a+164>>2]+t*q);v=+g[a+148>>2]*u+ +g[a+156>>2]*t;x=s;p=+g[x>>2];d=+g[x+4>>2];t=w+(+g[a+144>>2]*u+ +g[a+152>>2]*t);g[s>>2]=t;q=v+q;g[r>>2]=q;v=+g[b>>2]*+g[a+104>>2];u=q*q+t*t;if(u>v*v){w=v/+O(+u);t=t*w;g[s>>2]=t;q=w*q;g[r>>2]=q}u=t-p;t=q-d;v=+g[a+136>>2];w=n+ +g[a+140>>2]*(t*m-u*l);u=+(k+u*v);v=+(j+t*v);x=h;g[x>>2]=u;g[x+4>>2]=v;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=w;i=o;return}function Wz(a,b){a=a|0;b=b|0;return 1}function Xz(a,b){a=a|0;b=b|0;var d=0,e=0;e=b+76|0;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Yz(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function Zz(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+100>>2]*c;g[a>>2]=+g[b+96>>2]*c;g[a+4>>2]=d;return}function _z(a,b){a=a|0;b=+b;return+(b*0.0)}function $z(a,b){a=a|0;b=b|0;var c=0;c=a+76|0;g[c>>2]=+g[c>>2]- +g[b>>2];a=a+80|0;g[a>>2]=+g[a>>2]- +g[b+4>>2];return}function aA(a){a=a|0;a=i;i=i+16|0;Px(16328,a);i=a;return}function bA(a){a=a|0;return}function cA(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function dA(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0,r=0,s=0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0,O=0,P=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0.0,Z=0.0,_=0.0;s=i;q=c[b+48>>2]|0;W=c[q+8>>2]|0;p=b+144|0;c[p>>2]=W;V=c[b+52>>2]|0;T=c[V+8>>2]|0;r=b+148|0;c[r>>2]=T;P=q+28|0;S=c[P>>2]|0;P=c[P+4>>2]|0;N=b+152|0;c[N>>2]=S;c[N+4>>2]=P;N=V+28|0;O=c[N>>2]|0;N=c[N+4>>2]|0;M=b+160|0;c[M>>2]=O;c[M+4>>2]=N;M=b+168|0;g[M>>2]=+g[q+120>>2];u=+g[V+120>>2];g[b+172>>2]=u;v=+g[q+128>>2];g[b+176>>2]=v;x=+g[V+128>>2];g[b+180>>2]=x;V=c[d+24>>2]|0;q=V+(W*12|0)|0;D=+g[q>>2];G=+g[q+4>>2];L=+g[V+(W*12|0)+8>>2];q=d+28|0;U=c[q>>2]|0;X=U+(W*12|0)|0;h=+g[X>>2];j=+g[X+4>>2];n=+g[U+(W*12|0)+8>>2];W=V+(T*12|0)|0;y=+g[W>>2];t=+g[W+4>>2];f=+g[V+(T*12|0)+8>>2];V=U+(T*12|0)|0;l=+g[V>>2];m=+g[V+4>>2];o=+g[U+(T*12|0)+8>>2];A=+R(+L);L=+Q(+L);e=+R(+f);f=+Q(+f);w=+g[b+68>>2]-(c[k>>2]=S,+g[k>>2]);K=+g[b+72>>2]-(c[k>>2]=P,+g[k>>2]);B=L*w-A*K;K=A*w+L*K;w=+g[b+76>>2]-(c[k>>2]=O,+g[k>>2]);C=+g[b+80>>2]-(c[k>>2]=N,+g[k>>2]);J=f*w-e*C;C=e*w+f*C;D=y-D+J-B;G=t-G+C-K;t=+g[M>>2];y=+g[b+84>>2];f=+g[b+88>>2];w=L*y-A*f;f=A*y+L*f;y=+w;e=+f;M=b+184|0;g[M>>2]=y;g[M+4>>2]=e;B=B+D;K=K+G;e=B*f-K*w;g[b+208>>2]=e;y=J*f-C*w;g[b+212>>2]=y;I=t+u;E=v*e;F=x*y;H=I+e*E+y*F;if(H>0.0)z=1.0/H;else z=H;g[b+252>>2]=z;_=+g[b+92>>2];Z=+g[b+96>>2];z=L*_-A*Z;A=A*_+L*Z;Z=+z;_=+A;X=b+192|0;g[X>>2]=Z;g[X+4>>2]=_;B=B*A-K*z;g[b+200>>2]=B;C=J*A-C*z;g[b+204>>2]=C;_=v*B;Z=x*C;Y=_+Z;K=_*e+Z*y;J=x+v;L=E+F;g[b+216>>2]=I+B*_+C*Z;g[b+220>>2]=Y;g[b+224>>2]=K;g[b+228>>2]=Y;g[b+232>>2]=J==0.0?1.0:J;g[b+236>>2]=L;g[b+240>>2]=K;g[b+244>>2]=L;g[b+248>>2]=H;do if(a[b+136>>0]|0){D=D*w+G*f;E=+g[b+124>>2];F=+g[b+120>>2];G=E-F;if(!(G>0.0))G=-G;if(G<.009999999776482582){c[b+140>>2]=3;break}if(D<=F){M=b+140|0;if((c[M>>2]|0)==1)break;c[M>>2]=1;g[b+112>>2]=0.0;break}M=b+140|0;if(!(D>=E)){c[M>>2]=0;g[b+112>>2]=0.0;break}if((c[M>>2]|0)!=2){c[M>>2]=2;g[b+112>>2]=0.0}}else{c[b+140>>2]=0;g[b+112>>2]=0.0}while(0);if(!(a[b+137>>0]|0))g[b+116>>2]=0.0;M=b+104|0;if(!(a[d+20>>0]|0)){c[M+0>>2]=0;c[M+4>>2]=0;c[M+8>>2]=0;c[M+12>>2]=0;J=h;K=j;Y=l;Z=m;L=n;_=o;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)|0;J=+J;K=+K;W=X;g[W>>2]=J;X=X+4|0;g[X>>2]=K;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=L;X=c[r>>2]|0;X=W+(X*12|0)|0;Y=+Y;Z=+Z;W=X;g[W>>2]=Y;X=X+4|0;g[X>>2]=Z;X=c[r>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=_;i=s;return}else{W=d+8|0;_=+g[W>>2];I=_*+g[M>>2];g[M>>2]=I;X=b+108|0;H=_*+g[X>>2];g[X>>2]=H;X=b+112|0;_=_*+g[X>>2];g[X>>2]=_;X=b+116|0;Y=+g[W>>2]*+g[X>>2];g[X>>2]=Y;_=Y+_;Y=I*z+w*_;Z=I*A+_*f;J=h-t*Y;K=j-t*Z;Y=l+u*Y;Z=m+u*Z;L=n-v*(I*B+H+_*e);_=o+x*(H+I*C+_*y);X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)|0;J=+J;K=+K;W=X;g[W>>2]=J;X=X+4|0;g[X>>2]=K;X=c[p>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=L;X=c[r>>2]|0;X=W+(X*12|0)|0;Y=+Y;Z=+Z;W=X;g[W>>2]=Y;X=X+4|0;g[X>>2]=Z;X=c[r>>2]|0;W=c[q>>2]|0;X=W+(X*12|0)+8|0;g[X>>2]=_;i=s;return}}function eA(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0,s=0.0,t=0.0,u=0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0,B=0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0,I=0,J=0,K=0,L=0,M=0.0,N=0.0,O=0.0,P=0.0,Q=0,R=0.0;e=i;i=i+48|0;o=e+28|0;u=e+16|0;p=e+8|0;B=e;l=b+144|0;n=c[l>>2]|0;m=d+28|0;L=c[m>>2]|0;Q=L+(n*12|0)|0;v=+g[Q>>2];s=+g[Q+4>>2];w=+g[L+(n*12|0)+8>>2];n=b+148|0;Q=c[n>>2]|0;K=L+(Q*12|0)|0;t=+g[K>>2];q=+g[K+4>>2];z=+g[L+(Q*12|0)+8>>2];f=+g[b+168>>2];h=+g[b+172>>2];j=+g[b+176>>2];k=+g[b+180>>2];if((a[b+137>>0]|0)!=0?(c[b+140>>2]|0)!=3:0){M=+g[b+184>>2];G=+g[b+188>>2];O=+g[b+212>>2];N=+g[b+208>>2];Q=b+116|0;P=+g[Q>>2];D=+g[d>>2]*+g[b+128>>2];R=P+ +g[b+252>>2]*(+g[b+132>>2]-((t-v)*M+(q-s)*G+z*O-w*N));C=-D;D=R<D?R:D;D=D<C?C:D;g[Q>>2]=D;P=D-P;M=M*P;G=G*P;q=q+h*G;s=s-f*G;t=t+h*M;v=v-f*M;w=w-j*N*P;z=z+k*O*P}O=t-v;P=q-s;x=b+192|0;A=b+196|0;y=b+204|0;d=b+200|0;M=O*+g[x>>2]+P*+g[A>>2]+z*+g[y>>2]-w*+g[d>>2];N=z-w;if((a[b+136>>0]|0)!=0?(r=b+140|0,(c[r>>2]|0)!=0):0){J=b+184|0;L=b+188|0;B=b+212|0;K=b+208|0;H=b+104|0;C=+g[H>>2];I=b+108|0;D=+g[I>>2];F=b+112|0;G=+g[F>>2];E=b+216|0;M=-M;N=-N;O=-(O*+g[J>>2]+P*+g[L>>2]+z*+g[B>>2]-w*+g[K>>2]);g[u>>2]=M;g[u+4>>2]=N;g[u+8>>2]=O;Lx(o,E,u);g[H>>2]=+g[o>>2]+ +g[H>>2];Q=o+4|0;g[I>>2]=+g[Q>>2]+ +g[I>>2];u=o+8|0;O=+g[u>>2]+ +g[F>>2];g[F>>2]=O;r=c[r>>2]|0;if((r|0)==1){O=O>0.0?O:0.0;g[F>>2]=O}else if((r|0)==2){O=O<0.0?O:0.0;g[F>>2]=O}P=O-G;Mx(p,E,M- +g[b+240>>2]*P,N-P*+g[b+244>>2]);M=C+ +g[p>>2];N=D+ +g[p+4>>2];g[H>>2]=M;g[I>>2]=N;M=M-C;N=N-D;P=+g[F>>2]-G;g[o>>2]=M;g[Q>>2]=N;g[u>>2]=P;R=N+M*+g[y>>2]+P*+g[B>>2];O=M*+g[x>>2]+P*+g[J>>2];N=M*+g[d>>2]+N+P*+g[K>>2];P=M*+g[A>>2]+P*+g[L>>2];M=f*P;G=f*O;G=v-G;M=s-M;O=h*O;P=h*P;O=t+O;P=q+P;N=j*N;R=k*R;N=w-N;R=z+R;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)|0;G=+G;M=+M;L=Q;g[L>>2]=G;Q=Q+4|0;g[Q>>2]=M;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=N;Q=c[n>>2]|0;Q=L+(Q*12|0)|0;O=+O;P=+P;L=Q;g[L>>2]=O;Q=Q+4|0;g[Q>>2]=P;Q=c[n>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=R;i=e;return}Mx(B,b+216|0,-M,-N);P=+g[B>>2];Q=b+104|0;g[Q>>2]=P+ +g[Q>>2];N=+g[B+4>>2];Q=b+108|0;g[Q>>2]=N+ +g[Q>>2];R=N+P*+g[y>>2];O=P*+g[x>>2];N=P*+g[d>>2]+N;P=P*+g[A>>2];M=f*P;G=f*O;G=v-G;M=s-M;O=h*O;P=h*P;O=t+O;P=q+P;N=j*N;R=k*R;N=w-N;R=z+R;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)|0;G=+G;M=+M;L=Q;g[L>>2]=G;Q=Q+4|0;g[Q>>2]=M;Q=c[l>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=N;Q=c[n>>2]|0;Q=L+(Q*12|0)|0;O=+O;P=+P;L=Q;g[L>>2]=O;Q=Q+4|0;g[Q>>2]=P;Q=c[n>>2]|0;L=c[m>>2]|0;Q=L+(Q*12|0)+8|0;g[Q>>2]=R;i=e;return}function fA(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0,P=0,S=0,T=0.0,U=0.0,V=0.0;f=i;i=i+64|0;G=f+24|0;C=f+12|0;E=f;e=b+144|0;O=c[e>>2]|0;x=d+24|0;P=c[x>>2]|0;d=P+(O*12|0)|0;v=+g[d>>2];w=+g[d+4>>2];z=+g[P+(O*12|0)+8>>2];d=b+148|0;O=c[d>>2]|0;S=P+(O*12|0)|0;A=+g[S>>2];B=+g[S+4>>2];l=+g[P+(O*12|0)+8>>2];L=+R(+z);N=+Q(+z);m=+R(+l);I=+Q(+l);n=+g[b+168>>2];o=+g[b+172>>2];y=+g[b+176>>2];h=+g[b+180>>2];J=+g[b+68>>2]- +g[b+152>>2];p=+g[b+72>>2]- +g[b+156>>2];D=N*J-L*p;p=L*J+N*p;J=+g[b+76>>2]- +g[b+160>>2];q=+g[b+80>>2]- +g[b+164>>2];F=I*J-m*q;q=m*J+I*q;I=A+F-v-D;J=B+q-w-p;m=+g[b+84>>2];t=+g[b+88>>2];r=N*m-L*t;t=L*m+N*t;D=D+I;p=p+J;m=t*D-r*p;k=F*t-q*r;M=+g[b+92>>2];u=+g[b+96>>2];s=N*M-L*u;u=L*M+N*u;p=u*D-s*p;q=F*u-q*s;F=s*I+u*J;D=l-z- +g[b+100>>2];if(F>0.0)H=F;else H=-F;if(D>0.0)j=D;else j=-D;do if(a[b+136>>0]|0){I=r*I+t*J;J=+g[b+124>>2];K=+g[b+120>>2];L=J-K;if(!(L>0.0))L=-L;if(L<.009999999776482582){J=I<.20000000298023224?I:.20000000298023224;if(!(I>0.0))I=-I;K=J<-.20000000298023224?-.20000000298023224:J;b=1;H=H>I?H:I;break}if(I<=K){M=I-K+.004999999888241291;M=M<0.0?M:0.0;N=K-I;K=M<-.20000000298023224?-.20000000298023224:M;b=1;H=H>N?H:N;break}if(I>=J){N=I-J;K=N+-.004999999888241291;K=K<.20000000298023224?K:.20000000298023224;K=K<0.0?0.0:K;b=1;H=H>N?H:N}else{K=0.0;b=0}}else{K=0.0;b=0}while(0);L=n+o;M=y*p;N=h*q;I=q*N+(L+p*M);J=N+M;if(b){U=k*N+m*M;V=y+h;N=y*m;M=h*k;T=M+N;g[G>>2]=I;g[G+4>>2]=J;g[G+8>>2]=U;g[G+12>>2]=J;g[G+16>>2]=V==0.0?1.0:V;g[G+20>>2]=T;g[G+24>>2]=U;g[G+28>>2]=T;g[G+32>>2]=k*M+(L+m*N);g[E>>2]=-F;g[E+4>>2]=-D;g[E+8>>2]=-K;Lx(C,G,E);D=+g[C>>2];K=+g[C+8>>2];F=+g[C+4>>2]}else{K=y+h;K=K==0.0?1.0:K;F=-F;L=-D;M=K*I-J*J;if(M!=0.0)M=1.0/M;D=(K*F-J*L)*M;K=0.0;F=(I*L-J*F)*M}U=r*K+s*D;V=t*K+u*D;N=+(v-n*U);T=+(w-n*V);S=(c[x>>2]|0)+((c[e>>2]|0)*12|0)|0;g[S>>2]=N;g[S+4>>2]=T;S=c[x>>2]|0;g[S+((c[e>>2]|0)*12|0)+8>>2]=z-y*(m*K+(F+p*D));U=+(A+o*U);V=+(B+o*V);S=S+((c[d>>2]|0)*12|0)|0;g[S>>2]=U;g[S+4>>2]=V;g[(c[x>>2]|0)+((c[d>>2]|0)*12|0)+8>>2]=l+h*(k*K+(F+q*D));if(!(H<=.004999999888241291)){S=0;i=f;return S|0}S=j<=.03490658849477768;i=f;return S|0}function gA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function hA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function iA(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0,f=0.0;f=+g[b+104>>2];e=+g[b+116>>2]+ +g[b+112>>2];d=(f*+g[b+196>>2]+e*+g[b+188>>2])*c;g[a>>2]=(f*+g[b+192>>2]+ +g[b+184>>2]*e)*c;g[a+4>>2]=d;return}function jA(a,b){a=a|0;b=+b;return+(+g[a+108>>2]*b)}function kA(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(16480,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);j=+g[a+88>>2];h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17984,e);h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17640,e);c[e>>2]=d[a+136>>0];Px(17280,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(16512,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(16552,e);c[e>>2]=d[a+137>>0];Px(18024,e);h[k>>3]=+g[a+132>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18056,e);h[k>>3]=+g[a+128>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(16592,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function lA(a){a=a|0;return}function mA(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function nA(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0,n=0,o=0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0,z=0,A=0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0,N=0,P=0,S=0,T=0,U=0.0;p=i;v=c[b+48>>2]|0;S=c[v+8>>2]|0;m=b+120|0;c[m>>2]=S;P=c[b+52>>2]|0;M=c[P+8>>2]|0;o=b+124|0;c[o>>2]=M;D=v+28|0;L=c[D>>2]|0;D=c[D+4>>2]|0;y=b+160|0;c[y>>2]=L;c[y+4>>2]=D;y=P+28|0;G=c[y>>2]|0;y=c[y+4>>2]|0;A=b+168|0;c[A>>2]=G;c[A+4>>2]=y;A=b+176|0;g[A>>2]=+g[v+120>>2];y=b+180|0;g[y>>2]=+g[P+120>>2];z=b+184|0;g[z>>2]=+g[v+128>>2];v=b+188|0;g[v>>2]=+g[P+128>>2];P=c[d+24>>2]|0;n=P+(S*12|0)|0;x=+g[n>>2];F=+g[n+4>>2];t=+g[P+(S*12|0)+8>>2];n=d+28|0;N=c[n>>2]|0;T=N+(S*12|0)|0;u=+g[T>>2];s=+g[T+4>>2];j=+g[N+(S*12|0)+8>>2];S=P+(M*12|0)|0;C=+g[S>>2];E=+g[S+4>>2];B=+g[P+(M*12|0)+8>>2];P=N+(M*12|0)|0;f=+g[P>>2];h=+g[P+4>>2];l=+g[N+(M*12|0)+8>>2];e=+R(+t);t=+Q(+t);K=+R(+B);B=+Q(+B);w=+g[b+92>>2]-(c[k>>2]=L,+g[k>>2]);r=+g[b+96>>2]-(c[k>>2]=D,+g[k>>2]);q=t*w-e*r;r=e*w+t*r;t=+q;w=+r;D=b+144|0;g[D>>2]=t;g[D+4>>2]=w;w=+g[b+100>>2]-(c[k>>2]=G,+g[k>>2]);t=+g[b+104>>2]- +g[b+172>>2];e=B*w-K*t;t=K*w+B*t;B=+e;w=+t;G=b+152|0;g[G>>2]=B;g[G+4>>2]=w;G=b+128|0;x=x+q- +g[b+68>>2];F=F+r- +g[b+72>>2];w=+x;B=+F;D=G;g[D>>2]=w;g[D+4>>2]=B;D=b+136|0;C=C+e- +g[b+76>>2];E=E+t- +g[b+80>>2];B=+C;w=+E;L=D;g[L>>2]=B;g[L+4>>2]=w;w=+O(+(x*x+F*F));B=+O(+(C*C+E*E));if(w>.04999999701976776){w=1.0/w;x=x*w;g[G>>2]=x;w=w*F}else{g[G>>2]=0.0;w=0.0;x=0.0}g[b+132>>2]=w;if(B>.04999999701976776){B=1.0/B;C=B*C;g[D>>2]=C;B=B*E}else{g[D>>2]=0.0;B=0.0;C=0.0}g[b+140>>2]=B;U=q*w-r*x;K=e*B-t*C;E=+g[A>>2];F=+g[z>>2];H=+g[y>>2];J=+g[v>>2];I=+g[b+112>>2];K=E+U*U*F+I*I*(H+K*K*J);if(K>0.0)K=1.0/K;g[b+192>>2]=K;if(!(a[d+20>>0]|0)){g[b+116>>2]=0.0;F=u;H=s;J=f;K=h;I=j;U=l;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)|0;F=+F;H=+H;S=T;g[S>>2]=F;T=T+4|0;g[T>>2]=H;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=I;T=c[o>>2]|0;T=S+(T*12|0)|0;J=+J;K=+K;S=T;g[S>>2]=J;T=T+4|0;g[T>>2]=K;T=c[o>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=U;i=p;return}else{T=b+116|0;U=+g[d+8>>2]*+g[T>>2];g[T>>2]=U;K=-U;x=x*K;w=w*K;I=-(U*I);U=C*I;B=B*I;C=u+x*E;E=s+w*E;I=f+U*H;K=h+B*H;H=j+F*(w*q-x*r);U=l+J*(B*e-U*t);T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)|0;F=+C;J=+E;S=T;g[S>>2]=F;T=T+4|0;g[T>>2]=J;T=c[m>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=H;T=c[o>>2]|0;T=S+(T*12|0)|0;J=+I;K=+K;S=T;g[S>>2]=J;T=T+4|0;g[T>>2]=K;T=c[o>>2]|0;S=c[n>>2]|0;T=S+(T*12|0)+8|0;g[T>>2]=U;i=p;return}}function oA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0,B=0;d=i;n=a+120|0;z=c[n>>2]|0;e=b+28|0;A=c[e>>2]|0;r=A+(z*12|0)|0;b=r;u=+g[b>>2];t=+g[b+4>>2];x=+g[A+(z*12|0)+8>>2];b=a+124|0;z=c[b>>2]|0;B=A+(z*12|0)|0;m=+g[B>>2];l=+g[B+4>>2];w=+g[A+(z*12|0)+8>>2];o=+g[a+148>>2];h=+g[a+144>>2];f=+g[a+156>>2];v=+g[a+152>>2];q=+g[a+128>>2];s=+g[a+132>>2];y=+g[a+112>>2];j=+g[a+136>>2];k=+g[a+140>>2];p=+g[a+192>>2]*(-((u-x*o)*q+(t+x*h)*s)-y*((m-w*f)*j+(l+w*v)*k));z=a+116|0;g[z>>2]=+g[z>>2]-p;q=q*p;s=s*p;p=y*p;j=j*p;k=p*k;p=+g[a+176>>2];o=x+ +g[a+184>>2]*(s*h-q*o);h=+g[a+180>>2];f=w+ +g[a+188>>2]*(k*v-j*f);q=+(u+q*p);p=+(t+s*p);a=r;g[a>>2]=q;g[a+4>>2]=p;a=c[e>>2]|0;g[a+((c[n>>2]|0)*12|0)+8>>2]=o;j=+(m+j*h);h=+(l+k*h);a=a+((c[b>>2]|0)*12|0)|0;g[a>>2]=j;g[a+4>>2]=h;g[(c[e>>2]|0)+((c[b>>2]|0)*12|0)+8>>2]=f;i=d;return}function pA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0,G=0,H=0,I=0.0;d=i;e=a+120|0;n=c[e>>2]|0;b=b+24|0;G=c[b>>2]|0;l=G+(n*12|0)|0;F=l;k=+g[F>>2];r=+g[F+4>>2];f=+g[G+(n*12|0)+8>>2];n=a+124|0;F=c[n>>2]|0;H=G+(F*12|0)|0;s=+g[H>>2];m=+g[H+4>>2];o=+g[G+(F*12|0)+8>>2];p=+R(+f);t=+Q(+f);y=+R(+o);v=+Q(+o);q=+g[a+92>>2]- +g[a+160>>2];j=+g[a+96>>2]- +g[a+164>>2];h=t*q-p*j;j=p*q+t*j;t=+g[a+100>>2]- +g[a+168>>2];q=+g[a+104>>2]- +g[a+172>>2];p=v*t-y*q;q=y*t+v*q;v=k+h- +g[a+68>>2];t=r+j- +g[a+72>>2];y=s+p- +g[a+76>>2];x=m+q- +g[a+80>>2];w=+O(+(v*v+t*t));u=+O(+(y*y+x*x));if(w>.04999999701976776){E=1.0/w;t=t*E;v=v*E}else{t=0.0;v=0.0}if(u>.04999999701976776){D=1.0/u;x=x*D;D=y*D}else{x=0.0;D=0.0}I=h*t-j*v;E=p*x-q*D;A=+g[a+176>>2];z=+g[a+184>>2];y=+g[a+180>>2];B=+g[a+188>>2];C=+g[a+112>>2];E=A+I*I*z+C*C*(y+E*E*B);if(E>0.0)E=1.0/E;u=+g[a+108>>2]-w-u*C;if(u>0.0)w=u;else w=-u;E=E*u;v=v*E;u=t*E;E=E*C;I=D*E;E=x*E;D=+(k+v*A);C=+(r+u*A);H=l;g[H>>2]=D;g[H+4>>2]=C;H=c[b>>2]|0;g[H+((c[e>>2]|0)*12|0)+8>>2]=f+(h*u-j*v)*z;C=+(s+I*y);D=+(m+E*y);H=H+((c[n>>2]|0)*12|0)|0;g[H>>2]=C;g[H+4>>2]=D;g[(c[b>>2]|0)+((c[n>>2]|0)*12|0)+8>>2]=o+B*(p*E-q*I);i=d;return w<.004999999888241291|0}function qA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+92>>2];f=+g[j+20>>2];e=+g[b+96>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function rA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+100>>2];f=+g[j+20>>2];e=+g[b+104>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function sA(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0;e=+g[b+116>>2];d=e*+g[b+140>>2]*c;g[a>>2]=e*+g[b+136>>2]*c;g[a+4>>2]=d;return}function tA(a,b){a=a|0;b=+b;return 0.0}function uA(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(16864,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(16888,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(16936,e);j=+g[a+96>>2];h[k>>3]=+g[a+92>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+104>>2];h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(16984,e);h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17016,e);h[k>>3]=+g[a+112>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17048,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function vA(a,b){a=a|0;b=b|0;var c=0,d=0;c=a+68|0;g[c>>2]=+g[c>>2]- +g[b>>2];c=b+4|0;d=a+72|0;g[d>>2]=+g[d>>2]- +g[c>>2];d=a+76|0;g[d>>2]=+g[d>>2]- +g[b>>2];b=a+80|0;g[b>>2]=+g[b>>2]- +g[c>>2];return}function wA(a){a=a|0;return}function xA(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function yA(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0,J=0,K=0,L=0,M=0,N=0,O=0.0,P=0.0,S=0.0;q=i;o=c[b+48>>2]|0;M=c[o+8>>2]|0;n=b+128|0;c[n>>2]=M;L=c[b+52>>2]|0;J=c[L+8>>2]|0;p=b+132|0;c[p>>2]=J;H=o+28|0;I=c[H>>2]|0;H=c[H+4>>2]|0;C=b+152|0;c[C>>2]=I;c[C+4>>2]=H;C=L+28|0;G=c[C>>2]|0;C=c[C+4>>2]|0;K=b+160|0;c[K>>2]=G;c[K+4>>2]=C;r=+g[o+120>>2];g[b+168>>2]=r;s=+g[L+120>>2];g[b+172>>2]=s;t=+g[o+128>>2];g[b+176>>2]=t;e=+g[L+128>>2];g[b+180>>2]=e;L=c[d+24>>2]|0;A=+g[L+(M*12|0)+8>>2];o=d+28|0;K=c[o>>2]|0;N=K+(M*12|0)|0;w=+g[N>>2];f=+g[N+4>>2];l=+g[K+(M*12|0)+8>>2];z=+g[L+(J*12|0)+8>>2];L=K+(J*12|0)|0;h=+g[L>>2];j=+g[L+4>>2];m=+g[K+(J*12|0)+8>>2];x=+R(+A);y=+Q(+A);F=+R(+z);D=+Q(+z);B=+g[b+68>>2]-(c[k>>2]=I,+g[k>>2]);v=+g[b+72>>2]-(c[k>>2]=H,+g[k>>2]);u=y*B-x*v;v=x*B+y*v;y=+u;B=+v;H=b+136|0;g[H>>2]=y;g[H+4>>2]=B;B=+g[b+76>>2]-(c[k>>2]=G,+g[k>>2]);y=+g[b+80>>2]-(c[k>>2]=C,+g[k>>2]);x=D*B-F*y;y=F*B+D*y;D=+x;B=+y;C=b+144|0;g[C>>2]=D;g[C+4>>2]=B;B=t+e;C=B==0.0;D=r+s;g[b+184>>2]=D+t*v*v+e*y*y;F=-(t*v*u)-e*y*x;g[b+196>>2]=F;E=-(t*v)-e*y;g[b+208>>2]=E;g[b+188>>2]=F;g[b+200>>2]=D+t*u*u+e*x*x;D=t*u+e*x;g[b+212>>2]=D;g[b+192>>2]=E;g[b+204>>2]=D;g[b+216>>2]=B;if(B>0.0)B=1.0/B;g[b+220>>2]=B;if((a[b+100>>0]|0)==0|C)g[b+96>>2]=0.0;do if((a[b+112>>0]|0)==0|C)c[b+224>>2]=0;else{z=z-A- +g[b+116>>2];A=+g[b+124>>2];B=+g[b+120>>2];D=A-B;if(!(D>0.0))D=-D;if(D<.06981317698955536){c[b+224>>2]=3;break}if(z<=B){C=b+224|0;if((c[C>>2]|0)!=1)g[b+92>>2]=0.0;c[C>>2]=1;break}C=b+224|0;if(!(z>=A)){c[C>>2]=0;g[b+92>>2]=0.0;break}if((c[C>>2]|0)!=2)g[b+92>>2]=0.0;c[C>>2]=2}while(0);C=b+84|0;if(!(a[d+20>>0]|0)){c[C+0>>2]=0;c[C+4>>2]=0;c[C+8>>2]=0;c[C+12>>2]=0;z=w;A=f;D=h;E=j;B=l;F=m;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;z=+z;A=+A;M=N;g[M>>2]=z;N=N+4|0;g[N>>2]=A;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=B;N=c[p>>2]|0;N=M+(N*12|0)|0;D=+D;E=+E;M=N;g[M>>2]=D;N=N+4|0;g[N>>2]=E;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;i=q;return}else{M=d+8|0;S=+g[M>>2];F=S*+g[C>>2];g[C>>2]=F;N=b+88|0;O=S*+g[N>>2];g[N>>2]=O;N=b+92|0;S=S*+g[N>>2];g[N>>2]=S;N=b+96|0;P=+g[M>>2]*+g[N>>2];g[N>>2]=P;z=w-r*F;A=f-r*O;D=h+s*F;E=j+s*O;B=l-t*(S+(P+(O*u-F*v)));F=m+e*(S+(P+(O*x-F*y)));N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;z=+z;A=+A;M=N;g[M>>2]=z;N=N+4|0;g[N>>2]=A;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=B;N=c[p>>2]|0;N=M+(N*12|0)|0;D=+D;E=+E;M=N;g[M>>2]=D;N=N+4|0;g[N>>2]=E;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=F;i=q;return}}



function Xs(a,d){a=a|0;d=d|0;var e=0,f=0,g=0,h=0,j=0;e=i;f=a+88|0;g=c[f>>2]|0;if(c[g+102868>>2]&2)Aa(9352,9088,456,9576);h=a+4|0;j=b[h>>1]|0;if(!((j&32)!=0^d)){i=e;return}j=j&65535;if(d){b[h>>1]=j|32;f=g+102872|0;g=c[a+100>>2]|0;if(!g){i=e;return}a=a+12|0;do{oy(g,f,a);g=c[g+4>>2]|0}while((g|0)!=0);i=e;return}b[h>>1]=j&65503;g=g+102872|0;d=c[a+100>>2]|0;if(d)do{py(d,g);d=c[d+4>>2]|0}while((d|0)!=0);a=a+112|0;g=c[a>>2]|0;if(g)do{j=g;g=c[g+12>>2]|0;Zx((c[f>>2]|0)+102872|0,c[j+4>>2]|0)}while((g|0)!=0);c[a>>2]=0;i=e;return}function Ys(a){a=a|0;return(b[a+4>>1]&32)!=0|0}function Zs(a,c){a=a|0;c=c|0;var d=0,f=0,h=0;d=i;h=a+4|0;f=e[h>>1]|0;if(!((f&16|0)!=0^c)){i=d;return}b[h>>1]=c?f|16:f&65519;g[a+72>>2]=0.0;Sx(a);i=d;return}function _s(a){a=a|0;return(b[a+4>>1]&16)!=0|0}function $s(a){a=a|0;return c[a+100>>2]|0}function at(a){a=a|0;return c[a+108>>2]|0}function bt(a){a=a|0;return c[a+112>>2]|0}function ct(a){a=a|0;return c[a+96>>2]|0}function dt(a){a=a|0;return c[a+148>>2]|0}function et(a,b){a=a|0;b=b|0;c[a+148>>2]=b;return}function ft(a){a=a|0;return c[a+88>>2]|0}function gt(a){a=a|0;var b=0;b=i;Wx(a);i=b;return}function ht(a){a=a|0;return a+68|0}function it(a){a=a|0;return a+76|0}function jt(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0){g[a+96>>2]=b;i=d;return}else Aa(14968,15008,217,15064)}function kt(a){a=a|0;return+(+g[a+96>>2])}function lt(a,b){a=a|0;b=+b;var d=0;d=i;if(((g[k>>2]=b,c[k>>2]|0)&2139095040|0)!=2139095040&b>=0.0){g[a+100>>2]=b;i=d;return}else Aa(15080,15008,228,15120)}function mt(a){a=a|0;return+(+g[a+100>>2])}function nt(a){a=a|0;return c[a+4>>2]|0}function ot(a){a=a|0;return c[a+48>>2]|0}function pt(a){a=a|0;return c[a+52>>2]|0}function qt(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[816]|0)==0?(wa(816)|0)!=0:0)Da(816);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=808;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 808}function rt(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[832]|0)==0?(wa(832)|0)!=0:0)Da(832);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=824;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 824}function st(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[848]|0)==0?(wa(848)|0)!=0:0)Da(848);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=840;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 840}function tt(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function ut(a){a=a|0;return c[a+12>>2]|0}function vt(a){a=a|0;return c[a+64>>2]|0}function wt(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function xt(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function yt(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function zt(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function At(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function Bt(){var b=0,d=0;b=i;d=RB(32)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(32)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=6;c[d+20>>2]=0;c[d+24>>2]=0;g[d+28>>2]=1.0;i=b;return d|0}function Ct(a){a=a|0;return c[a+20>>2]|0}function Dt(a,b){a=a|0;b=b|0;c[a+20>>2]=b;return}function Et(a){a=a|0;return c[a+24>>2]|0}function Ft(a,b){a=a|0;b=b|0;c[a+24>>2]=b;return}function Gt(a){a=a|0;return+(+g[a+28>>2])}function Ht(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function It(a){a=a|0;return c[a>>2]|0}function Jt(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Kt(a){a=a|0;return c[a+4>>2]|0}function Lt(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Mt(a){a=a|0;return c[a+8>>2]|0}function Nt(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Ot(a){a=a|0;return c[a+12>>2]|0}function Pt(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Qt(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Rt(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function St(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Tt(a){a=a|0;return a+68|0}function Ut(a){a=a|0;return a+76|0}function Vt(a){a=a|0;return+(+g[a+116>>2])}function Wt(a){a=a|0;return+(+g[(c[a+52>>2]|0)+56>>2]- +g[(c[a+48>>2]|0)+56>>2]- +g[a+116>>2])}function Xt(a){a=a|0;return+(+g[(c[a+52>>2]|0)+72>>2]- +g[(c[a+48>>2]|0)+72>>2])}function Yt(b){b=b|0;return(a[b+112>>0]|0)!=0|0}function Zt(f,h){f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0;j=i;k=f+112|0;if((h&1|0)==(d[k>>0]|0|0)){i=j;return}l=c[f+48>>2]|0;m=l+4|0;n=e[m>>1]|0;if(!(n&2)){b[m>>1]=n|2;g[l+144>>2]=0.0}l=c[f+52>>2]|0;m=l+4|0;n=e[m>>1]|0;if(!(n&2)){b[m>>1]=n|2;g[l+144>>2]=0.0}a[k>>0]=h&1;g[f+92>>2]=0.0;i=j;return}function _t(a){a=a|0;return+(+g[a+120>>2])}function $t(a){a=a|0;return+(+g[a+124>>2])}function au(a,d,f){a=a|0;d=+d;f=+f;var h=0,j=0,k=0,l=0,m=0;j=i;if(!(d<=f))Aa(17160,17176,471,17232);h=a+120|0;if(!(+g[h>>2]!=d)?!(+g[a+124>>2]!=f):0){i=j;return}m=c[a+48>>2]|0;k=m+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[m+144>>2]=0.0}l=c[a+52>>2]|0;m=l+4|0;k=e[m>>1]|0;if(!(k&2)){b[m>>1]=k|2;g[l+144>>2]=0.0}g[a+92>>2]=0.0;g[h>>2]=d;g[a+124>>2]=f;i=j;return}function bu(b){b=b|0;return(a[b+100>>0]|0)!=0|0}function cu(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0;h=i;j=c[d+48>>2]|0;k=j+4|0;l=e[k>>1]|0;if(!(l&2)){b[k>>1]=l|2;g[j+144>>2]=0.0}l=c[d+52>>2]|0;k=l+4|0;j=e[k>>1]|0;if(j&2){l=d+100|0;k=f&1;a[l>>0]=k;i=h;return}b[k>>1]=j|2;g[l+144>>2]=0.0;l=d+100|0;k=f&1;a[l>>0]=k;i=h;return}function du(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+108|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+108|0;g[k>>2]=d;i=f;return}function eu(a){a=a|0;return+(+g[a+108>>2])}function fu(a,d){a=a|0;d=+d;var f=0,h=0,j=0,k=0;f=i;h=c[a+48>>2]|0;j=h+4|0;k=e[j>>1]|0;if(!(k&2)){b[j>>1]=k|2;g[h+144>>2]=0.0}k=c[a+52>>2]|0;j=k+4|0;h=e[j>>1]|0;if(h&2){k=a+104|0;g[k>>2]=d;i=f;return}b[j>>1]=h|2;g[k+144>>2]=0.0;k=a+104|0;g[k>>2]=d;i=f;return}function gu(a){a=a|0;return+(+g[a+104>>2])}function hu(a,b){a=a|0;b=+b;return+(+g[a+96>>2]*b)}function iu(a){a=a|0;return c[a+4>>2]|0}function ju(a){a=a|0;return c[a+48>>2]|0}function ku(a){a=a|0;return c[a+52>>2]|0}function lu(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[864]|0)==0?(wa(864)|0)!=0:0)Da(864);lb[c[c[b>>2]>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=856;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 856}function mu(b){b=b|0;var d=0,e=0,f=0;e=i;i=i+16|0;d=e;if((a[880]|0)==0?(wa(880)|0)!=0:0)Da(880);lb[c[(c[b>>2]|0)+4>>2]&127](d,b);f=d;b=c[f+4>>2]|0;d=872;c[d>>2]=c[f>>2];c[d+4>>2]=b;i=e;return 872}function nu(b,d){b=b|0;d=+d;var e=0,f=0,g=0;f=i;i=i+16|0;e=f;if((a[896]|0)==0?(wa(896)|0)!=0:0)Da(896);rb[c[(c[b>>2]|0)+8>>2]&63](e,b,d);g=e;b=c[g+4>>2]|0;e=888;c[e>>2]=c[g>>2];c[e+4>>2]=b;i=f;return 888}function ou(a,b){a=a|0;b=+b;var d=0;d=i;b=+ib[c[(c[a>>2]|0)+12>>2]&63](a,b);i=d;return+b}function pu(a){a=a|0;return c[a+12>>2]|0}function qu(a){a=a|0;return c[a+64>>2]|0}function ru(a,b){a=a|0;b=b|0;c[a+64>>2]=b;return}function su(a){a=a|0;var d=0;d=i;if(!(b[(c[a+48>>2]|0)+4>>1]&32)){a=0;i=d;return a|0}a=(b[(c[a+52>>2]|0)+4>>1]&32)!=0;i=d;return a|0}function tu(b){b=b|0;return(a[b+61>>0]|0)!=0|0}function uu(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+28>>2]&127](a);i=b;return}function vu(a){a=a|0;var b=0;b=i;if(!a){i=b;return}jb[c[(c[a>>2]|0)+4>>2]&127](a);i=b;return}function wu(){var a=0,b=0;a=i;b=RB(16)|0;a:do if(!b){while(1){b=c[4698]|0;c[4698]=b+0;if(!b)break;qb[b&63]();b=RB(16)|0;if(b)break a}b=cb(4)|0;c[b>>2]=18632;_a(b|0,18680,116)}while(0);c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return b|0}function xu(a){a=a|0;return c[a>>2]|0}function yu(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function zu(a){a=a|0;return c[a+4>>2]|0}function Au(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Bu(a){a=a|0;return c[a+8>>2]|0}function Cu(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Du(a){a=a|0;return c[a+12>>2]|0}function Eu(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Fu(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Gu(){var b=0,d=0;b=i;d=RB(40)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(40)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=10;g[d+20>>2]=-1.0;g[d+24>>2]=0.0;g[d+28>>2]=1.0;g[d+32>>2]=0.0;g[d+36>>2]=0.0;i=b;return d|0}function Hu(a){a=a|0;return a+20|0}function Iu(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Ju(a){a=a|0;return a+28|0}function Ku(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+28|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Lu(a){a=a|0;return+(+g[a+36>>2])}function Mu(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function Nu(a){a=a|0;return c[a>>2]|0}function Ou(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function Pu(a){a=a|0;return c[a+4>>2]|0}function Qu(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function Ru(a){a=a|0;return c[a+8>>2]|0}function Su(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function Tu(a){a=a|0;return c[a+12>>2]|0}function Uu(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function Vu(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function Wu(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function Xu(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function Yu(){var b=0,d=0;b=i;d=RB(44)|0;a:do if(!d){while(1){d=c[4698]|0;c[4698]=d+0;if(!d)break;qb[d&63]();d=RB(44)|0;if(d)break a}d=cb(4)|0;c[d>>2]=18632;_a(d|0,18680,116)}while(0);c[d+0>>2]=0;c[d+4>>2]=0;c[d+8>>2]=0;c[d+12>>2]=0;a[d+16>>0]=0;c[d>>2]=11;g[d+20>>2]=0.0;g[d+24>>2]=0.0;g[d+28>>2]=0.0;g[d+32>>2]=1.0;g[d+36>>2]=1.0;g[d+40>>2]=.30000001192092896;i=b;return d|0}function Zu(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;e=i;c[a+8>>2]=b;c[a+12>>2]=d;f=d+12|0;k=+g[f>>2];k=k- +g[b+12>>2];l=+g[f+4>>2]- +g[b+16>>2];m=+g[b+24>>2];h=+g[b+20>>2];j=+(k*m+l*h);h=+(m*l-k*h);f=a+20|0;g[f>>2]=j;g[f+4>>2]=h;g[a+28>>2]=+g[d+56>>2]- +g[b+56>>2];i=e;return}function _u(a){a=a|0;return a+20|0}function $u(a,b){a=a|0;b=b|0;var d=0,e=0;e=b;d=c[e+4>>2]|0;b=a+20|0;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function av(a){a=a|0;return+(+g[a+28>>2])}function bv(a,b){a=a|0;b=+b;g[a+28>>2]=b;return}function cv(a){a=a|0;return+(+g[a+32>>2])}function dv(a,b){a=a|0;b=+b;g[a+32>>2]=b;return}function ev(a){a=a|0;return+(+g[a+36>>2])}function fv(a,b){a=a|0;b=+b;g[a+36>>2]=b;return}function gv(a){a=a|0;return+(+g[a+40>>2])}function hv(a,b){a=a|0;b=+b;g[a+40>>2]=b;return}function iv(a){a=a|0;return c[a>>2]|0}function jv(a,b){a=a|0;b=b|0;c[a>>2]=b;return}function kv(a){a=a|0;return c[a+4>>2]|0}function lv(a,b){a=a|0;b=b|0;c[a+4>>2]=b;return}function mv(a){a=a|0;return c[a+8>>2]|0}function nv(a,b){a=a|0;b=b|0;c[a+8>>2]=b;return}function ov(a){a=a|0;return c[a+12>>2]|0}function pv(a,b){a=a|0;b=b|0;c[a+12>>2]=b;return}function qv(b){b=b|0;return(a[b+16>>0]|0)!=0|0}function rv(b,c){b=b|0;c=c|0;a[b+16>>0]=c&1;return}function sv(a){a=a|0;var b=0;b=i;if(a)SB(a);i=b;return}function tv(){return 0}function uv(){return 1}function vv(){return 2}function wv(){return 3}function xv(){return 4}function yv(){return 0}function zv(){return 1}function Av(){return 2}function Bv(){return 3}function Cv(){return 4}function Dv(){return 5}function Ev(){return 6}function Fv(){return 7}function Gv(){return 8}function Hv(){return 9}function Iv(){return 10}function Jv(){return 11}function Kv(){return 0}function Lv(){return 1}function Mv(){return 2}function Nv(){return 3}function Ov(){return 0}function Pv(){return 1}function Qv(){return 2}function Rv(){return 0}function Sv(){return 1}function Tv(){return 2}function Uv(){return 1}function Vv(){return 2}function Wv(){return 4}function Xv(){return 8}function Yv(){return 16}function Zv(){return 0}function _v(){return 1}function $v(a){a=a|0;return}function aw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function bw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(2096,a|0,b|0,c|0,d|0)|0;i=e;return}function cw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(1864,a|0,b|0,c|0,d|0)|0;i=e;return}function dw(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;var e=0;e=i;za(1648,a|0,b|0,+c,d|0)|0;i=e;return}function ew(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;var f=0;f=i;za(1416,a|0,b|0,+c,d|0,e|0)|0;i=f;return}function fw(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0;e=i;za(1200,a|0,b|0,c|0,d|0)|0;i=e;return}function gw(a,b){a=a|0;b=b|0;var c=0;c=i;za(984,a|0,b|0)|0;i=c;return}function hw(a){a=a|0;return}function iw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function jw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;a=(za(2376,a|0,b|0,c|0)|0)!=0;i=d;return a|0}function kw(a){a=a|0;return}function lw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function mw(a){a=a|0;return}function nw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function ow(a){a=a|0;return}function pw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function qw(a){a=a|0;return}function rw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function sw(a,b){a=a|0;b=b|0;var c=0;c=i;za(3480,a|0,b|0)|0;i=c;return}function tw(a,b){a=a|0;b=b|0;var c=0;c=i;za(3248,a|0,b|0)|0;i=c;return}function uw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;za(3016,a|0,b|0,c|0)|0;i=d;return}function vw(a,b,c){a=a|0;b=b|0;c=c|0;var d=0;d=i;za(2784,a|0,b|0,c|0)|0;i=d;return}function ww(a){a=a|0;return}function xw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function yw(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;var f=0;f=i;e=+Fa(3816,a|0,b|0,c|0,d|0,+e);i=f;return+e}function zw(a){a=a|0;return}function Aw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Bw(a,b){a=a|0;b=b|0;var c=0;c=i;a=(za(4168,a|0,b|0)|0)!=0;i=c;return a|0}function Cw(a){a=a|0;return}function Dw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Ew(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+16>>2]&127](a,b);i=d;return}function Fw(a,b){a=a|0;b=b|0;var d=0;d=i;lb[c[(c[a>>2]|0)+20>>2]&127](a,b);i=d;return}function Gw(a,b){a=a|0;b=b|0;var c=0;c=i;za(4992,a|0,b|0)|0;i=c;return}function Hw(a,b){a=a|0;b=b|0;var c=0;c=i;za(4728,a|0,b|0)|0;i=c;return}function Iw(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0.0,H=0.0,I=0.0,J=0.0,K=0.0,L=0,M=0.0,N=0,O=0,P=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0;q=i;o=c[b+48>>2]|0;X=c[o+8>>2]|0;n=b+104|0;c[n>>2]=X;W=c[b+52>>2]|0;U=c[W+8>>2]|0;p=b+108|0;c[p>>2]=U;S=o+28|0;T=c[S>>2]|0;S=c[S+4>>2]|0;O=b+128|0;c[O>>2]=T;c[O+4>>2]=S;O=W+28|0;P=c[O>>2]|0;O=c[O+4>>2]|0;N=b+136|0;c[N>>2]=P;c[N+4>>2]=O;N=b+156|0;g[N>>2]=+g[o+120>>2];L=b+160|0;g[L>>2]=+g[W+120>>2];t=+g[o+128>>2];g[b+164>>2]=t;w=+g[W+128>>2];g[b+168>>2]=w;W=c[d+24>>2]|0;o=W+(X*12|0)|0;z=+g[o>>2];C=+g[o+4>>2];E=+g[W+(X*12|0)+8>>2];o=d+28|0;V=c[o>>2]|0;Y=V+(X*12|0)|0;y=+g[Y>>2];f=+g[Y+4>>2];l=+g[V+(X*12|0)+8>>2];X=W+(U*12|0)|0;G=+g[X>>2];B=+g[X+4>>2];D=+g[W+(U*12|0)+8>>2];W=V+(U*12|0)|0;h=+g[W>>2];j=+g[W+4>>2];m=+g[V+(U*12|0)+8>>2];A=+R(+E);F=+Q(+E);M=+R(+D);s=+Q(+D);e=-(c[k>>2]=T,+g[k>>2]);v=-(c[k>>2]=S,+g[k>>2]);u=F*e-A*v;v=A*e+F*v;e=+u;r=+v;S=b+112|0;g[S>>2]=e;g[S+4>>2]=r;r=-(c[k>>2]=P,+g[k>>2]);e=-(c[k>>2]=O,+g[k>>2]);x=s*r-M*e;e=M*r+s*e;s=+x;r=+e;O=b+120|0;g[O>>2]=s;g[O+4>>2]=r;r=+g[N>>2];s=+g[L>>2];M=r+s;I=M+v*t*v+e*w*e;K=t*u;H=w*x;J=-(v*K)-e*H;H=M+u*K+x*H;K=I*H-J*J;if(K!=0.0)K=1.0/K;M=-(J*K);g[b+172>>2]=H*K;g[b+176>>2]=M;g[b+180>>2]=M;g[b+184>>2]=I*K;H=t+w;if(H>0.0)H=1.0/H;g[b+188>>2]=H;J=+g[b+68>>2];M=+g[b+72>>2];K=+(G+x-z-u-(F*J-A*M));M=+(B+e-C-v-(A*J+F*M));L=b+144|0;g[L>>2]=K;g[L+4>>2]=M;g[b+152>>2]=D-E- +g[b+76>>2];L=b+80|0;if(!(a[d+20>>0]|0)){g[L>>2]=0.0;g[b+84>>2]=0.0;g[b+88>>2]=0.0;G=y;H=f;J=h;K=j;I=l;M=m;Y=c[n>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)|0;G=+G;H=+H;X=Y;g[X>>2]=G;Y=Y+4|0;g[Y>>2]=H;Y=c[n>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)+8|0;g[Y>>2]=I;Y=c[p>>2]|0;Y=X+(Y*12|0)|0;J=+J;K=+K;X=Y;g[X>>2]=J;Y=Y+4|0;g[Y>>2]=K;Y=c[p>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)+8|0;g[Y>>2]=M;i=q;return}else{X=d+8|0;F=+g[X>>2];M=F*+g[L>>2];g[L>>2]=M;Y=b+84|0;F=F*+g[Y>>2];g[Y>>2]=F;Y=b+88|0;E=+g[X>>2]*+g[Y>>2];g[Y>>2]=E;G=y-r*M;H=f-r*F;J=h+s*M;K=j+s*F;I=l-t*(E+(F*u-M*v));M=m+w*(E+(F*x-M*e));Y=c[n>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)|0;G=+G;H=+H;X=Y;g[X>>2]=G;Y=Y+4|0;g[Y>>2]=H;Y=c[n>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)+8|0;g[Y>>2]=I;Y=c[p>>2]|0;Y=X+(Y*12|0)|0;J=+J;K=+K;X=Y;g[X>>2]=J;Y=Y+4|0;g[Y>>2]=K;Y=c[p>>2]|0;X=c[o>>2]|0;Y=X+(Y*12|0)+8|0;g[Y>>2]=M;i=q;return}}function Jw(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0;q=i;k=a+104|0;o=c[k>>2]|0;j=b+28|0;E=c[j>>2]|0;z=E+(o*12|0)|0;l=+g[z>>2];h=+g[z+4>>2];y=+g[E+(o*12|0)+8>>2];o=a+108|0;z=c[o>>2]|0;F=E+(z*12|0)|0;m=+g[F>>2];n=+g[F+4>>2];x=+g[E+(z*12|0)+8>>2];f=+g[a+156>>2];e=+g[a+160>>2];d=+g[a+164>>2];p=+g[a+168>>2];B=+g[b>>2];C=+g[b+4>>2]*+g[a+100>>2];b=a+88|0;s=+g[b>>2];w=B*+g[a+96>>2];t=s- +g[a+188>>2]*(x-y+C*+g[a+152>>2]);v=-w;w=t<w?t:w;w=w<v?v:w;g[b>>2]=w;s=w-s;y=y-d*s;s=x+p*s;x=+g[a+124>>2];w=+g[a+120>>2];v=+g[a+116>>2];t=+g[a+112>>2];D=+g[a+144>>2]*C+(v*y+(m-x*s-l));C=C*+g[a+148>>2]+(n+w*s-h-t*y);A=+g[a+176>>2]*D+ +g[a+184>>2]*C;b=a+80|0;z=b;u=+g[z>>2];r=+g[z+4>>2];C=u-(+g[a+172>>2]*D+ +g[a+180>>2]*C);g[b>>2]=C;z=a+84|0;A=+g[z>>2]-A;g[z>>2]=A;B=B*+g[a+92>>2];D=C*C+A*A;if(D>B*B){D=+O(+D);if(!(D<1.1920928955078125e-7)){D=1.0/D;C=C*D;g[b>>2]=C;A=A*D;g[z>>2]=A}C=B*C;g[b>>2]=C;A=B*A;g[z>>2]=A}D=C-u;C=A-r;B=+(l-f*D);A=+(h-f*C);F=(c[j>>2]|0)+((c[k>>2]|0)*12|0)|0;g[F>>2]=B;g[F+4>>2]=A;F=c[j>>2]|0;g[F+((c[k>>2]|0)*12|0)+8>>2]=y-d*(t*C-D*v);A=+(m+e*D);B=+(n+e*C);F=F+((c[o>>2]|0)*12|0)|0;g[F>>2]=A;g[F+4>>2]=B;g[(c[j>>2]|0)+((c[o>>2]|0)*12|0)+8>>2]=s+p*(C*w-D*x);i=q;return}function Kw(a,b){a=a|0;b=b|0;return 1}function Lw(a,b){a=a|0;b=b|0;var d=0,e=0;e=(c[b+48>>2]|0)+12|0;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Mw(a,b){a=a|0;b=b|0;var d=0,e=0;e=(c[b+52>>2]|0)+12|0;d=c[e+4>>2]|0;b=a;c[b>>2]=c[e>>2];c[b+4>>2]=d;return}function Nw(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+84>>2]*c;g[a>>2]=+g[b+80>>2]*c;g[a+4>>2]=d;return}function Ow(a,b){a=a|0;b=+b;return+(+g[a+88>>2]*b)}function Pw(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(5440,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(5464,e);h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(5512,e);h[k>>3]=+g[a+92>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(15168,e);h[k>>3]=+g[a+96>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(15200,e);h[k>>3]=+g[a+100>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(5544,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function Qw(a,b){a=a|0;b=b|0;return}function Rw(a){a=a|0;return}function Sw(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function Tw(a){a=a|0;Ja(a|0)|0;sB()}function Uw(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;d=i;e=a+40|0;f=c[e>>2]|0;g=a+36|0;a=a+32|0;if((f|0)==(c[g>>2]|0)){h=c[a>>2]|0;c[g>>2]=f<<1;f=RB(f<<3)|0;c[a>>2]=f;WB(f|0,h|0,c[e>>2]<<2|0)|0;SB(h);f=c[e>>2]|0}c[(c[a>>2]|0)+(f<<2)>>2]=b;c[e>>2]=(c[e>>2]|0)+1;i=d;return}function Vw(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0;m=i;j=b+60|0;c[j>>2]=0;l=f+12|0;o=+g[h+12>>2];B=+g[l>>2];w=+g[h+8>>2];x=+g[f+16>>2];A=+g[h>>2]+(o*B-w*x)- +g[e>>2];x=B*w+o*x+ +g[h+4>>2]- +g[e+4>>2];o=+g[e+12>>2];w=+g[e+8>>2];B=A*o+x*w;w=o*x-A*w;e=d+12|0;h=c[e>>2]|0;e=c[e+4>>2]|0;A=(c[k>>2]=h,+g[k>>2]);x=(c[k>>2]=e,+g[k>>2]);u=d+20|0;t=c[u>>2]|0;u=c[u+4>>2]|0;o=(c[k>>2]=t,+g[k>>2]);p=(c[k>>2]=u,+g[k>>2]);n=o-A;v=p-x;y=n*(o-B)+v*(p-w);s=B-A;r=w-x;z=s*n+r*v;q=+g[d+8>>2]+ +g[f+8>>2];if(z<=0.0){if(s*s+r*r>q*q){i=m;return}if((a[d+44>>0]|0)!=0?(f=d+28|0,C=+g[f>>2],(A-B)*(A-C)+(x-w)*(x- +g[f+4>>2])>0.0):0){i=m;return}c[j>>2]=1;c[b+56>>2]=0;g[b+40>>2]=0.0;g[b+44>>2]=0.0;t=b+48|0;c[t>>2]=h;c[t+4>>2]=e;t=b+16|0;c[t>>2]=0;a[t>>0]=0;a[t+1>>0]=0;a[t+2>>0]=0;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}if(y<=0.0){n=B-o;r=w-p;if(n*n+r*r>q*q){i=m;return}if((a[d+45>>0]|0)!=0?(f=d+36|0,C=+g[f>>2],n*(C-o)+r*(+g[f+4>>2]-p)>0.0):0){i=m;return}c[j>>2]=1;c[b+56>>2]=0;g[b+40>>2]=0.0;g[b+44>>2]=0.0;f=b+48|0;c[f>>2]=t;c[f+4>>2]=u;t=b+16|0;c[t>>2]=0;a[t>>0]=1;a[t+1>>0]=0;a[t+2>>0]=0;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}C=n*n+v*v;if(!(C>0.0))Aa(5640,5656,127,5704);C=1.0/C;B=B-(A*y+o*z)*C;C=w-(x*y+p*z)*C;if(B*B+C*C>q*q){i=m;return}o=-v;if(n*r+s*o<0.0)n=-n;else v=o;o=+O(+(n*n+v*v));if(!(o<1.1920928955078125e-7)){C=1.0/o;v=v*C;n=n*C}c[j>>2]=1;c[b+56>>2]=1;B=+v;C=+n;t=b+40|0;g[t>>2]=B;g[t+4>>2]=C;t=b+48|0;c[t>>2]=h;c[t+4>>2]=e;t=b+16|0;c[t>>2]=0;a[t>>0]=0;a[t+1>>0]=0;a[t+2>>0]=1;a[t+3>>0]=0;t=l;u=c[t+4>>2]|0;f=b;c[f>>2]=c[t>>2];c[f+4>>2]=u;i=m;return}function Ww(b,d,e,f,h){b=b|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0,N=0.0,P=0,Q=0.0,R=0.0,S=0.0,T=0.0,U=0,V=0,W=0.0,X=0.0;j=i;i=i+336|0;q=j;o=j+304|0;l=j+280|0;r=j+24|0;m=r+132|0;F=+g[e+12>>2];N=+g[h+8>>2];A=+g[e+8>>2];E=+g[h+12>>2];z=F*N-A*E;E=N*A+F*E;N=+z;D=+E;C=+g[h>>2]- +g[e>>2];L=+g[h+4>>2]- +g[e+4>>2];B=F*C+A*L;C=F*L-A*C;A=+B;L=+C;e=m;g[e>>2]=A;g[e+4>>2]=L;e=r+140|0;g[e>>2]=N;g[e+4>>2]=D;e=r+144|0;D=+g[f+12>>2];h=r+140|0;N=+g[f+16>>2];B=B+(E*D-z*N);n=r+136|0;C=D*z+E*N+C;N=+B;E=+C;M=r+148|0;g[M>>2]=N;g[M+4>>2]=E;M=d+28|0;G=c[M>>2]|0;M=c[M+4>>2]|0;s=r+156|0;c[s>>2]=G;c[s+4>>2]=M;s=r+164|0;y=d+12|0;u=c[y>>2]|0;y=c[y+4>>2]|0;t=s;c[t>>2]=u;c[t+4>>2]=y;t=r+172|0;w=d+20|0;V=c[w>>2]|0;w=c[w+4>>2]|0;U=t;c[U>>2]=V;c[U+4>>2]=w;U=d+36|0;P=c[U>>2]|0;U=c[U+4>>2]|0;v=r+180|0;c[v>>2]=P;c[v+4>>2]=U;v=(a[d+44>>0]|0)!=0;x=(a[d+45>>0]|0)==0;E=(c[k>>2]=V,+g[k>>2]);N=(c[k>>2]=u,+g[k>>2]);z=E-N;D=(c[k>>2]=w,+g[k>>2]);L=(c[k>>2]=y,+g[k>>2]);A=D-L;F=+O(+(z*z+A*A));J=(c[k>>2]=G,+g[k>>2]);K=(c[k>>2]=M,+g[k>>2]);I=(c[k>>2]=P,+g[k>>2]);H=(c[k>>2]=U,+g[k>>2]);if(!(F<1.1920928955078125e-7)){T=1.0/F;z=z*T;A=A*T}u=r+196|0;F=-z;g[u>>2]=A;d=r+200|0;g[d>>2]=F;F=(B-N)*A+(C-L)*F;if(v){N=N-J;L=L-K;Q=+O(+(N*N+L*L));if(!(Q<1.1920928955078125e-7)){T=1.0/Q;N=N*T;L=L*T}T=-N;g[r+188>>2]=L;g[r+192>>2]=T;w=A*N-z*L>=0.0;J=(B-J)*L+(C-K)*T}else{w=0;J=0.0}a:do if(x){if(!v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){P=u;V=c[P>>2]|0;P=c[P+4>>2]|0;U=v;c[U>>2]=V;c[U+4>>2]=P;S=+-(c[k>>2]=V,+g[k>>2]);T=+z;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}else{S=+-A;T=+z;U=v;g[U>>2]=S;g[U+4>>2]=T;U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=r+228|0;c[V>>2]=P;c[V+4>>2]=U;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}v=J>=0.0;if(w){if(!v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;P=v;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P>>2]|0;P=c[P+4>>2]|0;V=r+228|0;c[V>>2]=U;c[V+4>>2]=P;V=r+236|0;g[V>>2]=-(c[k>>2]=U,+g[k>>2]);g[V+4>>2]=T;break}}else{a[r+248>>0]=1;v=r+212|0}V=u;U=c[V+4>>2]|0;P=v;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+188|0;U=c[P+4>>2]|0;V=r+228|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;S=+-+g[u>>2];T=+-+g[d>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}else{if(v){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){P=u;V=c[P>>2]|0;P=c[P+4>>2]|0;U=v;c[U>>2]=V;c[U+4>>2]=P;U=r+228|0;c[U>>2]=V;c[U+4>>2]=P;S=+-(c[k>>2]=V,+g[k>>2]);T=+z;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{a[r+248>>0]=0;v=r+212|0}T=+-A;S=+z;P=v;g[P>>2]=T;g[P+4>>2]=S;P=u;U=c[P+4>>2]|0;V=r+228|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{I=I-E;H=H-D;K=+O(+(I*I+H*H));if(!(K<1.1920928955078125e-7)){T=1.0/K;I=I*T;H=H*T}T=-I;x=r+204|0;g[x>>2]=H;y=r+208|0;g[y>>2]=T;G=z*H-A*I>0.0;B=(B-E)*H+(C-D)*T;if(!v){v=F>=0.0;if(G){if(!v){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;P=v;g[P>>2]=S;g[P+4>>2]=T;P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}}else{a[r+248>>0]=1;v=r+212|0}V=u;U=c[V+4>>2]|0;P=v;c[P>>2]=c[V>>2];c[P+4>>2]=U;S=+-+g[u>>2];T=+-+g[d>>2];P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}else{if(v){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=v;c[V>>2]=P;c[V+4>>2]=U;S=+-(c[k>>2]=P,+g[k>>2]);T=+z;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}else{a[r+248>>0]=0;v=r+212|0}T=+-A;S=+z;P=v;g[P>>2]=T;g[P+4>>2]=S;S=+-+g[x>>2];T=+-+g[y>>2];P=r+228|0;g[P>>2]=S;g[P+4>>2]=T;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}}if(w&G){if(!(J>=0.0)&!(F>=0.0)){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(!V){S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;V=r+228|0;g[V>>2]=S;g[V+4>>2]=T;V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}}else{a[r+248>>0]=1;v=r+212|0}P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=r+188|0;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}if(w){do if(!(J>=0.0)){if(F>=0.0){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V)break}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[x>>2];S=+-+g[y>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[u>>2];T=+-+g[d>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break a}else{a[r+248>>0]=1;v=r+212|0}while(0);P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=r+188|0;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=u;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U;break}if(!G){if(!(!(J>=0.0)|!(F>=0.0))){V=B>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V){U=u;P=c[U>>2]|0;U=c[U+4>>2]|0;V=v;c[V>>2]=P;c[V+4>>2]=U;V=r+228|0;c[V>>2]=P;c[V+4>>2]=U;V=r+236|0;c[V>>2]=P;c[V+4>>2]=U;break}}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[x>>2];S=+-+g[y>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break}do if(!(B>=0.0)){if(J>=0.0){V=F>=0.0;a[r+248>>0]=V&1;v=r+212|0;if(V)break}else{a[r+248>>0]=0;v=r+212|0}S=+-A;T=+z;V=v;g[V>>2]=S;g[V+4>>2]=T;T=+-+g[u>>2];S=+-+g[d>>2];V=r+228|0;g[V>>2]=T;g[V+4>>2]=S;S=+-+g[r+188>>2];T=+-+g[r+192>>2];V=r+236|0;g[V>>2]=S;g[V+4>>2]=T;break a}else{a[r+248>>0]=1;v=r+212|0}while(0);P=u;U=c[P+4>>2]|0;V=v;c[V>>2]=c[P>>2];c[V+4>>2]=U;V=u;U=c[V+4>>2]|0;P=r+228|0;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=r+204|0;U=c[P+4>>2]|0;V=r+236|0;c[V>>2]=c[P>>2];c[V+4>>2]=U}while(0);y=c[f+148>>2]|0;v=r+128|0;c[v>>2]=y;if((y|0)>0){w=0;do{Q=+g[e>>2];S=+g[f+(w<<3)+20>>2];T=+g[h>>2];R=+g[f+(w<<3)+24>>2];N=+(+g[m>>2]+(Q*S-T*R));R=+(S*T+Q*R+ +g[n>>2]);V=r+(w<<3)|0;g[V>>2]=N;g[V+4>>2]=R;R=+g[e>>2];N=+g[f+(w<<3)+84>>2];Q=+g[h>>2];T=+g[f+(w<<3)+88>>2];S=+(R*N-Q*T);T=+(N*Q+R*T);V=r+(w<<3)+64|0;g[V>>2]=S;g[V+4>>2]=T;w=w+1|0}while((w|0)<(y|0));y=c[v>>2]|0}w=r+244|0;g[w>>2]=.019999999552965164;v=b+60|0;c[v>>2]=0;x=a[r+248>>0]|0;G=(y|0)>0;if(!G){i=j;return}z=+g[r+164>>2];D=+g[r+168>>2];C=+g[r+212>>2];E=+g[r+216>>2];F=3.4028234663852886e+38;B=3.4028234663852886e+38;P=0;while(1){A=(+g[r+(P<<3)>>2]-z)*C+(+g[r+(P<<3)+4>>2]-D)*E;M=A<F;B=M?A:B;P=P+1|0;if((P|0)>=(y|0))break;else F=M?A:F}if(B>.019999999552965164){i=j;return}z=+g[r+216>>2];A=+g[r+212>>2];do if(G){H=+g[r+164>>2];J=+g[r+168>>2];K=+g[r+172>>2];L=+g[r+176>>2];I=+g[r+228>>2];F=+g[r+232>>2];E=+g[r+236>>2];D=+g[r+240>>2];N=-3.4028234663852886e+38;G=0;P=0;M=-1;Q=-3.4028234663852886e+38;while(1){R=+g[r+(G<<3)+64>>2];T=-R;S=-+g[r+(G<<3)+68>>2];X=+g[r+(G<<3)>>2];C=+g[r+(G<<3)+4>>2];W=(X-H)*T+(C-J)*S;C=(X-K)*T+(C-L)*S;C=W<C?W:C;if(C>.019999999552965164){P=2;break}if(!(z*R+A*S>=0.0))if(C>N?!((T-I)*A+(S-F)*z<-.03490658849477768):0)p=77;else C=Q;else if(C>N?!((T-E)*A+(S-D)*z<-.03490658849477768):0)p=77;else C=Q;if((p|0)==77){p=0;N=C;P=2;M=G}G=G+1|0;if((G|0)>=(y|0)){G=M;p=79;break}else Q=C}if((p|0)==79)if(!P){p=82;break}if(C>.019999999552965164){i=j;return}if(C>B*.9800000190734863+.0010000000474974513){M=(P|0)==1;P=b+56|0;if(M){G=M;M=q;p=84}else{c[P>>2]=2;x=s;d=c[x+4>>2]|0;s=q;c[s>>2]=c[x>>2];c[s+4>>2]=d;s=q+8|0;a[s>>0]=0;d=G&255;a[s+1>>0]=d;a[s+2>>0]=0;a[s+3>>0]=1;s=t;t=c[s+4>>2]|0;x=q+12|0;c[x>>2]=c[s>>2];c[x+4>>2]=t;x=q+20|0;a[x>>0]=0;a[x+1>>0]=d;a[x+2>>0]=0;a[x+3>>0]=1;x=G+1|0;x=(x|0)<(y|0)?x:0;y=r+(G<<3)|0;t=r+(x<<3)|0;d=r+(G<<3)+64|0;s=c[t+4>>2]|0;t=c[t>>2]|0;r=M;M=x;x=c[y>>2]|0;y=c[y+4>>2]|0;u=c[d>>2]|0;d=c[d+4>>2]|0}}else p=82}else p=82;while(0);if((p|0)==82){G=1;M=q;P=b+56|0;p=84}do if((p|0)==84){c[P>>2]=1;if((y|0)>1){U=0;B=A*+g[r+64>>2]+z*+g[r+68>>2];p=1;while(1){C=A*+g[r+(p<<3)+64>>2]+z*+g[r+(p<<3)+68>>2];P=C<B;U=P?p:U;p=p+1|0;if((p|0)>=(y|0))break;else B=P?C:B}}else U=0;P=U+1|0;P=(P|0)<(y|0)?P:0;p=r+(U<<3)|0;V=c[p+4>>2]|0;y=q;c[y>>2]=c[p>>2];c[y+4>>2]=V;y=q+8|0;a[y>>0]=0;a[y+1>>0]=U;a[y+2>>0]=1;a[y+3>>0]=0;y=r+(P<<3)|0;U=c[y+4>>2]|0;V=q+12|0;c[V>>2]=c[y>>2];c[V+4>>2]=U;V=q+20|0;a[V>>0]=0;a[V+1>>0]=P;a[V+2>>0]=1;a[V+3>>0]=0;if(!(x<<24>>24)){y=t;t=s;u=(g[k>>2]=-+g[u>>2],c[k>>2]|0);s=c[t+4>>2]|0;t=c[t>>2]|0;q=M;r=G;G=1;M=0;x=c[y>>2]|0;y=c[y+4>>2]|0;d=(g[k>>2]=-+g[d>>2],c[k>>2]|0);break}else{y=s;d=u;s=c[t+4>>2]|0;t=c[t>>2]|0;q=M;r=G;G=0;M=1;x=c[y>>2]|0;y=c[y+4>>2]|0;u=c[d>>2]|0;d=c[d+4>>2]|0;break}}while(0);A=(c[k>>2]=y,+g[k>>2]);z=(c[k>>2]=d,+g[k>>2]);T=(c[k>>2]=d,+g[k>>2]);C=(c[k>>2]=u,+g[k>>2]);W=(c[k>>2]=x,+g[k>>2]);X=-C;B=-T;if((Yw(o,q,T,X,T*W+(c[k>>2]=y,+g[k>>2])*X,G)|0)<2){i=j;return}X=(c[k>>2]=s,+g[k>>2]);X=(c[k>>2]=t,+g[k>>2])*B+C*X;if((Yw(l,o,B,(c[k>>2]=u,+g[k>>2]),X,M)|0)<2){i=j;return}o=b+40|0;if(r){V=o;c[V>>2]=u;c[V+4>>2]=d;V=b+48|0;c[V>>2]=x;c[V+4>>2]=y}else{V=f+(G<<3)+84|0;U=c[V+4>>2]|0;P=o;c[P>>2]=c[V>>2];c[P+4>>2]=U;P=f+(G<<3)+20|0;U=c[P+4>>2]|0;V=b+48|0;c[V>>2]=c[P>>2];c[V+4>>2]=U}B=(c[k>>2]=x,+g[k>>2]);C=(c[k>>2]=u,+g[k>>2]);D=+g[w>>2];E=+g[m>>2];F=+g[n>>2];H=+g[e>>2];I=+g[h>>2];h=0;e=0;do{n=l+(h*12|0)|0;J=+g[n>>2];K=+g[l+(h*12|0)+4>>2];if((J-B)*C+(K-A)*z<=D){m=b+(e*20|0)|0;if(r){X=J-E;T=K-F;W=+(X*H+T*I);X=+(H*T-X*I);V=m;g[V>>2]=W;g[V+4>>2]=X;c[b+(e*20|0)+16>>2]=c[l+(h*12|0)+8>>2]}else{P=n;V=c[P+4>>2]|0;U=m;c[U>>2]=c[P>>2];c[U+4>>2]=V;U=l+(h*12|0)+8|0;V=b+(e*20|0)+16|0;a[V+2>>0]=a[U+3>>0]|0;a[V+3>>0]=a[U+2>>0]|0;a[V>>0]=a[U+1>>0]|0;a[V+1>>0]=a[U>>0]|0}e=e+1|0}h=h+1|0}while((h|0)!=2);c[v>>2]=e;i=j;return}function Xw(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0,w=0.0,x=0.0;h=i;j=c[b+148>>2]|0;k=c[e+148>>2]|0;t=+g[f+12>>2];o=+g[d+8>>2];w=+g[f+8>>2];l=+g[d+12>>2];m=t*o-w*l;l=o*w+t*l;o=+g[d>>2]- +g[f>>2];u=+g[d+4>>2]- +g[f+4>>2];n=t*o+w*u;o=t*u-w*o;if((j|0)<=0){v=0;w=-3.4028234663852886e+38;c[a>>2]=v;i=h;return+w}d=(k|0)>0;p=0;f=0;q=-3.4028234663852886e+38;do{w=+g[b+(f<<3)+84>>2];t=+g[b+(f<<3)+88>>2];r=l*w-m*t;t=m*w+l*t;w=+g[b+(f<<3)+20>>2];u=+g[b+(f<<3)+24>>2];s=n+(l*w-m*u);u=o+(m*w+l*u);if(d){v=0;w=3.4028234663852886e+38;do{x=r*(+g[e+(v<<3)+20>>2]-s)+t*(+g[e+(v<<3)+24>>2]-u);w=x<w?x:w;v=v+1|0}while((v|0)!=(k|0))}else w=3.4028234663852886e+38;v=w>q;q=v?w:q;p=v?f:p;f=f+1|0}while((f|0)!=(j|0));c[a>>2]=p;i=h;return+q}function Yw(b,d,e,f,h,j){b=b|0;d=d|0;e=+e;f=+f;h=+h;j=j|0;var k=0.0,l=0,m=0,n=0,o=0,p=0,q=0;o=i;l=d+4|0;k=+g[d>>2]*e+ +g[l>>2]*f-h;m=d+12|0;n=d+16|0;h=+g[m>>2]*e+ +g[n>>2]*f-h;if(!(k<=0.0))p=0;else{c[b+0>>2]=c[d+0>>2];c[b+4>>2]=c[d+4>>2];c[b+8>>2]=c[d+8>>2];p=1}if(h<=0.0){q=p+1|0;p=b+(p*12|0)|0;c[p+0>>2]=c[m+0>>2];c[p+4>>2]=c[m+4>>2];c[p+8>>2]=c[m+8>>2];p=q}if(!(k*h<0.0)){q=p;i=o;return q|0}h=k/(k-h);f=+g[d>>2];e=+g[l>>2];f=+(f+h*(+g[m>>2]-f));e=+(e+h*(+g[n>>2]-e));q=b+(p*12|0)|0;g[q>>2]=f;g[q+4>>2]=e;q=b+(p*12|0)+8|0;a[q>>0]=j;a[q+1>>0]=a[d+9>>0]|0;a[q+2>>0]=0;a[q+3>>0]=1;q=p+1|0;i=o;return q|0}function Zw(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0;e=i;f=c[b+4>>2]|0;if((f|0)==3){if((d|0)<=-1)Aa(5872,5912,53,7624);f=b+16|0;if((c[f>>2]|0)<=(d|0))Aa(5872,5912,53,7624);j=b+12|0;l=(c[j>>2]|0)+(d<<3)|0;k=c[l+4>>2]|0;h=a;c[h>>2]=c[l>>2];c[h+4>>2]=k;h=d+1|0;d=a+8|0;j=c[j>>2]|0;if((h|0)<(c[f>>2]|0)){j=j+(h<<3)|0;k=c[j+4>>2]|0;l=d;c[l>>2]=c[j>>2];c[l+4>>2]=k}else{k=c[j+4>>2]|0;l=d;c[l>>2]=c[j>>2];c[l+4>>2]=k}c[a+16>>2]=a;c[a+20>>2]=2;g[a+24>>2]=+g[b+8>>2];i=e;return}else if((f|0)==2){c[a+16>>2]=b+20;c[a+20>>2]=c[b+148>>2];g[a+24>>2]=+g[b+8>>2];i=e;return}else if(!f){c[a+16>>2]=b+12;c[a+20>>2]=1;g[a+24>>2]=+g[b+8>>2];i=e;return}else if((f|0)==1){c[a+16>>2]=b+12;c[a+20>>2]=2;g[a+24>>2]=+g[b+8>>2];i=e;return}else Aa(15688,5912,81,7624)}function _w(e,f,h){e=e|0;f=f|0;h=h|0;var j=0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0,s=0,t=0.0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0,C=0,D=0.0,E=0,F=0.0,G=0,H=0,I=0,J=0.0,K=0,L=0,M=0,N=0,P=0,Q=0,R=0,S=0,T=0,U=0,V=0,W=0,X=0,Y=0,Z=0.0,_=0,$=0.0,aa=0.0,ba=0,ca=0,da=0,ea=0,fa=0.0,ga=0.0,ha=0.0,ia=0,ja=0.0,ka=0.0,la=0.0,ma=0.0,na=0.0,oa=0.0,pa=0.0,qa=0.0,ra=0.0,sa=0.0,ta=0.0;j=i;i=i+144|0;m=j;B=j+124|0;E=j+112|0;c[1462]=(c[1462]|0)+1;z=+g[h+56>>2];y=+g[h+60>>2];A=+g[h+64>>2];D=+g[h+68>>2];x=+g[h+72>>2];F=+g[h+76>>2];J=+g[h+80>>2];w=+g[h+84>>2];n=f+4|0;M=b[n>>1]|0;if((M&65535)>=4)Aa(6016,5912,102,6040);L=M&65535;o=m+108|0;c[o>>2]=L;a:do if(M<<16>>16){M=h+16|0;N=h+48|0;L=h+44|0;P=c[h+20>>2]|0;Q=0;while(1){S=d[f+Q+6>>0]|0;c[m+(Q*36|0)+28>>2]=S;R=d[f+Q+9>>0]|0;c[m+(Q*36|0)+32>>2]=R;if((P|0)<=(S|0)){Y=6;break}ia=(c[M>>2]|0)+(S<<3)|0;$=+g[ia>>2];Z=+g[ia+4>>2];if((c[N>>2]|0)<=(R|0)){Y=8;break}R=(c[L>>2]|0)+(R<<3)|0;ja=+g[R>>2];ga=+g[R+4>>2];ka=z+($*D-Z*A);ha=+ka;la=+(Z*D+$*A+y);R=m+(Q*36|0)|0;g[R>>2]=ha;g[R+4>>2]=la;la=x+(ja*w-ga*J);ha=+la;ja=+(ga*w+ja*J+F);R=m+(Q*36|0)+8|0;g[R>>2]=ha;g[R+4>>2]=ja;ka=+(la-ka);la=+(+g[m+(Q*36|0)+12>>2]- +g[m+(Q*36|0)+4>>2]);R=m+(Q*36|0)+16|0;g[R>>2]=ka;g[R+4>>2]=la;g[m+(Q*36|0)+24>>2]=0.0;Q=Q+1|0;R=c[o>>2]|0;if((Q|0)>=(R|0)){K=R;break a}}if((Y|0)==6)Aa(6800,6832,103,6880);else if((Y|0)==8)Aa(6800,6832,103,6880)}else K=L;while(0);do if((K|0)>1){ka=+g[f>>2];la=+$w(m);if(!(la<ka*.5)?!(ka*2.0<la|la<1.1920928955078125e-7):0){K=c[o>>2]|0;Y=15;break}c[o>>2]=0;Y=17}else Y=15;while(0);if((Y|0)==15)if(!K)Y=17;else{V=K;v=h+20|0;G=h+44|0;H=h+48|0;C=m+16|0;s=m+24|0;I=h+16|0}do if((Y|0)==17){c[m+28>>2]=0;c[m+32>>2]=0;K=h+20|0;if((c[K>>2]|0)<=0)Aa(6800,6832,103,6880);L=h+16|0;M=c[L>>2]|0;Z=+g[M>>2];$=+g[M+4>>2];M=h+48|0;if((c[M>>2]|0)>0){G=h+44|0;C=c[G>>2]|0;ja=+g[C>>2];fa=+g[C+4>>2];ka=z+(Z*D-$*A);la=$*D+Z*A+y;ga=+ka;ha=+la;C=m;g[C>>2]=ga;g[C+4>>2]=ha;ha=x+(ja*w-fa*J);ja=fa*w+ja*J+F;fa=+ha;ga=+ja;C=m+8|0;g[C>>2]=fa;g[C+4>>2]=ga;C=m+16|0;ka=+(ha-ka);la=+(ja-la);s=C;g[s>>2]=ka;g[s+4>>2]=la;s=m+24|0;g[s>>2]=1.0;c[o>>2]=1;V=1;v=K;H=M;I=L;break}else Aa(6800,6832,103,6880)}while(0);S=m+16|0;R=m+20|0;Q=m+52|0;P=m+56|0;M=m+36|0;N=m+52|0;K=m+60|0;U=m+72|0;T=m+88|0;L=m+96|0;W=0;b:while(1){X=(V|0)>0;if(X){Y=0;do{c[B+(Y<<2)>>2]=c[m+(Y*36|0)+28>>2];c[E+(Y<<2)>>2]=c[m+(Y*36|0)+32>>2];Y=Y+1|0}while((Y|0)!=(V|0))}do if((V|0)==2){ia=C;la=+g[ia>>2];Z=+g[ia+4>>2];ia=N;aa=+g[ia>>2];ga=+g[ia+4>>2];$=aa-la;fa=ga-Z;Z=la*$+Z*fa;if(Z>=-0.0){g[s>>2]=1.0;c[o>>2]=1;Y=45;break}$=aa*$+ga*fa;if(!($<=0.0)){la=1.0/($-Z);g[s>>2]=$*la;g[K>>2]=-(Z*la);c[o>>2]=2;Y=46;break}else{g[K>>2]=1.0;c[o>>2]=1;Y=m+0|0;_=M+0|0;ba=Y+36|0;do{c[Y>>2]=c[_>>2];Y=Y+4|0;_=_+4|0}while((Y|0)<(ba|0));Y=45;break}}else if((V|0)==3){ia=C;pa=+g[ia>>2];na=+g[ia+4>>2];ia=N;ma=+g[ia>>2];oa=+g[ia+4>>2];ia=T;qa=+g[ia>>2];Z=+g[ia+4>>2];sa=ma-pa;aa=oa-na;ga=pa*sa+na*aa;ha=ma*sa+oa*aa;$=qa-pa;ra=Z-na;fa=pa*$+na*ra;la=qa*$+Z*ra;ta=qa-ma;ja=Z-oa;ka=ma*ta+oa*ja;ja=qa*ta+Z*ja;$=sa*ra-aa*$;aa=(ma*Z-oa*qa)*$;Z=(na*qa-pa*Z)*$;$=(pa*oa-na*ma)*$;if(!(!(ga>=-0.0)|!(fa>=-0.0))){g[s>>2]=1.0;c[o>>2]=1;Y=45;break}if(!(!(ga<-0.0)|!(ha>0.0)|!($<=0.0))){ta=1.0/(ha-ga);g[s>>2]=ha*ta;g[K>>2]=-(ga*ta);c[o>>2]=2;Y=46;break}if(!(!(fa<-0.0)|!(la>0.0)|!(Z<=0.0))){ta=1.0/(la-fa);g[s>>2]=la*ta;g[L>>2]=-(fa*ta);c[o>>2]=2;Y=M+0|0;_=U+0|0;ba=Y+36|0;do{c[Y>>2]=c[_>>2];Y=Y+4|0;_=_+4|0}while((Y|0)<(ba|0));Y=46;break}if(!(!(ha<=0.0)|!(ka>=-0.0))){g[K>>2]=1.0;c[o>>2]=1;Y=m+0|0;_=M+0|0;ba=Y+36|0;do{c[Y>>2]=c[_>>2];Y=Y+4|0;_=_+4|0}while((Y|0)<(ba|0));Y=45;break}if(!(!(la<=0.0)|!(ja<=0.0))){g[L>>2]=1.0;c[o>>2]=1;Y=m+0|0;_=U+0|0;ba=Y+36|0;do{c[Y>>2]=c[_>>2];Y=Y+4|0;_=_+4|0}while((Y|0)<(ba|0));Y=45;break}if(!(ka<-0.0)|!(ja>0.0)|!(aa<=0.0)){Y=43;break b}ta=1.0/(ja-ka);g[K>>2]=ja*ta;g[L>>2]=-(ka*ta);c[o>>2]=2;Y=m+0|0;_=U+0|0;ba=Y+36|0;do{c[Y>>2]=c[_>>2];Y=Y+4|0;_=_+4|0}while((Y|0)<(ba|0));Y=46}else if((V|0)==1)Y=45;else{Y=44;break b}while(0);do if((Y|0)==45){_=1;Z=-+g[S>>2];$=-+g[R>>2]}else if((Y|0)==46){sa=+g[S>>2];$=+g[Q>>2]-sa;ta=+g[R>>2];Z=+g[P>>2]-ta;if(sa*Z-$*ta>0.0){_=2;Z=-Z;break}else{_=2;$=-$;break}}while(0);if(Z*Z+$*$<1.4210854715202004e-14){V=_;Y=71;break}ba=m+(_*36|0)|0;ha=-Z;ta=-$;ga=D*ha+A*ta;ha=D*ta-A*ha;ca=c[I>>2]|0;da=c[v>>2]|0;if((da|0)>1){ea=0;aa=ha*+g[ca+4>>2]+ga*+g[ca>>2];ia=1;while(1){fa=ga*+g[ca+(ia<<3)>>2]+ha*+g[ca+(ia<<3)+4>>2];Y=fa>aa;ea=Y?ia:ea;ia=ia+1|0;if((ia|0)==(da|0))break;else aa=Y?fa:aa}Y=m+(_*36|0)+28|0;c[Y>>2]=ea;if((ea|0)<=-1){Y=56;break}}else{Y=m+(_*36|0)+28|0;c[Y>>2]=0;ea=0}if((da|0)<=(ea|0)){Y=56;break}sa=+g[ca+(ea<<3)>>2];fa=+g[ca+(ea<<3)+4>>2];aa=z+(D*sa-A*fa);ta=+aa;fa=+(sa*A+D*fa+y);ca=ba;g[ca>>2]=ta;g[ca+4>>2]=fa;fa=w*Z+J*$;Z=w*$-Z*J;ca=c[G>>2]|0;ba=c[H>>2]|0;if((ba|0)>1){da=0;ga=Z*+g[ca+4>>2]+fa*+g[ca>>2];ea=1;while(1){$=fa*+g[ca+(ea<<3)>>2]+Z*+g[ca+(ea<<3)+4>>2];ia=$>ga;da=ia?ea:da;ea=ea+1|0;if((ea|0)==(ba|0))break;else ga=ia?$:ga}ea=m+(_*36|0)+32|0;c[ea>>2]=da;if((da|0)<=-1){Y=63;break}}else{ea=m+(_*36|0)+32|0;c[ea>>2]=0;da=0}if((ba|0)<=(da|0)){Y=63;break}qa=+g[ca+(da<<3)>>2];ta=+g[ca+(da<<3)+4>>2];sa=x+(w*qa-J*ta);ra=+sa;ta=+(qa*J+w*ta+F);ia=m+(_*36|0)+8|0;g[ia>>2]=ra;g[ia+4>>2]=ta;sa=+(sa-aa);ta=+(+g[m+(_*36|0)+12>>2]- +g[m+(_*36|0)+4>>2]);ia=m+(_*36|0)+16|0;g[ia>>2]=sa;g[ia+4>>2]=ta;W=W+1|0;c[1464]=(c[1464]|0)+1;if(X){Y=c[Y>>2]|0;X=0;do{if((Y|0)==(c[B+(X<<2)>>2]|0)?(c[ea>>2]|0)==(c[E+(X<<2)>>2]|0):0){Y=70;break b}X=X+1|0}while((X|0)<(V|0))}V=(c[o>>2]|0)+1|0;c[o>>2]=V;if((W|0)>=20){Y=71;break}}if((Y|0)==43){ta=1.0/($+(aa+Z));g[s>>2]=aa*ta;g[K>>2]=Z*ta;g[L>>2]=$*ta;c[o>>2]=3;l=c[1466]|0;c[1466]=(l|0)>(W|0)?l:W;l=e+8|0;r=W;Y=75}else if((Y|0)==44)Aa(15688,5912,498,5960);else if((Y|0)==56)Aa(6800,6832,103,6880);else if((Y|0)==63)Aa(6800,6832,103,6880);else if((Y|0)==70){V=c[o>>2]|0;Y=71}do if((Y|0)==71){v=c[1466]|0;c[1466]=(v|0)>(W|0)?v:W;v=e+8|0;if(!V)Aa(15688,5912,218,5992);else if((V|0)==1){r=m;ea=c[r>>2]|0;r=c[r+4>>2]|0;l=e;c[l>>2]=ea;c[l+4>>2]=r;l=m+8|0;ia=c[l>>2]|0;l=c[l+4>>2]|0;da=v;c[da>>2]=ia;c[da+4>>2]=l;t=(c[k>>2]=ea,+g[k>>2]);u=(c[k>>2]=ia,+g[k>>2]);q=(c[k>>2]=r,+g[k>>2]);p=(c[k>>2]=l,+g[k>>2]);l=v;r=W;break}else if((V|0)==2){sa=+g[s>>2];p=+g[K>>2];t=sa*+g[m>>2]+p*+g[m+36>>2];q=sa*+g[m+4>>2]+p*+g[m+40>>2];ta=+t;u=+q;l=e;g[l>>2]=ta;g[l+4>>2]=u;u=sa*+g[m+8>>2]+p*+g[m+44>>2];p=sa*+g[m+12>>2]+p*+g[m+48>>2];sa=+u;ta=+p;l=v;g[l>>2]=sa;g[l+4>>2]=ta;l=v;r=W;break}else if((V|0)==3){l=v;r=W;Y=75;break}else Aa(15688,5912,237,5992)}while(0);if((Y|0)==75){t=+g[s>>2];q=+g[K>>2];p=+g[L>>2];u=t*+g[m>>2]+q*+g[m+36>>2]+p*+g[m+72>>2];p=t*+g[m+4>>2]+q*+g[m+40>>2]+p*+g[m+76>>2];q=+u;t=+p;ia=e;g[ia>>2]=q;g[ia+4>>2]=t;ia=l;g[ia>>2]=q;g[ia+4>>2]=t;t=u;q=p}sa=t-u;s=e+4|0;v=e+12|0;ta=q-p;B=e+16|0;g[B>>2]=+O(+(sa*sa+ta*ta));c[e+20>>2]=r;g[f>>2]=+$w(m);o=c[o>>2]|0;b[n>>1]=o;if((o|0)>0){n=0;do{a[f+n+6>>0]=c[m+(n*36|0)+28>>2];a[f+n+9>>0]=c[m+(n*36|0)+32>>2];n=n+1|0}while((n|0)<(o|0))}if(!(a[h+88>>0]|0)){i=j;return}p=+g[h+24>>2];q=+g[h+52>>2];t=+g[B>>2];u=p+q;if(!(t>u&t>1.1920928955078125e-7)){sa=+((+g[e>>2]+ +g[l>>2])*.5);ta=+((+g[s>>2]+ +g[v>>2])*.5);ia=e;g[ia>>2]=sa;g[ia+4>>2]=ta;ia=l;g[ia>>2]=sa;g[ia+4>>2]=ta;g[B>>2]=0.0;i=j;return}g[B>>2]=t-u;w=+g[l>>2];t=+g[e>>2];z=w-t;u=+g[v>>2];x=+g[s>>2];y=u-x;A=+O(+(z*z+y*y));if(!(A<1.1920928955078125e-7)){ta=1.0/A;z=z*ta;y=y*ta}g[e>>2]=p*z+t;g[s>>2]=p*y+x;g[l>>2]=w-q*z;g[v>>2]=u-q*y;i=j;return}function $w(a){a=a|0;var b=0,d=0,e=0.0,f=0.0;b=i;d=c[a+108>>2]|0;if((d|0)==3){e=+g[a+16>>2];f=+g[a+20>>2];e=(+g[a+52>>2]-e)*(+g[a+92>>2]-f)-(+g[a+56>>2]-f)*(+g[a+88>>2]-e);i=b;return+e}else if(!d)Aa(15688,5912,247,5976);else if((d|0)==2){e=+g[a+16>>2]- +g[a+52>>2];f=+g[a+20>>2]- +g[a+56>>2];f=+O(+(e*e+f*f));i=b;return+f}else if((d|0)==1){f=0.0;i=b;return+f}else Aa(15688,5912,260,5976);return 0.0}function ax(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0;b=i;d=a+16|0;e=c[d>>2]|0;if((e|0)==-1){f=a+8|0;g=c[f>>2]|0;e=a+12|0;if((g|0)!=(c[e>>2]|0))Aa(6056,6088,58,6136);a=a+4|0;h=c[a>>2]|0;c[e>>2]=g<<1;g=RB(g*72|0)|0;c[a>>2]=g;WB(g|0,h|0,(c[f>>2]|0)*36|0)|0;SB(h);g=c[f>>2]|0;h=(c[e>>2]|0)+ -1|0;a=c[a>>2]|0;if((g|0)<(h|0))do{h=g;g=g+1|0;c[a+(h*36|0)+20>>2]=g;c[a+(h*36|0)+32>>2]=-1;h=(c[e>>2]|0)+ -1|0}while((g|0)<(h|0));c[a+(h*36|0)+20>>2]=-1;c[a+(((c[e>>2]|0)+ -1|0)*36|0)+32>>2]=-1;e=c[f>>2]|0;c[d>>2]=e}else{f=a+8|0;a=c[a+4>>2]|0}h=a+(e*36|0)+20|0;c[d>>2]=c[h>>2];c[h>>2]=-1;c[a+(e*36|0)+24>>2]=-1;c[a+(e*36|0)+28>>2]=-1;c[a+(e*36|0)+32>>2]=0;c[a+(e*36|0)+16>>2]=0;c[f>>2]=(c[f>>2]|0)+1;i=b;return e|0}function bx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;if((b|0)<=-1)Aa(6152,6088,94,6192);if((c[a+12>>2]|0)<=(b|0))Aa(6152,6088,94,6192);e=a+8|0;if((c[e>>2]|0)>0){f=a+16|0;a=c[a+4>>2]|0;c[a+(b*36|0)+20>>2]=c[f>>2];c[a+(b*36|0)+32>>2]=-1;c[f>>2]=b;c[e>>2]=(c[e>>2]|0)+ -1;i=d;return}else Aa(6208,6088,95,6192)}function cx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0,m=0,n=0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0;d=i;n=a+24|0;c[n>>2]=(c[n>>2]|0)+1;n=c[a>>2]|0;if((n|0)==-1){c[a>>2]=b;c[(c[a+4>>2]|0)+(b*36|0)+20>>2]=-1;i=d;return}e=a+4|0;l=c[e>>2]|0;f=+g[l+(b*36|0)>>2];h=+g[l+(b*36|0)+4>>2];j=+g[l+(b*36|0)+8>>2];k=+g[l+(b*36|0)+12>>2];m=c[l+(n*36|0)+24>>2]|0;a:do if((m|0)!=-1)do{o=c[l+(n*36|0)+28>>2]|0;s=+g[l+(n*36|0)+8>>2];y=+g[l+(n*36|0)>>2];u=+g[l+(n*36|0)+12>>2];q=+g[l+(n*36|0)+4>>2];w=((s>j?s:j)-(y<f?y:f)+((u>k?u:k)-(q<h?q:h)))*2.0;p=w*2.0;q=(w-(s-y+(u-q))*2.0)*2.0;u=+g[l+(m*36|0)>>2];y=f<u?f:u;s=+g[l+(m*36|0)+4>>2];w=h<s?h:s;v=+g[l+(m*36|0)+8>>2];r=j>v?j:v;t=+g[l+(m*36|0)+12>>2];x=k>t?k:t;if((c[l+(m*36|0)+24>>2]|0)==-1)r=(r-y+(x-w))*2.0;else r=(r-y+(x-w))*2.0-(v-u+(t-s))*2.0;r=q+r;s=+g[l+(o*36|0)>>2];w=f<s?f:s;z=+g[l+(o*36|0)+4>>2];y=h<z?h:z;u=+g[l+(o*36|0)+8>>2];v=j>u?j:u;t=+g[l+(o*36|0)+12>>2];x=k>t?k:t;if((c[l+(o*36|0)+24>>2]|0)==-1)s=(v-w+(x-y))*2.0;else s=(v-w+(x-y))*2.0-(u-s+(t-z))*2.0;q=q+s;if(p<r&p<q)break a;n=r<q?m:o;m=c[l+(n*36|0)+24>>2]|0}while((m|0)!=-1);while(0);l=c[l+(n*36|0)+20>>2]|0;m=ax(a)|0;o=c[e>>2]|0;c[o+(m*36|0)+20>>2]=l;c[o+(m*36|0)+16>>2]=0;o=c[e>>2]|0;z=+g[o+(n*36|0)>>2];y=+g[o+(n*36|0)+4>>2];z=+(f<z?f:z);y=+(h<y?h:y);A=o+(m*36|0)|0;g[A>>2]=z;g[A+4>>2]=y;y=+g[o+(n*36|0)+8>>2];z=+g[o+(n*36|0)+12>>2];y=+(j>y?j:y);z=+(k>z?k:z);o=o+(m*36|0)+8|0;g[o>>2]=y;g[o+4>>2]=z;o=c[e>>2]|0;c[o+(m*36|0)+32>>2]=(c[o+(n*36|0)+32>>2]|0)+1;if((l|0)==-1){c[o+(m*36|0)+24>>2]=n;c[o+(m*36|0)+28>>2]=b;c[o+(n*36|0)+20>>2]=m;A=o+(b*36|0)+20|0;c[A>>2]=m;c[a>>2]=m;m=c[A>>2]|0}else{A=o+(l*36|0)+24|0;if((c[A>>2]|0)==(n|0))c[A>>2]=m;else c[o+(l*36|0)+28>>2]=m;c[o+(m*36|0)+24>>2]=n;c[o+(m*36|0)+28>>2]=b;c[o+(n*36|0)+20>>2]=m;c[o+(b*36|0)+20>>2]=m}if((m|0)==-1){i=d;return}while(1){n=fx(a,m)|0;b=c[e>>2]|0;l=c[b+(n*36|0)+24>>2]|0;m=c[b+(n*36|0)+28>>2]|0;if((l|0)==-1){e=20;break}if((m|0)==-1){e=22;break}o=c[b+(l*36|0)+32>>2]|0;A=c[b+(m*36|0)+32>>2]|0;c[b+(n*36|0)+32>>2]=((o|0)>(A|0)?o:A)+1;ex(b+(n*36|0)|0,b+(l*36|0)|0,b+(m*36|0)|0);m=c[(c[e>>2]|0)+(n*36|0)+20>>2]|0;if((m|0)==-1){e=24;break}}if((e|0)==20)Aa(6288,6088,304,6304);else if((e|0)==22)Aa(6320,6088,305,6304);else if((e|0)==24){i=d;return}}function dx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0;e=i;if((c[a>>2]|0)==(b|0)){c[a>>2]=-1;i=e;return}d=a+4|0;f=c[d>>2]|0;g=c[f+(b*36|0)+20>>2]|0;h=c[f+(g*36|0)+20>>2]|0;j=c[f+(g*36|0)+24>>2]|0;if((j|0)==(b|0))j=c[f+(g*36|0)+28>>2]|0;if((h|0)==-1){c[a>>2]=j;c[f+(j*36|0)+20>>2]=-1;bx(a,g);i=e;return}b=f+(h*36|0)+24|0;if((c[b>>2]|0)==(g|0))c[b>>2]=j;else c[f+(h*36|0)+28>>2]=j;c[f+(j*36|0)+20>>2]=h;bx(a,g);do{j=fx(a,h)|0;b=c[d>>2]|0;f=c[b+(j*36|0)+24>>2]|0;g=c[b+(j*36|0)+28>>2]|0;ex(b+(j*36|0)|0,b+(f*36|0)|0,b+(g*36|0)|0);b=c[d>>2]|0;f=c[b+(f*36|0)+32>>2]|0;g=c[b+(g*36|0)+32>>2]|0;c[b+(j*36|0)+32>>2]=((f|0)>(g|0)?f:g)+1;h=c[b+(j*36|0)+20>>2]|0}while((h|0)!=-1);i=e;return}function ex(a,b,c){a=a|0;b=b|0;c=c|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0;d=i;e=+g[b>>2];f=+g[c>>2];h=+g[b+4>>2];j=+g[c+4>>2];f=+(e<f?e:f);j=+(h<j?h:j);k=a;g[k>>2]=f;g[k+4>>2]=j;j=+g[b+8>>2];f=+g[c+8>>2];h=+g[b+12>>2];e=+g[c+12>>2];f=+(j>f?j:f);e=+(h>e?h:e);b=a+8|0;g[b>>2]=f;g[b+4>>2]=e;i=d;return}function fx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;d=i;if((b|0)==-1)Aa(6336,6088,379,6352);h=c[a+4>>2]|0;g=h+(b*36|0)|0;p=h+(b*36|0)+24|0;o=c[p>>2]|0;if((o|0)==-1){u=b;i=d;return u|0}j=h+(b*36|0)+32|0;if((c[j>>2]|0)<2){u=b;i=d;return u|0}q=h+(b*36|0)+28|0;n=c[q>>2]|0;if((o|0)<=-1)Aa(6360,6088,389,6352);m=c[a+12>>2]|0;if((o|0)>=(m|0))Aa(6360,6088,389,6352);if(!((n|0)>-1&(n|0)<(m|0)))Aa(6392,6088,390,6352);l=h+(o*36|0)|0;k=h+(n*36|0)|0;e=h+(n*36|0)+32|0;f=h+(o*36|0)+32|0;r=(c[e>>2]|0)-(c[f>>2]|0)|0;if((r|0)>1){u=h+(n*36|0)+24|0;o=c[u>>2]|0;p=h+(n*36|0)+28|0;r=c[p>>2]|0;t=h+(o*36|0)|0;s=h+(r*36|0)|0;if(!((o|0)>-1&(o|0)<(m|0)))Aa(6424,6088,404,6352);if(!((r|0)>-1&(r|0)<(m|0)))Aa(6456,6088,405,6352);c[u>>2]=b;u=h+(b*36|0)+20|0;m=h+(n*36|0)+20|0;c[m>>2]=c[u>>2];c[u>>2]=n;m=c[m>>2]|0;do if((m|0)!=-1){a=h+(m*36|0)+24|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=n;break}a=h+(m*36|0)+28|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=n;break}else Aa(6488,6088,421,6352)}else c[a>>2]=n;while(0);m=h+(o*36|0)+32|0;a=h+(r*36|0)+32|0;if((c[m>>2]|0)>(c[a>>2]|0)){c[p>>2]=o;c[q>>2]=r;c[h+(r*36|0)+20>>2]=b;ex(g,l,s);ex(k,g,t);f=c[f>>2]|0;u=c[a>>2]|0;u=((f|0)>(u|0)?f:u)+1|0;c[j>>2]=u;f=c[m>>2]|0;f=(u|0)>(f|0)?u:f}else{c[p>>2]=r;c[q>>2]=o;c[h+(o*36|0)+20>>2]=b;ex(g,l,t);ex(k,g,s);f=c[f>>2]|0;u=c[m>>2]|0;u=((f|0)>(u|0)?f:u)+1|0;c[j>>2]=u;f=c[a>>2]|0;f=(u|0)>(f|0)?u:f}c[e>>2]=f+1;u=n;i=d;return u|0}if((r|0)>=-1){u=b;i=d;return u|0}u=h+(o*36|0)+24|0;t=c[u>>2]|0;s=h+(o*36|0)+28|0;r=c[s>>2]|0;n=h+(t*36|0)|0;q=h+(r*36|0)|0;if(!((t|0)>-1&(t|0)<(m|0)))Aa(6520,6088,464,6352);if(!((r|0)>-1&(r|0)<(m|0)))Aa(6552,6088,465,6352);c[u>>2]=b;u=h+(b*36|0)+20|0;m=h+(o*36|0)+20|0;c[m>>2]=c[u>>2];c[u>>2]=o;m=c[m>>2]|0;do if((m|0)!=-1){a=h+(m*36|0)+24|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=o;break}a=h+(m*36|0)+28|0;if((c[a>>2]|0)==(b|0)){c[a>>2]=o;break}else Aa(6584,6088,481,6352)}else c[a>>2]=o;while(0);m=h+(t*36|0)+32|0;a=h+(r*36|0)+32|0;if((c[m>>2]|0)>(c[a>>2]|0)){c[s>>2]=t;c[p>>2]=r;c[h+(r*36|0)+20>>2]=b;ex(g,k,q);ex(l,g,n);e=c[e>>2]|0;u=c[a>>2]|0;u=((e|0)>(u|0)?e:u)+1|0;c[j>>2]=u;e=c[m>>2]|0;e=(u|0)>(e|0)?u:e}else{c[s>>2]=r;c[p>>2]=t;c[h+(t*36|0)+20>>2]=b;ex(g,k,n);ex(l,g,q);e=c[e>>2]|0;u=c[m>>2]|0;u=((e|0)>(u|0)?e:u)+1|0;c[j>>2]=u;e=c[a>>2]|0;e=(u|0)>(e|0)?u:e}c[f>>2]=e+1;u=o;i=d;return u|0}function gx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=+e;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0;m=i;q=1.0-e;n=q*+g[a+32>>2]+ +g[a+36>>2]*e;o=+R(+n);n=+Q(+n);h=+g[a+8>>2];l=+g[a+12>>2];k=q*+g[a+16>>2]+ +g[a+24>>2]*e-(n*h-o*l);l=q*+g[a+20>>2]+ +g[a+28>>2]*e-(o*h+n*l);h=q*+g[a+68>>2]+ +g[a+72>>2]*e;j=+R(+h);h=+Q(+h);r=+g[a+44>>2];s=+g[a+48>>2];f=q*+g[a+52>>2]+ +g[a+60>>2]*e-(h*r-j*s);e=q*+g[a+56>>2]+ +g[a+64>>2]*e-(j*r+h*s);t=c[a+80>>2]|0;if((t|0)==1){p=+g[a+92>>2];q=+g[a+96>>2];r=+g[a+84>>2];s=+g[a+88>>2];a=c[a+4>>2]|0;if((d|0)<=-1)Aa(6800,6832,103,6880);if((c[a+20>>2]|0)<=(d|0))Aa(6800,6832,103,6880);t=(c[a+16>>2]|0)+(d<<3)|0;v=+g[t>>2];u=+g[t+4>>2];s=(n*p-o*q)*(f+(h*v-j*u)-(k+(n*r-o*s)))+(o*p+n*q)*(e+(j*v+h*u)-(l+(o*r+n*s)));i=m;return+s}else if((t|0)==2){r=+g[a+92>>2];s=+g[a+96>>2];p=+g[a+84>>2];q=+g[a+88>>2];a=c[a>>2]|0;if((b|0)<=-1)Aa(6800,6832,103,6880);if((c[a+20>>2]|0)<=(b|0))Aa(6800,6832,103,6880);t=(c[a+16>>2]|0)+(b<<3)|0;u=+g[t>>2];v=+g[t+4>>2];v=(h*r-j*s)*(k+(n*u-o*v)-(f+(h*p-j*q)))+(j*r+h*s)*(l+(o*u+n*v)-(e+(j*p+h*q)));i=m;return+v}else if(!t){t=c[a>>2]|0;if((b|0)<=-1)Aa(6800,6832,103,6880);if((c[t+20>>2]|0)<=(b|0))Aa(6800,6832,103,6880);b=(c[t+16>>2]|0)+(b<<3)|0;p=+g[b>>2];q=+g[b+4>>2];b=c[a+4>>2]|0;if((d|0)<=-1)Aa(6800,6832,103,6880);if((c[b+20>>2]|0)<=(d|0))Aa(6800,6832,103,6880);t=(c[b+16>>2]|0)+(d<<3)|0;u=+g[t>>2];v=+g[t+4>>2];v=+g[a+92>>2]*(f+(h*u-j*v)-(k+(n*p-o*q)))+ +g[a+96>>2]*(e+(j*u+h*v)-(l+(o*p+n*q)));i=m;return+v}else Aa(15688,6720,239,6784);return 0.0}function hx(a){a=a|0;var b=0;b=i;c[a>>2]=6952;SB(c[a+12>>2]|0);SB(a);i=b;return}function ix(a){a=a|0;var b=0,d=0;b=i;c[a>>2]=6952;d=a+12|0;SB(c[d>>2]|0);c[d>>2]=0;c[a+16>>2]=0;i=b;return}function jx(a,d,e){a=a|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0.0,m=0.0,n=0.0,o=0.0;h=i;f=a+12|0;if(c[f>>2]|0)Aa(6984,7024,60,7144);j=a+16|0;if(c[j>>2]|0)Aa(6984,7024,60,7144);if((e|0)<=1)Aa(7160,7024,61,7144);m=+g[d>>2];l=+g[d+4>>2];k=1;while(1){o=m;m=+g[d+(k<<3)>>2];o=o-m;n=l;l=+g[d+(k<<3)+4>>2];n=n-l;k=k+1|0;if(!(o*o+n*n>2499999936844688.0e-20)){k=9;break}if((k|0)>=(e|0)){k=10;break}}if((k|0)==9)Aa(7176,7024,66,7144);else if((k|0)==10){c[j>>2]=e;k=RB(e<<3)|0;c[f>>2]=k;WB(k|0,d|0,c[j>>2]<<3|0)|0;k=a+20|0;c[k+0>>2]=0;c[k+4>>2]=0;c[k+8>>2]=0;c[k+12>>2]=0;b[k+16>>1]=0;i=h;return}}function kx(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;d=Jx(d,40)|0;if(!d)d=0;else{c[d>>2]=6952;c[d+4>>2]=3;g[d+8>>2]=.009999999776482582;c[d+12>>2]=0;c[d+16>>2]=0;a[d+36>>0]=0;a[d+37>>0]=0}jx(d,c[b+12>>2]|0,c[b+16>>2]|0);f=b+20|0;h=c[f+4>>2]|0;j=d+20|0;c[j>>2]=c[f>>2];c[j+4>>2]=h;j=b+28|0;h=c[j+4>>2]|0;f=d+28|0;c[f>>2]=c[j>>2];c[f+4>>2]=h;a[d+36>>0]=a[b+36>>0]|0;a[d+37>>0]=a[b+37>>0]|0;i=e;return d|0}function lx(a){a=a|0;return(c[a+16>>2]|0)+ -1|0}function mx(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0;f=i;if((e|0)<=-1)Aa(7240,7024,112,7280);h=b+16|0;if(((c[h>>2]|0)+ -1|0)<=(e|0))Aa(7240,7024,112,7280);c[d+4>>2]=1;g[d+8>>2]=+g[b+8>>2];j=b+12|0;k=(c[j>>2]|0)+(e<<3)|0;l=c[k+4>>2]|0;m=d+12|0;c[m>>2]=c[k>>2];c[m+4>>2]=l;m=(c[j>>2]|0)+(e+1<<3)|0;l=c[m+4>>2]|0;k=d+20|0;c[k>>2]=c[m>>2];c[k+4>>2]=l;k=d+28|0;if((e|0)>0){n=(c[j>>2]|0)+(e+ -1<<3)|0;l=c[n+4>>2]|0;m=k;c[m>>2]=c[n>>2];c[m+4>>2]=l;a[d+44>>0]=1}else{l=b+20|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+44>>0]=a[b+36>>0]|0}k=d+36|0;if(((c[h>>2]|0)+ -2|0)>(e|0)){l=(c[j>>2]|0)+(e+2<<3)|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+45>>0]=1;i=f;return}else{l=b+28|0;m=c[l+4>>2]|0;n=k;c[n>>2]=c[l>>2];c[n+4>>2]=m;a[d+45>>0]=a[b+37>>0]|0;i=f;return}}function nx(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function ox(a,d,e,f,h){a=a|0;d=d|0;e=e|0;f=f|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0;j=i;i=i+48|0;k=j;l=c[a+16>>2]|0;if((l|0)>(h|0)){c[k>>2]=7472;c[k+4>>2]=1;g[k+8>>2]=.009999999776482582;m=k+28|0;c[m+0>>2]=0;c[m+4>>2]=0;c[m+8>>2]=0;c[m+12>>2]=0;b[m+16>>1]=0;m=h+1|0;a=c[a+12>>2]|0;o=a+(h<<3)|0;n=c[o+4>>2]|0;h=k+12|0;c[h>>2]=c[o>>2];c[h+4>>2]=n;l=a+(((m|0)==(l|0)?0:m)<<3)|0;h=c[l+4>>2]|0;a=k+20|0;c[a>>2]=c[l>>2];c[a+4>>2]=h;a=Ax(k,d,e,f,0)|0;i=j;return a|0}else Aa(7296,7024,152,12248);return 0}function px(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0;f=i;h=c[a+16>>2]|0;if((h|0)>(e|0)){r=e+1|0;h=(r|0)==(h|0)?0:r;a=c[a+12>>2]|0;o=+g[d+12>>2];n=+g[a+(e<<3)>>2];p=+g[d+8>>2];l=+g[a+(e<<3)+4>>2];k=+g[d>>2];m=k+(o*n-p*l);q=+g[d+4>>2];l=n*p+o*l+q;n=+g[a+(h<<3)>>2];j=+g[a+(h<<3)+4>>2];k=k+(o*n-p*j);j=q+(p*n+o*j);o=+(m<k?m:k);n=+(l<j?l:j);a=b;g[a>>2]=o;g[a+4>>2]=n;k=+(m>k?m:k);j=+(l>j?l:j);a=b+8|0;g[a>>2]=k;g[a+4>>2]=j;i=f;return}else Aa(7296,7024,171,7320)}function qx(a,b,d){a=a|0;b=b|0;d=+d;a=i;c[b+0>>2]=0;c[b+4>>2]=0;c[b+8>>2]=0;c[b+12>>2]=0;i=a;return}function rx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0;d=i;b=Jx(b,20)|0;if(!b)b=0;else{c[b>>2]=7400;e=b+4|0;c[e+0>>2]=0;c[e+4>>2]=0;c[e+8>>2]=0;c[e+12>>2]=0}g=a+4|0;e=c[g+4>>2]|0;f=b+4|0;c[f>>2]=c[g>>2];c[f+4>>2]=e;f=a+12|0;a=c[f+4>>2]|0;e=b+12|0;c[e>>2]=c[f>>2];c[e+4>>2]=a;i=d;return b|0}function sx(a){a=a|0;return 1}function tx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0;d=+g[b+12>>2];i=+g[a+12>>2];h=+g[b+8>>2];e=+g[a+16>>2];f=+g[c>>2]-(+g[b>>2]+(d*i-h*e));e=+g[c+4>>2]-(+g[b+4>>2]+(i*h+d*e));d=+g[a+8>>2];return f*f+e*e<=d*d|0}function ux(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;e=i;m=+g[d+12>>2];k=+g[a+12>>2];n=+g[d+8>>2];h=+g[a+16>>2];l=+g[c>>2];f=l-(+g[d>>2]+(m*k-n*h));j=+g[c+4>>2];h=j-(+g[d+4>>2]+(k*n+m*h));m=+g[a+8>>2];l=+g[c+8>>2]-l;j=+g[c+12>>2]-j;n=f*l+h*j;k=l*l+j*j;m=n*n-(f*f+h*h-m*m)*k;if(m<0.0|k<1.1920928955078125e-7){d=0;i=e;return d|0}n=n+ +O(+m);m=-n;if(!(n<=-0.0)){d=0;i=e;return d|0}if(!(k*+g[c+16>>2]>=m)){d=0;i=e;return d|0}n=m/k;g[b+8>>2]=n;f=f+l*n;j=h+j*n;n=+f;h=+j;d=b;g[d>>2]=n;g[d+4>>2]=h;h=+O(+(f*f+j*j));if(h<1.1920928955078125e-7){d=1;i=e;return d|0}n=1.0/h;g[b>>2]=f*n;g[b+4>>2]=j*n;d=1;i=e;return d|0}function vx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;e=+g[c+12>>2];j=+g[a+12>>2];i=+g[c+8>>2];f=+g[a+16>>2];h=+g[c>>2]+(e*j-i*f);f=+g[c+4>>2]+(j*i+e*f);d=a+8|0;e=+g[d>>2];g[b>>2]=h-e;g[b+4>>2]=f-e;e=+g[d>>2];g[b+8>>2]=h+e;g[b+12>>2]=f+e;return}function wx(a,b,d){a=a|0;b=b|0;d=+d;var e=0.0,f=0.0,h=0.0,i=0,j=0,k=0,l=0,m=0;j=a+8|0;h=+g[j>>2];h=h*d*3.1415927410125732*h;g[b>>2]=h;i=a+12|0;m=i;l=c[m+4>>2]|0;k=b+4|0;c[k>>2]=c[m>>2];c[k+4>>2]=l;f=+g[j>>2];e=+g[i>>2];d=+g[a+16>>2];g[b+12>>2]=h*(f*f*.5+(e*e+d*d));return}function xx(a,d){a=a|0;d=d|0;var e=0,f=0,h=0,j=0;e=i;d=Jx(d,48)|0;if(!d)d=0;else{c[d>>2]=7472;c[d+4>>2]=1;g[d+8>>2]=.009999999776482582;f=d+28|0;c[f+0>>2]=0;c[f+4>>2]=0;c[f+8>>2]=0;c[f+12>>2]=0;b[f+16>>1]=0}j=a+4|0;h=c[j+4>>2]|0;f=d+4|0;c[f>>2]=c[j>>2];c[f+4>>2]=h;f=d+12|0;a=a+12|0;c[f+0>>2]=c[a+0>>2];c[f+4>>2]=c[a+4>>2];c[f+8>>2]=c[a+8>>2];c[f+12>>2]=c[a+12>>2];c[f+16>>2]=c[a+16>>2];c[f+20>>2]=c[a+20>>2];c[f+24>>2]=c[a+24>>2];c[f+28>>2]=c[a+28>>2];b[f+32>>1]=b[a+32>>1]|0;i=e;return d|0}function yx(a){a=a|0;return 1}function zx(a,b,c){a=a|0;b=b|0;c=c|0;return 0}function Ax(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0;e=i;m=+g[d>>2];l=+g[c>>2]-m;n=+g[d+4>>2];j=+g[c+4>>2]-n;f=d+12|0;q=+g[f>>2];d=d+8|0;k=+g[d>>2];h=l*q+j*k;l=q*j-l*k;m=+g[c+8>>2]-m;n=+g[c+12>>2]-n;j=q*m+k*n-h;m=q*n-k*m-l;v=a+12|0;k=+g[v>>2];n=+g[v+4>>2];a=a+20|0;q=+g[a>>2];q=q-k;p=+g[a+4>>2]-n;t=-q;o=q*q+p*p;r=+O(+o);if(r<1.1920928955078125e-7)s=p;else{u=1.0/r;s=p*u;t=u*t}r=(n-l)*t+(k-h)*s;u=m*t+j*s;if(u==0.0){v=0;i=e;return v|0}u=r/u;if(u<0.0){v=0;i=e;return v|0}if(o==0.0?1:+g[c+16>>2]<u){v=0;i=e;return v|0}q=(q*(h+j*u-k)+p*(l+m*u-n))/o;if(q<0.0|q>1.0){v=0;i=e;return v|0}g[b+8>>2]=u;u=+g[f>>2];j=+g[d>>2];h=s*u-t*j;j=t*u+s*j;if(r>0.0){t=+-h;u=+-j;v=b;g[v>>2]=t;g[v+4>>2]=u;v=1;i=e;return v|0}else{t=+h;u=+j;v=b;g[v>>2]=t;g[v+4>>2]=u;v=1;i=e;return v|0}return 0}function Bx(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0;d=i;j=+g[c+12>>2];m=+g[a+12>>2];l=+g[c+8>>2];h=+g[a+16>>2];f=+g[c>>2];k=f+(j*m-l*h);n=+g[c+4>>2];h=m*l+j*h+n;m=+g[a+20>>2];e=+g[a+24>>2];f=f+(j*m-l*e);e=n+(l*m+j*e);j=+g[a+8>>2];m=+((k<f?k:f)-j);l=+((h<e?h:e)-j);c=b;g[c>>2]=m;g[c+4>>2]=l;f=+(j+(k>f?k:f));e=+(j+(h>e?h:e));c=b+8|0;g[c>>2]=f;g[c+4>>2]=e;i=d;return}function Cx(a,b,c){a=a|0;b=b|0;c=+c;var d=0,e=0.0;d=i;g[b>>2]=0.0;e=+((+g[a+12>>2]+ +g[a+20>>2])*.5);c=+((+g[a+16>>2]+ +g[a+24>>2])*.5);a=b+4|0;g[a>>2]=e;g[a+4>>2]=c;g[b+12>>2]=0.0;i=d;return}function Dx(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0;d=i;b=Jx(b,152)|0;if(!b)b=0;else{c[b>>2]=7832;c[b+4>>2]=2;g[b+8>>2]=.009999999776482582;c[b+148>>2]=0;g[b+12>>2]=0.0;g[b+16>>2]=0.0}h=a+4|0;f=c[h+4>>2]|0;e=b+4|0;c[e>>2]=c[h>>2];c[e+4>>2]=f;WB(b+12|0,a+12|0,140)|0;i=d;return b|0}function Ex(a){a=a|0;return 1}function Fx(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0;e=i;j=+g[d>>2]- +g[b>>2];k=+g[d+4>>2]- +g[b+4>>2];l=+g[b+12>>2];h=+g[b+8>>2];f=j*l+k*h;h=l*k-j*h;b=c[a+148>>2]|0;if((b|0)>0)d=0;else{d=1;i=e;return d|0}while(1){if((f- +g[a+(d<<3)+20>>2])*+g[a+(d<<3)+84>>2]+(h- +g[a+(d<<3)+24>>2])*+g[a+(d<<3)+88>>2]>0.0){b=0;a=4;break}d=d+1|0;if((d|0)>=(b|0)){b=1;a=4;break}}if((a|0)==4){i=e;return b|0}return 0}function Gx(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0.0;f=i;n=+g[e>>2];m=+g[d>>2]-n;w=+g[e+4>>2];r=+g[d+4>>2]-w;l=e+12|0;v=+g[l>>2];e=e+8|0;q=+g[e>>2];o=m*v+r*q;m=v*r-m*q;n=+g[d+8>>2]-n;w=+g[d+12>>2]-w;r=v*n+q*w-o;n=v*w-q*n-m;p=c[a+148>>2]|0;q=+g[d+16>>2];do if((p|0)>0){t=0;d=-1;s=0.0;u=q;a:while(1){x=+g[a+(t<<3)+84>>2];w=+g[a+(t<<3)+88>>2];v=(+g[a+(t<<3)+20>>2]-o)*x+(+g[a+(t<<3)+24>>2]-m)*w;w=r*x+n*w;do if(w==0.0){if(v<0.0){h=0;p=17;break a}}else{if(w<0.0?v<s*w:0){d=t;s=v/w;break}if(w>0.0?v<u*w:0)u=v/w}while(0);t=t+1|0;if(u<s){h=0;p=17;break}if((t|0)>=(p|0)){p=12;break}}if((p|0)==12){if(s>=0.0){j=q;h=d;k=s;break}Aa(7712,7568,328,12248)}else if((p|0)==17){i=f;return h|0}}else{j=q;h=-1;k=0.0}while(0);if(!(k<=j))Aa(7712,7568,328,12248);if((h|0)<=-1){t=0;i=f;return t|0}g[b+8>>2]=k;v=+g[l>>2];s=+g[a+(h<<3)+84>>2];u=+g[e>>2];x=+g[a+(h<<3)+88>>2];w=+(v*s-u*x);x=+(s*u+v*x);t=b;g[t>>2]=w;g[t+4>>2]=x;t=1;i=f;return t|0}function Hx(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0;e=i;f=+g[d+12>>2];n=+g[a+20>>2];h=+g[d+8>>2];o=+g[a+24>>2];j=+g[d>>2];l=j+(f*n-h*o);k=+g[d+4>>2];o=n*h+f*o+k;d=c[a+148>>2]|0;if((d|0)>1){m=l;n=o;p=1;do{s=+g[a+(p<<3)+20>>2];q=+g[a+(p<<3)+24>>2];r=j+(f*s-h*q);q=s*h+f*q+k;m=m<r?m:r;n=n<q?n:q;l=l>r?l:r;o=o>q?o:q;p=p+1|0}while((p|0)<(d|0))}else{n=o;m=l}s=+g[a+8>>2];q=+(m-s);r=+(n-s);p=b;g[p>>2]=q;g[p+4>>2]=r;r=+(l+s);s=+(o+s);p=b+8|0;g[p>>2]=r;g[p+4>>2]=s;i=e;return}function Ix(a,b,d){a=a|0;b=b|0;d=+d;var e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0,r=0,s=0,t=0,u=0.0,v=0,w=0.0,x=0.0,y=0.0,z=0.0;e=i;f=c[a+148>>2]|0;if((f|0)>2){j=0.0;h=0.0;o=0}else Aa(7760,7568,385,7776);do{h=h+ +g[a+(o<<3)+20>>2];j=j+ +g[a+(o<<3)+24>>2];o=o+1|0}while((o|0)<(f|0));n=1.0/+(f|0);h=h*n;n=j*n;s=a+20|0;v=a+24|0;l=0.0;m=0.0;j=0.0;k=0.0;t=0;do{u=+g[a+(t<<3)+20>>2]-h;p=+g[a+(t<<3)+24>>2]-n;t=t+1|0;o=(t|0)<(f|0);if(o){q=a+(t<<3)+20|0;r=a+(t<<3)+24|0}else{q=s;r=v}x=+g[q>>2]-h;w=+g[r>>2]-n;y=u*w-p*x;z=y*.5;k=k+z;z=z*.3333333432674408;l=l+(u+x)*z;m=m+(p+w)*z;j=j+y*.0833333358168602*(x*x+(u*u+u*x)+(w*w+(p*p+p*w)))}while(o);p=k*d;g[b>>2]=p;if(k>1.1920928955078125e-7){z=1.0/k;y=l*z;z=m*z;w=h+y;x=n+z;n=+w;u=+x;v=b+4|0;g[v>>2]=n;g[v+4>>2]=u;g[b+12>>2]=j*d+p*(w*w+x*x-(y*y+z*z));i=e;return}else Aa(7792,7568,431,7776)}function Jx(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0;e=i;if(!d){k=0;i=e;return k|0}if((d|0)<=0)Aa(8744,8672,102,8992);if((d|0)>640){k=RB(d)|0;i=e;return k|0}k=a[7992+d>>0]|0;g=k&255;if((k&255)>=14)Aa(8760,8672,110,8992);d=b+(g<<2)+12|0;f=c[d>>2]|0;if(f){c[d>>2]=c[f>>2];k=f;i=e;return k|0}f=b+4|0;h=c[f>>2]|0;j=b+8|0;if((h|0)==(c[j>>2]|0)){k=c[b>>2]|0;h=h+128|0;c[j>>2]=h;h=RB(h<<3)|0;c[b>>2]=h;WB(h|0,k|0,c[f>>2]<<3|0)|0;UB((c[b>>2]|0)+(c[f>>2]<<3)|0,0,1024)|0;SB(k);h=c[f>>2]|0}k=c[b>>2]|0;j=RB(16384)|0;b=k+(h<<3)+4|0;c[b>>2]=j;g=c[7936+(g<<2)>>2]|0;c[k+(h<<3)>>2]=g;h=16384/(g|0)|0;if((_(h,g)|0)>=16385)Aa(8800,8672,138,8992);h=h+ -1|0;if((h|0)>0){k=0;do{l=k;k=k+1|0;c[j+(_(l,g)|0)>>2]=j+(_(k,g)|0);j=c[b>>2]|0}while((k|0)!=(h|0))}c[j+(_(h,g)|0)>>2]=0;c[d>>2]=c[c[b>>2]>>2];c[f>>2]=(c[f>>2]|0)+1;l=c[b>>2]|0;i=e;return l|0}function Kx(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;f=i;if(!e){i=f;return}if((e|0)<=0)Aa(8744,8672,162,9032);if((e|0)>640){SB(d);i=f;return}e=a[7992+e>>0]|0;if((e&255)>=14)Aa(8760,8672,171,9032);e=b+((e&255)<<2)+12|0;c[d>>2]=c[e>>2];c[e>>2]=d;i=f;return}function Lx(a,b,c){a=a|0;b=b|0;c=c|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0;e=+g[b+16>>2];l=+g[b+32>>2];h=+g[b+20>>2];d=+g[b+28>>2];o=e*l-h*d;k=+g[b+24>>2];f=+g[b+12>>2];n=h*k-l*f;m=d*f-e*k;j=+g[b>>2];i=+g[b+4>>2];p=+g[b+8>>2];q=o*j+i*n+m*p;if(q!=0.0)q=1.0/q;r=+g[c>>2];s=+g[c+4>>2];t=+g[c+8>>2];g[a>>2]=q*(o*r+s*n+m*t);g[a+4>>2]=q*((s*l-t*d)*j+i*(t*k-l*r)+(d*r-s*k)*p);g[a+8>>2]=q*((e*t-h*s)*j+i*(h*r-t*f)+(s*f-e*r)*p);return}function Mx(a,b,c,d){a=a|0;b=b|0;c=+c;d=+d;var e=0.0,f=0.0,h=0.0,i=0.0,j=0.0;f=+g[b>>2];h=+g[b+12>>2];e=+g[b+4>>2];i=+g[b+16>>2];j=f*i-h*e;if(j!=0.0)j=1.0/j;g[a>>2]=j*(i*c-h*d);g[a+4>>2]=j*(f*d-e*c);return}function Nx(a,b){a=a|0;b=b|0;var d=0,e=0.0,f=0.0,h=0.0,j=0.0,k=0.0;d=i;e=+g[a>>2];h=+g[a+12>>2];f=+g[a+4>>2];j=+g[a+16>>2];k=e*j-h*f;if(k!=0.0)k=1.0/k;g[b>>2]=j*k;j=-k;g[b+12>>2]=h*j;g[b+8>>2]=0.0;g[b+4>>2]=f*j;g[b+16>>2]=e*k;a=b+20|0;c[a+0>>2]=0;c[a+4>>2]=0;c[a+8>>2]=0;c[a+12>>2]=0;i=d;return}function Ox(a,b){a=a|0;b=b|0;var c=0.0,d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0.0,k=0.0,l=0.0,m=0.0;d=+g[a+16>>2];c=+g[a+32>>2];l=d*c;m=+g[a+20>>2];f=+g[a+28>>2];h=+g[a+24>>2];i=+g[a+12>>2];k=c*i;j=f*i-d*h;e=+g[a>>2];m=(l-m*f)*e+ +g[a+4>>2]*(m*h-k)+j*+g[a+8>>2];if(m!=0.0)m=1.0/m;g[b>>2]=m*(l-f*f);l=m*(h*f-k);g[b+4>>2]=l;k=m*j;g[b+8>>2]=k;g[b+12>>2]=l;g[b+16>>2]=m*(e*c-h*h);l=m*(i*h-e*f);g[b+20>>2]=l;g[b+24>>2]=k;g[b+28>>2]=l;g[b+32>>2]=m*(e*d-i*i);return}function Px(a,b){a=a|0;b=b|0;var d=0,e=0;d=i;i=i+16|0;e=d;c[e>>2]=b;Qa(a|0,e|0)|0;i=d;return}function Qx(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0;f=i;e=b+102796|0;g=c[e>>2]|0;if((g|0)>=32)Aa(8952,8856,38,8992);h=b+(g*12|0)+102412|0;c[b+(g*12|0)+102416>>2]=d;j=b+102400|0;k=c[j>>2]|0;if((k+d|0)>102400){c[h>>2]=RB(d)|0;a[b+(g*12|0)+102420>>0]=1}else{c[h>>2]=b+k;a[b+(g*12|0)+102420>>0]=0;c[j>>2]=(c[j>>2]|0)+d}k=b+102404|0;j=(c[k>>2]|0)+d|0;c[k>>2]=j;k=b+102408|0;d=c[k>>2]|0;c[k>>2]=(d|0)>(j|0)?d:j;c[e>>2]=(c[e>>2]|0)+1;i=f;return c[h>>2]|0}function Rx(b,d){b=b|0;d=d|0;var e=0,f=0,g=0,h=0;f=i;e=b+102796|0;g=c[e>>2]|0;if((g|0)<=0)Aa(9008,8856,63,9032);h=g+ -1|0;if((c[b+(h*12|0)+102412>>2]|0)!=(d|0))Aa(9040,8856,65,9032);if(!(a[b+(h*12|0)+102420>>0]|0)){d=b+(h*12|0)+102416|0;h=b+102400|0;c[h>>2]=(c[h>>2]|0)-(c[d>>2]|0)}else{SB(d);d=b+(h*12|0)+102416|0;g=c[e>>2]|0}h=b+102404|0;c[h>>2]=(c[h>>2]|0)-(c[d>>2]|0);c[e>>2]=g+ -1;i=f;return}function Sx(a){a=a|0;var d=0,e=0,f=0,h=0,j=0.0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0,u=0.0,v=0.0,w=0.0,x=0,y=0.0;h=i;i=i+16|0;n=h;l=a+116|0;m=a+120|0;f=a+124|0;k=a+128|0;e=a+28|0;g[e>>2]=0.0;g[a+32>>2]=0.0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0;o=c[a>>2]|0;if((o|0)==1|(o|0)==0){q=a+12|0;p=c[q>>2]|0;q=c[q+4>>2]|0;t=a+36|0;c[t>>2]=p;c[t+4>>2]=q;t=a+44|0;c[t>>2]=p;c[t+4>>2]=q;g[a+52>>2]=+g[a+56>>2];i=h;return}else if((o|0)==2){t=c[a+100>>2]|0;if(t){o=n+4|0;p=n+8|0;q=n+12|0;u=0.0;r=0.0;s=0.0;v=0.0;do{w=+g[t>>2];if(!(w==0.0)){x=c[t+12>>2]|0;rb[c[(c[x>>2]|0)+28>>2]&63](x,n,w);u=+g[n>>2];r=u+ +g[l>>2];g[l>>2]=r;s=s+u*+g[o>>2];v=v+u*+g[p>>2];u=+g[q>>2]+ +g[f>>2];g[f>>2]=u}t=c[t+4>>2]|0}while((t|0)!=0);if(r>0.0){w=1.0/r;g[m>>2]=w;s=s*w;v=v*w}else d=11}else{v=0.0;s=0.0;u=0.0;d=11}if((d|0)==11){g[l>>2]=1.0;g[m>>2]=1.0;r=1.0}do if(u>0.0?(b[a+4>>1]&16)==0:0){r=u-(v*v+s*s)*r;g[f>>2]=r;if(r>0.0){j=1.0/r;break}else Aa(9528,9088,334,9512)}else d=17;while(0);if((d|0)==17){g[f>>2]=0.0;j=0.0}g[k>>2]=j;x=a+44|0;t=x;w=+g[t>>2];r=+g[t+4>>2];y=+s;j=+v;t=e;g[t>>2]=y;g[t+4>>2]=j;j=+g[a+24>>2];y=+g[a+20>>2];u=+g[a+12>>2]+(j*s-y*v);s=s*y+j*v+ +g[a+16>>2];j=+u;v=+s;g[x>>2]=j;g[x+4>>2]=v;x=a+36|0;g[x>>2]=j;g[x+4>>2]=v;v=+g[a+72>>2];x=a+64|0;g[x>>2]=+g[x>>2]-v*(s-r);x=a+68|0;g[x>>2]=v*(u-w)+ +g[x>>2];i=h;return}else Aa(9480,9088,299,9512)}function Tx(a){a=a|0;var b=0,d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0;b=i;i=i+16|0;e=b;k=+g[a+52>>2];l=+R(+k);g[e+8>>2]=l;k=+Q(+k);g[e+12>>2]=k;m=+g[a+28>>2];h=+g[a+32>>2];j=+(+g[a+36>>2]-(k*m-l*h));h=+(+g[a+40>>2]-(m*l+k*h));d=e;g[d>>2]=j;g[d+4>>2]=h;d=(c[a+88>>2]|0)+102872|0;f=c[a+100>>2]|0;if(!f){i=b;return}a=a+12|0;do{qy(f,d,e,a);f=c[f+4>>2]|0}while((f|0)!=0);i=b;return}function Ux(d,e){d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0.0;f=i;h=d+88|0;n=c[h>>2]|0;if(c[n+102868>>2]&2)Aa(9352,9088,168,9392);l=Jx(n,44)|0;if(!l)l=0;else{b[l+32>>1]=1;b[l+34>>1]=-1;b[l+36>>1]=0;c[l+40>>2]=0;c[l+24>>2]=0;c[l+28>>2]=0;c[l+0>>2]=0;c[l+4>>2]=0;c[l+8>>2]=0;c[l+12>>2]=0}c[l+40>>2]=c[e+4>>2];g[l+16>>2]=+g[e+8>>2];g[l+20>>2]=+g[e+12>>2];j=l+8|0;c[j>>2]=d;k=l+4|0;c[k>>2]=0;m=l+32|0;p=e+22|0;b[m+0>>1]=b[p+0>>1]|0;b[m+2>>1]=b[p+2>>1]|0;b[m+4>>1]=b[p+4>>1]|0;a[l+38>>0]=a[e+20>>0]|0;m=c[e>>2]|0;m=tb[c[(c[m>>2]|0)+8>>2]&63](m,n)|0;c[l+12>>2]=m;m=nb[c[(c[m>>2]|0)+12>>2]&63](m)|0;p=Jx(n,m*28|0)|0;n=l+24|0;c[n>>2]=p;if((m|0)>0){o=0;do{c[p+(o*28|0)+16>>2]=0;p=c[n>>2]|0;c[p+(o*28|0)+24>>2]=-1;o=o+1|0}while((o|0)!=(m|0))}c[l+28>>2]=0;q=+g[e+16>>2];g[l>>2]=q;if(b[d+4>>1]&32){oy(l,(c[h>>2]|0)+102872|0,d+12|0);q=+g[l>>2]}p=d+100|0;c[k>>2]=c[p>>2];c[p>>2]=l;p=d+104|0;c[p>>2]=(c[p>>2]|0)+1;c[j>>2]=d;if(!(q>0.0)){p=c[h>>2]|0;p=p+102868|0;o=c[p>>2]|0;o=o|1;c[p>>2]=o;i=f;return l|0}Sx(d);p=c[h>>2]|0;p=p+102868|0;o=c[p>>2]|0;o=o|1;c[p>>2]=o;i=f;return l|0}function Vx(b,d){b=b|0;d=d|0;var e=0,f=0;e=i;if((c[b>>2]|0)!=2?(c[d>>2]|0)!=2:0)d=0;else f=3;a:do if((f|0)==3){f=c[b+108>>2]|0;if(!f)d=1;else while(1){if((c[f>>2]|0)==(d|0)?(a[(c[f+4>>2]|0)+61>>0]|0)==0:0){d=0;break a}f=c[f+12>>2]|0;if(!f){d=1;break}}}while(0);i=e;return d|0}function Wx(a){a=a|0;var b=0,d=0,f=0,j=0,l=0,m=0.0;b=i;i=i+16|0;d=b;j=a+8|0;f=c[j>>2]|0;Px(12072,d);Px(9592,d);c[d>>2]=c[a>>2];Px(9616,d);m=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];l=d+8|0;h[k>>3]=m;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Px(9648,d);h[k>>3]=+g[a+56>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Px(9688,d);m=+g[a+68>>2];h[k>>3]=+g[a+64>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];l=d+8|0;h[k>>3]=m;c[l>>2]=c[k>>2];c[l+4>>2]=c[k+4>>2];Px(9712,d);h[k>>3]=+g[a+72>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Px(9760,d);h[k>>3]=+g[a+132>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Px(9800,d);h[k>>3]=+g[a+136>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Px(9832,d);l=a+4|0;c[d>>2]=(e[l>>1]|0)&4;Px(9864,d);c[d>>2]=(e[l>>1]|0)&2;Px(9896,d);c[d>>2]=(e[l>>1]|0)&16;Px(9920,d);c[d>>2]=(e[l>>1]|0)&8;Px(9952,d);c[d>>2]=(e[l>>1]|0)&32;Px(9984,d);h[k>>3]=+g[a+140>>2];c[d>>2]=c[k>>2];c[d+4>>2]=c[k+4>>2];Px(10016,d);c[d>>2]=c[j>>2];Px(10048,d);Px(11360,d);a=c[a+100>>2]|0;if(!a){Px(12080,d);i=b;return}do{Px(10096,d);ry(a,f);Px(10104,d);a=c[a+4>>2]|0}while((a|0)!=0);Px(12080,d);i=b;return}function Xx(a){a=a|0;return}function Yx(a){a=a|0;return}function Zx(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0;h=i;k=f+48|0;j=f+52|0;m=c[(c[k>>2]|0)+8>>2]|0;l=c[(c[j>>2]|0)+8>>2]|0;n=c[d+72>>2]|0;if((n|0)!=0?(c[f+4>>2]&2|0)!=0:0)lb[c[(c[n>>2]|0)+12>>2]&127](n,f);o=f+8|0;p=c[o>>2]|0;n=f+12|0;if(p)c[p+12>>2]=c[n>>2];p=c[n>>2]|0;if(p)c[p+8>>2]=c[o>>2];o=d+60|0;if((c[o>>2]|0)==(f|0))c[o>>2]=c[n>>2];o=f+24|0;p=c[o>>2]|0;n=f+28|0;if(p)c[p+12>>2]=c[n>>2];p=c[n>>2]|0;if(p)c[p+8>>2]=c[o>>2];m=m+112|0;if((f+16|0)==(c[m>>2]|0))c[m>>2]=c[n>>2];n=f+40|0;o=c[n>>2]|0;m=f+44|0;if(o)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if(o)c[o+8>>2]=c[n>>2];l=l+112|0;if((f+32|0)==(c[l>>2]|0))c[l>>2]=c[m>>2];l=c[d+76>>2]|0;if(!(a[13392]|0))Aa(13552,13448,103,15752);k=c[k>>2]|0;j=c[j>>2]|0;if(((c[f+124>>2]|0)>0?(a[k+38>>0]|0)==0:0)?(a[j+38>>0]|0)==0:0){m=c[k+8>>2]|0;n=m+4|0;o=e[n>>1]|0;if(!(o&2)){b[n>>1]=o|2;g[m+144>>2]=0.0}m=c[j+8>>2]|0;o=m+4|0;n=e[o>>1]|0;if(!(n&2)){b[o>>1]=n|2;g[m+144>>2]=0.0}}k=c[(c[k+12>>2]|0)+4>>2]|0;j=c[(c[j+12>>2]|0)+4>>2]|0;if((k|0)>-1&(j|0)<4){lb[c[13200+(k*48|0)+(j*12|0)+4>>2]&127](f,l);p=d+64|0;c[p>>2]=(c[p>>2]|0)+ -1;i=h;return}else Aa(13576,13448,119,15752)}function _x(d){d=d|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;f=i;i=i+1040|0;k=f;j=d+52|0;c[j>>2]=0;l=d+40|0;y=c[l>>2]|0;do if((y|0)>0){w=d+32|0;r=d+56|0;v=d+12|0;t=d+4|0;s=k+4|0;o=k+1028|0;u=k+1032|0;q=d+48|0;m=d+44|0;x=0;while(1){B=c[(c[w>>2]|0)+(x<<2)>>2]|0;c[r>>2]=B;if((B|0)!=-1){if((B|0)<=-1){o=7;break}if((c[v>>2]|0)<=(B|0)){o=7;break}C=c[t>>2]|0;c[k>>2]=s;c[o>>2]=0;c[u>>2]=256;fy(k,d);if((c[o>>2]|0)>0){A=C+(B*36|0)|0;y=C+(B*36|0)+4|0;z=C+(B*36|0)+8|0;B=C+(B*36|0)+12|0;do{C=gy(k)|0;do if((C|0)!=-1?(p=c[t>>2]|0,!((+g[A>>2]- +g[p+(C*36|0)+8>>2]>0.0?1:+g[y>>2]- +g[p+(C*36|0)+12>>2]>0.0)|+g[p+(C*36|0)>>2]- +g[z>>2]>0.0|+g[p+(C*36|0)+4>>2]- +g[B>>2]>0.0)):0){D=p+(C*36|0)+24|0;if((c[D>>2]|0)!=-1){fy(k,D);fy(k,p+(C*36|0)+28|0);break}D=c[r>>2]|0;if((D|0)!=(C|0)){E=c[j>>2]|0;if((E|0)==(c[q>>2]|0)){D=c[m>>2]|0;c[q>>2]=E<<1;E=RB(E<<4)|0;c[m>>2]=E;WB(E|0,D|0,c[j>>2]<<3|0)|0;SB(D);D=c[r>>2]|0;E=c[j>>2]|0}F=c[m>>2]|0;c[F+(E<<3)>>2]=(D|0)>(C|0)?C:D;E=c[r>>2]|0;c[F+(c[j>>2]<<3)+4>>2]=(E|0)<(C|0)?C:E;c[j>>2]=(c[j>>2]|0)+1}}while(0)}while((c[o>>2]|0)>0)}y=c[k>>2]|0;if((y|0)!=(s|0)){SB(y);c[k>>2]=0}y=c[l>>2]|0}x=x+1|0;if((x|0)>=(y|0)){o=23;break}}if((o|0)==7)Aa(12256,12200,164,12320);else if((o|0)==23){h=m;n=c[j>>2]|0;break}}else{h=d+44|0;n=0}while(0);c[l>>2]=0;F=c[h>>2]|0;c[k>>2]=58;ay(F,F+(n<<3)|0,k);if((c[j>>2]|0)<=0){i=f;return}o=d+12|0;n=d+4|0;m=d+68|0;l=d+76|0;k=d+60|0;d=d+64|0;s=c[h>>2]|0;q=s;s=c[s>>2]|0;r=0;a:while(1){p=q+(r<<3)|0;if((s|0)<=-1){o=28;break}u=c[o>>2]|0;if((u|0)<=(s|0)){o=28;break}t=c[n>>2]|0;q=q+(r<<3)+4|0;v=c[q>>2]|0;if(!((v|0)>-1&(u|0)>(v|0))){o=30;break}x=c[t+(s*36|0)+16>>2]|0;v=c[t+(v*36|0)+16>>2]|0;u=c[x+16>>2]|0;s=c[v+16>>2]|0;t=c[x+20>>2]|0;v=c[v+20>>2]|0;x=c[u+8>>2]|0;w=c[s+8>>2]|0;b:do if((x|0)!=(w|0)){C=c[w+112>>2]|0;if(C)do{if((c[C>>2]|0)==(x|0)){B=c[C+4>>2]|0;y=c[B+48>>2]|0;z=c[B+52>>2]|0;A=c[B+56>>2]|0;B=c[B+60>>2]|0;if((y|0)==(u|0)&(z|0)==(s|0)&(A|0)==(t|0)&(B|0)==(v|0))break b;if((y|0)==(s|0)&(z|0)==(u|0)&(A|0)==(v|0)&(B|0)==(t|0))break b}C=c[C+12>>2]|0}while((C|0)!=0);if(Vx(w,x)|0){w=c[m>>2]|0;if((w|0)!=0?!(gb[c[(c[w>>2]|0)+8>>2]&63](w,u,s)|0):0)break;w=c[l>>2]|0;if(!(a[13392]|0)){c[3300]=46;c[3301]=98;a[13208]=1;c[3324]=47;c[3325]=99;a[13304]=1;c[3306]=47;c[3307]=99;a[13232]=0;c[3330]=48;c[3331]=100;a[13328]=1;c[3312]=49;c[3313]=101;a[13256]=1;c[3303]=49;c[3304]=101;a[13220]=0;c[3318]=50;c[3319]=102;a[13280]=1;c[3327]=50;c[3328]=102;a[13316]=0;c[3336]=51;c[3337]=103;a[13352]=1;c[3309]=51;c[3310]=103;a[13244]=0;c[3342]=52;c[3343]=104;a[13376]=1;c[3333]=52;c[3334]=104;a[13340]=0;a[13392]=1}x=c[(c[u+12>>2]|0)+4>>2]|0;y=c[(c[s+12>>2]|0)+4>>2]|0;if(x>>>0>=4){o=43;break a}if(y>>>0>=4){o=45;break a}z=c[13200+(x*48|0)+(y*12|0)>>2]|0;if(z){if(!(a[13200+(x*48|0)+(y*12|0)+8>>0]|0))w=ub[z&63](s,v,u,t,w)|0;else w=ub[z&63](u,t,s,v,w)|0;if(w){v=c[w+48>>2]|0;u=c[w+52>>2]|0;t=c[v+8>>2]|0;s=c[u+8>>2]|0;c[w+8>>2]=0;c[w+12>>2]=c[k>>2];x=c[k>>2]|0;if(x)c[x+8>>2]=w;c[k>>2]=w;z=w+16|0;c[w+20>>2]=w;c[z>>2]=s;c[w+24>>2]=0;x=t+112|0;c[w+28>>2]=c[x>>2];y=c[x>>2]|0;if(y)c[y+8>>2]=z;c[x>>2]=z;x=w+32|0;c[w+36>>2]=w;c[x>>2]=t;c[w+40>>2]=0;y=s+112|0;c[w+44>>2]=c[y>>2];w=c[y>>2]|0;if(w)c[w+8>>2]=x;c[y>>2]=x;do if(!(a[v+38>>0]|0)){if(a[u+38>>0]|0)break;u=t+4|0;v=e[u>>1]|0;if(!(v&2)){b[u>>1]=v|2;g[t+144>>2]=0.0}u=s+4|0;t=e[u>>1]|0;if(t&2)break;b[u>>1]=t|2;g[s+144>>2]=0.0}while(0);c[d>>2]=(c[d>>2]|0)+1}}}}while(0);t=c[j>>2]|0;while(1){r=r+1|0;if((r|0)>=(t|0)){o=68;break a}u=c[h>>2]|0;s=c[u+(r<<3)>>2]|0;if((s|0)!=(c[p>>2]|0)){q=u;continue a}if((c[u+(r<<3)+4>>2]|0)!=(c[q>>2]|0)){q=u;continue a}}}if((o|0)==28)Aa(12256,12200,158,12304);else if((o|0)==30)Aa(12256,12200,158,12304);else if((o|0)==43)Aa(13400,13448,80,15744);else if((o|0)==45)Aa(13504,13448,81,15744);else if((o|0)==68){i=f;return}}function $x(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;f=c[a>>2]|0;e=c[b>>2]|0;if((f|0)>=(e|0))if((f|0)==(e|0))a=(c[a+4>>2]|0)<(c[b+4>>2]|0);else a=0;else a=1;i=d;return a|0}function ay(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;e=i;i=i+16|0;f=e;a:while(1){j=b;h=b+ -8|0;b:while(1){k=a;n=j-k|0;o=n>>3;switch(o|0){case 5:{g=8;break a};case 1:case 0:{g=51;break a};case 3:{g=6;break a};case 2:{g=4;break a};case 4:{g=7;break a};default:{}}if((n|0)<248){g=10;break a}m=(o|0)/2|0;l=a+(m<<3)|0;if((n|0)>7992){n=(o|0)/4|0;n=dy(a,a+(n<<3)|0,l,a+(n+m<<3)|0,h,d)|0}else n=by(a,l,h,d)|0;do if(tb[c[d>>2]&63](a,l)|0)o=h;else{o=h;while(1){o=o+ -8|0;if((a|0)==(o|0))break;if(tb[c[d>>2]&63](o,l)|0){g=34;break}}if((g|0)==34){g=0;p=a;m=c[p>>2]|0;p=c[p+4>>2]|0;s=o;r=c[s+4>>2]|0;q=a;c[q>>2]=c[s>>2];c[q+4>>2]=r;q=o;c[q>>2]=m;c[q+4>>2]=p;n=n+1|0;break}k=a+8|0;if(!(tb[c[d>>2]&63](a,h)|0)){if((k|0)==(h|0)){g=51;break a}while(1){l=k+8|0;if(tb[c[d>>2]&63](a,k)|0)break;if((l|0)==(h|0)){g=51;break a}else k=l}s=k;r=c[s>>2]|0;s=c[s+4>>2]|0;p=h;q=c[p+4>>2]|0;c[k>>2]=c[p>>2];c[k+4>>2]=q;k=h;c[k>>2]=r;c[k+4>>2]=s;k=l}if((k|0)==(h|0)){g=51;break a}else m=h;while(1){while(1){l=k+8|0;if(tb[c[d>>2]&63](a,k)|0)break;else k=l}do m=m+ -8|0;while(tb[c[d>>2]&63](a,m)|0);if(k>>>0>=m>>>0){a=k;continue b}s=k;r=c[s>>2]|0;s=c[s+4>>2]|0;p=m;q=c[p+4>>2]|0;c[k>>2]=c[p>>2];c[k+4>>2]=q;k=m;c[k>>2]=r;c[k+4>>2]=s;k=l}}while(0);m=a+8|0;c:do if(m>>>0<o>>>0)while(1){q=m;while(1){m=q+8|0;if(tb[c[d>>2]&63](q,l)|0)q=m;else{p=o;break}}do p=p+ -8|0;while(!(tb[c[d>>2]&63](p,l)|0));if(q>>>0>p>>>0){m=q;break c}s=q;r=c[s>>2]|0;s=c[s+4>>2]|0;u=p;t=c[u+4>>2]|0;o=q;c[o>>2]=c[u>>2];c[o+4>>2]=t;o=p;c[o>>2]=r;c[o+4>>2]=s;o=p;l=(l|0)==(q|0)?p:l;n=n+1|0}while(0);if((m|0)!=(l|0)?tb[c[d>>2]&63](l,m)|0:0){t=m;s=c[t>>2]|0;t=c[t+4>>2]|0;q=l;r=c[q+4>>2]|0;u=m;c[u>>2]=c[q>>2];c[u+4>>2]=r;u=l;c[u>>2]=s;c[u+4>>2]=t;n=n+1|0}if(!n){n=ey(a,m,d)|0;l=m+8|0;if(ey(l,b,d)|0){g=46;break}if(n){a=l;continue}}u=m;if((u-k|0)>=(j-u|0)){g=50;break}ay(a,m,d);a=m+8|0}if((g|0)==46){g=0;if(n){g=51;break}else{b=m;continue}}else if((g|0)==50){g=0;ay(m+8|0,b,d);b=m;continue}}if((g|0)==4){if(!(tb[c[d>>2]&63](h,a)|0)){i=e;return}t=a;s=c[t>>2]|0;t=c[t+4>>2]|0;q=h;r=c[q+4>>2]|0;u=a;c[u>>2]=c[q>>2];c[u+4>>2]=r;u=h;c[u>>2]=s;c[u+4>>2]=t;i=e;return}else if((g|0)==6){by(a,a+8|0,h,d)|0;i=e;return}else if((g|0)==7){cy(a,a+8|0,a+16|0,h,d)|0;i=e;return}else if((g|0)==8){dy(a,a+8|0,a+16|0,a+24|0,h,d)|0;i=e;return}else if((g|0)==10){j=a+16|0;by(a,a+8|0,j,d)|0;g=a+24|0;if((g|0)==(b|0)){i=e;return}while(1){if(tb[c[d>>2]&63](g,j)|0){t=g;u=c[t+4>>2]|0;h=f;c[h>>2]=c[t>>2];c[h+4>>2]=u;h=g;while(1){s=j;t=c[s+4>>2]|0;u=h;c[u>>2]=c[s>>2];c[u+4>>2]=t;if((j|0)==(a|0))break;h=j+ -8|0;if(tb[c[d>>2]&63](f,h)|0){u=j;j=h;h=u}else break}s=f;t=c[s+4>>2]|0;u=j;c[u>>2]=c[s>>2];c[u+4>>2]=t}h=g+8|0;if((h|0)==(b|0))break;else{j=g;g=h}}i=e;return}else if((g|0)==51){i=e;return}}function by(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0;f=i;j=tb[c[e>>2]&63](b,a)|0;g=tb[c[e>>2]&63](d,b)|0;if(!j){if(!g){j=0;i=f;return j|0}h=b;g=c[h>>2]|0;h=c[h+4>>2]|0;l=d;k=c[l+4>>2]|0;j=b;c[j>>2]=c[l>>2];c[j+4>>2]=k;j=d;c[j>>2]=g;c[j+4>>2]=h;if(!(tb[c[e>>2]&63](b,a)|0)){l=1;i=f;return l|0}k=a;j=c[k>>2]|0;k=c[k+4>>2]|0;e=b;h=c[e+4>>2]|0;l=a;c[l>>2]=c[e>>2];c[l+4>>2]=h;l=b;c[l>>2]=j;c[l+4>>2]=k;l=2;i=f;return l|0}h=a;j=c[h>>2]|0;h=c[h+4>>2]|0;if(g){e=d;k=c[e+4>>2]|0;l=a;c[l>>2]=c[e>>2];c[l+4>>2]=k;l=d;c[l>>2]=j;c[l+4>>2]=h;l=1;i=f;return l|0}g=b;k=c[g+4>>2]|0;l=a;c[l>>2]=c[g>>2];c[l+4>>2]=k;l=b;c[l>>2]=j;c[l+4>>2]=h;if(!(tb[c[e>>2]&63](d,b)|0)){l=1;i=f;return l|0}k=b;j=c[k>>2]|0;k=c[k+4>>2]|0;a=d;h=c[a+4>>2]|0;l=b;c[l>>2]=c[a>>2];c[l+4>>2]=h;l=d;c[l>>2]=j;c[l+4>>2]=k;l=2;i=f;return l|0}function cy(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0,k=0,l=0,m=0,n=0;g=i;h=by(a,b,d,f)|0;if(!(tb[c[f>>2]&63](e,d)|0)){e=h;i=g;return e|0}j=d;k=c[j>>2]|0;j=c[j+4>>2]|0;n=e;m=c[n+4>>2]|0;l=d;c[l>>2]=c[n>>2];c[l+4>>2]=m;c[e>>2]=k;c[e+4>>2]=j;if(!(tb[c[f>>2]&63](d,b)|0)){n=h+1|0;i=g;return n|0}m=b;l=c[m>>2]|0;m=c[m+4>>2]|0;j=d;k=c[j+4>>2]|0;n=b;c[n>>2]=c[j>>2];c[n+4>>2]=k;n=d;c[n>>2]=l;c[n+4>>2]=m;if(!(tb[c[f>>2]&63](b,a)|0)){n=h+2|0;i=g;return n|0}m=a;l=c[m>>2]|0;m=c[m+4>>2]|0;j=b;k=c[j+4>>2]|0;n=a;c[n>>2]=c[j>>2];c[n+4>>2]=k;n=b;c[n>>2]=l;c[n+4>>2]=m;n=h+3|0;i=g;return n|0}function dy(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;j=cy(a,b,d,e,g)|0;if(!(tb[c[g>>2]&63](f,e)|0)){f=j;i=h;return f|0}k=e;l=c[k>>2]|0;k=c[k+4>>2]|0;o=f;n=c[o+4>>2]|0;m=e;c[m>>2]=c[o>>2];c[m+4>>2]=n;c[f>>2]=l;c[f+4>>2]=k;if(!(tb[c[g>>2]&63](e,d)|0)){o=j+1|0;i=h;return o|0}n=d;m=c[n>>2]|0;n=c[n+4>>2]|0;k=e;l=c[k+4>>2]|0;o=d;c[o>>2]=c[k>>2];c[o+4>>2]=l;o=e;c[o>>2]=m;c[o+4>>2]=n;if(!(tb[c[g>>2]&63](d,b)|0)){o=j+2|0;i=h;return o|0}n=b;m=c[n>>2]|0;n=c[n+4>>2]|0;k=d;l=c[k+4>>2]|0;o=b;c[o>>2]=c[k>>2];c[o+4>>2]=l;o=d;c[o>>2]=m;c[o+4>>2]=n;if(!(tb[c[g>>2]&63](b,a)|0)){o=j+3|0;i=h;return o|0}n=a;m=c[n>>2]|0;n=c[n+4>>2]|0;k=b;l=c[k+4>>2]|0;o=a;c[o>>2]=c[k>>2];c[o+4>>2]=l;o=b;c[o>>2]=m;c[o+4>>2]=n;o=j+4|0;i=h;return o|0}function ey(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0;e=i;i=i+16|0;g=e;switch(b-a>>3|0){case 2:{f=b+ -8|0;if(!(tb[c[d>>2]&63](f,a)|0)){l=1;i=e;return l|0}k=a;j=c[k>>2]|0;k=c[k+4>>2]|0;b=f;h=c[b+4>>2]|0;l=a;c[l>>2]=c[b>>2];c[l+4>>2]=h;l=f;c[l>>2]=j;c[l+4>>2]=k;l=1;i=e;return l|0};case 4:{cy(a,a+8|0,a+16|0,b+ -8|0,d)|0;l=1;i=e;return l|0};case 5:{dy(a,a+8|0,a+16|0,a+24|0,b+ -8|0,d)|0;l=1;i=e;return l|0};case 3:{by(a,a+8|0,b+ -8|0,d)|0;l=1;i=e;return l|0};case 1:case 0:{l=1;i=e;return l|0};default:{l=a+16|0;by(a,a+8|0,l,d)|0;h=a+24|0;if((h|0)==(b|0)){l=1;i=e;return l|0}else j=0;while(1){if(tb[c[d>>2]&63](h,l)|0){n=h;m=c[n+4>>2]|0;k=g;c[k>>2]=c[n>>2];c[k+4>>2]=m;k=h;while(1){o=l;m=c[o+4>>2]|0;n=k;c[n>>2]=c[o>>2];c[n+4>>2]=m;if((l|0)==(a|0))break;k=l+ -8|0;if(tb[c[d>>2]&63](g,k)|0){o=l;l=k;k=o}else break}m=g;n=c[m+4>>2]|0;o=l;c[o>>2]=c[m>>2];c[o+4>>2]=n;j=j+1|0;if((j|0)==8)break}k=h+8|0;if((k|0)==(b|0)){a=1;f=15;break}else{l=h;h=k}}if((f|0)==15){i=e;return a|0}o=(h+8|0)==(b|0);i=e;return o|0}}return 0}function fy(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0;e=i;d=a+1028|0;f=c[d>>2]|0;g=a+1032|0;if((f|0)==(c[g>>2]|0)?(h=c[a>>2]|0,c[g>>2]=f<<1,g=RB(f<<3)|0,c[a>>2]=g,WB(g|0,h|0,c[d>>2]<<2|0)|0,(h|0)!=(a+4|0)):0)SB(h);c[(c[a>>2]|0)+(c[d>>2]<<2)>>2]=c[b>>2];c[d>>2]=(c[d>>2]|0)+1;i=e;return}function gy(a){a=a|0;var b=0,d=0;b=a+1028|0;d=c[b>>2]|0;if((d|0)>0){d=d+ -1|0;c[b>>2]=d;return c[(c[a>>2]|0)+(d<<2)>>2]|0}else Aa(10128,10144,67,10192);return 0}function hy(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function iy(a,b){a=a|0;b=b|0;return}function jy(a,b){a=a|0;b=b|0;return}function ky(a,b,c){a=a|0;b=b|0;c=c|0;return}function ly(a,b,c){a=a|0;b=b|0;c=c|0;return}function my(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function ny(a,b){a=a|0;b=b|0;var d=0,e=0,f=0;d=i;if(c[a+28>>2]|0)Aa(10232,10256,72,15752);e=a+12|0;f=c[e>>2]|0;f=nb[c[(c[f>>2]|0)+12>>2]&63](f)|0;a=a+24|0;Kx(b,c[a>>2]|0,f*28|0);c[a>>2]=0;a=c[e>>2]|0;f=c[a+4>>2]|0;if((f|0)==2){jb[c[c[a>>2]>>2]&127](a);Kx(b,a,152);c[e>>2]=0;i=d;return}else if(!f){jb[c[c[a>>2]>>2]&127](a);Kx(b,a,20);c[e>>2]=0;i=d;return}else if((f|0)==3){jb[c[c[a>>2]>>2]&127](a);Kx(b,a,40);c[e>>2]=0;i=d;return}else if((f|0)==1){jb[c[c[a>>2]>>2]&127](a);Kx(b,a,48);c[e>>2]=0;i=d;return}else Aa(15688,10256,115,15752)}function oy(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0.0,s=0.0;e=i;f=a+28|0;if(c[f>>2]|0)Aa(10232,10256,124,10304);h=a+12|0;m=c[h>>2]|0;m=nb[c[(c[m>>2]|0)+12>>2]&63](m)|0;c[f>>2]=m;if((m|0)<=0){i=e;return}j=a+24|0;k=b+4|0;l=b+28|0;m=0;do{n=c[j>>2]|0;p=n+(m*28|0)|0;o=c[h>>2]|0;vb[c[(c[o>>2]|0)+24>>2]&63](o,p,d,m);o=ax(b)|0;r=+(+g[p>>2]+-.10000000149011612);s=+(+g[n+(m*28|0)+4>>2]+-.10000000149011612);q=(c[k>>2]|0)+(o*36|0)|0;g[q>>2]=r;g[q+4>>2]=s;s=+(+g[n+(m*28|0)+8>>2]+.10000000149011612);r=+(+g[n+(m*28|0)+12>>2]+.10000000149011612);q=(c[k>>2]|0)+(o*36|0)+8|0;g[q>>2]=s;g[q+4>>2]=r;c[(c[k>>2]|0)+(o*36|0)+16>>2]=p;c[(c[k>>2]|0)+(o*36|0)+32>>2]=0;cx(b,o);c[l>>2]=(c[l>>2]|0)+1;Uw(b,o);c[n+(m*28|0)+24>>2]=o;c[n+(m*28|0)+16>>2]=a;c[n+(m*28|0)+20>>2]=m;m=m+1|0}while((m|0)<(c[f>>2]|0));i=e;return}function py(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;e=i;d=a+28|0;if((c[d>>2]|0)<=0){c[d>>2]=0;i=e;return}a=a+24|0;h=b+40|0;j=b+32|0;g=b+28|0;f=b+12|0;l=b+4|0;k=0;while(1){n=(c[a>>2]|0)+(k*28|0)+24|0;m=c[n>>2]|0;q=c[h>>2]|0;if((q|0)>0){o=c[j>>2]|0;p=0;do{r=o+(p<<2)|0;if((c[r>>2]|0)==(m|0)){c[r>>2]=-1;q=c[h>>2]|0}p=p+1|0}while((p|0)<(q|0))}c[g>>2]=(c[g>>2]|0)+ -1;if((m|0)<=-1){b=10;break}if((c[f>>2]|0)<=(m|0)){b=10;break}if((c[(c[l>>2]|0)+(m*36|0)+24>>2]|0)!=-1){b=12;break}dx(b,m);bx(b,m);c[n>>2]=-1;k=k+1|0;if((k|0)>=(c[d>>2]|0)){b=14;break}}if((b|0)==10)Aa(12256,6088,123,6224);else if((b|0)==12)Aa(6240,6088,124,6224);else if((b|0)==14){c[d>>2]=0;i=e;return}}function qy(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0,H=0.0,I=0;f=i;i=i+32|0;j=f+16|0;k=f;h=a+28|0;if((c[h>>2]|0)<=0){i=f;return}l=a+24|0;o=a+12|0;p=j+4|0;q=k+4|0;r=j+8|0;s=k+8|0;t=j+12|0;u=k+12|0;v=e+4|0;w=d+4|0;m=b+12|0;a=b+4|0;n=0;while(1){F=c[l>>2]|0;D=c[o>>2]|0;E=F+(n*28|0)+20|0;vb[c[(c[D>>2]|0)+24>>2]&63](D,j,d,c[E>>2]|0);D=c[o>>2]|0;vb[c[(c[D>>2]|0)+24>>2]&63](D,k,e,c[E>>2]|0);E=F+(n*28|0)|0;z=+g[j>>2];B=+g[k>>2];B=z<B?z:B;z=+g[p>>2];H=+g[q>>2];A=+B;H=+(z<H?z:H);D=E;g[D>>2]=A;g[D+4>>2]=H;D=F+(n*28|0)+8|0;H=+g[r>>2];A=+g[s>>2];A=H>A?H:A;H=+g[t>>2];z=+g[u>>2];y=+A;z=+(H>z?H:z);x=D;g[x>>2]=y;g[x+4>>2]=z;z=+g[e>>2]- +g[d>>2];y=+g[v>>2]- +g[w>>2];x=c[F+(n*28|0)+24>>2]|0;if((x|0)<=-1){b=5;break}if((c[m>>2]|0)<=(x|0)){b=5;break}I=c[a>>2]|0;if((c[I+(x*36|0)+24>>2]|0)!=-1){b=7;break}if(!(((+g[I+(x*36|0)>>2]<=B?+g[I+(x*36|0)+4>>2]<=+g[F+(n*28|0)+4>>2]:0)?A<=+g[I+(x*36|0)+8>>2]:0)?+g[F+(n*28|0)+12>>2]<=+g[I+(x*36|0)+12>>2]:0)){dx(b,x);I=E;H=+g[I>>2];B=+g[I+4>>2];I=D;C=+g[I>>2];H=H+-.10000000149011612;B=B+-.10000000149011612;C=C+.10000000149011612;A=+g[I+4>>2]+.10000000149011612;G=z*2.0;z=y*2.0;if(G<0.0)y=H+G;else{y=H;C=G+C}if(z<0.0)B=B+z;else A=z+A;I=c[a>>2]|0;H=+y;G=+B;F=I+(x*36|0)|0;g[F>>2]=H;g[F+4>>2]=G;G=+C;H=+A;I=I+(x*36|0)+8|0;g[I>>2]=G;g[I+4>>2]=H;cx(b,x);Uw(b,x)}n=n+1|0;if((n|0)>=(c[h>>2]|0)){b=20;break}}if((b|0)==5)Aa(12256,6088,132,6272);else if((b|0)==7)Aa(6240,6088,134,6272);else if((b|0)==20){i=f;return}}function ry(a,f){a=a|0;f=f|0;var j=0,l=0,m=0,n=0,o=0,p=0,q=0.0,r=0.0;l=i;i=i+32|0;j=l;Px(10320,j);h[k>>3]=+g[a+16>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Px(10344,j);h[k>>3]=+g[a+20>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Px(10376,j);h[k>>3]=+g[a>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Px(10408,j);c[j>>2]=d[a+38>>0];Px(10440,j);c[j>>2]=e[a+32>>1];Px(10472,j);c[j>>2]=e[a+34>>1];Px(10520,j);c[j>>2]=b[a+36>>1];Px(10560,j);a=c[a+12>>2]|0;m=c[a+4>>2]|0;if((m|0)==1){Px(10704,j);h[k>>3]=+g[a+8>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Px(10632,j);p=a+28|0;q=+g[p+4>>2];h[k>>3]=+g[p>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=q;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(10728,j);q=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=q;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(10776,j);p=a+20|0;q=+g[p+4>>2];h[k>>3]=+g[p>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=q;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(10824,j);q=+g[a+40>>2];h[k>>3]=+g[a+36>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=q;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(10872,j);c[j>>2]=d[a+44>>0];Px(10920,j);c[j>>2]=d[a+45>>0];Px(10960,j)}else if((m|0)==2){Px(11e3,j);c[j>>2]=8;Px(11032,j);m=a+148|0;n=c[m>>2]|0;if((n|0)>0){a=a+20|0;o=0;do{r=+g[a+(o<<3)>>2];q=+g[a+(o<<3)+4>>2];c[j>>2]=o;n=j+4|0;h[k>>3]=r;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];n=j+12|0;h[k>>3]=q;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];Px(11056,j);o=o+1|0;n=c[m>>2]|0}while((o|0)<(n|0))}c[j>>2]=n;Px(11096,j)}else if(!m){Px(10600,j);h[k>>3]=+g[a+8>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];Px(10632,j);r=+g[a+16>>2];h[k>>3]=+g[a+12>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(10664,j)}else if((m|0)==3){Px(11120,j);m=a+16|0;c[j>>2]=c[m>>2];Px(11032,j);n=c[m>>2]|0;if((n|0)>0){p=a+12|0;o=0;do{n=c[p>>2]|0;q=+g[n+(o<<3)>>2];r=+g[n+(o<<3)+4>>2];c[j>>2]=o;n=j+4|0;h[k>>3]=q;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];n=j+12|0;h[k>>3]=r;c[n>>2]=c[k>>2];c[n+4>>2]=c[k+4>>2];Px(11056,j);o=o+1|0;n=c[m>>2]|0}while((o|0)<(n|0))}c[j>>2]=n;Px(11152,j);p=a+20|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(11184,j);p=a+28|0;r=+g[p+4>>2];h[k>>3]=+g[p>>2];c[j>>2]=c[k>>2];c[j+4>>2]=c[k+4>>2];p=j+8|0;h[k>>3]=r;c[p>>2]=c[k>>2];c[p+4>>2]=c[k+4>>2];Px(11232,j);c[j>>2]=d[a+36>>0];Px(11280,j);c[j>>2]=d[a+37>>0];Px(11320,j)}else{i=l;return}Px(11360,j);Px(11368,j);Px(11360,j);c[j>>2]=f;Px(11392,j);i=l;return}function sy(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0;h=i;j=a+40|0;c[j>>2]=b;c[a+44>>2]=d;c[a+48>>2]=e;c[a+28>>2]=0;c[a+36>>2]=0;c[a+32>>2]=0;c[a>>2]=f;c[a+4>>2]=g;c[a+8>>2]=Qx(f,b<<2)|0;c[a+12>>2]=Qx(c[a>>2]|0,d<<2)|0;c[a+16>>2]=Qx(c[a>>2]|0,e<<2)|0;c[a+24>>2]=Qx(c[a>>2]|0,(c[j>>2]|0)*12|0)|0;c[a+20>>2]=Qx(c[a>>2]|0,(c[j>>2]|0)*12|0)|0;i=h;return}function ty(a){a=a|0;var b=0;b=i;Rx(c[a>>2]|0,c[a+20>>2]|0);Rx(c[a>>2]|0,c[a+24>>2]|0);Rx(c[a>>2]|0,c[a+16>>2]|0);Rx(c[a>>2]|0,c[a+12>>2]|0);Rx(c[a>>2]|0,c[a+8>>2]|0);i=b;return}function uy(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0,j=0,k=0,l=0,m=0,n=0;h=i;i=i+32|0;e=h;d=a+4|0;if(!(c[d>>2]|0)){i=h;return}f=a+36|0;if((c[f>>2]|0)<=0){i=h;return}n=a+12|0;k=e+16|0;l=0;do{m=c[(c[n>>2]|0)+(l<<2)>>2]|0;j=c[b+(l*156|0)+148>>2]|0;c[k>>2]=j;if((j|0)>0){a=0;do{g[e+(a<<2)>>2]=+g[b+(l*156|0)+(a*36|0)+16>>2];g[e+(a<<2)+8>>2]=+g[b+(l*156|0)+(a*36|0)+20>>2];a=a+1|0}while((a|0)<(j|0))}j=c[d>>2]|0;pb[c[(c[j>>2]|0)+20>>2]&63](j,m,e);l=l+1|0}while((l|0)<(c[f>>2]|0));i=h;return}function vy(d,f){d=d|0;f=f|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0;h=i;if(c[d+102868>>2]&2)Aa(11528,11552,274,11656);j=a[f+61>>0]|0;l=f+8|0;m=c[l>>2]|0;k=f+12|0;if(m)c[m+12>>2]=c[k>>2];m=c[k>>2]|0;if(m)c[m+8>>2]=c[l>>2];l=d+102956|0;if((c[l>>2]|0)==(f|0))c[l>>2]=c[k>>2];k=c[f+48>>2]|0;l=c[f+52>>2]|0;n=k+4|0;m=e[n>>1]|0;if(!(m&2)){b[n>>1]=m|2;g[k+144>>2]=0.0}m=l+4|0;n=e[m>>1]|0;if(!(n&2)){b[m>>1]=n|2;g[l+144>>2]=0.0}n=f+24|0;o=c[n>>2]|0;m=f+28|0;if(o)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if(o)c[o+8>>2]=c[n>>2];o=k+108|0;if((f+16|0)==(c[o>>2]|0))c[o>>2]=c[m>>2];c[n>>2]=0;c[m>>2]=0;n=f+40|0;o=c[n>>2]|0;m=f+44|0;if(o)c[o+12>>2]=c[m>>2];o=c[m>>2]|0;if(o)c[o+8>>2]=c[n>>2];o=l+108|0;if((f+32|0)==(c[o>>2]|0))c[o>>2]=c[m>>2];c[n>>2]=0;c[m>>2]=0;jb[c[(c[f>>2]|0)+24>>2]&127](f);do switch(c[f+4>>2]|0){case 7:{Kx(d,f,224);break};case 8:{Kx(d,f,208);break};case 9:{Kx(d,f,180);break};case 10:{Kx(d,f,168);break};case 11:{Kx(d,f,192);break};case 3:{Kx(d,f,176);break};case 5:{Kx(d,f,168);break};case 2:{Kx(d,f,256);break};case 1:{Kx(d,f,228);break};case 4:{Kx(d,f,196);break};case 6:{Kx(d,f,276);break};default:Aa(15688,15696,178,15752)}while(0);f=d+102964|0;d=c[f>>2]|0;if((d|0)<=0)Aa(11672,11552,346,11656);c[f>>2]=d+ -1;if(j<<24>>24){i=h;return}j=c[l+112>>2]|0;if(!j){i=h;return}do{if((c[j>>2]|0)==(k|0)){o=(c[j+4>>2]|0)+4|0;c[o>>2]=c[o>>2]|8}j=c[j+12>>2]|0}while((j|0)!=0);i=h;return}function wy(a,b){a=a|0;b=b|0;var d=0,e=0;d=a+28|0;e=c[d>>2]|0;if((e|0)<(c[a+40>>2]|0)){c[b+8>>2]=e;e=c[d>>2]|0;c[(c[a+8>>2]|0)+(e<<2)>>2]=b;c[d>>2]=e+1;return}else Aa(12504,12416,54,12456)}function xy(a,b){a=a|0;b=b|0;var d=0,e=0;e=a+36|0;d=c[e>>2]|0;if((d|0)<(c[a+44>>2]|0)){c[e>>2]=d+1;c[(c[a+12>>2]|0)+(d<<2)>>2]=b;return}else Aa(12464,12416,62,12456)}



function zA(b,d){b=b|0;d=d|0;var e=0.0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0.0,G=0.0,H=0,I=0.0,J=0,K=0.0,L=0;q=i;i=i+48|0;L=q+36|0;J=q+24|0;x=q+16|0;y=q+8|0;u=q;n=b+128|0;p=c[n>>2]|0;o=d+28|0;D=c[o>>2]|0;v=D+(p*12|0)|0;j=+g[v>>2];k=+g[v+4>>2];s=+g[D+(p*12|0)+8>>2];p=b+132|0;v=c[p>>2]|0;w=D+(v*12|0)|0;m=+g[w>>2];h=+g[w+4>>2];t=+g[D+(v*12|0)+8>>2];e=+g[b+168>>2];r=+g[b+172>>2];l=+g[b+176>>2];f=+g[b+180>>2];v=l+f==0.0;if((a[b+100>>0]|0)!=0?!((c[b+224>>2]|0)==3|v):0){D=b+96|0;K=+g[D>>2];I=+g[d>>2]*+g[b+104>>2];F=K- +g[b+220>>2]*(t-s- +g[b+108>>2]);G=-I;I=F<I?F:I;I=I<G?G:I;g[D>>2]=I;K=I-K;s=s-l*K;t=t+f*K}if((a[b+112>>0]|0)!=0?(H=b+224|0,!((c[H>>2]|0)==0|v)):0){w=b+148|0;d=b+144|0;v=b+140|0;u=b+136|0;z=m-t*+g[w>>2]-j+s*+g[v>>2];C=h+t*+g[d>>2]-k-s*+g[u>>2];g[L>>2]=z;g[L+4>>2]=C;g[L+8>>2]=t-s;D=b+184|0;Lx(J,D,L);F=+g[J>>2];A=-F;G=+g[J+4>>2];E=-G;I=+g[J+8>>2];B=-I;H=c[H>>2]|0;do if((H|0)==2){x=b+84|0;H=b+92|0;K=+g[H>>2];I=K-I;if(I>0.0){Mx(y,D,K*+g[b+208>>2]-z,K*+g[b+212>>2]-C);A=+g[y>>2];E=+g[y+4>>2];B=-+g[H>>2];g[x>>2]=A+ +g[x>>2];L=b+88|0;g[L>>2]=E+ +g[L>>2];g[H>>2]=0.0;break}else{g[x>>2]=+g[x>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;g[H>>2]=I;break}}else if((H|0)==3){L=b+84|0;g[L>>2]=+g[L>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;L=b+92|0;g[L>>2]=+g[L>>2]-I}else if((H|0)==1){H=b+84|0;y=b+92|0;K=+g[y>>2];I=K-I;if(I<0.0){Mx(x,D,K*+g[b+208>>2]-z,K*+g[b+212>>2]-C);A=+g[x>>2];E=+g[x+4>>2];B=-+g[y>>2];g[H>>2]=A+ +g[H>>2];L=b+88|0;g[L>>2]=E+ +g[L>>2];g[y>>2]=0.0;break}else{g[H>>2]=+g[H>>2]-F;L=b+88|0;g[L>>2]=+g[L>>2]-G;g[y>>2]=I;break}}while(0);K=B+(E*+g[d>>2]-A*+g[w>>2]);F=B+(E*+g[u>>2]-A*+g[v>>2]);C=A;G=r*C;I=r*E;C=e*C;E=e*E;G=m+G;I=h+I;C=j-C;E=k-E;F=l*F;K=f*K;F=s-F;K=t+K;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)|0;C=+C;E=+E;J=L;g[J>>2]=C;L=L+4|0;g[L>>2]=E;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=F;L=c[p>>2]|0;L=J+(L*12|0)|0;G=+G;I=+I;J=L;g[J>>2]=G;L=L+4|0;g[L>>2]=I;L=c[p>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=K;i=q;return}H=b+148|0;D=b+144|0;L=b+140|0;J=b+136|0;Mx(u,b+184|0,-(m-t*+g[H>>2]-j+s*+g[L>>2]),-(h+t*+g[D>>2]-k-s*+g[J>>2]));C=+g[u>>2];y=b+84|0;g[y>>2]=C+ +g[y>>2];E=+g[u+4>>2];y=b+88|0;g[y>>2]=E+ +g[y>>2];K=E*+g[D>>2]-C*+g[H>>2];F=E*+g[J>>2]-C*+g[L>>2];G=r*C;I=r*E;C=e*C;E=e*E;G=m+G;I=h+I;C=j-C;E=k-E;F=l*F;K=f*K;F=s-F;K=t+K;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)|0;C=+C;E=+E;J=L;g[J>>2]=C;L=L+4|0;g[L>>2]=E;L=c[n>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=F;L=c[p>>2]|0;L=J+(L*12|0)|0;G=+G;I=+I;J=L;g[J>>2]=G;L=L+4|0;g[L>>2]=I;L=c[p>>2]|0;J=c[o>>2]|0;L=J+(L*12|0)+8|0;g[L>>2]=K;i=q;return}function AA(b,d){b=b|0;d=d|0;var e=0,f=0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0,F=0.0,G=0,H=0,I=0,J=0.0;f=i;e=b+128|0;n=c[e>>2]|0;k=d+24|0;G=c[k>>2]|0;d=G+(n*12|0)|0;H=d;l=+g[H>>2];j=+g[H+4>>2];q=+g[G+(n*12|0)+8>>2];n=b+132|0;H=c[n>>2]|0;I=G+(H*12|0)|0;h=+g[I>>2];m=+g[I+4>>2];r=+g[G+(H*12|0)+8>>2];H=b+176|0;G=b+180|0;if(a[b+112>>0]|0){s=+g[G>>2];t=+g[H>>2];G=c[b+224>>2]|0;if((G|0)==0|s+t==0.0){o=t;p=s;u=0.0}else{o=r-q- +g[b+116>>2];if((G|0)==2){u=o- +g[b+124>>2];v=u+-.03490658849477768;v=v<.13962635397911072?v:.13962635397911072;v=-(+g[b+220>>2]*(v<0.0?0.0:v))}else if((G|0)==1){u=o- +g[b+120>>2];v=u+.03490658849477768;v=v<0.0?v:0.0;u=-u;v=-(+g[b+220>>2]*(v<-.13962635397911072?-.13962635397911072:v))}else if((G|0)==3){u=o- +g[b+120>>2];u=u<.13962635397911072?u:.13962635397911072;u=u<-.13962635397911072?-.13962635397911072:u;v=-(+g[b+220>>2]*u);if(!(u>0.0))u=-u}else{u=0.0;v=0.0}o=t;p=s;q=q-v*t;r=r+v*s}}else{o=+g[H>>2];p=+g[G>>2];u=0.0}w=+R(+q);x=+Q(+q);y=+R(+r);z=+Q(+r);v=+g[b+68>>2]- +g[b+152>>2];s=+g[b+72>>2]- +g[b+156>>2];A=x*v-w*s;s=w*v+x*s;x=+g[b+76>>2]- +g[b+160>>2];v=+g[b+80>>2]- +g[b+164>>2];w=z*x-y*v;v=y*x+z*v;z=h+w-l-A;x=m+v-j-s;y=+O(+(z*z+x*x));t=+g[b+168>>2];C=+g[b+172>>2];J=t+C;E=J+s*s*o+v*v*p;F=A*o;B=w*p;D=-(s*F)-v*B;B=J+A*F+w*B;F=E*B-D*D;if(F!=0.0)F=1.0/F;J=-((z*B-x*D)*F);F=-((x*E-z*D)*F);E=+(l-t*J);D=+(j-t*F);I=d;g[I>>2]=E;g[I+4>>2]=D;I=c[k>>2]|0;g[I+((c[e>>2]|0)*12|0)+8>>2]=q-o*(A*F-s*J);D=+(h+C*J);E=+(m+C*F);I=I+((c[n>>2]|0)*12|0)|0;g[I>>2]=D;g[I+4>>2]=E;g[(c[k>>2]|0)+((c[n>>2]|0)*12|0)+8>>2]=r+p*(w*F-v*J);if(!(y<=.004999999888241291)){I=0;i=f;return I|0}I=u<=.03490658849477768;i=f;return I|0}function BA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function CA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function DA(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+88>>2]*c;g[a>>2]=+g[b+84>>2]*c;g[a+4>>2]=d;return}function EA(a,b){a=a|0;b=+b;return+(+g[a+92>>2]*b)}function FA(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(17248,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+116>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17640,e);c[e>>2]=d[a+112>>0];Px(17280,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17312,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17344,e);c[e>>2]=d[a+100>>0];Px(18024,e);h[k>>3]=+g[a+108>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18056,e);h[k>>3]=+g[a+104>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18088,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function GA(a){a=a|0;return}function HA(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function IA(b,d){b=b|0;d=d|0;var e=0,f=0,h=0,j=0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0,z=0.0,A=0.0,B=0,C=0.0,D=0.0,E=0,F=0,G=0,H=0.0,I=0,J=0,K=0,L=0,M=0,N=0,P=0.0;e=i;w=c[b+48>>2]|0;M=c[w+8>>2]|0;f=b+96|0;c[f>>2]=M;L=c[b+52>>2]|0;J=c[L+8>>2]|0;h=b+100|0;c[h>>2]=J;E=w+28|0;I=c[E>>2]|0;E=c[E+4>>2]|0;y=b+128|0;c[y>>2]=I;c[y+4>>2]=E;y=L+28|0;G=c[y>>2]|0;y=c[y+4>>2]|0;F=b+136|0;c[F>>2]=G;c[F+4>>2]=y;F=b+144|0;g[F>>2]=+g[w+120>>2];y=b+148|0;g[y>>2]=+g[L+120>>2];B=b+152|0;g[B>>2]=+g[w+128>>2];w=b+156|0;g[w>>2]=+g[L+128>>2];L=c[d+24>>2]|0;j=L+(M*12|0)|0;v=+g[j>>2];x=+g[j+4>>2];l=+g[L+(M*12|0)+8>>2];j=d+28|0;K=c[j>>2]|0;N=K+(M*12|0)|0;u=+g[N>>2];t=+g[N+4>>2];o=+g[K+(M*12|0)+8>>2];M=L+(J*12|0)|0;z=+g[M>>2];H=+g[M+4>>2];C=+g[L+(J*12|0)+8>>2];L=K+(J*12|0)|0;s=+g[L>>2];r=+g[L+4>>2];m=+g[K+(J*12|0)+8>>2];n=+R(+l);l=+Q(+l);A=+R(+C);C=+Q(+C);D=+g[b+68>>2]-(c[k>>2]=I,+g[k>>2]);q=+g[b+72>>2]-(c[k>>2]=E,+g[k>>2]);p=l*D-n*q;q=n*D+l*q;l=+p;D=+q;E=b+112|0;g[E>>2]=l;g[E+4>>2]=D;D=+g[b+76>>2]-(c[k>>2]=G,+g[k>>2]);l=+g[b+80>>2]- +g[b+140>>2];n=C*D-A*l;l=A*D+C*l;C=+n;D=+l;G=b+120|0;g[G>>2]=C;g[G+4>>2]=D;G=b+104|0;v=z+n-v-p;x=H+l-x-q;H=+v;z=+x;E=G;g[E>>2]=H;g[E+4>>2]=z;E=b+108|0;z=+O(+(v*v+x*x));g[b+88>>2]=z;c[b+164>>2]=z- +g[b+84>>2]>0.0?2:0;if(!(z>.004999999888241291)){g[G>>2]=0.0;g[E>>2]=0.0;g[b+160>>2]=0.0;g[b+92>>2]=0.0;i=e;return}A=1.0/z;v=A*v;g[G>>2]=v;A=A*x;g[E>>2]=A;P=p*A-q*v;H=A*n-v*l;C=+g[F>>2];x=+g[B>>2];D=+g[y>>2];z=+g[w>>2];H=D+(C+P*P*x)+H*H*z;if(H!=0.0)H=1.0/H;else H=0.0;g[b+160>>2]=H;if(!(a[d+20>>0]|0))g[b+92>>2]=0.0;else{N=b+92|0;H=+g[d+8>>2]*+g[N>>2];g[N>>2]=H;P=v*H;H=H*A;u=u-P*C;t=t-H*C;s=s+P*D;r=r+H*D;o=o-x*(H*p-P*q);m=m+z*(H*n-P*l)}P=+u;H=+t;N=(c[j>>2]|0)+((c[f>>2]|0)*12|0)|0;g[N>>2]=P;g[N+4>>2]=H;N=c[j>>2]|0;g[N+((c[f>>2]|0)*12|0)+8>>2]=o;H=+s;P=+r;N=N+((c[h>>2]|0)*12|0)|0;g[N>>2]=H;g[N+4>>2]=P;g[(c[j>>2]|0)+((c[h>>2]|0)*12|0)+8>>2]=m;i=e;return}function JA(a,b){a=a|0;b=b|0;var d=0.0,e=0,f=0,h=0.0,j=0.0,k=0,l=0,m=0.0,n=0.0,o=0.0,p=0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0,z=0,A=0,B=0.0;p=i;k=a+96|0;e=c[k>>2]|0;f=b+28|0;z=c[f>>2]|0;l=z+(e*12|0)|0;y=l;n=+g[y>>2];m=+g[y+4>>2];t=+g[z+(e*12|0)+8>>2];e=a+100|0;y=c[e>>2]|0;A=z+(y*12|0)|0;j=+g[A>>2];h=+g[A+4>>2];q=+g[z+(y*12|0)+8>>2];r=+g[a+116>>2];s=+g[a+112>>2];o=+g[a+124>>2];d=+g[a+120>>2];w=+g[a+88>>2]- +g[a+84>>2];v=+g[a+104>>2];u=+g[a+108>>2];x=(j-q*o-(n-t*r))*v+(h+q*d-(m+t*s))*u;if(w<0.0)x=x+w*+g[b+4>>2];A=a+92|0;B=+g[A>>2];w=B-x*+g[a+160>>2];w=w>0.0?0.0:w;g[A>>2]=w;B=w-B;v=v*B;u=u*B;B=+g[a+144>>2];t=t- +g[a+152>>2]*(s*u-v*r);w=+g[a+148>>2];x=q+ +g[a+156>>2]*(u*d-v*o);r=+(n-B*v);s=+(m-B*u);A=l;g[A>>2]=r;g[A+4>>2]=s;A=c[f>>2]|0;g[A+((c[k>>2]|0)*12|0)+8>>2]=t;v=+(j+v*w);w=+(h+u*w);A=A+((c[e>>2]|0)*12|0)|0;g[A>>2]=v;g[A+4>>2]=w;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=x;i=p;return}function KA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0,l=0.0,m=0.0,n=0.0,o=0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0,y=0,z=0.0,A=0.0,B=0.0;e=i;d=a+96|0;o=c[d>>2]|0;b=b+24|0;x=c[b>>2]|0;k=x+(o*12|0)|0;w=k;m=+g[w>>2];l=+g[w+4>>2];s=+g[x+(o*12|0)+8>>2];o=a+100|0;w=c[o>>2]|0;y=x+(w*12|0)|0;h=+g[y>>2];f=+g[y+4>>2];p=+g[x+(w*12|0)+8>>2];j=+R(+s);t=+Q(+s);u=+R(+p);v=+Q(+p);n=+g[a+68>>2]- +g[a+128>>2];q=+g[a+72>>2]- +g[a+132>>2];r=t*n-j*q;q=j*n+t*q;t=+g[a+76>>2]- +g[a+136>>2];n=+g[a+80>>2]- +g[a+140>>2];j=v*t-u*n;n=u*t+v*n;v=h+j-m-r;t=f+n-l-q;u=+O(+(v*v+t*t));if(u<1.1920928955078125e-7)u=0.0;else{z=1.0/u;v=v*z;t=t*z}y=a+84|0;B=u- +g[y>>2];B=B<.20000000298023224?B:.20000000298023224;B=-(+g[a+160>>2]*(B<0.0?0.0:B));A=v*B;v=t*B;B=+g[a+144>>2];t=s- +g[a+152>>2]*(r*v-q*A);s=+g[a+148>>2];z=p+ +g[a+156>>2]*(j*v-n*A);q=+(m-B*A);r=+(l-B*v);x=k;g[x>>2]=q;g[x+4>>2]=r;x=c[b>>2]|0;g[x+((c[d>>2]|0)*12|0)+8>>2]=t;t=+(h+s*A);v=+(f+s*v);x=x+((c[o>>2]|0)*12|0)|0;g[x>>2]=t;g[x+4>>2]=v;g[(c[b>>2]|0)+((c[o>>2]|0)*12|0)+8>>2]=z;i=e;return u- +g[y>>2]<.004999999888241291|0}function LA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+68>>2];f=+g[j+20>>2];e=+g[b+72>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function MA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function NA(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+92>>2]*c;c=d*+g[b+108>>2];g[a>>2]=+g[b+104>>2]*d;g[a+4>>2]=c;return}function OA(a,b){a=a|0;b=+b;return 0.0}function PA(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(17472,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+72>>2];h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17496,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function QA(a){a=a|0;return}function RA(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function SA(b,d){b=b|0;d=d|0;var e=0,f=0.0,h=0.0,j=0.0,l=0.0,m=0.0,n=0,o=0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0,v=0,w=0.0,x=0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0,F=0,G=0.0,H=0.0,I=0.0,J=0.0,K=0,L=0,M=0,N=0;q=i;i=i+48|0;F=q;o=c[b+48>>2]|0;M=c[o+8>>2]|0;n=b+116|0;c[n>>2]=M;L=c[b+52>>2]|0;u=c[L+8>>2]|0;p=b+120|0;c[p>>2]=u;x=o+28|0;E=c[x>>2]|0;x=c[x+4>>2]|0;v=b+140|0;c[v>>2]=E;c[v+4>>2]=x;v=L+28|0;e=c[v>>2]|0;v=c[v+4>>2]|0;K=b+148|0;c[K>>2]=e;c[K+4>>2]=v;r=+g[o+120>>2];g[b+156>>2]=r;s=+g[L+120>>2];g[b+160>>2]=s;t=+g[o+128>>2];g[b+164>>2]=t;w=+g[L+128>>2];g[b+168>>2]=w;L=c[d+24>>2]|0;B=+g[L+(M*12|0)+8>>2];o=d+28|0;K=c[o>>2]|0;N=K+(M*12|0)|0;y=+g[N>>2];f=+g[N+4>>2];l=+g[K+(M*12|0)+8>>2];A=+g[L+(u*12|0)+8>>2];L=K+(u*12|0)|0;h=+g[L>>2];j=+g[L+4>>2];m=+g[K+(u*12|0)+8>>2];z=+R(+B);D=+Q(+B);J=+R(+A);H=+Q(+A);u=b+124|0;G=+g[b+80>>2]-(c[k>>2]=E,+g[k>>2]);I=+g[b+84>>2]-(c[k>>2]=x,+g[k>>2]);C=D*G-z*I;I=z*G+D*I;D=+C;G=+I;x=u;g[x>>2]=D;g[x+4>>2]=G;x=b+132|0;G=+g[b+88>>2]-(c[k>>2]=e,+g[k>>2]);D=+g[b+92>>2]-(c[k>>2]=v,+g[k>>2]);z=H*G-J*D;D=J*G+H*D;H=+z;G=+D;v=x;g[v>>2]=H;g[v+4>>2]=G;G=r+s;v=b+128|0;e=b+136|0;g[F>>2]=G+t*I*I+w*D*D;H=-(t*I*C)-w*D*z;g[F+12>>2]=H;D=-(t*I)-w*D;g[F+24>>2]=D;g[F+4>>2]=H;g[F+16>>2]=G+t*C*C+w*z*z;z=t*C+w*z;g[F+28>>2]=z;g[F+8>>2]=D;g[F+20>>2]=z;z=t+w;g[F+32>>2]=z;E=b+68|0;do if(!(+g[E>>2]>0.0)){E=b+172|0;if(z==0.0){Nx(F,E);g[b+100>>2]=0.0;g[b+76>>2]=0.0;break}else{Ox(F,E);g[b+100>>2]=0.0;g[b+76>>2]=0.0;break}}else{Nx(F,b+172|0);if(z>0.0)D=1.0/z;else D=0.0;A=A-B- +g[b+96>>2];J=+g[E>>2]*6.2831854820251465;B=J*D*J;C=+g[d>>2];D=C*(J*D*2.0*+g[b+72>>2]+C*B);E=b+100|0;g[E>>2]=D;if(D!=0.0)D=1.0/D;else D=0.0;g[E>>2]=D;g[b+76>>2]=A*C*B*D;z=z+D;if(z!=0.0)z=1.0/z;else z=0.0;g[b+204>>2]=z}while(0);E=b+104|0;if(!(a[d+20>>0]|0)){g[E>>2]=0.0;g[b+108>>2]=0.0;g[b+112>>2]=0.0;C=y;D=f;H=h;I=j;G=l;J=m;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;C=+C;D=+D;M=N;g[M>>2]=C;N=N+4|0;g[N>>2]=D;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=G;N=c[p>>2]|0;N=M+(N*12|0)|0;H=+H;I=+I;M=N;g[M>>2]=H;N=N+4|0;g[N>>2]=I;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=J;i=q;return}else{A=+g[d+8>>2];J=A*+g[E>>2];g[E>>2]=J;N=b+108|0;B=A*+g[N>>2];g[N>>2]=B;N=b+112|0;A=A*+g[N>>2];g[N>>2]=A;C=y-r*J;D=f-r*B;H=h+s*J;I=j+s*B;G=l-t*(A+(B*+g[u>>2]-J*+g[v>>2]));J=m+w*(A+(B*+g[x>>2]-J*+g[e>>2]));N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)|0;C=+C;D=+D;M=N;g[M>>2]=C;N=N+4|0;g[N>>2]=D;N=c[n>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=G;N=c[p>>2]|0;N=M+(N*12|0)|0;H=+H;I=+I;M=N;g[M>>2]=H;N=N+4|0;g[N>>2]=I;N=c[p>>2]|0;M=c[o>>2]|0;N=M+(N*12|0)+8|0;g[N>>2]=J;i=q;return}}function TA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0,j=0.0,k=0.0,l=0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0,u=0,v=0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0.0,E=0.0;e=i;d=a+116|0;t=c[d>>2]|0;l=b+28|0;u=c[l>>2]|0;h=u+(t*12|0)|0;b=h;k=+g[b>>2];j=+g[b+4>>2];s=+g[u+(t*12|0)+8>>2];b=a+120|0;t=c[b>>2]|0;v=u+(t*12|0)|0;m=+g[v>>2];f=+g[v+4>>2];r=+g[u+(t*12|0)+8>>2];n=+g[a+156>>2];o=+g[a+160>>2];q=+g[a+164>>2];p=+g[a+168>>2];if(+g[a+68>>2]>0.0){v=a+112|0;A=+g[v>>2];D=+g[a+204>>2]*(r-s+ +g[a+76>>2]+ +g[a+100>>2]*A);B=-D;g[v>>2]=A-D;D=s-q*B;B=r+p*B;r=+g[a+136>>2];A=+g[a+132>>2];w=+g[a+128>>2];C=+g[a+124>>2];s=w*D+(m-r*B-k);x=f+A*B-j-C*D;y=+g[a+172>>2]*s+ +g[a+184>>2]*x;x=+g[a+176>>2]*s+ +g[a+188>>2]*x;s=-y;z=-x;v=a+104|0;g[v>>2]=+g[v>>2]-y;v=a+108|0;g[v>>2]=+g[v>>2]-x;x=z;y=s;w=D-q*(C*z-w*s);s=B+p*(A*z-r*s);q=o*y;r=o*x;o=n*y;p=n*x;q=m+q;r=f+r;o=k-o;p=j-p;o=+o;p=+p;v=h;u=v;g[u>>2]=o;v=v+4|0;g[v>>2]=p;v=c[d>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=w;v=c[b>>2]|0;v=u+(v*12|0)|0;q=+q;r=+r;u=v;g[u>>2]=q;v=v+4|0;g[v>>2]=r;v=c[b>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=s;i=e;return}else{C=+g[a+136>>2];w=+g[a+132>>2];A=+g[a+128>>2];E=+g[a+124>>2];x=m-r*C-k+s*A;B=f+r*w-j-s*E;D=r-s;y=x*+g[a+172>>2]+B*+g[a+184>>2]+D*+g[a+196>>2];z=x*+g[a+176>>2]+B*+g[a+188>>2]+D*+g[a+200>>2];D=x*+g[a+180>>2]+B*+g[a+192>>2]+D*+g[a+204>>2];B=-y;x=-z;v=a+104|0;g[v>>2]=+g[v>>2]-y;v=a+108|0;g[v>>2]=+g[v>>2]-z;v=a+112|0;g[v>>2]=+g[v>>2]-D;z=x;y=B;A=s-q*(E*x-A*B-D);D=r+p*(w*x-C*B-D);B=o*y;C=o*z;y=n*y;z=n*z;B=m+B;C=f+C;y=k-y;z=j-z;y=+y;z=+z;v=h;u=v;g[u>>2]=y;v=v+4|0;g[v>>2]=z;v=c[d>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=A;v=c[b>>2]|0;v=u+(v*12|0)|0;B=+B;C=+C;u=v;g[u>>2]=B;v=v+4|0;g[v>>2]=C;v=c[b>>2]|0;u=c[l>>2]|0;v=u+(v*12|0)+8|0;g[v>>2]=D;i=e;return}}function UA(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0,H=0.0,I=0,J=0,K=0;d=i;i=i+64|0;E=d+24|0;F=d+12|0;D=d;e=a+116|0;f=c[e>>2]|0;b=b+24|0;J=c[b>>2]|0;I=J+(f*12|0)|0;q=+g[I>>2];l=+g[I+4>>2];h=+g[J+(f*12|0)+8>>2];f=a+120|0;I=c[f>>2]|0;K=J+(I*12|0)|0;k=+g[K>>2];m=+g[K+4>>2];o=+g[J+(I*12|0)+8>>2];v=+R(+h);C=+Q(+h);B=+R(+o);z=+Q(+o);n=+g[a+156>>2];r=+g[a+160>>2];j=+g[a+164>>2];p=+g[a+168>>2];w=+g[a+80>>2]- +g[a+140>>2];t=+g[a+84>>2]- +g[a+144>>2];s=C*w-v*t;t=v*w+C*t;C=+g[a+88>>2]- +g[a+148>>2];w=+g[a+92>>2]- +g[a+152>>2];v=z*C-B*w;w=B*C+z*w;z=n+r;C=z+j*t*t+p*w*w;g[E>>2]=C;B=-(j*t*s)-p*w*v;g[E+12>>2]=B;A=-(j*t)-p*w;g[E+24>>2]=A;g[E+4>>2]=B;z=z+j*s*s+p*v*v;g[E+16>>2]=z;G=j*s+p*v;g[E+28>>2]=G;g[E+8>>2]=A;g[E+20>>2]=G;G=j+p;g[E+32>>2]=G;A=k+v-q-s;y=m+w-l-t;if(+g[a+68>>2]>0.0){u=+O(+(y*y+A*A));x=C*z-B*B;if(x!=0.0)x=1.0/x;H=-(x*(z*A-B*y));x=-(x*(C*y-B*A));v=v*x-w*H;w=x;y=H;s=s*x-t*H;x=0.0}else{H=o-h- +g[a+96>>2];u=+O(+(y*y+A*A));if(H>0.0)x=H;else x=-H;g[F>>2]=A;g[F+4>>2]=y;g[F+8>>2]=H;if(G>0.0){Lx(D,E,F);C=+g[D+4>>2];y=+g[D>>2];z=-+g[D+8>>2]}else{G=C*z-B*B;if(G!=0.0)G=1.0/G;C=G*(C*y-B*A);y=G*(z*A-B*y);z=0.0}H=-y;G=-C;v=z+(v*G-w*H);w=G;y=H;s=z+(s*G-t*H)}H=+(q-n*y);G=+(l-n*w);K=(c[b>>2]|0)+((c[e>>2]|0)*12|0)|0;g[K>>2]=H;g[K+4>>2]=G;K=c[b>>2]|0;g[K+((c[e>>2]|0)*12|0)+8>>2]=h-j*s;G=+(k+r*y);H=+(m+r*w);K=K+((c[f>>2]|0)*12|0)|0;g[K>>2]=G;g[K+4>>2]=H;g[(c[b>>2]|0)+((c[f>>2]|0)*12|0)+8>>2]=o+p*v;if(!(u<=.004999999888241291)){K=0;i=d;return K|0}K=x<=.03490658849477768;i=d;return K|0}function VA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+80>>2];f=+g[j+20>>2];e=+g[b+84>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function WA(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+88>>2];f=+g[j+20>>2];e=+g[b+92>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function XA(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0;d=+g[b+108>>2]*c;g[a>>2]=+g[b+104>>2]*c;g[a+4>>2]=d;return}function YA(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function ZA(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(17616,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+84>>2];h[k>>3]=+g[a+80>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+92>>2];h[k>>3]=+g[a+88>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);h[k>>3]=+g[a+96>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(17640,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18120,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18152,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function _A(a){a=a|0;return}function $A(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function aB(b,d){b=b|0;d=d|0;var e=0.0,f=0,h=0.0,j=0,l=0.0,m=0,n=0,o=0.0,p=0,q=0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0,y=0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0.0,F=0,G=0,H=0.0,I=0.0,J=0.0,K=0.0,L=0.0,M=0.0,N=0.0,O=0.0,P=0,S=0,T=0,U=0,V=0,W=0,X=0.0,Y=0.0;p=i;j=c[b+48>>2]|0;V=c[j+8>>2]|0;x=b+132|0;c[x>>2]=V;f=c[b+52>>2]|0;S=c[f+8>>2]|0;q=b+136|0;c[q>>2]=S;D=j+28|0;P=c[D>>2]|0;D=c[D+4>>2]|0;G=b+140|0;c[G>>2]=P;c[G+4>>2]=D;G=f+28|0;F=c[G>>2]|0;G=c[G+4>>2]|0;n=b+148|0;c[n>>2]=F;c[n+4>>2]=G;E=+g[j+120>>2];n=b+156|0;g[n>>2]=E;K=+g[f+120>>2];m=b+160|0;g[m>>2]=K;A=+g[j+128>>2];j=b+164|0;g[j>>2]=A;z=+g[f+128>>2];f=b+168|0;g[f>>2]=z;U=c[d+24>>2]|0;y=U+(V*12|0)|0;C=+g[y>>2];B=+g[y+4>>2];H=+g[U+(V*12|0)+8>>2];y=d+28|0;T=c[y>>2]|0;W=T+(V*12|0)|0;r=+g[W>>2];s=+g[W+4>>2];v=+g[T+(V*12|0)+8>>2];V=U+(S*12|0)|0;e=+g[V>>2];h=+g[V+4>>2];o=+g[U+(S*12|0)+8>>2];U=T+(S*12|0)|0;t=+g[U>>2];u=+g[U+4>>2];w=+g[T+(S*12|0)+8>>2];O=+R(+H);H=+Q(+H);N=+R(+o);o=+Q(+o);l=+g[b+76>>2]-(c[k>>2]=P,+g[k>>2]);L=+g[b+80>>2]-(c[k>>2]=D,+g[k>>2]);I=H*l-O*L;L=O*l+H*L;l=+g[b+84>>2]-(c[k>>2]=F,+g[k>>2]);M=+g[b+88>>2]-(c[k>>2]=G,+g[k>>2]);J=o*l-N*M;M=N*l+o*M;C=e+J-C-I;B=h+M-B-L;h=+g[b+100>>2];e=+g[b+104>>2];o=H*h-O*e;e=O*h+H*e;h=+o;l=+e;G=b+180|0;g[G>>2]=h;g[G+4>>2]=l;I=I+C;L=L+B;l=e*I-o*L;g[b+196>>2]=l;h=J*e-M*o;g[b+200>>2]=h;K=E+K;E=K+l*A*l+h*z*h;if(E>0.0)E=1.0/E;g[b+204>>2]=E;D=b+212|0;g[D>>2]=0.0;F=b+216|0;g[F>>2]=0.0;G=b+220|0;g[G>>2]=0.0;N=+g[b+68>>2];if(N>0.0){Y=+g[b+92>>2];X=+g[b+96>>2];E=H*Y-O*X;H=O*Y+H*X;X=+E;O=+H;W=b+172|0;g[W>>2]=X;g[W+4>>2]=O;O=I*H-L*E;g[b+188>>2]=O;I=J*H-M*E;g[b+192>>2]=I;I=K+O*A*O+I*z*I;if(I>0.0){L=1.0/I;g[D>>2]=L;Y=N*6.2831854820251465;K=Y*L*Y;J=+g[d>>2];L=J*(Y*L*2.0*+g[b+72>>2]+J*K);if(L>0.0)L=1.0/L;g[G>>2]=L;g[F>>2]=(C*E+B*H)*J*K*L;B=I+L;g[D>>2]=B;if(B>0.0)g[D>>2]=1.0/B}}else g[b+116>>2]=0.0;if(a[b+128>>0]|0){z=z+A;D=b+208|0;g[D>>2]=z;if(z>0.0)g[D>>2]=1.0/z}else{g[b+208>>2]=0.0;g[b+112>>2]=0.0}if(!(a[d+20>>0]|0)){g[b+108>>2]=0.0;g[b+116>>2]=0.0;g[b+112>>2]=0.0;L=r;M=s;O=t;X=u;N=v;Y=w;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)|0;L=+L;M=+M;V=W;g[V>>2]=L;W=W+4|0;g[W>>2]=M;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=N;W=c[q>>2]|0;W=V+(W*12|0)|0;O=+O;X=+X;V=W;g[V>>2]=O;W=W+4|0;g[W>>2]=X;W=c[q>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=Y;i=p;return}else{V=d+8|0;W=b+108|0;K=+g[V>>2]*+g[W>>2];g[W>>2]=K;W=b+116|0;Y=+g[V>>2]*+g[W>>2];g[W>>2]=Y;W=b+112|0;J=+g[V>>2]*+g[W>>2];g[W>>2]=J;O=K*o+Y*+g[b+172>>2];N=K*e+Y*+g[b+176>>2];M=+g[n>>2];X=+g[m>>2];L=r-O*M;M=s-N*M;O=t+O*X;X=u+N*X;N=v-(J+(K*l+Y*+g[b+188>>2]))*+g[j>>2];Y=w+(J+(K*h+Y*+g[b+192>>2]))*+g[f>>2];W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)|0;L=+L;M=+M;V=W;g[V>>2]=L;W=W+4|0;g[W>>2]=M;W=c[x>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=N;W=c[q>>2]|0;W=V+(W*12|0)|0;O=+O;X=+X;V=W;g[V>>2]=O;W=W+4|0;g[W>>2]=X;W=c[q>>2]|0;V=c[y>>2]|0;W=V+(W*12|0)+8|0;g[W>>2]=Y;i=p;return}}function bB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0,s=0.0,t=0.0,u=0.0,v=0.0,w=0.0,x=0.0,y=0.0,z=0,A=0.0,B=0,C=0;d=i;v=+g[a+156>>2];o=+g[a+160>>2];t=+g[a+164>>2];k=+g[a+168>>2];r=a+132|0;e=c[r>>2]|0;f=b+28|0;B=c[f>>2]|0;z=B+(e*12|0)|0;w=+g[z>>2];x=+g[z+4>>2];y=+g[B+(e*12|0)+8>>2];e=a+136|0;z=c[e>>2]|0;C=B+(z*12|0)|0;j=+g[C>>2];s=+g[C+4>>2];m=+g[B+(z*12|0)+8>>2];q=+g[a+172>>2];p=+g[a+176>>2];l=+g[a+192>>2];u=+g[a+188>>2];z=a+116|0;A=+g[z>>2];h=+g[a+212>>2]*(+g[a+216>>2]+(m*l+(q*(j-w)+p*(s-x))-y*u)+ +g[a+220>>2]*A);n=-h;g[z>>2]=A-h;q=q*n;p=p*n;w=w-v*q;x=x-v*p;u=y-t*u*n;q=j+o*q;p=s+o*p;n=m+k*l*n;z=a+112|0;l=+g[z>>2];m=+g[b>>2]*+g[a+120>>2];s=l- +g[a+208>>2]*(n-u- +g[a+124>>2]);j=-m;m=s<m?s:m;m=m<j?j:m;g[z>>2]=m;l=m-l;u=u-t*l;l=n+k*l;n=+g[a+180>>2];m=+g[a+184>>2];j=+g[a+200>>2];s=+g[a+196>>2];y=+g[a+204>>2]*((q-w)*n+(p-x)*m+j*l-s*u);h=-y;b=a+108|0;g[b>>2]=+g[b>>2]-y;n=n*h;m=m*h;w=+(w-v*n);v=+(x-v*m);b=(c[f>>2]|0)+((c[r>>2]|0)*12|0)|0;g[b>>2]=w;g[b+4>>2]=v;b=c[f>>2]|0;g[b+((c[r>>2]|0)*12|0)+8>>2]=u-t*s*h;n=+(q+o*n);m=+(p+o*m);b=b+((c[e>>2]|0)*12|0)|0;g[b>>2]=n;g[b+4>>2]=m;g[(c[f>>2]|0)+((c[e>>2]|0)*12|0)+8>>2]=l+k*j*h;i=d;return}function cB(a,b){a=a|0;b=b|0;var d=0,e=0,f=0.0,h=0.0,j=0.0,k=0.0,l=0.0,m=0.0,n=0.0,o=0.0,p=0.0,q=0.0,r=0.0,s=0.0,t=0.0,u=0.0,v=0.0,w=0,x=0.0,y=0.0,z=0.0,A=0.0,B=0.0,C=0.0,D=0,E=0,F=0,G=0.0;e=i;d=a+132|0;w=c[d>>2]|0;b=b+24|0;E=c[b>>2]|0;D=E+(w*12|0)|0;j=+g[D>>2];l=+g[D+4>>2];n=+g[E+(w*12|0)+8>>2];w=a+136|0;D=c[w>>2]|0;F=E+(D*12|0)|0;t=+g[F>>2];v=+g[F+4>>2];x=+g[E+(D*12|0)+8>>2];u=+R(+n);q=+Q(+n);k=+R(+x);f=+Q(+x);r=+g[a+76>>2]- +g[a+140>>2];m=+g[a+80>>2]- +g[a+144>>2];o=q*r-u*m;m=u*r+q*m;r=+g[a+84>>2]- +g[a+148>>2];z=+g[a+88>>2]- +g[a+152>>2];y=f*r-k*z;z=k*r+f*z;f=t-j+y-o;r=v-l+z-m;k=+g[a+100>>2];h=+g[a+104>>2];p=q*k-u*h;h=u*k+q*h;q=p*f+h*r;k=+g[a+156>>2];u=+g[a+160>>2];s=+g[a+164>>2];C=+g[a+196>>2];A=+g[a+168>>2];B=+g[a+200>>2];B=k+u+C*s*C+B*A*B;if(B!=0.0)B=-q/B;else B=0.0;G=p*B;C=h*B;j=+(j-G*k);l=+(l-C*k);F=(c[b>>2]|0)+((c[d>>2]|0)*12|0)|0;g[F>>2]=j;g[F+4>>2]=l;F=c[b>>2]|0;g[F+((c[d>>2]|0)*12|0)+8>>2]=n-(h*(o+f)-p*(m+r))*B*s;t=+(t+G*u);C=+(v+C*u);F=F+((c[w>>2]|0)*12|0)|0;g[F>>2]=t;g[F+4>>2]=C;g[(c[b>>2]|0)+((c[w>>2]|0)*12|0)+8>>2]=x+(y*h-z*p)*B*A;if(q>0.0){G=q;F=G<=.004999999888241291;i=e;return F|0}G=-q;F=G<=.004999999888241291;i=e;return F|0}function dB(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+48>>2]|0;i=+g[j+24>>2];h=+g[b+76>>2];f=+g[j+20>>2];e=+g[b+80>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function eB(a,b){a=a|0;b=b|0;var d=0.0,e=0.0,f=0.0,h=0.0,i=0.0,j=0;j=c[b+52>>2]|0;i=+g[j+24>>2];h=+g[b+84>>2];f=+g[j+20>>2];e=+g[b+88>>2];d=h*f+i*e+ +g[j+16>>2];g[a>>2]=+g[j+12>>2]+(i*h-f*e);g[a+4>>2]=d;return}function fB(a,b,c){a=a|0;b=b|0;c=+c;var d=0.0,e=0.0,f=0.0;f=+g[b+108>>2];e=+g[b+116>>2];d=(f*+g[b+184>>2]+e*+g[b+176>>2])*c;g[a>>2]=(f*+g[b+180>>2]+e*+g[b+172>>2])*c;g[a+4>>2]=d;return}function gB(a,b){a=a|0;b=+b;return+(+g[a+112>>2]*b)}function hB(a){a=a|0;var b=0,e=0,f=0,j=0.0,l=0;b=i;i=i+16|0;e=b;l=c[(c[a+48>>2]|0)+8>>2]|0;f=c[(c[a+52>>2]|0)+8>>2]|0;Px(17760,e);c[e>>2]=l;Px(17784,e);c[e>>2]=f;Px(17816,e);c[e>>2]=d[a+61>>0];Px(17848,e);j=+g[a+80>>2];h[k>>3]=+g[a+76>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17888,e);j=+g[a+88>>2];h[k>>3]=+g[a+84>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17936,e);j=+g[a+96>>2];h[k>>3]=+g[a+92>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];f=e+8|0;h[k>>3]=j;c[f>>2]=c[k>>2];c[f+4>>2]=c[k+4>>2];Px(17984,e);c[e>>2]=d[a+128>>0];Px(18024,e);h[k>>3]=+g[a+124>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18056,e);h[k>>3]=+g[a+120>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18088,e);h[k>>3]=+g[a+68>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18120,e);h[k>>3]=+g[a+72>>2];c[e>>2]=c[k>>2];c[e+4>>2]=c[k+4>>2];Px(18152,e);c[e>>2]=c[a+56>>2];Px(18184,e);i=b;return}function iB(a){a=a|0;return}function jB(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function kB(a,b){a=a|0;b=b|0;var d=0;d=i;i=i+16|0;c[d>>2]=b;b=c[m>>2]|0;ya(b|0,a|0,d|0)|0;Za(10,b|0)|0;$a()}function lB(){var a=0,b=0,d=0,e=0,f=0;a=i;i=i+16|0;b=a;a=a+12|0;if(Sa(18448,44)|0)kB(18456,b);d=Pa(c[4610]|0)|0;if(!d)kB(18424,b);d=c[d>>2]|0;if(!d)kB(18424,b);f=d+48|0;e=c[f>>2]|0;f=c[f+4>>2]|0;if(!((e&-256|0)==1126902528&(f|0)==1129074247)){c[b>>2]=18272;kB(18384,b)}if((e|0)==1126902529&(f|0)==1129074247)e=c[d+44>>2]|0;else e=d+80|0;c[a>>2]=e;f=c[d>>2]|0;d=c[f+4>>2]|0;if(zB(18816,f,a)|0){f=c[a>>2]|0;f=nb[c[(c[f>>2]|0)+8>>2]&63](f)|0;c[b>>2]=18272;c[b+4>>2]=d;c[b+8>>2]=f;kB(18288,b)}else{c[b>>2]=18272;c[b+4>>2]=d;kB(18336,b)}}function mB(){var a=0;a=i;i=i+16|0;if(!(va(18440,124)|0)){i=a;return}else kB(18512,a)}function nB(a){a=a|0;var b=0;b=i;i=i+16|0;SB(a);if(!(Ya(c[4610]|0,0)|0)){i=b;return}else kB(18568,b)}function oB(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function pB(a){a=a|0;return}function qB(a){a=a|0;return 18648}function rB(a){a=a|0;var b=0;b=i;i=i+16|0;qb[a&63]();kB(18696,b)}function sB(){var a=0,b=0;b=i;i=i+16|0;if(Sa(18448,44)|0)kB(18456,b);b=Pa(c[4610]|0)|0;if(((b|0)!=0?(a=c[b>>2]|0,(a|0)!=0):0)?(b=a+48|0,(c[b>>2]&-256|0)==1126902528?(c[b+4>>2]|0)==1129074247:0):0)rB(c[a+12>>2]|0);b=c[4566]|0;c[4566]=b+0;rB(b)}function tB(a){a=a|0;return}function uB(a){a=a|0;return}function vB(a){a=a|0;return}function wB(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function xB(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function yB(a){a=a|0;var b=0;b=i;SB(a);i=b;return}function zB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0,g=0,h=0;e=i;i=i+64|0;f=e;if((a|0)==(b|0)){h=1;i=e;return h|0}if(!b){h=0;i=e;return h|0}b=FB(b,18944)|0;if(!b){h=0;i=e;return h|0}h=f+0|0;g=h+56|0;do{c[h>>2]=0;h=h+4|0}while((h|0)<(g|0));c[f>>2]=b;c[f+8>>2]=a;c[f+12>>2]=-1;c[f+48>>2]=1;vb[c[(c[b>>2]|0)+28>>2]&63](b,f,c[d>>2]|0,1);if((c[f+24>>2]|0)!=1){h=0;i=e;return h|0}c[d>>2]=c[f+16>>2];h=1;i=e;return h|0}function AB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=b+16|0;h=c[g>>2]|0;if(!h){c[g>>2]=d;c[b+24>>2]=e;c[b+36>>2]=1;i=f;return}if((h|0)!=(d|0)){h=b+36|0;c[h>>2]=(c[h>>2]|0)+1;c[b+24>>2]=2;a[b+54>>0]=1;i=f;return}d=b+24|0;if((c[d>>2]|0)!=2){i=f;return}c[d>>2]=e;i=f;return}function BB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((c[b+8>>2]|0)!=(a|0)){i=f;return}AB(b,d,e);i=f;return}function CB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0;f=i;if((a|0)==(c[b+8>>2]|0)){AB(b,d,e);i=f;return}else{a=c[a+8>>2]|0;vb[c[(c[a>>2]|0)+28>>2]&63](a,b,d,e);i=f;return}}function DB(a,b,d,e){a=a|0;b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0;f=i;g=c[a+4>>2]|0;h=g>>8;if(g&1)h=c[(c[d>>2]|0)+h>>2]|0;a=c[a>>2]|0;vb[c[(c[a>>2]|0)+28>>2]&63](a,b,d+h|0,(g&2|0)!=0?e:2);i=f;return}function EB(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;if((b|0)==(c[d+8>>2]|0)){AB(d,e,f);i=g;return}j=c[b+12>>2]|0;h=b+(j<<3)+16|0;DB(b+16|0,d,e,f);if((j|0)<=1){i=g;return}j=d+54|0;b=b+24|0;while(1){DB(b,d,e,f);if(a[j>>0]|0){f=7;break}b=b+8|0;if(b>>>0>=h>>>0){f=7;break}}if((f|0)==7){i=g;return}}function FB(d,e){d=d|0;e=e|0;var f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;f=i;i=i+64|0;m=f;g=c[d>>2]|0;h=d+(c[g+ -8>>2]|0)|0;g=c[g+ -4>>2]|0;c[m>>2]=e;c[m+4>>2]=d;c[m+8>>2]=18888;p=m+12|0;n=m+16|0;o=m+20|0;j=m+24|0;d=m+28|0;k=m+32|0;l=m+40|0;r=(g|0)==(e|0);e=p+0|0;q=e+40|0;do{c[e>>2]=0;e=e+4|0}while((e|0)<(q|0));b[p+40>>1]=0;a[p+42>>0]=0;do if(r){c[m+48>>2]=1;sb[c[(c[g>>2]|0)+20>>2]&63](g,m,h,h,1,0);d=(c[j>>2]|0)==1?h:0}else{hb[c[(c[g>>2]|0)+24>>2]&63](g,m,h,1,0);g=c[m+36>>2]|0;if(!g){if((c[l>>2]|0)!=1){d=0;break}if((c[d>>2]|0)!=1){d=0;break}d=(c[k>>2]|0)==1?c[o>>2]|0:0;break}else if((g|0)!=1){d=0;break}if((c[j>>2]|0)!=1){if(c[l>>2]|0){d=0;break}if((c[d>>2]|0)!=1){d=0;break}if((c[k>>2]|0)!=1){d=0;break}}d=c[n>>2]|0}while(0);i=f;return d|0}function GB(b,d,e,f){b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0;g=i;a[b+53>>0]=1;if((c[b+4>>2]|0)!=(e|0)){i=g;return}a[b+52>>0]=1;e=b+16|0;h=c[e>>2]|0;if(!h){c[e>>2]=d;c[b+24>>2]=f;c[b+36>>2]=1;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}if((h|0)!=(d|0)){h=b+36|0;c[h>>2]=(c[h>>2]|0)+1;a[b+54>>0]=1;i=g;return}d=b+24|0;e=c[d>>2]|0;if((e|0)==2)c[d>>2]=f;else f=e;if(!((f|0)==1?(c[b+48>>2]|0)==1:0)){i=g;return}a[b+54>>0]=1;i=g;return}function HB(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}e=d+28|0;if((c[e>>2]|0)==1){i=h;return}c[e>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){u=c[b+12>>2]|0;m=b+(u<<3)+16|0;JB(b+16|0,d,e,f,g);n=b+24|0;if((u|0)<=1){i=h;return}p=c[b+8>>2]|0;if((p&2|0)==0?(o=d+36|0,(c[o>>2]|0)!=1):0){if(!(p&1)){q=d+54|0;p=n;while(1){if(a[q>>0]|0){p=43;break}if((c[o>>2]|0)==1){p=43;break}JB(p,d,e,f,g);p=p+8|0;if(p>>>0>=m>>>0){p=43;break}}if((p|0)==43){i=h;return}}p=d+24|0;q=d+54|0;r=n;while(1){if(a[q>>0]|0){p=43;break}if((c[o>>2]|0)==1?(c[p>>2]|0)==1:0){p=43;break}JB(r,d,e,f,g);r=r+8|0;if(r>>>0>=m>>>0){p=43;break}}if((p|0)==43){i=h;return}}o=d+54|0;while(1){if(a[o>>0]|0){p=43;break}JB(n,d,e,f,g);n=n+8|0;if(n>>>0>=m>>>0){p=43;break}}if((p|0)==43){i=h;return}}if((c[d+16>>2]|0)!=(e|0)?(j=d+20|0,(c[j>>2]|0)!=(e|0)):0){c[d+32>>2]=f;m=d+44|0;if((c[m>>2]|0)==4){i=h;return}u=c[b+12>>2]|0;t=b+(u<<3)+16|0;a:do if((u|0)>0){o=d+52|0;n=d+53|0;r=d+54|0;q=b+8|0;p=d+24|0;u=0;s=0;b=b+16|0;b:do{a[o>>0]=0;a[n>>0]=0;IB(b,d,e,e,1,g);if(a[r>>0]|0)break;do if(a[n>>0]|0){if(!(a[o>>0]|0))if(!(c[q>>2]&1)){s=1;break b}else{s=1;break}if((c[p>>2]|0)==1){p=25;break a}if(!(c[q>>2]&2)){p=25;break a}else{u=1;s=1}}while(0);b=b+8|0}while(b>>>0<t>>>0);if(u){l=s;p=24}else{k=s;p=21}}else{k=0;p=21}while(0);if((p|0)==21){c[j>>2]=e;u=d+40|0;c[u>>2]=(c[u>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(k)p=25;else p=26}else{l=k;p=24}}if((p|0)==24)if(l)p=25;else p=26;if((p|0)==25){c[m>>2]=3;i=h;return}else if((p|0)==26){c[m>>2]=4;i=h;return}}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function IB(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0;h=i;j=c[a+4>>2]|0;k=j>>8;if(j&1)k=c[(c[e>>2]|0)+k>>2]|0;a=c[a>>2]|0;sb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e+k|0,(j&2|0)!=0?f:2,g);i=h;return}function JB(a,b,d,e,f){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;var g=0,h=0,j=0;g=i;h=c[a+4>>2]|0;j=h>>8;if(h&1)j=c[(c[d>>2]|0)+j>>2]|0;a=c[a>>2]|0;hb[c[(c[a>>2]|0)+24>>2]&63](a,b,d+j|0,(h&2|0)!=0?e:2,f);i=g;return}function KB(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0,j=0,k=0,l=0,m=0;h=i;if((b|0)==(c[d+8>>2]|0)){if((c[d+4>>2]|0)!=(e|0)){i=h;return}j=d+28|0;if((c[j>>2]|0)==1){i=h;return}c[j>>2]=f;i=h;return}if((b|0)!=(c[d>>2]|0)){l=c[b+8>>2]|0;hb[c[(c[l>>2]|0)+24>>2]&63](l,d,e,f,g);i=h;return}if((c[d+16>>2]|0)!=(e|0)?(k=d+20|0,(c[k>>2]|0)!=(e|0)):0){c[d+32>>2]=f;f=d+44|0;if((c[f>>2]|0)==4){i=h;return}l=d+52|0;a[l>>0]=0;m=d+53|0;a[m>>0]=0;b=c[b+8>>2]|0;sb[c[(c[b>>2]|0)+20>>2]&63](b,d,e,e,1,g);if(a[m>>0]|0){if(!(a[l>>0]|0)){b=1;j=13}}else{b=0;j=13}do if((j|0)==13){c[k>>2]=e;m=d+40|0;c[m>>2]=(c[m>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0){a[d+54>>0]=1;if(b)break}else j=16;if((j|0)==16?b:0)break;c[f>>2]=4;i=h;return}while(0);c[f>>2]=3;i=h;return}if((f|0)!=1){i=h;return}c[d+32>>2]=1;i=h;return}function LB(b,d,e,f,g){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;g=i;if((c[d+8>>2]|0)==(b|0)){if((c[d+4>>2]|0)!=(e|0)){i=g;return}d=d+28|0;if((c[d>>2]|0)==1){i=g;return}c[d>>2]=f;i=g;return}if((c[d>>2]|0)!=(b|0)){i=g;return}if((c[d+16>>2]|0)!=(e|0)?(h=d+20|0,(c[h>>2]|0)!=(e|0)):0){c[d+32>>2]=f;c[h>>2]=e;b=d+40|0;c[b>>2]=(c[b>>2]|0)+1;if((c[d+36>>2]|0)==1?(c[d+24>>2]|0)==2:0)a[d+54>>0]=1;c[d+44>>2]=4;i=g;return}if((f|0)!=1){i=g;return}c[d+32>>2]=1;i=g;return}function MB(b,d,e,f,g,h){b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;h=h|0;var j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0;m=i;if((b|0)==(c[d+8>>2]|0)){GB(d,e,f,g);i=m;return}j=d+52|0;l=a[j>>0]|0;o=d+53|0;n=a[o>>0]|0;r=c[b+12>>2]|0;p=b+(r<<3)+16|0;a[j>>0]=0;a[o>>0]=0;IB(b+16|0,d,e,f,g,h);a:do if((r|0)>1){k=d+24|0;q=b+8|0;r=d+54|0;b=b+24|0;do{if(a[r>>0]|0)break a;if(!(a[j>>0]|0)){if((a[o>>0]|0)!=0?(c[q>>2]&1|0)==0:0)break a}else{if((c[k>>2]|0)==1)break a;if(!(c[q>>2]&2))break a}a[j>>0]=0;a[o>>0]=0;IB(b,d,e,f,g,h);b=b+8|0}while(b>>>0<p>>>0)}while(0);a[j>>0]=l;a[o>>0]=n;i=m;return}function NB(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;var h=0;h=i;if((a|0)==(c[b+8>>2]|0)){GB(b,d,e,f);i=h;return}else{a=c[a+8>>2]|0;sb[c[(c[a>>2]|0)+20>>2]&63](a,b,d,e,f,g);i=h;return}}function OB(a,b,d,e,f,g){a=a|0;b=b|0;d=d|0;e=e|0;f=f|0;g=g|0;g=i;if((c[b+8>>2]|0)!=(a|0)){i=g;return}GB(b,d,e,f);i=g;return}function PB(a,b,d){a=a|0;b=b|0;d=d|0;var e=0,f=0;e=i;i=i+16|0;f=e;c[f>>2]=c[d>>2];a=gb[c[(c[a>>2]|0)+16>>2]&63](a,b,f)|0;b=a&1;if(!a){i=e;return b|0}c[d>>2]=c[f>>2];i=e;return b|0}function QB(a){a=a|0;var b=0;b=i;if(!a)a=0;else a=(FB(a,19056)|0)!=0;i=b;return a&1|0}function RB(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0,G=0,H=0;b=i;do if(a>>>0<245){if(a>>>0<11)a=16;else a=a+11&-8;v=a>>>3;p=c[4826]|0;w=p>>>v;if(w&3){h=(w&1^1)+v|0;g=h<<1;e=19344+(g<<2)|0;g=19344+(g+2<<2)|0;j=c[g>>2]|0;d=j+8|0;f=c[d>>2]|0;do if((e|0)!=(f|0)){if(f>>>0<(c[4830]|0)>>>0)$a();k=f+12|0;if((c[k>>2]|0)==(j|0)){c[k>>2]=e;c[g>>2]=f;break}else $a()}else c[4826]=p&~(1<<h);while(0);H=h<<3;c[j+4>>2]=H|3;H=j+(H|4)|0;c[H>>2]=c[H>>2]|1;H=d;i=b;return H|0}if(a>>>0>(c[4828]|0)>>>0){if(w){h=2<<v;h=w<<v&(h|0-h);h=(h&0-h)+ -1|0;d=h>>>12&16;h=h>>>d;f=h>>>5&8;h=h>>>f;g=h>>>2&4;h=h>>>g;e=h>>>1&2;h=h>>>e;j=h>>>1&1;j=(f|d|g|e|j)+(h>>>j)|0;h=j<<1;e=19344+(h<<2)|0;h=19344+(h+2<<2)|0;g=c[h>>2]|0;d=g+8|0;f=c[d>>2]|0;do if((e|0)!=(f|0)){if(f>>>0<(c[4830]|0)>>>0)$a();k=f+12|0;if((c[k>>2]|0)==(g|0)){c[k>>2]=e;c[h>>2]=f;break}else $a()}else c[4826]=p&~(1<<j);while(0);h=j<<3;f=h-a|0;c[g+4>>2]=a|3;e=g+a|0;c[g+(a|4)>>2]=f|1;c[g+h>>2]=f;h=c[4828]|0;if(h){g=c[4831]|0;k=h>>>3;j=k<<1;h=19344+(j<<2)|0;l=c[4826]|0;k=1<<k;if(l&k){j=19344+(j+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[4830]|0)>>>0)$a();else{D=j;C=k}}else{c[4826]=l|k;D=19344+(j+2<<2)|0;C=h}c[D>>2]=g;c[C+12>>2]=g;c[g+8>>2]=C;c[g+12>>2]=h}c[4828]=f;c[4831]=e;H=d;i=b;return H|0}p=c[4827]|0;if(p){e=(p&0-p)+ -1|0;G=e>>>12&16;e=e>>>G;F=e>>>5&8;e=e>>>F;H=e>>>2&4;e=e>>>H;f=e>>>1&2;e=e>>>f;d=e>>>1&1;d=c[19608+((F|G|H|f|d)+(e>>>d)<<2)>>2]|0;e=(c[d+4>>2]&-8)-a|0;f=d;while(1){g=c[f+16>>2]|0;if(!g){g=c[f+20>>2]|0;if(!g)break}f=(c[g+4>>2]&-8)-a|0;H=f>>>0<e>>>0;e=H?f:e;f=g;d=H?g:d}h=c[4830]|0;if(d>>>0<h>>>0)$a();f=d+a|0;if(d>>>0>=f>>>0)$a();g=c[d+24>>2]|0;k=c[d+12>>2]|0;do if((k|0)==(d|0)){k=d+20|0;j=c[k>>2]|0;if(!j){k=d+16|0;j=c[k>>2]|0;if(!j){B=0;break}}while(1){l=j+20|0;m=c[l>>2]|0;if(m){j=m;k=l;continue}m=j+16|0;l=c[m>>2]|0;if(!l)break;else{j=l;k=m}}if(k>>>0<h>>>0)$a();else{c[k>>2]=0;B=j;break}}else{j=c[d+8>>2]|0;if(j>>>0<h>>>0)$a();h=j+12|0;if((c[h>>2]|0)!=(d|0))$a();l=k+8|0;if((c[l>>2]|0)==(d|0)){c[h>>2]=k;c[l>>2]=j;B=k;break}else $a()}while(0);do if(g){h=c[d+28>>2]|0;j=19608+(h<<2)|0;if((d|0)==(c[j>>2]|0)){c[j>>2]=B;if(!B){c[4827]=c[4827]&~(1<<h);break}}else{if(g>>>0<(c[4830]|0)>>>0)$a();h=g+16|0;if((c[h>>2]|0)==(d|0))c[h>>2]=B;else c[g+20>>2]=B;if(!B)break}if(B>>>0<(c[4830]|0)>>>0)$a();c[B+24>>2]=g;g=c[d+16>>2]|0;do if(g)if(g>>>0<(c[4830]|0)>>>0)$a();else{c[B+16>>2]=g;c[g+24>>2]=B;break}while(0);g=c[d+20>>2]|0;if(g)if(g>>>0<(c[4830]|0)>>>0)$a();else{c[B+20>>2]=g;c[g+24>>2]=B;break}}while(0);if(e>>>0<16){H=e+a|0;c[d+4>>2]=H|3;H=d+(H+4)|0;c[H>>2]=c[H>>2]|1}else{c[d+4>>2]=a|3;c[d+(a|4)>>2]=e|1;c[d+(e+a)>>2]=e;h=c[4828]|0;if(h){g=c[4831]|0;l=h>>>3;j=l<<1;h=19344+(j<<2)|0;k=c[4826]|0;l=1<<l;if(k&l){j=19344+(j+2<<2)|0;k=c[j>>2]|0;if(k>>>0<(c[4830]|0)>>>0)$a();else{A=j;z=k}}else{c[4826]=k|l;A=19344+(j+2<<2)|0;z=h}c[A>>2]=g;c[z+12>>2]=g;c[g+8>>2]=z;c[g+12>>2]=h}c[4828]=e;c[4831]=f}H=d+8|0;i=b;return H|0}}}else if(a>>>0<=4294967231){z=a+11|0;a=z&-8;B=c[4827]|0;if(B){A=0-a|0;z=z>>>8;if(z)if(a>>>0>16777215)C=31;else{G=(z+1048320|0)>>>16&8;H=z<<G;F=(H+520192|0)>>>16&4;H=H<<F;C=(H+245760|0)>>>16&2;C=14-(F|G|C)+(H<<C>>>15)|0;C=a>>>(C+7|0)&1|C<<1}else C=0;D=c[19608+(C<<2)>>2]|0;a:do if(!D){F=0;z=0}else{if((C|0)==31)z=0;else z=25-(C>>>1)|0;F=0;E=a<<z;z=0;while(1){H=c[D+4>>2]&-8;G=H-a|0;if(G>>>0<A>>>0)if((H|0)==(a|0)){A=G;F=D;z=D;break a}else{A=G;z=D}H=c[D+20>>2]|0;D=c[D+(E>>>31<<2)+16>>2]|0;F=(H|0)==0|(H|0)==(D|0)?F:H;if(!D)break;else E=E<<1}}while(0);if((F|0)==0&(z|0)==0){H=2<<C;B=B&(H|0-H);if(!B)break;H=(B&0-B)+ -1|0;D=H>>>12&16;H=H>>>D;C=H>>>5&8;H=H>>>C;E=H>>>2&4;H=H>>>E;G=H>>>1&2;H=H>>>G;F=H>>>1&1;F=c[19608+((C|D|E|G|F)+(H>>>F)<<2)>>2]|0}if(F)while(1){H=(c[F+4>>2]&-8)-a|0;B=H>>>0<A>>>0;A=B?H:A;z=B?F:z;B=c[F+16>>2]|0;if(B){F=B;continue}F=c[F+20>>2]|0;if(!F)break}if((z|0)!=0?A>>>0<((c[4828]|0)-a|0)>>>0:0){f=c[4830]|0;if(z>>>0<f>>>0)$a();d=z+a|0;if(z>>>0>=d>>>0)$a();e=c[z+24>>2]|0;h=c[z+12>>2]|0;do if((h|0)==(z|0)){h=z+20|0;g=c[h>>2]|0;if(!g){h=z+16|0;g=c[h>>2]|0;if(!g){x=0;break}}while(1){j=g+20|0;k=c[j>>2]|0;if(k){g=k;h=j;continue}j=g+16|0;k=c[j>>2]|0;if(!k)break;else{g=k;h=j}}if(h>>>0<f>>>0)$a();else{c[h>>2]=0;x=g;break}}else{g=c[z+8>>2]|0;if(g>>>0<f>>>0)$a();f=g+12|0;if((c[f>>2]|0)!=(z|0))$a();j=h+8|0;if((c[j>>2]|0)==(z|0)){c[f>>2]=h;c[j>>2]=g;x=h;break}else $a()}while(0);do if(e){g=c[z+28>>2]|0;f=19608+(g<<2)|0;if((z|0)==(c[f>>2]|0)){c[f>>2]=x;if(!x){c[4827]=c[4827]&~(1<<g);break}}else{if(e>>>0<(c[4830]|0)>>>0)$a();f=e+16|0;if((c[f>>2]|0)==(z|0))c[f>>2]=x;else c[e+20>>2]=x;if(!x)break}if(x>>>0<(c[4830]|0)>>>0)$a();c[x+24>>2]=e;e=c[z+16>>2]|0;do if(e)if(e>>>0<(c[4830]|0)>>>0)$a();else{c[x+16>>2]=e;c[e+24>>2]=x;break}while(0);e=c[z+20>>2]|0;if(e)if(e>>>0<(c[4830]|0)>>>0)$a();else{c[x+20>>2]=e;c[e+24>>2]=x;break}}while(0);b:do if(A>>>0>=16){c[z+4>>2]=a|3;c[z+(a|4)>>2]=A|1;c[z+(A+a)>>2]=A;f=A>>>3;if(A>>>0<256){h=f<<1;e=19344+(h<<2)|0;g=c[4826]|0;f=1<<f;do if(!(g&f)){c[4826]=g|f;w=19344+(h+2<<2)|0;v=e}else{f=19344+(h+2<<2)|0;g=c[f>>2]|0;if(g>>>0>=(c[4830]|0)>>>0){w=f;v=g;break}$a()}while(0);c[w>>2]=d;c[v+12>>2]=d;c[z+(a+8)>>2]=v;c[z+(a+12)>>2]=e;break}e=A>>>8;if(e)if(A>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=A>>>(e+7|0)&1|e<<1}else e=0;f=19608+(e<<2)|0;c[z+(a+28)>>2]=e;c[z+(a+20)>>2]=0;c[z+(a+16)>>2]=0;h=c[4827]|0;g=1<<e;if(!(h&g)){c[4827]=h|g;c[f>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break}f=c[f>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;c:do if((c[f+4>>2]&-8|0)!=(A|0)){e=A<<e;while(1){g=f+(e>>>31<<2)+16|0;h=c[g>>2]|0;if(!h)break;if((c[h+4>>2]&-8|0)==(A|0)){p=h;break c}else{e=e<<1;f=h}}if(g>>>0<(c[4830]|0)>>>0)$a();else{c[g>>2]=d;c[z+(a+24)>>2]=f;c[z+(a+12)>>2]=d;c[z+(a+8)>>2]=d;break b}}else p=f;while(0);f=p+8|0;e=c[f>>2]|0;g=c[4830]|0;if(p>>>0<g>>>0)$a();if(e>>>0<g>>>0)$a();else{c[e+12>>2]=d;c[f>>2]=d;c[z+(a+8)>>2]=e;c[z+(a+12)>>2]=p;c[z+(a+24)>>2]=0;break}}else{H=A+a|0;c[z+4>>2]=H|3;H=z+(H+4)|0;c[H>>2]=c[H>>2]|1}while(0);H=z+8|0;i=b;return H|0}}}else a=-1;while(0);p=c[4828]|0;if(a>>>0<=p>>>0){e=p-a|0;d=c[4831]|0;if(e>>>0>15){c[4831]=d+a;c[4828]=e;c[d+(a+4)>>2]=e|1;c[d+p>>2]=e;c[d+4>>2]=a|3}else{c[4828]=0;c[4831]=0;c[d+4>>2]=p|3;H=d+(p+4)|0;c[H>>2]=c[H>>2]|1}H=d+8|0;i=b;return H|0}p=c[4829]|0;if(a>>>0<p>>>0){G=p-a|0;c[4829]=G;H=c[4832]|0;c[4832]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}do if(!(c[4944]|0)){p=Oa(30)|0;if(!(p+ -1&p)){c[4946]=p;c[4945]=p;c[4947]=-1;c[4948]=-1;c[4949]=0;c[4937]=0;c[4944]=(bb(0)|0)&-16^1431655768;break}else $a()}while(0);w=a+48|0;p=c[4946]|0;x=a+47|0;z=p+x|0;p=0-p|0;v=z&p;if(v>>>0<=a>>>0){H=0;i=b;return H|0}A=c[4936]|0;if((A|0)!=0?(G=c[4934]|0,H=G+v|0,H>>>0<=G>>>0|H>>>0>A>>>0):0){H=0;i=b;return H|0}d:do if(!(c[4937]&4)){B=c[4832]|0;e:do if(B){A=19752|0;while(1){C=c[A>>2]|0;if(C>>>0<=B>>>0?(y=A+4|0,(C+(c[y>>2]|0)|0)>>>0>B>>>0):0)break;A=c[A+8>>2]|0;if(!A){o=182;break e}}if(A){B=z-(c[4829]|0)&p;if(B>>>0<2147483647){p=Ia(B|0)|0;A=(p|0)==((c[A>>2]|0)+(c[y>>2]|0)|0);y=p;z=B;p=A?p:-1;A=A?B:0;o=191}else A=0}else o=182}else o=182;while(0);do if((o|0)==182){p=Ia(0)|0;if((p|0)!=(-1|0)){z=p;A=c[4945]|0;y=A+ -1|0;if(!(y&z))A=v;else A=v-z+(y+z&0-A)|0;y=c[4934]|0;z=y+A|0;if(A>>>0>a>>>0&A>>>0<2147483647){H=c[4936]|0;if((H|0)!=0?z>>>0<=y>>>0|z>>>0>H>>>0:0){A=0;break}y=Ia(A|0)|0;o=(y|0)==(p|0);z=A;p=o?p:-1;A=o?A:0;o=191}else A=0}else A=0}while(0);f:do if((o|0)==191){o=0-z|0;if((p|0)!=(-1|0)){q=A;o=202;break d}do if((y|0)!=(-1|0)&z>>>0<2147483647&z>>>0<w>>>0?(u=c[4946]|0,u=x-z+u&0-u,u>>>0<2147483647):0)if((Ia(u|0)|0)==(-1|0)){Ia(o|0)|0;break f}else{z=u+z|0;break}while(0);if((y|0)!=(-1|0)){p=y;q=z;o=202;break d}}while(0);c[4937]=c[4937]|4;o=199}else{A=0;o=199}while(0);if((((o|0)==199?v>>>0<2147483647:0)?(t=Ia(v|0)|0,s=Ia(0)|0,(s|0)!=(-1|0)&(t|0)!=(-1|0)&t>>>0<s>>>0):0)?(r=s-t|0,q=r>>>0>(a+40|0)>>>0,q):0){p=t;q=q?r:A;o=202}if((o|0)==202){r=(c[4934]|0)+q|0;c[4934]=r;if(r>>>0>(c[4935]|0)>>>0)c[4935]=r;r=c[4832]|0;g:do if(r){v=19752|0;while(1){t=c[v>>2]|0;u=v+4|0;s=c[u>>2]|0;if((p|0)==(t+s|0)){o=214;break}w=c[v+8>>2]|0;if(!w)break;else v=w}if(((o|0)==214?(c[v+12>>2]&8|0)==0:0)?r>>>0>=t>>>0&r>>>0<p>>>0:0){c[u>>2]=s+q;d=(c[4829]|0)+q|0;e=r+8|0;if(!(e&7))e=0;else e=0-e&7;H=d-e|0;c[4832]=r+e;c[4829]=H;c[r+(e+4)>>2]=H|1;c[r+(d+4)>>2]=40;c[4833]=c[4948];break}if(p>>>0<(c[4830]|0)>>>0)c[4830]=p;t=p+q|0;s=19752|0;while(1){if((c[s>>2]|0)==(t|0)){o=224;break}u=c[s+8>>2]|0;if(!u)break;else s=u}if((o|0)==224?(c[s+12>>2]&8|0)==0:0){c[s>>2]=p;h=s+4|0;c[h>>2]=(c[h>>2]|0)+q;h=p+8|0;if(!(h&7))h=0;else h=0-h&7;j=p+(q+8)|0;if(!(j&7))n=0;else n=0-j&7;o=p+(n+q)|0;j=h+a|0;k=p+j|0;m=o-(p+h)-a|0;c[p+(h+4)>>2]=a|3;h:do if((o|0)!=(c[4832]|0)){if((o|0)==(c[4831]|0)){H=(c[4828]|0)+m|0;c[4828]=H;c[4831]=k;c[p+(j+4)>>2]=H|1;c[p+(H+j)>>2]=H;break}r=q+4|0;t=c[p+(r+n)>>2]|0;if((t&3|0)==1){a=t&-8;s=t>>>3;i:do if(t>>>0>=256){l=c[p+((n|24)+q)>>2]|0;u=c[p+(q+12+n)>>2]|0;do if((u|0)==(o|0)){u=n|16;t=p+(r+u)|0;s=c[t>>2]|0;if(!s){t=p+(u+q)|0;s=c[t>>2]|0;if(!s){g=0;break}}while(1){u=s+20|0;v=c[u>>2]|0;if(v){s=v;t=u;continue}u=s+16|0;v=c[u>>2]|0;if(!v)break;else{s=v;t=u}}if(t>>>0<(c[4830]|0)>>>0)$a();else{c[t>>2]=0;g=s;break}}else{t=c[p+((n|8)+q)>>2]|0;if(t>>>0<(c[4830]|0)>>>0)$a();v=t+12|0;if((c[v>>2]|0)!=(o|0))$a();s=u+8|0;if((c[s>>2]|0)==(o|0)){c[v>>2]=u;c[s>>2]=t;g=u;break}else $a()}while(0);if(!l)break;t=c[p+(q+28+n)>>2]|0;s=19608+(t<<2)|0;do if((o|0)!=(c[s>>2]|0)){if(l>>>0<(c[4830]|0)>>>0)$a();s=l+16|0;if((c[s>>2]|0)==(o|0))c[s>>2]=g;else c[l+20>>2]=g;if(!g)break i}else{c[s>>2]=g;if(g)break;c[4827]=c[4827]&~(1<<t);break i}while(0);if(g>>>0<(c[4830]|0)>>>0)$a();c[g+24>>2]=l;l=n|16;o=c[p+(l+q)>>2]|0;do if(o)if(o>>>0<(c[4830]|0)>>>0)$a();else{c[g+16>>2]=o;c[o+24>>2]=g;break}while(0);l=c[p+(r+l)>>2]|0;if(!l)break;if(l>>>0<(c[4830]|0)>>>0)$a();else{c[g+20>>2]=l;c[l+24>>2]=g;break}}else{r=c[p+((n|8)+q)>>2]|0;g=c[p+(q+12+n)>>2]|0;t=19344+(s<<1<<2)|0;do if((r|0)!=(t|0)){if(r>>>0<(c[4830]|0)>>>0)$a();if((c[r+12>>2]|0)==(o|0))break;$a()}while(0);if((g|0)==(r|0)){c[4826]=c[4826]&~(1<<s);break}do if((g|0)==(t|0))l=g+8|0;else{if(g>>>0<(c[4830]|0)>>>0)$a();s=g+8|0;if((c[s>>2]|0)==(o|0)){l=s;break}$a()}while(0);c[r+12>>2]=g;c[l>>2]=r}while(0);o=p+((a|n)+q)|0;m=a+m|0}g=o+4|0;c[g>>2]=c[g>>2]&-2;c[p+(j+4)>>2]=m|1;c[p+(m+j)>>2]=m;g=m>>>3;if(m>>>0<256){m=g<<1;d=19344+(m<<2)|0;l=c[4826]|0;g=1<<g;do if(!(l&g)){c[4826]=l|g;f=19344+(m+2<<2)|0;e=d}else{l=19344+(m+2<<2)|0;g=c[l>>2]|0;if(g>>>0>=(c[4830]|0)>>>0){f=l;e=g;break}$a()}while(0);c[f>>2]=k;c[e+12>>2]=k;c[p+(j+8)>>2]=e;c[p+(j+12)>>2]=d;break}e=m>>>8;do if(!e)e=0;else{if(m>>>0>16777215){e=31;break}G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=m>>>(e+7|0)&1|e<<1}while(0);l=19608+(e<<2)|0;c[p+(j+28)>>2]=e;c[p+(j+20)>>2]=0;c[p+(j+16)>>2]=0;f=c[4827]|0;g=1<<e;if(!(f&g)){c[4827]=f|g;c[l>>2]=k;c[p+(j+24)>>2]=l;c[p+(j+12)>>2]=k;c[p+(j+8)>>2]=k;break}l=c[l>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;j:do if((c[l+4>>2]&-8|0)!=(m|0)){e=m<<e;while(1){g=l+(e>>>31<<2)+16|0;f=c[g>>2]|0;if(!f)break;if((c[f+4>>2]&-8|0)==(m|0)){d=f;break j}else{e=e<<1;l=f}}if(g>>>0<(c[4830]|0)>>>0)$a();else{c[g>>2]=k;c[p+(j+24)>>2]=l;c[p+(j+12)>>2]=k;c[p+(j+8)>>2]=k;break h}}else d=l;while(0);f=d+8|0;e=c[f>>2]|0;g=c[4830]|0;if(d>>>0<g>>>0)$a();if(e>>>0<g>>>0)$a();else{c[e+12>>2]=k;c[f>>2]=k;c[p+(j+8)>>2]=e;c[p+(j+12)>>2]=d;c[p+(j+24)>>2]=0;break}}else{H=(c[4829]|0)+m|0;c[4829]=H;c[4832]=k;c[p+(j+4)>>2]=H|1}while(0);H=p+(h|8)|0;i=b;return H|0}e=19752|0;while(1){d=c[e>>2]|0;if(d>>>0<=r>>>0?(n=c[e+4>>2]|0,m=d+n|0,m>>>0>r>>>0):0)break;e=c[e+8>>2]|0}e=d+(n+ -39)|0;if(!(e&7))e=0;else e=0-e&7;d=d+(n+ -47+e)|0;d=d>>>0<(r+16|0)>>>0?r:d;e=d+8|0;f=p+8|0;if(!(f&7))f=0;else f=0-f&7;H=q+ -40-f|0;c[4832]=p+f;c[4829]=H;c[p+(f+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[4833]=c[4948];c[d+4>>2]=27;c[e+0>>2]=c[4938];c[e+4>>2]=c[4939];c[e+8>>2]=c[4940];c[e+12>>2]=c[4941];c[4938]=p;c[4939]=q;c[4941]=0;c[4940]=e;e=d+28|0;c[e>>2]=7;if((d+32|0)>>>0<m>>>0)do{H=e;e=e+4|0;c[e>>2]=7}while((H+8|0)>>>0<m>>>0);if((d|0)!=(r|0)){d=d-r|0;e=r+(d+4)|0;c[e>>2]=c[e>>2]&-2;c[r+4>>2]=d|1;c[r+d>>2]=d;e=d>>>3;if(d>>>0<256){g=e<<1;d=19344+(g<<2)|0;f=c[4826]|0;e=1<<e;do if(!(f&e)){c[4826]=f|e;k=19344+(g+2<<2)|0;j=d}else{f=19344+(g+2<<2)|0;e=c[f>>2]|0;if(e>>>0>=(c[4830]|0)>>>0){k=f;j=e;break}$a()}while(0);c[k>>2]=r;c[j+12>>2]=r;c[r+8>>2]=j;c[r+12>>2]=d;break}e=d>>>8;if(e)if(d>>>0>16777215)e=31;else{G=(e+1048320|0)>>>16&8;H=e<<G;F=(H+520192|0)>>>16&4;H=H<<F;e=(H+245760|0)>>>16&2;e=14-(F|G|e)+(H<<e>>>15)|0;e=d>>>(e+7|0)&1|e<<1}else e=0;j=19608+(e<<2)|0;c[r+28>>2]=e;c[r+20>>2]=0;c[r+16>>2]=0;f=c[4827]|0;g=1<<e;if(!(f&g)){c[4827]=f|g;c[j>>2]=r;c[r+24>>2]=j;c[r+12>>2]=r;c[r+8>>2]=r;break}f=c[j>>2]|0;if((e|0)==31)e=0;else e=25-(e>>>1)|0;k:do if((c[f+4>>2]&-8|0)!=(d|0)){e=d<<e;while(1){j=f+(e>>>31<<2)+16|0;g=c[j>>2]|0;if(!g)break;if((c[g+4>>2]&-8|0)==(d|0)){h=g;break k}else{e=e<<1;f=g}}if(j>>>0<(c[4830]|0)>>>0)$a();else{c[j>>2]=r;c[r+24>>2]=f;c[r+12>>2]=r;c[r+8>>2]=r;break g}}else h=f;while(0);f=h+8|0;e=c[f>>2]|0;d=c[4830]|0;if(h>>>0<d>>>0)$a();if(e>>>0<d>>>0)$a();else{c[e+12>>2]=r;c[f>>2]=r;c[r+8>>2]=e;c[r+12>>2]=h;c[r+24>>2]=0;break}}}else{H=c[4830]|0;if((H|0)==0|p>>>0<H>>>0)c[4830]=p;c[4938]=p;c[4939]=q;c[4941]=0;c[4835]=c[4944];c[4834]=-1;d=0;do{H=d<<1;G=19344+(H<<2)|0;c[19344+(H+3<<2)>>2]=G;c[19344+(H+2<<2)>>2]=G;d=d+1|0}while((d|0)!=32);d=p+8|0;if(!(d&7))d=0;else d=0-d&7;H=q+ -40-d|0;c[4832]=p+d;c[4829]=H;c[p+(d+4)>>2]=H|1;c[p+(q+ -36)>>2]=40;c[4833]=c[4948]}while(0);d=c[4829]|0;if(d>>>0>a>>>0){G=d-a|0;c[4829]=G;H=c[4832]|0;c[4832]=H+a;c[H+(a+4)>>2]=G|1;c[H+4>>2]=a|3;H=H+8|0;i=b;return H|0}}c[(Xa()|0)>>2]=12;H=0;i=b;return H|0}function SB(a){a=a|0;var b=0,d=0,e=0,f=0,g=0,h=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,q=0,r=0,s=0,t=0,u=0,v=0,w=0;b=i;if(!a){i=b;return}q=a+ -8|0;r=c[4830]|0;if(q>>>0<r>>>0)$a();o=c[a+ -4>>2]|0;n=o&3;if((n|0)==1)$a();j=o&-8;h=a+(j+ -8)|0;do if(!(o&1)){u=c[q>>2]|0;if(!n){i=b;return}q=-8-u|0;o=a+q|0;n=u+j|0;if(o>>>0<r>>>0)$a();if((o|0)==(c[4831]|0)){d=a+(j+ -4)|0;if((c[d>>2]&3|0)!=3){d=o;m=n;break}c[4828]=n;c[d>>2]=c[d>>2]&-2;c[a+(q+4)>>2]=n|1;c[h>>2]=n;i=b;return}t=u>>>3;if(u>>>0<256){d=c[a+(q+8)>>2]|0;m=c[a+(q+12)>>2]|0;p=19344+(t<<1<<2)|0;if((d|0)!=(p|0)){if(d>>>0<r>>>0)$a();if((c[d+12>>2]|0)!=(o|0))$a()}if((m|0)==(d|0)){c[4826]=c[4826]&~(1<<t);d=o;m=n;break}if((m|0)!=(p|0)){if(m>>>0<r>>>0)$a();p=m+8|0;if((c[p>>2]|0)==(o|0))s=p;else $a()}else s=m+8|0;c[d+12>>2]=m;c[s>>2]=d;d=o;m=n;break}s=c[a+(q+24)>>2]|0;t=c[a+(q+12)>>2]|0;do if((t|0)==(o|0)){u=a+(q+20)|0;t=c[u>>2]|0;if(!t){u=a+(q+16)|0;t=c[u>>2]|0;if(!t){p=0;break}}while(1){w=t+20|0;v=c[w>>2]|0;if(v){t=v;u=w;continue}v=t+16|0;w=c[v>>2]|0;if(!w)break;else{t=w;u=v}}if(u>>>0<r>>>0)$a();else{c[u>>2]=0;p=t;break}}else{u=c[a+(q+8)>>2]|0;if(u>>>0<r>>>0)$a();r=u+12|0;if((c[r>>2]|0)!=(o|0))$a();v=t+8|0;if((c[v>>2]|0)==(o|0)){c[r>>2]=t;c[v>>2]=u;p=t;break}else $a()}while(0);if(s){t=c[a+(q+28)>>2]|0;r=19608+(t<<2)|0;if((o|0)==(c[r>>2]|0)){c[r>>2]=p;if(!p){c[4827]=c[4827]&~(1<<t);d=o;m=n;break}}else{if(s>>>0<(c[4830]|0)>>>0)$a();r=s+16|0;if((c[r>>2]|0)==(o|0))c[r>>2]=p;else c[s+20>>2]=p;if(!p){d=o;m=n;break}}if(p>>>0<(c[4830]|0)>>>0)$a();c[p+24>>2]=s;r=c[a+(q+16)>>2]|0;do if(r)if(r>>>0<(c[4830]|0)>>>0)$a();else{c[p+16>>2]=r;c[r+24>>2]=p;break}while(0);q=c[a+(q+20)>>2]|0;if(q)if(q>>>0<(c[4830]|0)>>>0)$a();else{c[p+20>>2]=q;c[q+24>>2]=p;d=o;m=n;break}else{d=o;m=n}}else{d=o;m=n}}else{d=q;m=j}while(0);if(d>>>0>=h>>>0)$a();n=a+(j+ -4)|0;o=c[n>>2]|0;if(!(o&1))$a();if(!(o&2)){if((h|0)==(c[4832]|0)){w=(c[4829]|0)+m|0;c[4829]=w;c[4832]=d;c[d+4>>2]=w|1;if((d|0)!=(c[4831]|0)){i=b;return}c[4831]=0;c[4828]=0;i=b;return}if((h|0)==(c[4831]|0)){w=(c[4828]|0)+m|0;c[4828]=w;c[4831]=d;c[d+4>>2]=w|1;c[d+w>>2]=w;i=b;return}m=(o&-8)+m|0;n=o>>>3;do if(o>>>0>=256){l=c[a+(j+16)>>2]|0;q=c[a+(j|4)>>2]|0;do if((q|0)==(h|0)){o=a+(j+12)|0;n=c[o>>2]|0;if(!n){o=a+(j+8)|0;n=c[o>>2]|0;if(!n){k=0;break}}while(1){p=n+20|0;q=c[p>>2]|0;if(q){n=q;o=p;continue}p=n+16|0;q=c[p>>2]|0;if(!q)break;else{n=q;o=p}}if(o>>>0<(c[4830]|0)>>>0)$a();else{c[o>>2]=0;k=n;break}}else{o=c[a+j>>2]|0;if(o>>>0<(c[4830]|0)>>>0)$a();p=o+12|0;if((c[p>>2]|0)!=(h|0))$a();n=q+8|0;if((c[n>>2]|0)==(h|0)){c[p>>2]=q;c[n>>2]=o;k=q;break}else $a()}while(0);if(l){n=c[a+(j+20)>>2]|0;o=19608+(n<<2)|0;if((h|0)==(c[o>>2]|0)){c[o>>2]=k;if(!k){c[4827]=c[4827]&~(1<<n);break}}else{if(l>>>0<(c[4830]|0)>>>0)$a();n=l+16|0;if((c[n>>2]|0)==(h|0))c[n>>2]=k;else c[l+20>>2]=k;if(!k)break}if(k>>>0<(c[4830]|0)>>>0)$a();c[k+24>>2]=l;h=c[a+(j+8)>>2]|0;do if(h)if(h>>>0<(c[4830]|0)>>>0)$a();else{c[k+16>>2]=h;c[h+24>>2]=k;break}while(0);h=c[a+(j+12)>>2]|0;if(h)if(h>>>0<(c[4830]|0)>>>0)$a();else{c[k+20>>2]=h;c[h+24>>2]=k;break}}}else{k=c[a+j>>2]|0;a=c[a+(j|4)>>2]|0;j=19344+(n<<1<<2)|0;if((k|0)!=(j|0)){if(k>>>0<(c[4830]|0)>>>0)$a();if((c[k+12>>2]|0)!=(h|0))$a()}if((a|0)==(k|0)){c[4826]=c[4826]&~(1<<n);break}if((a|0)!=(j|0)){if(a>>>0<(c[4830]|0)>>>0)$a();j=a+8|0;if((c[j>>2]|0)==(h|0))l=j;else $a()}else l=a+8|0;c[k+12>>2]=a;c[l>>2]=k}while(0);c[d+4>>2]=m|1;c[d+m>>2]=m;if((d|0)==(c[4831]|0)){c[4828]=m;i=b;return}}else{c[n>>2]=o&-2;c[d+4>>2]=m|1;c[d+m>>2]=m}h=m>>>3;if(m>>>0<256){a=h<<1;e=19344+(a<<2)|0;j=c[4826]|0;h=1<<h;if(j&h){h=19344+(a+2<<2)|0;a=c[h>>2]|0;if(a>>>0<(c[4830]|0)>>>0)$a();else{f=h;g=a}}else{c[4826]=j|h;f=19344+(a+2<<2)|0;g=e}c[f>>2]=d;c[g+12>>2]=d;c[d+8>>2]=g;c[d+12>>2]=e;i=b;return}f=m>>>8;if(f)if(m>>>0>16777215)f=31;else{v=(f+1048320|0)>>>16&8;w=f<<v;u=(w+520192|0)>>>16&4;w=w<<u;f=(w+245760|0)>>>16&2;f=14-(u|v|f)+(w<<f>>>15)|0;f=m>>>(f+7|0)&1|f<<1}else f=0;g=19608+(f<<2)|0;c[d+28>>2]=f;c[d+20>>2]=0;c[d+16>>2]=0;a=c[4827]|0;h=1<<f;a:do if(a&h){g=c[g>>2]|0;if((f|0)==31)f=0;else f=25-(f>>>1)|0;b:do if((c[g+4>>2]&-8|0)!=(m|0)){f=m<<f;a=g;while(1){h=a+(f>>>31<<2)+16|0;g=c[h>>2]|0;if(!g)break;if((c[g+4>>2]&-8|0)==(m|0)){e=g;break b}else{f=f<<1;a=g}}if(h>>>0<(c[4830]|0)>>>0)$a();else{c[h>>2]=d;c[d+24>>2]=a;c[d+12>>2]=d;c[d+8>>2]=d;break a}}else e=g;while(0);g=e+8|0;f=c[g>>2]|0;h=c[4830]|0;if(e>>>0<h>>>0)$a();if(f>>>0<h>>>0)$a();else{c[f+12>>2]=d;c[g>>2]=d;c[d+8>>2]=f;c[d+12>>2]=e;c[d+24>>2]=0;break}}else{c[4827]=a|h;c[g>>2]=d;c[d+24>>2]=g;c[d+12>>2]=d;c[d+8>>2]=d}while(0);w=(c[4834]|0)+ -1|0;c[4834]=w;if(!w)d=19760|0;else{i=b;return}while(1){d=c[d>>2]|0;if(!d)break;else d=d+8|0}c[4834]=-1;i=b;return}function TB(){}function UB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0;f=b+e|0;if((e|0)>=20){d=d&255;i=b&3;h=d|d<<8|d<<16|d<<24;g=f&~3;if(i){i=b+4-i|0;while((b|0)<(i|0)){a[b>>0]=d;b=b+1|0}}while((b|0)<(g|0)){c[b>>2]=h;b=b+4|0}}while((b|0)<(f|0)){a[b>>0]=d;b=b+1|0}return b-e|0}function VB(b){b=b|0;var c=0;c=b;while(a[c>>0]|0)c=c+1|0;return c-b|0}function WB(b,d,e){b=b|0;d=d|0;e=e|0;var f=0;if((e|0)>=4096)return Ra(b|0,d|0,e|0)|0;f=b|0;if((b&3)==(d&3)){while(b&3){if(!e)return f|0;a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}while((e|0)>=4){c[b>>2]=c[d>>2];b=b+4|0;d=d+4|0;e=e-4|0}}while((e|0)>0){a[b>>0]=a[d>>0]|0;b=b+1|0;d=d+1|0;e=e-1|0}return f|0}function XB(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;return gb[a&63](b|0,c|0,d|0)|0}function YB(a,b,c){a=a|0;b=b|0;c=c|0;return ca(0,a|0,b|0,c|0)|0}function ZB(a,b,c){a=a|0;b=b|0;c=c|0;return ca(1,a|0,b|0,c|0)|0}function _B(a,b,c){a=a|0;b=b|0;c=c|0;return ca(2,a|0,b|0,c|0)|0}function $B(a,b,c){a=a|0;b=b|0;c=c|0;return ca(3,a|0,b|0,c|0)|0}function aC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(4,a|0,b|0,c|0)|0}function bC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(5,a|0,b|0,c|0)|0}function cC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(6,a|0,b|0,c|0)|0}function dC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(7,a|0,b|0,c|0)|0}function eC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(8,a|0,b|0,c|0)|0}function fC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(9,a|0,b|0,c|0)|0}function gC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(10,a|0,b|0,c|0)|0}function hC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(11,a|0,b|0,c|0)|0}function iC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(12,a|0,b|0,c|0)|0}function jC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(13,a|0,b|0,c|0)|0}function kC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(14,a|0,b|0,c|0)|0}function lC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(15,a|0,b|0,c|0)|0}function mC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(16,a|0,b|0,c|0)|0}function nC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(17,a|0,b|0,c|0)|0}function oC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(18,a|0,b|0,c|0)|0}function pC(a,b,c){a=a|0;b=b|0;c=c|0;return ca(19,a|0,b|0,c|0)|0}function qC(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;hb[a&63](b|0,c|0,d|0,e|0,f|0)}function rC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(0,a|0,b|0,c|0,d|0,e|0)}function sC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(1,a|0,b|0,c|0,d|0,e|0)}function tC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(2,a|0,b|0,c|0,d|0,e|0)}function uC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(3,a|0,b|0,c|0,d|0,e|0)}function vC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(4,a|0,b|0,c|0,d|0,e|0)}function wC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(5,a|0,b|0,c|0,d|0,e|0)}function xC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(6,a|0,b|0,c|0,d|0,e|0)}function yC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(7,a|0,b|0,c|0,d|0,e|0)}function zC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(8,a|0,b|0,c|0,d|0,e|0)}function AC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(9,a|0,b|0,c|0,d|0,e|0)}function BC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(10,a|0,b|0,c|0,d|0,e|0)}function CC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(11,a|0,b|0,c|0,d|0,e|0)}function DC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(12,a|0,b|0,c|0,d|0,e|0)}function EC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(13,a|0,b|0,c|0,d|0,e|0)}function FC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(14,a|0,b|0,c|0,d|0,e|0)}function GC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(15,a|0,b|0,c|0,d|0,e|0)}function HC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(16,a|0,b|0,c|0,d|0,e|0)}function IC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(17,a|0,b|0,c|0,d|0,e|0)}function JC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(18,a|0,b|0,c|0,d|0,e|0)}function KC(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;ca(19,a|0,b|0,c|0,d|0,e|0)}function LC(a,b,c){a=a|0;b=b|0;c=+c;return+ib[a&63](b|0,+c)}function MC(a,b){a=a|0;b=+b;return+ca(0,a|0,+b)}function NC(a,b){a=a|0;b=+b;return+ca(1,a|0,+b)}function OC(a,b){a=a|0;b=+b;return+ca(2,a|0,+b)}function PC(a,b){a=a|0;b=+b;return+ca(3,a|0,+b)}function QC(a,b){a=a|0;b=+b;return+ca(4,a|0,+b)}function RC(a,b){a=a|0;b=+b;return+ca(5,a|0,+b)}function SC(a,b){a=a|0;b=+b;return+ca(6,a|0,+b)}function TC(a,b){a=a|0;b=+b;return+ca(7,a|0,+b)}function UC(a,b){a=a|0;b=+b;return+ca(8,a|0,+b)}function VC(a,b){a=a|0;b=+b;return+ca(9,a|0,+b)}function WC(a,b){a=a|0;b=+b;return+ca(10,a|0,+b)}function XC(a,b){a=a|0;b=+b;return+ca(11,a|0,+b)}function YC(a,b){a=a|0;b=+b;return+ca(12,a|0,+b)}function ZC(a,b){a=a|0;b=+b;return+ca(13,a|0,+b)}function _C(a,b){a=a|0;b=+b;return+ca(14,a|0,+b)}function $C(a,b){a=a|0;b=+b;return+ca(15,a|0,+b)}function aD(a,b){a=a|0;b=+b;return+ca(16,a|0,+b)}function bD(a,b){a=a|0;b=+b;return+ca(17,a|0,+b)}function cD(a,b){a=a|0;b=+b;return+ca(18,a|0,+b)}function dD(a,b){a=a|0;b=+b;return+ca(19,a|0,+b)}function eD(a,b){a=a|0;b=b|0;jb[a&127](b|0)}function fD(a){a=a|0;ca(0,a|0)}function gD(a){a=a|0;ca(1,a|0)}function hD(a){a=a|0;ca(2,a|0)}function iD(a){a=a|0;ca(3,a|0)}function jD(a){a=a|0;ca(4,a|0)}function kD(a){a=a|0;ca(5,a|0)}function lD(a){a=a|0;ca(6,a|0)}function mD(a){a=a|0;ca(7,a|0)}function nD(a){a=a|0;ca(8,a|0)}function oD(a){a=a|0;ca(9,a|0)}function pD(a){a=a|0;ca(10,a|0)}function qD(a){a=a|0;ca(11,a|0)}function rD(a){a=a|0;ca(12,a|0)}function sD(a){a=a|0;ca(13,a|0)}function tD(a){a=a|0;ca(14,a|0)}function uD(a){a=a|0;ca(15,a|0)}function vD(a){a=a|0;ca(16,a|0)}function wD(a){a=a|0;ca(17,a|0)}function xD(a){a=a|0;ca(18,a|0)}function yD(a){a=a|0;ca(19,a|0)}function zD(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=+f;return+kb[a&63](b|0,c|0,d|0,e|0,+f)}function AD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(0,a|0,b|0,c|0,d|0,+e)}function BD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(1,a|0,b|0,c|0,d|0,+e)}function CD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(2,a|0,b|0,c|0,d|0,+e)}function DD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(3,a|0,b|0,c|0,d|0,+e)}function ED(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(4,a|0,b|0,c|0,d|0,+e)}function FD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(5,a|0,b|0,c|0,d|0,+e)}function GD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(6,a|0,b|0,c|0,d|0,+e)}function HD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(7,a|0,b|0,c|0,d|0,+e)}function ID(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(8,a|0,b|0,c|0,d|0,+e)}function JD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(9,a|0,b|0,c|0,d|0,+e)}function KD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(10,a|0,b|0,c|0,d|0,+e)}function LD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(11,a|0,b|0,c|0,d|0,+e)}function MD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(12,a|0,b|0,c|0,d|0,+e)}function ND(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(13,a|0,b|0,c|0,d|0,+e)}function OD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(14,a|0,b|0,c|0,d|0,+e)}function PD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(15,a|0,b|0,c|0,d|0,+e)}function QD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(16,a|0,b|0,c|0,d|0,+e)}function RD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(17,a|0,b|0,c|0,d|0,+e)}function SD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(18,a|0,b|0,c|0,d|0,+e)}function TD(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;return+ca(19,a|0,b|0,c|0,d|0,+e)}function UD(a,b,c){a=a|0;b=b|0;c=c|0;lb[a&127](b|0,c|0)}function VD(a,b){a=a|0;b=b|0;ca(0,a|0,b|0)}function WD(a,b){a=a|0;b=b|0;ca(1,a|0,b|0)}function XD(a,b){a=a|0;b=b|0;ca(2,a|0,b|0)}function YD(a,b){a=a|0;b=b|0;ca(3,a|0,b|0)}function ZD(a,b){a=a|0;b=b|0;ca(4,a|0,b|0)}function _D(a,b){a=a|0;b=b|0;ca(5,a|0,b|0)}function $D(a,b){a=a|0;b=b|0;ca(6,a|0,b|0)}function aE(a,b){a=a|0;b=b|0;ca(7,a|0,b|0)}function bE(a,b){a=a|0;b=b|0;ca(8,a|0,b|0)}function cE(a,b){a=a|0;b=b|0;ca(9,a|0,b|0)}function dE(a,b){a=a|0;b=b|0;ca(10,a|0,b|0)}function eE(a,b){a=a|0;b=b|0;ca(11,a|0,b|0)}function fE(a,b){a=a|0;b=b|0;ca(12,a|0,b|0)}function gE(a,b){a=a|0;b=b|0;ca(13,a|0,b|0)}function hE(a,b){a=a|0;b=b|0;ca(14,a|0,b|0)}function iE(a,b){a=a|0;b=b|0;ca(15,a|0,b|0)}function jE(a,b){a=a|0;b=b|0;ca(16,a|0,b|0)}function kE(a,b){a=a|0;b=b|0;ca(17,a|0,b|0)}function lE(a,b){a=a|0;b=b|0;ca(18,a|0,b|0)}function mE(a,b){a=a|0;b=b|0;ca(19,a|0,b|0)}function nE(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;f=f|0;mb[a&63](b|0,c|0,+d,e|0,f|0)}function oE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(0,a|0,b|0,+c,d|0,e|0)}function pE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(1,a|0,b|0,+c,d|0,e|0)}function qE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(2,a|0,b|0,+c,d|0,e|0)}function rE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(3,a|0,b|0,+c,d|0,e|0)}function sE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(4,a|0,b|0,+c,d|0,e|0)}function tE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(5,a|0,b|0,+c,d|0,e|0)}function uE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(6,a|0,b|0,+c,d|0,e|0)}function vE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(7,a|0,b|0,+c,d|0,e|0)}function wE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(8,a|0,b|0,+c,d|0,e|0)}function xE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(9,a|0,b|0,+c,d|0,e|0)}function yE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(10,a|0,b|0,+c,d|0,e|0)}function zE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(11,a|0,b|0,+c,d|0,e|0)}function AE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(12,a|0,b|0,+c,d|0,e|0)}function BE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(13,a|0,b|0,+c,d|0,e|0)}function CE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(14,a|0,b|0,+c,d|0,e|0)}function DE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(15,a|0,b|0,+c,d|0,e|0)}function EE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(16,a|0,b|0,+c,d|0,e|0)}function FE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(17,a|0,b|0,+c,d|0,e|0)}function GE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(18,a|0,b|0,+c,d|0,e|0)}function HE(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;ca(19,a|0,b|0,+c,d|0,e|0)}function IE(a,b){a=a|0;b=b|0;return nb[a&63](b|0)|0}function JE(a){a=a|0;return ca(0,a|0)|0}function KE(a){a=a|0;return ca(1,a|0)|0}function LE(a){a=a|0;return ca(2,a|0)|0}function ME(a){a=a|0;return ca(3,a|0)|0}function NE(a){a=a|0;return ca(4,a|0)|0}function OE(a){a=a|0;return ca(5,a|0)|0}function PE(a){a=a|0;return ca(6,a|0)|0}function QE(a){a=a|0;return ca(7,a|0)|0}function RE(a){a=a|0;return ca(8,a|0)|0}function SE(a){a=a|0;return ca(9,a|0)|0}function TE(a){a=a|0;return ca(10,a|0)|0}function UE(a){a=a|0;return ca(11,a|0)|0}function VE(a){a=a|0;return ca(12,a|0)|0}function WE(a){a=a|0;return ca(13,a|0)|0}function XE(a){a=a|0;return ca(14,a|0)|0}function YE(a){a=a|0;return ca(15,a|0)|0}function ZE(a){a=a|0;return ca(16,a|0)|0}function _E(a){a=a|0;return ca(17,a|0)|0}function $E(a){a=a|0;return ca(18,a|0)|0}function aF(a){a=a|0;return ca(19,a|0)|0}function bF(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=+d;e=e|0;ob[a&63](b|0,c|0,+d,e|0)}function cF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(0,a|0,b|0,+c,d|0)}function dF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(1,a|0,b|0,+c,d|0)}function eF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(2,a|0,b|0,+c,d|0)}function fF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(3,a|0,b|0,+c,d|0)}function gF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(4,a|0,b|0,+c,d|0)}function hF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(5,a|0,b|0,+c,d|0)}function iF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(6,a|0,b|0,+c,d|0)}function jF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(7,a|0,b|0,+c,d|0)}function kF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(8,a|0,b|0,+c,d|0)}function lF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(9,a|0,b|0,+c,d|0)}function mF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(10,a|0,b|0,+c,d|0)}function nF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(11,a|0,b|0,+c,d|0)}function oF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(12,a|0,b|0,+c,d|0)}function pF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(13,a|0,b|0,+c,d|0)}function qF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(14,a|0,b|0,+c,d|0)}function rF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(15,a|0,b|0,+c,d|0)}function sF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(16,a|0,b|0,+c,d|0)}function tF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(17,a|0,b|0,+c,d|0)}function uF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(18,a|0,b|0,+c,d|0)}function vF(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;ca(19,a|0,b|0,+c,d|0)}function wF(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;pb[a&63](b|0,c|0,d|0)}function xF(a,b,c){a=a|0;b=b|0;c=c|0;ca(0,a|0,b|0,c|0)}function yF(a,b,c){a=a|0;b=b|0;c=c|0;ca(1,a|0,b|0,c|0)}function zF(a,b,c){a=a|0;b=b|0;c=c|0;ca(2,a|0,b|0,c|0)}function AF(a,b,c){a=a|0;b=b|0;c=c|0;ca(3,a|0,b|0,c|0)}function BF(a,b,c){a=a|0;b=b|0;c=c|0;ca(4,a|0,b|0,c|0)}function CF(a,b,c){a=a|0;b=b|0;c=c|0;ca(5,a|0,b|0,c|0)}function DF(a,b,c){a=a|0;b=b|0;c=c|0;ca(6,a|0,b|0,c|0)}function EF(a,b,c){a=a|0;b=b|0;c=c|0;ca(7,a|0,b|0,c|0)}function FF(a,b,c){a=a|0;b=b|0;c=c|0;ca(8,a|0,b|0,c|0)}function GF(a,b,c){a=a|0;b=b|0;c=c|0;ca(9,a|0,b|0,c|0)}function HF(a,b,c){a=a|0;b=b|0;c=c|0;ca(10,a|0,b|0,c|0)}function IF(a,b,c){a=a|0;b=b|0;c=c|0;ca(11,a|0,b|0,c|0)}function JF(a,b,c){a=a|0;b=b|0;c=c|0;ca(12,a|0,b|0,c|0)}function KF(a,b,c){a=a|0;b=b|0;c=c|0;ca(13,a|0,b|0,c|0)}function LF(a,b,c){a=a|0;b=b|0;c=c|0;ca(14,a|0,b|0,c|0)}function MF(a,b,c){a=a|0;b=b|0;c=c|0;ca(15,a|0,b|0,c|0)}function NF(a,b,c){a=a|0;b=b|0;c=c|0;ca(16,a|0,b|0,c|0)}function OF(a,b,c){a=a|0;b=b|0;c=c|0;ca(17,a|0,b|0,c|0)}function PF(a,b,c){a=a|0;b=b|0;c=c|0;ca(18,a|0,b|0,c|0)}function QF(a,b,c){a=a|0;b=b|0;c=c|0;ca(19,a|0,b|0,c|0)}function RF(a){a=a|0;qb[a&63]()}function SF(){ca(0)}function TF(){ca(1)}function UF(){ca(2)}function VF(){ca(3)}function WF(){ca(4)}function XF(){ca(5)}function YF(){ca(6)}function ZF(){ca(7)}function _F(){ca(8)}function $F(){ca(9)}function aG(){ca(10)}function bG(){ca(11)}function cG(){ca(12)}function dG(){ca(13)}function eG(){ca(14)}function fG(){ca(15)}function gG(){ca(16)}function hG(){ca(17)}function iG(){ca(18)}function jG(){ca(19)}function kG(a,b,c,d){a=a|0;b=b|0;c=c|0;d=+d;rb[a&63](b|0,c|0,+d)}function lG(a,b,c){a=a|0;b=b|0;c=+c;ca(0,a|0,b|0,+c)}function mG(a,b,c){a=a|0;b=b|0;c=+c;ca(1,a|0,b|0,+c)}function nG(a,b,c){a=a|0;b=b|0;c=+c;ca(2,a|0,b|0,+c)}function oG(a,b,c){a=a|0;b=b|0;c=+c;ca(3,a|0,b|0,+c)}function pG(a,b,c){a=a|0;b=b|0;c=+c;ca(4,a|0,b|0,+c)}function qG(a,b,c){a=a|0;b=b|0;c=+c;ca(5,a|0,b|0,+c)}function rG(a,b,c){a=a|0;b=b|0;c=+c;ca(6,a|0,b|0,+c)}function sG(a,b,c){a=a|0;b=b|0;c=+c;ca(7,a|0,b|0,+c)}function tG(a,b,c){a=a|0;b=b|0;c=+c;ca(8,a|0,b|0,+c)}function uG(a,b,c){a=a|0;b=b|0;c=+c;ca(9,a|0,b|0,+c)}function vG(a,b,c){a=a|0;b=b|0;c=+c;ca(10,a|0,b|0,+c)}function wG(a,b,c){a=a|0;b=b|0;c=+c;ca(11,a|0,b|0,+c)}function xG(a,b,c){a=a|0;b=b|0;c=+c;ca(12,a|0,b|0,+c)}function yG(a,b,c){a=a|0;b=b|0;c=+c;ca(13,a|0,b|0,+c)}function zG(a,b,c){a=a|0;b=b|0;c=+c;ca(14,a|0,b|0,+c)}function AG(a,b,c){a=a|0;b=b|0;c=+c;ca(15,a|0,b|0,+c)}function BG(a,b,c){a=a|0;b=b|0;c=+c;ca(16,a|0,b|0,+c)}function CG(a,b,c){a=a|0;b=b|0;c=+c;ca(17,a|0,b|0,+c)}function DG(a,b,c){a=a|0;b=b|0;c=+c;ca(18,a|0,b|0,+c)}function EG(a,b,c){a=a|0;b=b|0;c=+c;ca(19,a|0,b|0,+c)}function FG(a,b,c,d,e,f,g){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;g=g|0;sb[a&63](b|0,c|0,d|0,e|0,f|0,g|0)}function GG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(0,a|0,b|0,c|0,d|0,e|0,f|0)}function HG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(1,a|0,b|0,c|0,d|0,e|0,f|0)}function IG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(2,a|0,b|0,c|0,d|0,e|0,f|0)}function JG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(3,a|0,b|0,c|0,d|0,e|0,f|0)}function KG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(4,a|0,b|0,c|0,d|0,e|0,f|0)}function LG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(5,a|0,b|0,c|0,d|0,e|0,f|0)}function MG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(6,a|0,b|0,c|0,d|0,e|0,f|0)}function NG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(7,a|0,b|0,c|0,d|0,e|0,f|0)}function OG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(8,a|0,b|0,c|0,d|0,e|0,f|0)}function PG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(9,a|0,b|0,c|0,d|0,e|0,f|0)}function QG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(10,a|0,b|0,c|0,d|0,e|0,f|0)}function RG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(11,a|0,b|0,c|0,d|0,e|0,f|0)}function SG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(12,a|0,b|0,c|0,d|0,e|0,f|0)}function TG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(13,a|0,b|0,c|0,d|0,e|0,f|0)}function UG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(14,a|0,b|0,c|0,d|0,e|0,f|0)}function VG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(15,a|0,b|0,c|0,d|0,e|0,f|0)}function WG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(16,a|0,b|0,c|0,d|0,e|0,f|0)}function XG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(17,a|0,b|0,c|0,d|0,e|0,f|0)}function YG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(18,a|0,b|0,c|0,d|0,e|0,f|0)}function ZG(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;ca(19,a|0,b|0,c|0,d|0,e|0,f|0)}function _G(a,b,c){a=a|0;b=b|0;c=c|0;return tb[a&63](b|0,c|0)|0}function $G(a,b){a=a|0;b=b|0;return ca(0,a|0,b|0)|0}function aH(a,b){a=a|0;b=b|0;return ca(1,a|0,b|0)|0}function bH(a,b){a=a|0;b=b|0;return ca(2,a|0,b|0)|0}function cH(a,b){a=a|0;b=b|0;return ca(3,a|0,b|0)|0}function dH(a,b){a=a|0;b=b|0;return ca(4,a|0,b|0)|0}function eH(a,b){a=a|0;b=b|0;return ca(5,a|0,b|0)|0}function fH(a,b){a=a|0;b=b|0;return ca(6,a|0,b|0)|0}function gH(a,b){a=a|0;b=b|0;return ca(7,a|0,b|0)|0}function hH(a,b){a=a|0;b=b|0;return ca(8,a|0,b|0)|0}function iH(a,b){a=a|0;b=b|0;return ca(9,a|0,b|0)|0}function jH(a,b){a=a|0;b=b|0;return ca(10,a|0,b|0)|0}function kH(a,b){a=a|0;b=b|0;return ca(11,a|0,b|0)|0}function lH(a,b){a=a|0;b=b|0;return ca(12,a|0,b|0)|0}function mH(a,b){a=a|0;b=b|0;return ca(13,a|0,b|0)|0}function nH(a,b){a=a|0;b=b|0;return ca(14,a|0,b|0)|0}function oH(a,b){a=a|0;b=b|0;return ca(15,a|0,b|0)|0}function pH(a,b){a=a|0;b=b|0;return ca(16,a|0,b|0)|0}function qH(a,b){a=a|0;b=b|0;return ca(17,a|0,b|0)|0}function rH(a,b){a=a|0;b=b|0;return ca(18,a|0,b|0)|0}function sH(a,b){a=a|0;b=b|0;return ca(19,a|0,b|0)|0}function tH(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;return ub[a&63](b|0,c|0,d|0,e|0,f|0)|0}function uH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(0,a|0,b|0,c|0,d|0,e|0)|0}function vH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(1,a|0,b|0,c|0,d|0,e|0)|0}function wH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(2,a|0,b|0,c|0,d|0,e|0)|0}function xH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(3,a|0,b|0,c|0,d|0,e|0)|0}function yH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(4,a|0,b|0,c|0,d|0,e|0)|0}function zH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(5,a|0,b|0,c|0,d|0,e|0)|0}function AH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(6,a|0,b|0,c|0,d|0,e|0)|0}function BH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(7,a|0,b|0,c|0,d|0,e|0)|0}function CH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(8,a|0,b|0,c|0,d|0,e|0)|0}function DH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(9,a|0,b|0,c|0,d|0,e|0)|0}function EH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(10,a|0,b|0,c|0,d|0,e|0)|0}function FH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(11,a|0,b|0,c|0,d|0,e|0)|0}function GH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(12,a|0,b|0,c|0,d|0,e|0)|0}function HH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(13,a|0,b|0,c|0,d|0,e|0)|0}function IH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(14,a|0,b|0,c|0,d|0,e|0)|0}function JH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(15,a|0,b|0,c|0,d|0,e|0)|0}function KH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(16,a|0,b|0,c|0,d|0,e|0)|0}function LH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(17,a|0,b|0,c|0,d|0,e|0)|0}function MH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(18,a|0,b|0,c|0,d|0,e|0)|0}function NH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;return ca(19,a|0,b|0,c|0,d|0,e|0)|0}function OH(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;vb[a&63](b|0,c|0,d|0,e|0)}function PH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(0,a|0,b|0,c|0,d|0)}function QH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(1,a|0,b|0,c|0,d|0)}function RH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(2,a|0,b|0,c|0,d|0)}function SH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(3,a|0,b|0,c|0,d|0)}function TH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(4,a|0,b|0,c|0,d|0)}function UH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(5,a|0,b|0,c|0,d|0)}function VH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(6,a|0,b|0,c|0,d|0)}function WH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(7,a|0,b|0,c|0,d|0)}function XH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(8,a|0,b|0,c|0,d|0)}function YH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(9,a|0,b|0,c|0,d|0)}function ZH(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(10,a|0,b|0,c|0,d|0)}function _H(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(11,a|0,b|0,c|0,d|0)}function $H(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(12,a|0,b|0,c|0,d|0)}function aI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(13,a|0,b|0,c|0,d|0)}function bI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(14,a|0,b|0,c|0,d|0)}function cI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(15,a|0,b|0,c|0,d|0)}function dI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(16,a|0,b|0,c|0,d|0)}function eI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(17,a|0,b|0,c|0,d|0)}function fI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(18,a|0,b|0,c|0,d|0)}function gI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;ca(19,a|0,b|0,c|0,d|0)}function hI(a,b,c){a=a|0;b=b|0;c=c|0;$(0);return 0}function iI(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(1)}function jI(a,b){a=a|0;b=+b;$(2);return 0.0}function kI(a){a=a|0;$(3)}function lI(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=+e;$(4);return 0.0}function mI(a,b){a=a|0;b=b|0;$(5)}function nI(a,b,c,d,e){a=a|0;b=b|0;c=+c;d=d|0;e=e|0;$(6)}function oI(a){a=a|0;$(7);return 0}function pI(a,b,c,d){a=a|0;b=b|0;c=+c;d=d|0;$(8)}function qI(a,b,c){a=a|0;b=b|0;c=c|0;$(9)}function rI(){$(10)}function sI(){eb()}function tI(a,b,c){a=a|0;b=b|0;c=+c;$(11)}function uI(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;$(12)}function vI(a,b){a=a|0;b=b|0;$(13);return 0}function wI(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;$(14);return 0}function xI(a,b,c,d){a=a|0;b=b|0;c=c|0;d=d|0;$(15)}




// EMSCRIPTEN_END_FUNCS
var gb=[hI,hI,YB,hI,ZB,hI,_B,hI,$B,hI,aC,hI,bC,hI,cC,hI,dC,hI,eC,hI,fC,hI,gC,hI,hC,hI,iC,hI,jC,hI,kC,hI,lC,hI,mC,hI,nC,hI,oC,hI,pC,hI,jw,nx,tx,zx,Fx,Ay,zB,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI,hI];var hb=[iI,iI,rC,iI,sC,iI,tC,iI,uC,iI,vC,iI,wC,iI,xC,iI,yC,iI,zC,iI,AC,iI,BC,iI,CC,iI,DC,iI,EC,iI,FC,iI,GC,iI,HC,iI,IC,iI,JC,iI,KC,iI,LB,KB,HB,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI,iI];var ib=[jI,jI,MC,jI,NC,jI,OC,jI,PC,jI,QC,jI,RC,jI,SC,jI,TC,jI,UC,jI,VC,jI,WC,jI,XC,jI,YC,jI,ZC,jI,_C,jI,$C,jI,aD,jI,bD,jI,cD,jI,dD,jI,Ow,tz,Dz,Nz,_z,jA,tA,EA,OA,YA,gB,jI,jI,jI,jI,jI,jI,jI,jI,jI,jI,jI];var jb=[kI,kI,fD,kI,gD,kI,hD,kI,iD,kI,jD,kI,kD,kI,lD,kI,mD,kI,nD,kI,oD,kI,pD,kI,qD,kI,rD,kI,sD,kI,tD,kI,uD,kI,vD,kI,wD,kI,xD,kI,yD,kI,$v,aw,hw,iw,qw,rw,ww,xw,zw,Aw,Cw,Dw,Pw,Rw,Sw,ix,hx,ow,pw,kw,lw,mw,nw,Yx,hy,Xx,my,Ey,Fy,Jy,Ky,Oy,Py,Yy,Zy,bz,cz,gz,hz,lz,mz,uz,vz,wz,Ez,Fz,Gz,Oz,Pz,Qz,Rz,Sz,Tz,aA,bA,cA,kA,lA,mA,uA,wA,xA,FA,GA,HA,PA,QA,RA,ZA,_A,$A,hB,iB,jB,pB,oB,tB,wB,uB,vB,xB,yB,nB,kI,kI,kI];var kb=[lI,lI,AD,lI,BD,lI,CD,lI,DD,lI,ED,lI,FD,lI,GD,lI,HD,lI,ID,lI,JD,lI,KD,lI,LD,lI,MD,lI,ND,lI,OD,lI,PD,lI,QD,lI,RD,lI,SD,lI,TD,lI,yw,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI,lI];var lb=[mI,mI,VD,mI,WD,mI,XD,mI,YD,mI,ZD,mI,_D,mI,$D,mI,aE,mI,bE,mI,cE,mI,dE,mI,eE,mI,fE,mI,gE,mI,hE,mI,iE,mI,jE,mI,kE,mI,lE,mI,mE,mI,gw,sw,tw,Ew,Fw,Gw,Hw,Lw,Mw,Qw,Iw,Jw,iy,jy,qz,rz,nz,oz,Az,Bz,xz,yz,Kz,Lz,Hz,Iz,Xz,Yz,$z,Uz,Vz,gA,hA,dA,eA,qA,rA,vA,nA,oA,BA,CA,yA,zA,LA,MA,IA,JA,VA,WA,SA,TA,dB,eB,aB,bB,My,ez,jz,Wy,$y,Cy,Hy,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI,mI];var mb=[nI,nI,oE,nI,pE,nI,qE,nI,rE,nI,sE,nI,tE,nI,uE,nI,vE,nI,wE,nI,xE,nI,yE,nI,zE,nI,AE,nI,BE,nI,CE,nI,DE,nI,EE,nI,FE,nI,GE,nI,HE,nI,ew,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI,nI];var nb=[oI,oI,JE,oI,KE,oI,LE,oI,ME,oI,NE,oI,OE,oI,PE,oI,QE,oI,RE,oI,SE,oI,TE,oI,UE,oI,VE,oI,WE,oI,XE,oI,YE,oI,ZE,oI,_E,oI,$E,oI,aF,oI,lx,sx,yx,Ex,qB,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI,oI];var ob=[pI,pI,cF,pI,dF,pI,eF,pI,fF,pI,gF,pI,hF,pI,iF,pI,jF,pI,kF,pI,lF,pI,mF,pI,nF,pI,oF,pI,pF,pI,qF,pI,rF,pI,sF,pI,tF,pI,uF,pI,vF,pI,dw,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI,pI];var pb=[qI,qI,xF,qI,yF,qI,zF,qI,AF,qI,BF,qI,CF,qI,DF,qI,EF,qI,FF,qI,GF,qI,HF,qI,IF,qI,JF,qI,KF,qI,LF,qI,MF,qI,NF,qI,OF,qI,PF,qI,QF,qI,uw,vw,ky,ly,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI,qI];var qb=[rI,rI,SF,rI,TF,rI,UF,rI,VF,rI,WF,rI,XF,rI,YF,rI,ZF,rI,_F,rI,$F,rI,aG,rI,bG,rI,cG,rI,dG,rI,eG,rI,fG,rI,gG,rI,hG,rI,iG,rI,jG,rI,sI,lB,mB,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI,rI];var rb=[tI,tI,lG,tI,mG,tI,nG,tI,oG,tI,pG,tI,qG,tI,rG,tI,sG,tI,tG,tI,uG,tI,vG,tI,wG,tI,xG,tI,yG,tI,zG,tI,AG,tI,BG,tI,CG,tI,DG,tI,EG,tI,Nw,qx,wx,Cx,Ix,sz,Cz,Mz,Zz,iA,sA,DA,NA,XA,fB,tI,tI,tI,tI,tI,tI,tI];var sb=[uI,uI,GG,uI,HG,uI,IG,uI,JG,uI,KG,uI,LG,uI,MG,uI,NG,uI,OG,uI,PG,uI,QG,uI,RG,uI,SG,uI,TG,uI,UG,uI,VG,uI,WG,uI,XG,uI,YG,uI,ZG,uI,OB,NB,MB,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI,uI];var tb=[vI,vI,$G,vI,aH,vI,bH,vI,cH,vI,dH,vI,eH,vI,fH,vI,gH,vI,hH,vI,iH,vI,jH,vI,kH,vI,lH,vI,mH,vI,nH,vI,oH,vI,pH,vI,qH,vI,rH,vI,sH,vI,Bw,Kw,kx,rx,xx,Dx,pz,zz,Jz,Wz,fA,pA,AA,KA,UA,cB,$x,vI,vI,vI,vI,vI];var ub=[wI,wI,uH,wI,vH,wI,wH,wI,xH,wI,yH,wI,zH,wI,AH,wI,BH,wI,CH,wI,DH,wI,EH,wI,FH,wI,GH,wI,HH,wI,IH,wI,JH,wI,KH,wI,LH,wI,MH,wI,NH,wI,ox,ux,Ax,Gx,Ly,dz,iz,Vy,_y,By,Gy,wI,wI,wI,wI,wI,wI,wI,wI,wI,wI,wI];var vb=[xI,xI,PH,xI,QH,xI,RH,xI,SH,xI,TH,xI,UH,xI,VH,xI,WH,xI,XH,xI,YH,xI,ZH,xI,_H,xI,$H,xI,aI,xI,bI,xI,cI,xI,dI,xI,eI,xI,fI,xI,gI,xI,bw,cw,fw,px,vx,Bx,Hx,Dy,Iy,Ny,Xy,az,fz,kz,BB,CB,EB,xI,xI,xI,xI,xI];return{_emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0:jq,_emscripten_bind_b2ContactEdge_set_next_1:Eu,_emscripten_bind_b2ChainShape_get_m_count_0:rn,_emscripten_bind_b2Fixture_SetFriction_1:Jc,_emscripten_bind_b2Shape_ComputeAABB_3:Er,_emscripten_bind_b2FrictionJointDef_set_userData_1:Bg,_emscripten_bind_b2Vec3_get_z_0:Jf,_emscripten_bind_b2World_IsLocked_0:ei,_emscripten_bind_b2Draw_GetFlags_0:Ek,_emscripten_bind_b2FrictionJoint_IsActive_0:xt,_emscripten_bind_b2Color_set_g_1:Mn,_emscripten_bind_b2WheelJointDef_get_frequencyHz_0:Fj,_emscripten_bind_b2RopeJointDef_set_localAnchorA_1:Iu,_emscripten_bind_b2PolygonShape_RayCast_4:xo,_emscripten_bind_b2World_GetTreeBalance_0:ai,_emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0:fh,_emscripten_bind_JSDraw_DrawSolidCircle_4:Sp,_emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0:Tt,_emscripten_bind_b2FixtureDef_get_filter_0:lg,_emscripten_bind_b2FrictionJointDef_get_type_0:yg,_emscripten_bind_b2RevoluteJoint_GetMotorTorque_1:hu,_emscripten_bind_b2MotorJointDef_set_type_1:jv,_emscripten_bind_b2RayCastInput_get_p1_0:ho,_emscripten_bind_b2EdgeShape_set_m_hasVertex3_1:ap,_emscripten_bind_b2JointEdge_set_joint_1:Rl,_emscripten_enum_b2ShapeType_e_polygon:vv,_emscripten_bind_b2Fixture___destroy___0:Oc,_emscripten_bind_b2PulleyJoint_SetUserData_1:Nq,_emscripten_bind_b2World_SetWarmStarting_1:Rh,_emscripten_bind_JSDraw_DrawCircle_3:Rp,_emscripten_bind_b2WeldJoint_IsActive_0:Kl,_emscripten_bind_b2DestructionListener___destroy___0:At,_emscripten_bind_b2BodyDef_set_type_1:ue,_emscripten_bind_b2ChainShape_ComputeAABB_3:nn,_emscripten_bind_b2MouseJointDef_set_type_1:$q,_emscripten_bind_b2JointEdge_get_prev_0:Sl,_emscripten_bind_b2WeldJoint_GetReactionTorque_1:Gl,_emscripten_bind_b2MotorJointDef_get_maxForce_0:cv,_emscripten_bind_b2DistanceJointDef_get_userData_0:Zr,_emscripten_bind_b2BodyDef_get_position_0:ve,_emscripten_bind_b2RopeJointDef_get_localAnchorB_0:Ju,_emscripten_bind_b2RevoluteJointDef_set_userData_1:Gp,_emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0:lp,_emscripten_bind_b2World_SetContactFilter_1:Ah,_emscripten_bind_b2WheelJointDef_get_collideConnected_0:Rj,_emscripten_bind_b2MouseJointDef_set_userData_1:br,_emscripten_bind_JSDraw_DrawSegment_3:Tp,_emscripten_bind_b2FixtureDef_set_restitution_1:gg,_emscripten_bind_b2MotorJointDef_Initialize_2:Zu,_emscripten_bind_b2EdgeShape_GetChildCount_0:Mo,_emscripten_bind_b2Mat33_get_ey_0:nc,_emscripten_bind_b2MouseJoint_IsActive_0:qd,_emscripten_bind_b2World_GetGravity_0:di,_emscripten_bind_b2World_DrawDebugData_0:Jh,_emscripten_bind_b2Profile_get_broadphase_0:me,_emscripten_bind_b2PulleyJointDef_get_bodyA_0:pm,_emscripten_bind_b2PrismaticJoint_SetLimits_2:ui,_emscripten_bind_b2PulleyJointDef_get_localAnchorA_0:bm,_emscripten_bind_b2DistanceJoint_GetAnchorA_0:Wb,_emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1:Dm,_emscripten_bind_b2PolygonShape_get_m_count_0:Co,_emscripten_bind_b2RopeJointDef_set_collideConnected_1:Wu,_emscripten_bind_b2CircleShape_set_m_p_1:ak,_emscripten_bind_JSContactListener_EndContact_1:aj,_emscripten_bind_b2MassData_set_mass_1:Kk,_emscripten_bind_b2Vec3_get_x_0:Ff,_emscripten_bind_b2ChainShape_CreateChain_2:en,_emscripten_bind_b2Color_get_r_0:Jn,_emscripten_bind_b2World_DestroyBody_1:Eh,_emscripten_bind_b2Profile_get_solvePosition_0:ke,_emscripten_bind_b2Shape_RayCast_4:Dr,_emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0:xq,_emscripten_bind_b2Mat33___destroy___0:rc,_emscripten_bind_b2GearJoint_GetReactionTorque_1:ll,_emscripten_bind_b2WeldJointDef_set_collideConnected_1:Bk,_emscripten_bind_b2Manifold_get_type_0:Og,_emscripten_bind_b2RevoluteJoint___destroy___0:uu,_emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0:Xl,_emscripten_bind_b2World_SetAutoClearForces_1:fi,_emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1:eh,_emscripten_bind_b2BodyDef_set_position_1:we,_emscripten_bind_b2Transform_get_q_0:_m,_emscripten_bind_b2FrictionJoint_GetMaxForce_0:kt,_emscripten_bind_b2PolygonShape_set_m_count_1:Do,_emscripten_bind_b2Contact_GetNext_0:nr,_emscripten_bind_b2MotorJointDef_set_userData_1:lv,_emscripten_bind_b2EdgeShape_get_m_type_0:bp,_emscripten_bind_b2GearJoint_GetJoint1_0:bl,_emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0:eq,_emscripten_bind_b2MotorJoint_SetMaxTorque_1:Ld,_emscripten_bind_b2GearJoint_GetAnchorA_0:il,_emscripten_enum_b2JointType_e_mouseJoint:Dv,_emscripten_bind_b2MouseJointDef_set_bodyA_1:dr,_emscripten_enum_b2JointType_e_revoluteJoint:zv,_emscripten_bind_b2World_SetContactListener_1:Bh,_emscripten_bind_b2Body_IsAwake_0:Ws,_emscripten_bind_b2JointEdge_set_other_1:Pl,_emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0:bu,_emscripten_bind_b2MouseJointDef_set_target_1:Tq,_emscripten_bind_b2MotorJoint_SetCorrectionFactor_1:Nd,_emscripten_bind_b2FixtureDef_get_density_0:hg,_emscripten_bind_b2ChainShape_set_m_vertices_1:qn,_emscripten_bind_b2ChainShape_get_m_vertices_0:pn,_emscripten_bind_b2Rot_set_s_1:Bd,_emscripten_bind_b2MotorJointDef_get_collideConnected_0:qv,_emscripten_bind_b2RevoluteJoint_GetUpperLimit_0:$t,_emscripten_bind_b2WheelJointDef_set_bodyB_1:Qj,_emscripten_bind_b2WheelJointDef_set_enableMotor_1:Aj,_emscripten_bind_b2FixtureDef_get_userData_0:bg,_emscripten_bind_b2FrictionJointDef_set_collideConnected_1:Hg,_emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0:dh,_emscripten_bind_b2GearJoint_GetCollideConnected_0:ql,_emscripten_bind_b2RevoluteJointDef_get_upperAngle_0:vp,_emscripten_bind_b2Body_ApplyAngularImpulse_2:xs,_emscripten_enum_b2JointType_e_frictionJoint:Hv,_emscripten_bind_b2RayCastOutput_set_fraction_1:Si,_emscripten_bind_b2Color_set_r_1:Kn,_emscripten_bind_b2DistanceJointDef_get_length_0:Rr,_emscripten_bind_b2PulleyJoint_GetBodyB_0:Gq,_emscripten_bind_b2WheelJointDef_set_type_1:Kj,_emscripten_bind_b2World_GetTreeQuality_0:bi,_emscripten_bind_b2BodyDef_set_gravityScale_1:Ue,_emscripten_bind_b2RopeJointDef_set_bodyB_1:Uu,_emscripten_bind_b2PrismaticJoint_GetLowerLimit_0:si,_emscripten_bind_b2AABB_get_lowerBound_0:Vf,_emscripten_bind_b2WheelJoint_SetMotorSpeed_1:bq,_emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0:$g,_emscripten_bind_b2Body_SetMassData_1:Bs,_emscripten_bind_b2BodyDef_get_angularVelocity_0:Be,_emscripten_bind_b2WeldJoint_SetDampingRatio_1:xl,_emscripten_bind_b2PrismaticJointDef___destroy___0:xh,_emscripten_bind_b2Contact_IsTouching_0:kr,_emscripten_bind_b2Draw_SetFlags_1:Dk,_emscripten_bind_b2AABB_Contains_1:Tf,_emscripten_bind_b2DistanceJoint_GetNext_0:_b,_emscripten_bind_b2GearJoint_GetReactionForce_1:kl,_emscripten_bind_b2PrismaticJoint_GetNext_0:Ji,_emscripten_bind_b2Filter_get_groupIndex_0:Uc,_emscripten_bind_b2PrismaticJoint_GetType_0:Ci,_emscripten_bind_b2Fixture_GetRestitution_0:Kc,_emscripten_bind_b2Transform_set_q_1:$m,_emscripten_bind_b2PolygonShape___destroy___0:Io,_emscripten_bind_b2AABB_get_upperBound_0:Xf,_emscripten_bind_b2Transform___destroy___0:an,_emscripten_bind_b2WeldJointDef_set_localAnchorB_1:lk,_emscripten_bind_b2CircleShape_set_m_radius_1:ek,_emscripten_bind_b2EdgeShape_set_m_hasVertex0_1:_o,_emscripten_bind_b2RopeJoint_GetMaxLength_0:Tn,_emscripten_bind_b2GearJoint_GetUserData_0:nl,_emscripten_bind_b2MotorJoint_GetCollideConnected_0:_d,_emscripten_bind_b2GearJointDef_set_type_1:Jt,_emscripten_bind_b2DistanceJoint_SetDampingRatio_1:Rb,_emscripten_bind_b2Contact_GetFixtureA_0:or,_emscripten_bind_b2QueryCallback___destroy___0:Hm,_emscripten_bind_b2PulleyJointDef_get_ratio_0:jm,_emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0:Xg,_emscripten_bind_b2CircleShape_set_m_type_1:ck,_emscripten_enum_b2ShapeType_e_typeCount:xv,_emscripten_bind_b2Body_SetTransform_2:js,_emscripten_bind_b2RopeJoint_GetAnchorB_0:Zn,_emscripten_bind_b2AABB_set_upperBound_1:Yf,_emscripten_bind_b2MouseJointDef_get_collideConnected_0:gr,_emscripten_bind_b2ContactImpulse___destroy___0:Kb,_emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0:Tg,_emscripten_bind_b2Vec2_set_x_1:uf,_emscripten_bind_b2RayCastInput___destroy___0:no,_emscripten_bind_b2Body_ApplyForceToCenter_2:us,_emscripten_bind_JSDestructionListener_JSDestructionListener_0:Eb,_emscripten_bind_b2WheelJointDef_set_localAnchorA_1:uj,_emscripten_bind_b2FrictionJoint_GetBodyB_0:pt,_emscripten_bind_b2DistanceJointDef_get_bodyA_0:$r,_emscripten_bind_b2WeldJointDef_set_bodyA_1:xk,_emscripten_bind_b2World_SetDestructionListener_1:zh,_emscripten_bind_b2RevoluteJoint_GetJointSpeed_0:Xt,_emscripten_bind_b2WheelJoint_GetLocalAnchorB_0:Xp,_emscripten_bind_b2JointDef___destroy___0:Tm,_emscripten_bind_b2PrismaticJointDef_Initialize_4:Ug,_emscripten_bind_b2FrictionJointDef_get_localAnchorA_0:qg,_emscripten_bind_b2CircleShape_GetChildCount_0:Wj,_emscripten_bind_b2BodyDef_get_bullet_0:Ne,_emscripten_bind_b2ManifoldPoint_get_localPoint_0:ym,_emscripten_bind_b2PrismaticJointDef_get_type_0:nh,_emscripten_bind_b2MassData_get_center_0:Lk,_emscripten_bind_b2World_b2World_1:yh,_emscripten_bind_b2WheelJoint_GetReactionForce_1:pq,_emscripten_bind_b2World_SetSubStepping_1:Vh,_emscripten_bind_b2Vec2_op_add_1:lf,_emscripten_bind_b2Joint_GetBodyA_0:Rk,_emscripten_bind_b2Joint_GetCollideConnected_0:$k,_emscripten_bind_b2MotorJoint_GetReactionTorque_1:Vd,_emscripten_bind_b2WheelJoint_IsMotorEnabled_0:$p,_emscripten_bind_b2WheelJointDef___destroy___0:Tj,_emscripten_bind_b2Vec3_SetZero_0:Af,_emscripten_enum_b2JointType_e_pulleyJoint:Cv,_emscripten_bind_b2ChainShape_get_m_nextVertex_0:vn,_emscripten_bind_b2Contact_SetEnabled_1:lr,_emscripten_bind_b2Shape_set_m_radius_1:Jr,_emscripten_bind_b2GearJointDef_get_joint2_0:Et,_emscripten_bind_b2World_SetDebugDraw_1:Ch,_emscripten_bind_b2ContactID_set_key_1:Xi,_emscripten_bind_b2RevoluteJointDef_set_collideConnected_1:Mp,_malloc:RB,_emscripten_bind_b2World_GetProxyCount_0:Xh,_emscripten_bind_b2Vec2_Normalize_0:qf,_emscripten_bind_b2WheelJoint_GetJointSpeed_0:_p,_emscripten_bind_b2FrictionJointDef_set_localAnchorA_1:rg,_emscripten_bind_b2GearJoint_GetRatio_0:el,_emscripten_bind_JSRayCastCallback_JSRayCastCallback_0:We,_emscripten_bind_b2RayCastInput_set_p2_1:ko,_emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0:zp,_emscripten_bind_b2RayCastOutput_get_normal_0:Pi,_emscripten_bind_b2WeldJoint_GetBodyA_0:Bl,_emscripten_bind_b2MotorJointDef_set_maxForce_1:dv,_emscripten_enum_b2DrawFlag_e_jointBit:Vv,_emscripten_bind_b2FixtureDef_get_isSensor_0:jg,_emscripten_bind_b2PulleyJointDef_set_bodyB_1:sm,_emscripten_bind_b2WheelJoint_EnableMotor_1:aq,_emscripten_bind_b2WheelJoint_GetLocalAnchorA_0:Wp,_emscripten_bind_JSDraw_DrawSolidPolygon_3:Qp,_emscripten_bind_b2Rot_Set_1:vd,_emscripten_bind_b2ContactFeature_set_typeB_1:ef,_emscripten_bind_JSDraw___destroy___0:Vp,_emscripten_bind_b2MouseJointDef___destroy___0:ir,_emscripten_bind_b2Mat33_Solve22_1:ic,_emscripten_bind_b2Profile_set_solvePosition_1:le,_emscripten_bind_b2ContactFilter___destroy___0:vu,_emscripten_bind_b2PulleyJointDef_get_localAnchorB_0:dm,_emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1:yn,_emscripten_bind_b2PrismaticJoint___destroy___0:Oi,_emscripten_bind_b2World_CreateJoint_1:Fh,_emscripten_bind_b2Profile_get_solveTOI_0:oe,_emscripten_bind_b2ManifoldPoint_get_id_0:Em,_emscripten_bind_b2Manifold_set_pointCount_1:Rg,_emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0:yi,_emscripten_bind_b2Body_SetSleepingAllowed_1:Ts,_emscripten_bind_b2Rot_SetIdentity_0:wd,_emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0:yq,_emscripten_bind_b2Vec3_op_add_1:Cf,_emscripten_bind_b2FrictionJoint_GetType_0:nt,_emscripten_bind_b2DistanceJointDef_set_dampingRatio_1:Wr,_emscripten_bind_b2MotorJoint_GetBodyA_0:Qd,_emscripten_bind_b2MouseJointDef_get_dampingRatio_0:Yq,_emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0:eu,_emscripten_bind_b2ChainShape_set_m_type_1:Cn,_emscripten_bind_b2RevoluteJointDef_set_bodyB_1:Kp,_emscripten_bind_b2Body_GetGravityScale_0:Ns,_emscripten_bind_b2GearJointDef_get_bodyB_0:Ot,_emscripten_bind_b2Mat33_b2Mat33_0:ec,_emscripten_bind_b2MouseJointDef_get_bodyB_0:er,_emscripten_bind_b2Shape_TestPoint_2:Cr,_emscripten_bind_b2Body_GetWorldVector_1:Es,_emscripten_bind_b2WeldJointDef_get_frequencyHz_0:ok,_emscripten_bind_b2PolygonShape_Set_2:po,_emscripten_bind_b2Manifold___destroy___0:Sg,_emscripten_bind_b2PulleyJointDef_set_lengthA_1:gm,_emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1:mp,_emscripten_bind_b2GearJoint___destroy___0:rl,_emscripten_bind_b2RevoluteJoint_GetJointAngle_0:Wt,_emscripten_bind_b2PulleyJointDef_set_ratio_1:km,_emscripten_bind_b2JointEdge_set_prev_1:Tl,_emscripten_bind_b2PrismaticJoint_GetReactionTorque_1:Ii,_emscripten_bind_b2Body_GetLocalPoint_1:Fs,_emscripten_bind_b2PrismaticJoint_GetCollideConnected_0:Ni,_emscripten_bind_b2RopeJointDef_get_userData_0:Pu,_emscripten_bind_b2DistanceJoint_IsActive_0:bc,_emscripten_bind_b2MotorJointDef_set_angularOffset_1:bv,_emscripten_bind_b2Vec2_b2Vec2_2:hf,_emscripten_bind_b2PrismaticJoint_GetJointTranslation_0:oi,_emscripten_bind_b2Vec2_b2Vec2_0:gf,_emscripten_bind_b2DistanceJoint_GetAnchorB_0:Xb,_emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0:Bj,_emscripten_bind_b2Vec2_op_sub_1:mf,_emscripten_bind_b2CircleShape_get_m_p_0:$j,_emscripten_bind_b2ContactFeature_get_indexA_0:Ze,_emscripten_bind_b2MotorJointDef_b2MotorJointDef_0:Yu,_emscripten_bind_b2ChainShape_set_m_nextVertex_1:wn,_emscripten_bind_b2PulleyJoint_GetCollideConnected_0:Pq,_emscripten_bind_b2PulleyJoint_GetAnchorB_0:Iq,_emscripten_bind_b2Mat33_get_ex_0:lc,_emscripten_bind_b2Body_GetPosition_0:ls,_emscripten_bind_b2Profile___destroy___0:qe,_emscripten_bind_b2ContactEdge_get_prev_0:Bu,_emscripten_bind_b2DistanceJoint_SetFrequency_1:Pb,_emscripten_enum_b2ShapeType_e_chain:wv,_emscripten_enum_b2ContactFeatureType_e_vertex:Zv,_emscripten_bind_b2Fixture_GetBody_0:zc,_emscripten_bind_b2ContactImpulse_set_count_1:Jb,_emscripten_bind_b2PulleyJointDef_get_bodyB_0:rm,_emscripten_bind_b2Rot_set_c_1:Dd,_emscripten_bind_b2RevoluteJoint_GetReactionTorque_1:ou,_emscripten_bind_b2Fixture_SetDensity_1:Gc,_emscripten_bind_b2ChainShape_get_m_prevVertex_0:tn,_emscripten_bind_b2World_ClearForces_0:Ih,_emscripten_bind_b2Vec3___destroy___0:Lf,_emscripten_bind_b2WheelJointDef_set_userData_1:Mj,_emscripten_bind_b2WeldJoint_SetFrequency_1:vl,_emscripten_bind_JSContactListener_PreSolve_2:bj,_emscripten_bind_b2Body_SetFixedRotation_1:Zs,_emscripten_bind_b2RayCastOutput_set_normal_1:Qi,_emscripten_bind_b2DistanceJoint_GetDampingRatio_0:Sb,_emscripten_bind_b2WeldJointDef_set_userData_1:vk,_emscripten_bind_b2Body_GetMassData_1:As,_emscripten_bind_b2MouseJointDef_set_bodyB_1:fr,_emscripten_bind_b2CircleShape_GetType_0:Vj,_emscripten_bind_b2PolygonShape_GetType_0:uo,_emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1:ah,_emscripten_bind_b2RopeJointDef_get_collideConnected_0:Vu,_emscripten_bind_b2FixtureDef_set_filter_1:mg,_emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0:Zl,_emscripten_bind_b2Fixture_SetFilterData_1:wc,_emscripten_bind_b2FrictionJointDef_get_userData_0:Ag,_emscripten_bind_b2RayCastCallback___destroy___0:sl,_emscripten_bind_b2PulleyJointDef_set_localAnchorA_1:cm,_emscripten_bind_b2MotorJoint_SetUserData_1:Yd,_emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0:mi,_emscripten_bind_b2MotorJoint_GetBodyB_0:Rd,_emscripten_bind_b2Transform_Set_2:Xm,_emscripten_bind_b2MouseJoint_SetTarget_1:_c,_emscripten_bind_b2RopeJointDef_get_localAnchorA_0:Hu,_emscripten_bind_b2ContactEdge_set_contact_1:Au,_emscripten_bind_b2RevoluteJointDef_get_enableLimit_0:rp,_emscripten_bind_b2CircleShape_get_m_radius_0:dk,_emscripten_bind_b2RevoluteJoint_GetUserData_0:qu,_emscripten_bind_b2Profile_set_solveTOI_1:pe,_emscripten_bind_b2PrismaticJointDef_set_type_1:oh,_emscripten_bind_b2GearJointDef_get_userData_0:Kt,_emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1:gq,_emscripten_bind_b2FrictionJointDef___destroy___0:Ig,_emscripten_bind_b2PrismaticJoint_GetReactionForce_1:Hi,_emscripten_bind_b2Transform_b2Transform_0:Um,_emscripten_bind_b2MouseJoint_GetCollideConnected_0:rd,_emscripten_enum_b2LimitState_e_equalLimits:Nv,_emscripten_bind_b2ManifoldPoint_set_normalImpulse_1:Bm,_emscripten_bind_b2Body_GetContactList_0:bt,_emscripten_bind_b2Body_IsFixedRotation_0:_s,_emscripten_enum_b2DrawFlag_e_shapeBit:Uv,_emscripten_bind_b2Contact_GetFriction_0:tr,_emscripten_bind_b2WheelJoint_GetAnchorB_0:oq,_emscripten_bind_b2DistanceJointDef_set_length_1:Sr,_emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0:Mb,_emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0:it,_emscripten_bind_b2Mat33_set_ey_1:oc,_emscripten_bind_b2DistanceJointDef_get_type_0:Xr,_emscripten_bind_b2Draw_ClearFlags_1:Gk,_emscripten_bind_b2Body_IsActive_0:Ys,_emscripten_bind_b2Contact_ResetRestitution_0:xr,_emscripten_bind_b2World_GetAllowSleeping_0:Qh,_emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0:xm,_emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1:kh,_emscripten_bind_b2GearJointDef_set_bodyA_1:Nt,_emscripten_bind_b2RevoluteJointDef_set_enableMotor_1:yp,_emscripten_bind_b2PulleyJoint_IsActive_0:Oq,_emscripten_bind_b2MouseJoint_GetNext_0:nd,_emscripten_bind_b2Transform_set_p_1:Zm,_emscripten_bind_b2EdgeShape_set_m_vertex0_1:Wo,_emscripten_bind_b2PulleyJointDef_get_lengthB_0:hm,_emscripten_bind_b2WeldJoint_SetUserData_1:Jl,_emscripten_bind_b2Fixture_SetSensor_1:uc,_emscripten_bind_b2GearJointDef_get_joint1_0:Ct,_emscripten_bind_b2PrismaticJoint_GetMotorForce_1:Bi,_emscripten_bind_b2DistanceJoint_GetBodyA_0:Ub,_emscripten_bind_b2GearJoint_IsActive_0:pl,_emscripten_bind_b2EdgeShape_get_m_vertex0_0:Vo,_emscripten_bind_b2World_GetBodyCount_0:Yh,_emscripten_bind_b2Fixture_GetMassData_1:Fc,_emscripten_bind_b2WeldJointDef_get_collideConnected_0:Ak,_emscripten_bind_b2FrictionJoint_GetMaxTorque_0:mt,_emscripten_bind_b2EdgeShape_RayCast_4:Oo,_emscripten_bind_b2BodyDef_set_allowSleep_1:Ie,_emscripten_bind_b2PulleyJoint_GetType_0:Eq,_emscripten_bind_b2WeldJointDef_set_localAnchorA_1:jk,_emscripten_bind_b2Profile_set_step_1:be,_emscripten_bind_b2ContactEdge_set_other_1:yu,_emscripten_bind_b2PulleyJoint_GetCurrentLengthB_0:Dq,_emscripten_bind_b2Vec2_op_mul_1:nf,_emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0:Vg,_emscripten_bind_b2EdgeShape___destroy___0:fp,_emscripten_bind_b2RopeJoint_GetAnchorA_0:Yn,_emscripten_bind_b2World_GetContactCount_0:_h,_emscripten_bind_b2MotorJointDef_set_correctionFactor_1:hv,_emscripten_bind_b2DistanceJointDef_set_userData_1:_r,_emscripten_bind_b2ContactEdge_get_other_0:xu,_emscripten_bind_b2RopeJoint_GetLocalAnchorB_0:Rn,_emscripten_bind_b2PulleyJointDef___destroy___0:vm,_emscripten_bind_b2MouseJoint_GetBodyB_0:id,_emscripten_bind_b2PolygonShape_TestPoint_2:wo,_emscripten_bind_b2EdgeShape_set_m_vertex3_1:Yo,_emscripten_bind_b2PolygonShape_b2PolygonShape_0:oo,_emscripten_bind_b2GearJointDef_set_ratio_1:Ht,_emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1:dq,_emscripten_bind_b2WheelJointDef_get_localAxisA_0:xj,_emscripten_bind_b2DistanceJointDef_get_localAnchorA_0:Nr,_emscripten_bind_b2MassData_set_center_1:Mk,_emscripten_bind_b2Contact_SetTangentSpeed_1:yr,_emscripten_bind_b2FrictionJointDef_get_localAnchorB_0:sg,_emscripten_bind_b2BodyDef_get_active_0:Pe,_emscripten_bind_b2Body_GetAngularVelocity_0:ss,_emscripten_bind_b2WeldJoint_GetBodyB_0:Cl,_emscripten_bind_b2Draw___destroy___0:Hk,_emscripten_bind_b2WheelJointDef_Initialize_4:sj,_emscripten_bind_b2WeldJointDef_set_dampingRatio_1:rk,_emscripten_bind_b2Contact_IsEnabled_0:mr,_emscripten_bind_b2Joint_GetAnchorB_0:Uk,_emscripten_bind_b2PrismaticJointDef_get_userData_0:ph,_emscripten_bind_b2MotorJoint_GetMaxForce_0:Kd,_emscripten_bind_b2RevoluteJoint_GetBodyA_0:ju,_emscripten_bind_b2ContactID_set_cf_1:Vi,_emscripten_bind_b2Rot_GetXAxis_0:yd,_emscripten_bind_b2ContactEdge_set_prev_1:Cu,_emscripten_bind_b2Vec3_Set_3:Bf,_emscripten_bind_b2Fixture_GetNext_0:Ac,_emscripten_bind_b2FrictionJointDef_set_localAnchorB_1:tg,_emscripten_bind_b2PulleyJoint_GetNext_0:Lq,_emscripten_bind_b2ChainShape_get_m_type_0:Bn,_emscripten_bind_b2GearJointDef_get_bodyA_0:Mt,_emscripten_bind_b2DistanceJointDef_set_frequencyHz_1:Ur,_emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0:np,_emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0:pp,_emscripten_bind_JSContactFilter___destroy___0:ip,_memset:UB,_emscripten_bind_b2PolygonShape_get_m_radius_0:Go,_emscripten_bind_b2RopeJoint_GetUserData_0:bo,_emscripten_bind_b2RopeJointDef_get_bodyA_0:Ru,_emscripten_bind_b2DistanceJointDef_get_dampingRatio_0:Vr,_emscripten_enum_b2ManifoldType_e_faceA:Pv,_emscripten_enum_b2ManifoldType_e_faceB:Qv,_emscripten_bind_b2RevoluteJointDef_get_bodyB_0:Jp,_emscripten_bind_b2FixtureDef_b2FixtureDef_0:_f,_emscripten_bind_b2PrismaticJoint_SetUserData_1:Li,_emscripten_bind_b2EdgeShape_get_m_hasVertex3_0:$o,_emscripten_enum_b2ShapeType_e_edge:uv,_emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0:gu,_emscripten_bind_b2BodyDef_set_active_1:Qe,_emscripten_bind_b2DistanceJointDef_set_localAnchorB_1:Qr,_emscripten_bind_b2Body_GetWorldPoint_1:Ds,_emscripten_bind_b2ManifoldPoint_get_normalImpulse_0:Am,_emscripten_bind_JSContactFilter_ShouldCollide_2:hp,_emscripten_bind_b2Joint_GetReactionTorque_1:Wk,_emscripten_bind_b2RevoluteJointDef_set_type_1:Ep,_emscripten_bind_b2RopeJointDef_b2RopeJointDef_0:Gu,_emscripten_bind_b2BodyDef_get_linearDamping_0:De,_emscripten_bind_b2MotorJointDef_get_bodyB_0:ov,_emscripten_bind_b2World_Step_3:Hh,_emscripten_bind_b2CircleShape_RayCast_4:Yj,_emscripten_bind_b2Profile_get_step_0:ae,_emscripten_bind_b2Vec3_b2Vec3_0:yf,_emscripten_bind_b2Vec3_b2Vec3_3:zf,_emscripten_bind_b2PulleyJoint_GetLengthB_0:Aq,_emscripten_bind_b2Filter_set_categoryBits_1:Rc,_emscripten_bind_b2MotorJoint_GetUserData_0:Xd,_emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0:ki,_emscripten_bind_b2Shape_get_m_type_0:Gr,_emscripten_bind_b2MouseJoint_SetDampingRatio_1:ed,_emscripten_bind_b2World_GetAutoClearForces_0:gi,_emscripten_enum_b2ShapeType_e_circle:tv,_emscripten_bind_b2BodyDef_set_fixedRotation_1:Me,_emscripten_bind_b2RopeJoint_GetLimitState_0:Un,_emscripten_bind_b2JointDef_get_collideConnected_0:Rm,_emscripten_bind_b2Body_Dump_0:gt,_emscripten_bind_b2RevoluteJoint_GetLowerLimit_0:_t,_emscripten_bind_b2Body_GetWorldCenter_0:ns,_emscripten_bind_JSContactListener___destroy___0:dj,_emscripten_bind_b2BodyDef_set_linearVelocity_1:Ae,_emscripten_bind_b2JointDef_set_collideConnected_1:Sm,_emscripten_bind_b2MotorJoint___destroy___0:$d,_emscripten_bind_b2Body_GetUserData_0:dt,_emscripten_bind_b2World_GetContinuousPhysics_0:Uh,_emscripten_bind_b2Fixture_RayCast_3:Ec,_emscripten_bind_b2JointDef_set_bodyA_1:Om,_emscripten_bind_b2GearJointDef_get_collideConnected_0:Qt,_emscripten_bind_b2RopeJointDef_get_maxLength_0:Lu,_emscripten_bind_b2MouseJointDef_get_bodyA_0:cr,_emscripten_bind_b2Body_SetBullet_1:Rs,_emscripten_bind_b2DistanceJoint_GetType_0:Tb,_emscripten_bind_b2FixtureDef_get_restitution_0:fg,_emscripten_bind_b2Fixture_GetType_0:sc,_emscripten_bind_b2PulleyJointDef_set_localAnchorB_1:em,_emscripten_bind_b2RevoluteJoint_GetBodyB_0:ku,_emscripten_bind_b2Profile_set_solveInit_1:he,_emscripten_bind_b2RopeJointDef_set_type_1:Ou,_emscripten_bind_b2PrismaticJointDef_get_bodyB_0:th,_emscripten_bind_b2Body_SetLinearVelocity_1:ps,_emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0:Vt,_emscripten_bind_b2PulleyJointDef_get_userData_0:nm,_emscripten_bind_b2PrismaticJointDef_set_bodyB_1:uh,_emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0:og,_free:SB,_emscripten_bind_b2PulleyJoint_GetCurrentLengthA_0:Cq,_emscripten_bind_b2Manifold_get_localNormal_0:Kg,_emscripten_bind_b2AABB_RayCast_2:Uf,_emscripten_bind_b2FixtureDef_set_isSensor_1:kg,_emscripten_bind_b2RopeJoint_GetBodyB_0:Xn,_emscripten_bind_b2PrismaticJoint_GetAnchorA_0:Fi,_emscripten_bind_b2ChainShape_set_m_count_1:sn,_emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0:vi,_emscripten_bind_b2WeldJoint_GetFrequency_0:wl,_emscripten_bind_b2Joint_GetUserData_0:Yk,_emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0:tp,_emscripten_bind_b2Manifold_set_type_1:Pg,_emscripten_bind_b2DistanceJoint_GetLength_0:Ob,_emscripten_bind_b2RopeJointDef_set_maxLength_1:Mu,_emscripten_bind_b2ChainShape_TestPoint_2:ln,_emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0:ni,_emscripten_bind_b2RayCastInput_get_p2_0:jo,_emscripten_bind_b2RevoluteJoint_EnableLimit_1:Zt,_emscripten_bind_b2BodyDef_set_angle_1:ye,_emscripten_bind_b2WeldJoint_GetUserData_0:Il,_emscripten_bind_b2WheelJointDef_get_localAnchorA_0:tj,_emscripten_bind_b2PulleyJointDef_set_type_1:mm,_emscripten_bind_b2Body_IsBullet_0:Ss,_emscripten_bind_b2MotorJointDef_set_bodyA_1:nv,_emscripten_bind_b2Mat33_GetSymInverse33_1:kc,_emscripten_bind_b2Body_ApplyLinearImpulse_3:ws,_emscripten_bind_b2PolygonShape_ComputeMass_2:zo,_emscripten_bind_b2WeldJoint_GetLocalAnchorA_0:tl,_emscripten_bind_b2MouseJoint_SetFrequency_1:cd,_emscripten_bind_b2EdgeShape_get_m_vertex1_0:Ro,_emscripten_bind_b2BodyDef_set_awake_1:Ke,_emscripten_bind_b2Vec2_get_y_0:vf,_emscripten_bind_b2Body_CreateFixture_1:gs,_emscripten_bind_b2Body_CreateFixture_2:hs,_emscripten_bind_b2PulleyJoint_GetUserData_0:Mq,_emscripten_bind_b2Body_SetActive_1:Xs,_emscripten_bind_b2Fixture_GetUserData_0:Bc,_emscripten_bind_b2PolygonShape_ComputeAABB_3:yo,_emscripten_bind_b2ContactFeature_get_typeA_0:bf,_emscripten_bind_b2MouseJoint_GetReactionForce_1:ld,_emscripten_bind_b2FrictionJoint_GetReactionTorque_1:tt,_emscripten_bind_b2EdgeShape_TestPoint_2:No,_memcpy:WB,_emscripten_bind_b2PolygonShape_get_m_centroid_0:Ao,_emscripten_bind_b2ChainShape___destroy___0:Fn,_emscripten_bind_b2GearJoint_SetUserData_1:ol,_emscripten_bind_b2Vec3_set_z_1:Kf,_emscripten_bind_b2PrismaticJointDef_set_enableLimit_1:ch,_emscripten_bind_b2DistanceJoint_GetFrequency_0:Qb,_emscripten_bind_b2Body_SetGravityScale_1:Os,_emscripten_enum_b2ContactFeatureType_e_face:_v,_emscripten_bind_b2AABB_GetPerimeter_0:Qf,_emscripten_bind_b2PulleyJointDef_get_lengthA_0:fm,_emscripten_bind_b2Vec3_set_x_1:Gf,_emscripten_bind_b2PulleyJointDef_get_type_0:lm,_emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1:Fb,_emscripten_bind_b2Shape___destroy___0:Kr,_strlen:VB,_emscripten_bind_b2Color_set_b_1:On,_emscripten_bind_b2Joint_GetReactionForce_1:Vk,_emscripten_bind_b2FixtureDef_set_friction_1:eg,_emscripten_bind_b2ContactID___destroy___0:Yi,_emscripten_bind_b2EdgeShape_get_m_hasVertex0_0:Zo,_emscripten_bind_JSRayCastCallback_ReportFixture_4:Xe,_emscripten_bind_b2MotorJointDef_get_linearOffset_0:_u,_emscripten_bind_b2Profile_set_solveVelocity_1:je,_emscripten_bind_b2PrismaticJoint_GetAnchorB_0:Gi,_emscripten_bind_b2WeldJointDef_b2WeldJointDef_0:gk,_emscripten_enum_b2BodyType_b2_staticBody:Rv,_emscripten_bind_b2RevoluteJointDef_set_upperAngle_1:wp,_emscripten_bind_b2RevoluteJointDef_get_type_0:Dp,_emscripten_bind_b2GearJointDef_get_type_0:It,_emscripten_bind_b2ChainShape_GetType_0:jn,_emscripten_bind_b2RayCastInput_get_maxFraction_0:lo,_emscripten_bind_b2GearJoint_GetBodyA_0:gl,_emscripten_bind_b2Body_GetLocalVector_1:Gs,_emscripten_bind_b2PrismaticJoint_EnableLimit_1:ri,_emscripten_bind_b2FrictionJointDef_get_maxForce_0:ug,_emscripten_bind_b2BodyDef_set_angularVelocity_1:Ce,_emscripten_bind_b2Body_SetLinearDamping_1:Ks,_emscripten_bind_b2WheelJoint_GetBodyB_0:mq,_emscripten_bind_b2Color___destroy___0:Pn,_emscripten_bind_b2PrismaticJoint_IsActive_0:Mi,_emscripten_bind_b2Filter_get_categoryBits_0:Qc,_emscripten_enum_b2JointType_e_weldJoint:Gv,_emscripten_bind_b2World_SetContinuousPhysics_1:Th,_emscripten_bind_b2MouseJointDef_get_target_0:Sq,_emscripten_bind_b2Manifold_b2Manifold_0:Jg,_emscripten_bind_b2PulleyJointDef_set_userData_1:om,_emscripten_bind_b2FrictionJointDef_set_maxForce_1:vg,_emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0:Lr,_emscripten_bind_b2PolygonShape_set_m_centroid_1:Bo,_emscripten_bind_b2Mat33_GetInverse22_1:jc,_emscripten_bind_b2PolygonShape_SetAsBox_4:ro,_emscripten_bind_b2EdgeShape_get_m_vertex2_0:To,_emscripten_bind_b2WheelJoint_GetReactionTorque_1:qq,_emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0:jp,_emscripten_bind_b2ContactFeature_set_typeA_1:cf,_emscripten_bind_b2Fixture_Dump_1:Nc,_emscripten_bind_b2World_GetJointList_0:Nh,_emscripten_bind_b2Manifold_set_localPoint_1:Ng,_emscripten_bind_b2DistanceJoint_SetUserData_1:ac,_emscripten_bind_b2BodyDef_set_bullet_1:Oe,_emscripten_bind_b2RayCastOutput___destroy___0:Ti,___cxa_can_catch:PB,_emscripten_bind_b2WheelJoint_GetNext_0:rq,_emscripten_bind_b2AABB_GetCenter_0:Of,_emscripten_bind_b2Filter_set_groupIndex_1:Vc,_emscripten_bind_b2JointDef_b2JointDef_0:Im,_emscripten_bind_b2CircleShape_b2CircleShape_0:Uj,_emscripten_bind_b2GearJointDef_b2GearJointDef_0:Bt,_emscripten_bind_b2JointDef_get_bodyB_0:Pm,_emscripten_bind_b2DistanceJoint_GetReactionForce_1:Yb,_emscripten_bind_b2PrismaticJoint_GetJointSpeed_0:pi,_emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0:$l,_emscripten_bind_b2Joint_GetAnchorA_0:Tk,_emscripten_bind_b2Contact_GetRestitution_0:wr,_emscripten_bind_b2ContactEdge_get_contact_0:zu,_emscripten_bind_b2RevoluteJointDef_get_userData_0:Fp,_emscripten_bind_b2Body_ApplyTorque_2:vs,_emscripten_bind_b2Fixture_GetAABB_1:Mc,_emscripten_bind_b2DistanceJointDef_Initialize_4:Mr,_emscripten_bind_b2PrismaticJointDef_set_collideConnected_1:wh,_emscripten_bind_b2PrismaticJointDef_set_localAxisA_1:_g,_emscripten_bind_b2Contact_GetTangentSpeed_0:zr,_emscripten_enum_b2LimitState_e_atLowerLimit:Lv,_emscripten_bind_b2ManifoldPoint_set_id_1:Fm,_emscripten_bind_b2WheelJointDef_get_bodyB_0:Pj,_emscripten_bind_b2WeldJoint_GetLocalAnchorB_0:ul,_emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1:op,_emscripten_bind_b2RevoluteJoint_GetType_0:iu,_emscripten_bind_b2Body_DestroyFixture_1:is,_emscripten_bind_b2Profile_set_broadphase_1:ne,_emscripten_bind_b2WheelJointDef_get_localAnchorB_0:vj,_emscripten_bind_b2ContactImpulse_get_count_0:Ib,_emscripten_bind_b2World_GetJointCount_0:Zh,_emscripten_bind_b2WheelJoint_GetMotorSpeed_0:cq,_emscripten_bind_b2Body_GetAngularDamping_0:Ls,_emscripten_bind_b2WheelJointDef_get_dampingRatio_0:Hj,_emscripten_bind_b2RayCastOutput_get_fraction_0:Ri,_emscripten_enum_b2ManifoldType_e_circles:Ov,_emscripten_bind_b2GearJoint_SetRatio_1:dl,_emscripten_bind_JSDraw_DrawPolygon_3:Pp,_emscripten_bind_b2Filter___destroy___0:Wc,_emscripten_bind_b2JointEdge_set_next_1:Vl,___cxa_is_pointer_type:QB,_emscripten_bind_b2BodyDef_get_fixedRotation_0:Le,_emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1:mh,_emscripten_bind_b2ChainShape_SetPrevVertex_1:fn,_emscripten_bind_b2MotorJoint_IsActive_0:Zd,_emscripten_bind_b2MouseJoint_GetReactionTorque_1:md,_emscripten_bind_b2MouseJoint_GetUserData_0:od,_emscripten_bind_b2WheelJoint_GetUserData_0:sq,_emscripten_bind_b2Vec3_op_sub_1:Df,_emscripten_bind_b2BodyDef_get_gravityScale_0:Te,_emscripten_bind_b2Shape_GetType_0:Ar,_emscripten_bind_b2AABB_IsValid_0:Nf,_emscripten_bind_b2WheelJoint_GetBodyA_0:lq,_emscripten_bind_JSDraw_DrawTransform_1:Up,_emscripten_bind_b2PulleyJoint_GetLengthA_0:zq,_emscripten_bind_b2DistanceJointDef_get_frequencyHz_0:Tr,_emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1:du,_emscripten_bind_b2World___destroy___0:ji,_emscripten_bind_b2ChainShape_get_m_hasNextVertex_0:zn,_emscripten_bind_b2ChainShape_SetNextVertex_1:gn,_emscripten_bind_b2Body_SetType_1:Ps,_emscripten_bind_b2Body_GetMass_0:ys,_emscripten_bind_b2Rot_b2Rot_0:td,_emscripten_bind_b2Rot_b2Rot_1:ud,_emscripten_enum_b2JointType_e_distanceJoint:Bv,_emscripten_bind_b2PulleyJoint___destroy___0:Qq,_emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0:li,_emscripten_bind_b2MouseJoint_GetType_0:gd,_emscripten_bind_JSQueryCallback___destroy___0:Zc,_emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1:up,_emscripten_bind_b2JointEdge___destroy___0:Wl,_emscripten_bind_b2PulleyJoint_GetRatio_0:Bq,_emscripten_bind_JSContactListener_BeginContact_1:$i,_emscripten_bind_b2MotorJointDef_set_linearOffset_1:$u,_emscripten_enum_b2JointType_e_motorJoint:Jv,_emscripten_bind_b2JointEdge_get_next_0:Ul,_emscripten_bind_b2RayCastInput_set_maxFraction_1:mo,_emscripten_bind_b2MouseJoint_GetBodyA_0:hd,_emscripten_bind_b2Profile_set_collide_1:de,_emscripten_bind_b2AABB_b2AABB_0:Mf,_emscripten_bind_b2Fixture_Refilter_0:yc,_emscripten_bind_b2World_CreateBody_1:Dh,_emscripten_bind_b2RopeJointDef_set_userData_1:Qu,_emscripten_bind_b2Fixture_IsSensor_0:vc,_emscripten_bind_b2WeldJoint_GetType_0:Al,_emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0:lh,_emscripten_bind_b2Rot___destroy___0:Ed,_emscripten_bind_b2Filter_get_maskBits_0:Sc,_emscripten_bind_b2Mat22_get_ex_0:mj,_emscripten_bind_b2Body_GetFixtureList_0:$s,_emscripten_bind_b2RevoluteJointDef_get_enableMotor_0:xp,_emscripten_bind_b2MouseJointDef_set_dampingRatio_1:Zq,_emscripten_bind_JSRayCastCallback___destroy___0:Ye,_emscripten_bind_b2ContactListener___destroy___0:wm,_emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1:Yg,_emscripten_enum_b2DrawFlag_e_pairBit:Xv,_emscripten_bind_b2FrictionJoint___destroy___0:zt,_emscripten_bind_b2WeldJoint_Dump_0:zl,_emscripten_bind_b2MotorJoint_SetMaxForce_1:Jd,_emscripten_bind_b2FrictionJointDef_get_maxTorque_0:wg,_emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0:ht,_emscripten_bind_b2WeldJointDef_get_localAnchorB_0:kk,_emscripten_bind_b2PrismaticJointDef_get_bodyA_0:rh,_emscripten_bind_b2Vec2_IsValid_0:rf,_emscripten_bind_b2PrismaticJointDef_set_bodyA_1:sh,_emscripten_bind_b2World_GetWarmStarting_0:Sh,_emscripten_bind_b2RevoluteJointDef_set_enableLimit_1:sp,_emscripten_bind_b2WeldJointDef___destroy___0:Ck,_emscripten_bind_b2Mat22_Solve_1:lj,_emscripten_bind_b2Color_get_g_0:Ln,_emscripten_bind_VoidPtr___destroy___0:re,_emscripten_bind_b2RopeJoint_GetNext_0:ao,_emscripten_bind_b2Filter_b2Filter_0:Pc,_emscripten_bind_b2PolygonShape_GetChildCount_0:vo,_emscripten_bind_b2GearJointDef_get_ratio_0:Gt,_emscripten_bind_b2Mat33_Solve33_1:hc,_emscripten_bind_b2PulleyJoint_GetReactionForce_1:Jq,_emscripten_bind_b2WheelJoint_GetCollideConnected_0:vq,_emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1:iq,_emscripten_bind_b2RevoluteJointDef___destroy___0:Np,_emscripten_bind_b2MouseJointDef_get_maxForce_0:Uq,_emscripten_bind_b2RevoluteJoint_EnableMotor_1:cu,_emscripten_bind_b2ContactFeature_get_typeB_0:df,_emscripten_bind_b2MotorJoint_SetLinearOffset_1:Fd,_emscripten_bind_b2MotorJoint_GetReactionForce_1:Ud,_emscripten_bind_b2Rot_GetAngle_0:xd,_emscripten_bind_b2World_SetAllowSleeping_1:Ph,_emscripten_bind_b2MotorJoint_SetAngularOffset_1:Hd,_emscripten_bind_b2MotorJoint_GetLinearOffset_0:Gd,_emscripten_bind_b2FrictionJoint_GetCollideConnected_0:yt,_emscripten_bind_b2WheelJointDef_set_motorSpeed_1:Ej,_emscripten_bind_b2MotorJoint_GetAnchorA_0:Sd,_emscripten_bind_b2Fixture_GetDensity_0:Hc,_emscripten_bind_b2PolygonShape_get_m_type_0:Eo,_emscripten_bind_b2Vec2_Set_2:kf,_emscripten_bind_b2WeldJointDef_get_type_0:sk,_emscripten_bind_b2MouseJointDef_b2MouseJointDef_0:Rq,_emscripten_bind_b2Rot_get_s_0:Ad,_emscripten_bind_b2FrictionJoint_SetMaxTorque_1:lt,_emscripten_bind_b2MouseJointDef_get_frequencyHz_0:Wq,_emscripten_bind_b2FrictionJoint_SetUserData_1:wt,_emscripten_bind_b2FixtureDef_set_userData_1:cg,_emscripten_bind_b2JointDef_get_userData_0:Lm,_emscripten_bind_b2DistanceJointDef_get_collideConnected_0:ds,_emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1:qp,_emscripten_bind_b2ContactFeature___destroy___0:ff,_emscripten_bind_b2DistanceJointDef_set_bodyB_1:cs,_emscripten_bind_JSQueryCallback_JSQueryCallback_0:Xc,_emscripten_bind_b2ChainShape_GetChildCount_0:kn,_emscripten_bind_b2MassData_b2MassData_0:Ik,_emscripten_bind_b2Vec3_set_y_1:If,_emscripten_bind_b2AABB_Combine_1:Rf,_emscripten_bind_b2AABB_Combine_2:Sf,_emscripten_bind_b2PrismaticJoint_GetBodyA_0:Di,_emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0:Ai,_emscripten_bind_b2AABB___destroy___0:Zf,_emscripten_bind_b2Body_IsSleepingAllowed_0:Us,_emscripten_bind_b2MouseJointDef_set_maxForce_1:Vq,_emscripten_bind_b2MotorJoint_GetCorrectionFactor_0:Od,_emscripten_bind_b2Profile_get_solve_0:ee,_emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1:Gb,_emscripten_bind_b2PolygonShape_GetVertexCount_0:so,_emscripten_bind_b2Rot_get_c_0:Cd,_emscripten_bind_b2AABB_set_lowerBound_1:Wf,_emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0:xn,_emscripten_bind_b2MouseJoint_SetMaxForce_1:ad,_emscripten_bind_b2FrictionJointDef_get_bodyB_0:Eg,_emscripten_bind_b2JointDef_set_userData_1:Mm,_emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0:Cm,_emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0:Bp,_emscripten_bind_b2WeldJointDef_get_dampingRatio_0:qk,_emscripten_bind_b2MouseJoint___destroy___0:sd,_emscripten_bind_b2EdgeShape_b2EdgeShape_0:Jo,_emscripten_bind_b2FrictionJoint_GetReactionForce_1:st,_emscripten_bind_b2DistanceJointDef_set_type_1:Yr,_emscripten_bind_b2WeldJoint___destroy___0:Ml,_emscripten_bind_JSContactListener_PostSolve_2:cj,_emscripten_bind_b2PulleyJoint_GetBodyA_0:Fq,_emscripten_bind_b2RopeJointDef_get_type_0:Nu,_emscripten_bind_b2CircleShape_ComputeMass_2:_j,_emscripten_bind_b2DistanceJointDef_get_localAnchorB_0:Pr,_emscripten_bind_b2GearJointDef___destroy___0:St,_emscripten_bind_b2RevoluteJointDef_set_bodyA_1:Ip,_emscripten_enum_b2BodyType_b2_dynamicBody:Tv,_emscripten_bind_b2CircleShape_TestPoint_2:Xj,_emscripten_bind_b2MotorJointDef_get_maxTorque_0:ev,_emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1:Is,_emscripten_bind_b2Mat22_b2Mat22_0:ej,_emscripten_bind_b2MouseJoint_GetAnchorB_0:kd,_emscripten_enum_b2BodyType_b2_kinematicBody:Sv,_emscripten_bind_b2Manifold_get_localPoint_0:Mg,_emscripten_bind_b2GearJoint_GetBodyB_0:hl,_emscripten_bind_b2ChainShape_Clear_0:cn,_emscripten_bind_b2CircleShape___destroy___0:fk,_emscripten_bind_b2MotorJoint_GetType_0:Pd,_emscripten_bind_b2BodyDef_get_awake_0:Je,_emscripten_bind_b2Contact_SetRestitution_1:vr,_emscripten_bind_b2BodyDef_get_angularDamping_0:Fe,_emscripten_bind_b2EdgeShape_get_m_vertex3_0:Xo,_emscripten_bind_b2Fixture_SetUserData_1:Cc,_emscripten_bind_b2Transform_SetIdentity_0:Wm,_emscripten_bind_b2GearJointDef_set_joint1_1:Dt,_emscripten_bind_b2EdgeShape_set_m_vertex2_1:Uo,_emscripten_bind_b2ContactEdge_get_next_0:Du,_emscripten_bind_b2ContactFeature_set_indexB_1:af,_emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1:Hs,_emscripten_bind_b2WeldJoint_GetCollideConnected_0:Ll,_emscripten_bind_b2Mat22_set_ey_1:pj,_emscripten_bind_b2WheelJointDef_set_frequencyHz_1:Gj,_emscripten_bind_b2World_GetSubStepping_0:Wh,_emscripten_bind_b2Rot_GetYAxis_0:zd,_emscripten_bind_b2Contact_GetChildIndexB_0:rr,_emscripten_bind_b2DistanceJoint___destroy___0:dc,_emscripten_bind_b2EdgeShape_GetType_0:Lo,_emscripten_bind_b2WheelJointDef_set_dampingRatio_1:Ij,_emscripten_bind_b2ManifoldPoint___destroy___0:Gm,_emscripten_enum_b2JointType_e_prismaticJoint:Av,_emscripten_bind_b2MotorJoint_GetNext_0:Wd,_emscripten_bind_b2Vec2_Length_0:of,_emscripten_bind_b2Vec2_SetZero_0:jf,_emscripten_bind_b2RopeJoint___destroy___0:go,_emscripten_bind_b2World_DestroyJoint_1:Gh,_emscripten_bind_b2JointDef_set_bodyB_1:Qm,_emscripten_bind_b2Mat22_Set_2:hj,_emscripten_bind_b2Body_GetType_0:Qs,_emscripten_bind_b2WeldJoint_GetAnchorB_0:El,_emscripten_bind_b2WeldJoint_GetNext_0:Hl,_emscripten_bind_b2Shape_get_m_radius_0:Ir,_emscripten_bind_b2EdgeShape_ComputeAABB_3:Po,_emscripten_bind_b2BodyDef_get_type_0:te,_emscripten_bind_b2WheelJointDef_set_collideConnected_1:Sj,_emscripten_bind_JSDestructionListener___destroy___0:Hb,_emscripten_bind_b2MotorJointDef_get_type_0:iv,_emscripten_bind_b2RopeJoint_GetLocalAnchorA_0:Qn,_emscripten_bind_b2BodyDef_set_linearDamping_1:Ee,_emscripten_bind_b2FrictionJoint_GetUserData_0:vt,_emscripten_bind_b2Contact_SetFriction_1:sr,_emscripten_bind_b2Manifold_set_localNormal_1:Lg,_emscripten_bind_b2JointDef_get_bodyA_0:Nm,_emscripten_bind_b2Body_GetLinearDamping_0:Js,_emscripten_bind_b2WeldJointDef_set_frequencyHz_1:pk,_emscripten_bind_b2Body_ResetMassData_0:Cs,_emscripten_bind_b2PrismaticJointDef_set_enableMotor_1:ih,_emscripten_enum_b2JointType_e_wheelJoint:Fv,_emscripten_bind_b2Vec2_Skew_0:sf,_emscripten_bind_b2MouseJoint_GetDampingRatio_0:fd,_emscripten_bind_b2RevoluteJoint_GetAnchorA_0:lu,_emscripten_bind_b2ChainShape_set_m_prevVertex_1:un,_emscripten_bind_b2WheelJoint_GetAnchorA_0:nq,_emscripten_bind_b2MotorJoint_GetMaxTorque_0:Md,_emscripten_bind_b2FrictionJoint_GetNext_0:ut,_emscripten_bind_b2PrismaticJointDef_set_userData_1:qh,_emscripten_bind_b2FrictionJointDef_set_type_1:zg,_emscripten_bind_b2PrismaticJoint_GetUserData_0:Ki,_emscripten_bind_b2FrictionJointDef_get_collideConnected_0:Gg,_emscripten_bind_b2Body_GetInertia_0:zs,_emscripten_bind_b2WeldJointDef_set_referenceAngle_1:nk,_emscripten_bind_b2FrictionJoint_GetAnchorA_0:qt,_emscripten_bind_b2RopeJoint_GetType_0:Vn,_emscripten_bind_b2MassData_get_I_0:Nk,_emscripten_bind_b2WheelJointDef_get_motorSpeed_0:Dj,_emscripten_bind_b2WeldJointDef_get_referenceAngle_0:mk,_emscripten_enum_b2JointType_e_ropeJoint:Iv,_emscripten_bind_b2Filter_set_maskBits_1:Tc,_emscripten_bind_b2EdgeShape_set_m_radius_1:ep,_emscripten_bind_b2MotorJointDef_set_collideConnected_1:rv,_emscripten_bind_b2Mat22_b2Mat22_2:fj,_emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1:Cj,_emscripten_bind_b2FrictionJointDef_set_bodyB_1:Fg,_emscripten_bind_b2Mat22_b2Mat22_4:gj,_emscripten_bind_b2ChainShape_set_m_hasNextVertex_1:An,_emscripten_bind_b2Mat22_GetInverse_0:kj,_emscripten_bind_b2PrismaticJoint_EnableMotor_1:wi,_emscripten_bind_b2CircleShape_get_m_type_0:bk,_emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0:Lb,_emscripten_bind_b2ContactEdge_b2ContactEdge_0:wu,_emscripten_bind_b2BodyDef___destroy___0:Ve,_emscripten_bind_b2FrictionJointDef_set_maxTorque_1:xg,_emscripten_bind_b2PolygonShape_GetVertex_1:to,_emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1:am,_emscripten_bind_b2RevoluteJointDef_get_collideConnected_0:Lp,_emscripten_bind_b2DistanceJointDef_set_bodyA_1:as,_emscripten_bind_b2RevoluteJoint_SetLimits_2:au,_emscripten_bind_b2WeldJointDef_set_type_1:tk,_emscripten_bind_b2MotorJointDef___destroy___0:sv,_emscripten_bind_b2FixtureDef_set_density_1:ig,_emscripten_bind_b2Shape_set_m_type_1:Hr,_emscripten_bind_b2WheelJoint_GetJointTranslation_0:Zp,_emscripten_bind_b2WheelJoint_GetMotorTorque_1:fq,_emscripten_bind_b2RopeJoint_SetUserData_1:co,_emscripten_bind_b2RopeJointDef___destroy___0:Xu,_emscripten_bind_b2WheelJoint_IsActive_0:uq,_emscripten_bind_b2PrismaticJointDef_get_enableMotor_0:hh,_emscripten_bind_b2MotorJointDef_set_bodyB_1:pv,_emscripten_bind_b2Transform_b2Transform_2:Vm,_emscripten_bind_b2WeldJoint_GetReactionForce_1:Fl,_emscripten_bind_b2ChainShape_RayCast_4:mn,_emscripten_bind_b2PrismaticJoint_GetUpperLimit_0:ti,_emscripten_bind_b2ContactID_get_cf_0:Ui,_emscripten_bind_b2MouseJointDef_set_frequencyHz_1:Xq,_emscripten_bind_b2ChainShape_get_m_radius_0:Dn,_emscripten_bind_b2Body_GetLinearVelocity_0:qs,_emscripten_bind_b2ChainShape_set_m_radius_1:En,_emscripten_bind_b2DistanceJoint_GetReactionTorque_1:Zb,_emscripten_bind_b2World_Dump_0:ii,_emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0:Ut,_emscripten_bind_JSContactFilter_JSContactFilter_0:gp,_emscripten_bind_b2Profile_set_solve_1:fe,_emscripten_bind_b2WeldJoint_GetDampingRatio_0:yl,_emscripten_bind_b2Color_get_b_0:Nn,_emscripten_bind_b2MouseJointDef_get_userData_0:ar,_emscripten_bind_b2CircleShape_ComputeAABB_3:Zj,_emscripten_bind_b2RopeJoint_GetReactionForce_1:_n,_emscripten_bind_b2PrismaticJointDef_get_enableLimit_0:bh,_emscripten_bind_b2ManifoldPoint_set_localPoint_1:zm,_emscripten_bind_b2Fixture_GetFilterData_0:xc,_emscripten_bind_b2World_GetBodyList_0:Mh,_emscripten_bind_b2Shape_ComputeMass_2:Fr,_emscripten_bind_b2Joint_GetNext_0:Xk,_emscripten_bind_b2PrismaticJointDef_get_collideConnected_0:vh,_emscripten_bind_b2World_RayCast_3:Lh,_emscripten_bind_b2MassData_set_I_1:Ok,_emscripten_bind_b2MassData___destroy___0:Pk,_emscripten_bind_b2Profile_get_collide_0:ce,_emscripten_bind_b2Color_b2Color_3:Hn,_emscripten_bind_b2Color_b2Color_0:Gn,_emscripten_bind_b2MouseJoint_GetFrequency_0:dd,_emscripten_bind_b2WeldJointDef_Initialize_3:hk,_emscripten_bind_b2Shape_GetChildCount_0:Br,_emscripten_enum_b2JointType_e_gearJoint:Ev,_emscripten_bind_b2FixtureDef_get_friction_0:dg,_emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1:Wg,_emscripten_bind_b2Contact_GetManifold_0:jr,_emscripten_bind_b2MouseJoint_GetTarget_0:$c,_emscripten_bind_b2WeldJointDef_get_localAnchorA_0:ik,_emscripten_bind_b2MouseJoint_SetUserData_1:pd,_emscripten_bind_b2JointEdge_get_other_0:Ol,_emscripten_bind_b2ChainShape_GetChildEdge_2:hn,_emscripten_bind_b2GearJointDef_set_collideConnected_1:Rt,_emscripten_bind_b2MotorJointDef_get_angularOffset_0:av,_emscripten_bind_b2WheelJoint_SetUserData_1:tq,_emscripten_bind_b2Body_ApplyForce_3:ts,_emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1:xi,_emscripten_bind_b2DistanceJoint_GetCollideConnected_0:cc,_emscripten_bind_b2MouseJoint_GetMaxForce_0:bd,_emscripten_bind_b2World_SetGravity_1:ci,_emscripten_bind_b2Mat22_SetZero_0:jj,_emscripten_bind_b2Contact_GetChildIndexA_0:pr,_emscripten_bind_b2Fixture_SetRestitution_1:Lc,_emscripten_bind_b2Body_GetTransform_0:ks,_emscripten_bind_b2ContactEdge___destroy___0:Fu,_emscripten_bind_b2Mat33_set_ex_1:mc,_emscripten_bind_b2AABB_GetExtents_0:Pf,_emscripten_bind_b2RevoluteJointDef_get_bodyA_0:Hp,_emscripten_bind_b2PrismaticJoint_GetBodyB_0:Ei,_emscripten_bind_b2WheelJointDef_set_bodyA_1:Oj,_emscripten_bind_b2DistanceJointDef_set_collideConnected_1:es,_emscripten_bind_b2BodyDef_get_angle_0:xe,_emscripten_bind_b2PulleyJoint_GetReactionTorque_1:Kq,_emscripten_bind_b2FixtureDef_get_shape_0:$f,_emscripten_bind_b2WeldJointDef_get_userData_0:uk,_emscripten_bind_b2FrictionJoint_SetMaxForce_1:jt,_emscripten_bind_b2Mat33_b2Mat33_3:fc,_emscripten_bind_b2Vec3_get_y_0:Hf,_emscripten_bind_b2JointDef_get_type_0:Jm,_emscripten_bind_JSQueryCallback_ReportFixture_1:Yc,_emscripten_bind_b2Fixture_TestPoint_1:Dc,_emscripten_bind_b2RevoluteJoint_GetCollideConnected_0:tu,_emscripten_bind_JSDraw_JSDraw_0:Op,_emscripten_bind_b2MouseJoint_GetAnchorA_0:jd,_emscripten_bind_b2Transform_get_p_0:Ym,_emscripten_bind_b2EdgeShape_ComputeMass_2:Qo,_emscripten_bind_b2World_GetProfile_0:hi,_emscripten_bind_b2DistanceJointDef___destroy___0:fs,_emscripten_bind_b2RopeJointDef_set_bodyA_1:Su,_emscripten_bind_b2JointDef_set_type_1:Km,_emscripten_bind_b2Draw_AppendFlags_1:Fk,_emscripten_bind_b2MotorJointDef_get_userData_0:kv,_emscripten_bind_b2World_GetContactList_0:Oh,_emscripten_bind_b2Mat33_set_ez_1:qc,_emscripten_bind_b2JointEdge_b2JointEdge_0:Nl,_emscripten_bind_b2FrictionJointDef_get_bodyA_0:Cg,_emscripten_bind_b2WheelJointDef_get_type_0:Jj,_emscripten_bind_b2RevoluteJoint_GetReactionForce_1:nu,_emscripten_bind_b2PulleyJointDef_set_collideConnected_1:um,_emscripten_bind_b2RopeJoint_GetCollideConnected_0:fo,_emscripten_bind_b2GearJointDef_set_joint2_1:Ft,_emscripten_bind_b2BodyDef_set_userData_1:Se,_emscripten_bind_b2GearJoint_GetAnchorB_0:jl,_emscripten_bind_b2RopeJoint_IsActive_0:eo,_emscripten_bind_b2Fixture_GetFriction_0:Ic,_emscripten_enum_b2DrawFlag_e_aabbBit:Wv,_emscripten_bind_b2RevoluteJointDef_Initialize_3:kp,_emscripten_bind_b2Body_GetAngle_0:ms,_emscripten_bind_b2EdgeShape_Set_2:Ko,_emscripten_bind_b2Mat33_SetZero_0:gc,_emscripten_bind_b2MotorJointDef_set_maxTorque_1:fv,_emscripten_bind_b2PrismaticJointDef_get_localAxisA_0:Zg,_emscripten_bind_b2Mat22_get_ey_0:oj,_emscripten_bind_b2Mat22_SetIdentity_0:ij,_emscripten_bind_b2Joint_IsActive_0:_k,_emscripten_bind_b2BodyDef_get_allowSleep_0:He,_emscripten_bind_b2World_GetTreeHeight_0:$h,_emscripten_bind_b2GearJoint_GetJoint2_0:cl,_emscripten_bind_b2EdgeShape_set_m_vertex1_1:So,_emscripten_bind_b2Body_GetWorld_0:ft,_emscripten_enum_b2LimitState_e_inactiveLimit:Kv,_emscripten_bind_b2PulleyJointDef_set_lengthB_1:im,_emscripten_bind_b2Body_SetAwake_1:Vs,_emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1:gh,_emscripten_bind_b2Vec2___destroy___0:xf,_emscripten_bind_b2RayCastInput_set_p1_1:io,_emscripten_bind_b2Contact_ResetFriction_0:ur,_emscripten_bind_b2PulleyJoint_GetAnchorA_0:Hq,_emscripten_bind_b2BodyDef_get_linearVelocity_0:ze,_emscripten_bind_b2DistanceJointDef_get_bodyB_0:bs,_emscripten_bind_b2Mat22___destroy___0:qj,_emscripten_bind_b2RevoluteJoint_GetAnchorB_0:mu,_emscripten_bind_b2RevoluteJoint_GetNext_0:pu,_emscripten_bind_b2WeldJointDef_get_bodyA_0:wk,_emscripten_bind_b2MotorJoint_GetAnchorB_0:Td,_emscripten_bind_b2Fixture_GetShape_0:tc,_emscripten_bind_b2PolygonShape_SetAsBox_2:qo,_emscripten_bind_b2Vec3_op_mul_1:Ef,_emscripten_bind_b2PolygonShape_set_m_type_1:Fo,_emscripten_bind_b2WheelJoint_GetType_0:kq,_emscripten_bind_b2MotorJoint_GetAngularOffset_0:Id,_emscripten_bind_b2RevoluteJoint_IsActive_0:su,_emscripten_bind_b2GearJoint_GetNext_0:ml,_emscripten_bind_b2MotorJointDef_get_correctionFactor_0:gv,_emscripten_bind_b2Color_Set_3:In,_emscripten_bind_b2EdgeShape_set_m_type_1:cp,_emscripten_bind_b2WheelJoint_GetLocalAxisA_0:Yp,_emscripten_bind_b2Body_GetNext_0:ct,_emscripten_bind_b2RopeJoint_GetBodyA_0:Wn,_emscripten_enum_b2JointType_e_unknownJoint:yv,_emscripten_bind_b2ContactFeature_set_indexA_1:_e,_emscripten_bind_b2Profile_get_solveInit_0:ge,_emscripten_bind_b2BodyDef_set_angularDamping_1:Ge,_emscripten_bind_b2FrictionJoint_GetAnchorB_0:rt,_emscripten_bind_b2World_QueryAABB_2:Kh,_emscripten_bind_b2BodyDef_get_userData_0:Re,_emscripten_bind_b2ContactID_get_key_0:Wi,_emscripten_bind_b2Body_SetAngularVelocity_1:rs,_emscripten_bind_b2WheelJointDef_get_userData_0:Lj,_emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0:Yt,_emscripten_bind_b2DistanceJoint_GetBodyB_0:Vb,_emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1:Cp,_emscripten_bind_b2WeldJointDef_set_bodyB_1:zk,_emscripten_bind_b2RevoluteJoint_SetUserData_1:ru,_emscripten_bind_b2DistanceJoint_SetLength_1:Nb,_emscripten_bind_b2JointEdge_get_joint_0:Ql,_emscripten_bind_b2Body_GetLocalCenter_0:os,_emscripten_bind_b2FixtureDef___destroy___0:ng,_emscripten_bind_b2FixtureDef_set_shape_1:ag,_emscripten_bind_b2WeldJoint_GetAnchorA_0:Dl,_emscripten_bind_b2Profile_get_solveVelocity_0:ie,_emscripten_bind_b2WeldJointDef_get_bodyB_0:yk,_emscripten_bind_b2Body_SetAngularDamping_1:Ms,_emscripten_bind_b2PulleyJointDef_Initialize_7:Yl,_emscripten_bind_b2GearJointDef_set_bodyB_1:Pt,_emscripten_bind_b2RopeJoint_GetReactionTorque_1:$n,_emscripten_bind_b2Mat22_set_ex_1:nj,_emscripten_bind_b2GearJoint_GetType_0:fl,_emscripten_enum_b2DrawFlag_e_centerOfMassBit:Yv,_emscripten_bind_b2ChainShape_b2ChainShape_0:bn,_emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1:fu,_emscripten_bind_b2RopeJointDef_set_localAnchorB_1:Ku,_emscripten_bind_b2FrictionJointDef_Initialize_3:pg,_emscripten_bind_b2GearJointDef_set_userData_1:Lt,_emscripten_bind_b2ChainShape_CreateLoop_2:dn,_emscripten_bind_b2EdgeShape_get_m_radius_0:dp,_emscripten_bind_b2Contact_GetFixtureB_0:qr,_emscripten_bind_b2ChainShape_ComputeMass_2:on,_emscripten_bind_b2Vec2_set_y_1:wf,_emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0:qi,_emscripten_bind_b2RopeJointDef_get_bodyB_0:Tu,_emscripten_bind_b2BodyDef_b2BodyDef_0:se,_emscripten_bind_b2MassData_get_mass_0:Jk,_emscripten_bind_b2WheelJoint___destroy___0:wq,_emscripten_bind_b2Joint_GetBodyB_0:Sk,_emscripten_bind_b2MouseJointDef_set_collideConnected_1:hr,_emscripten_bind_b2WheelJointDef_set_localAxisA_1:yj,_emscripten_bind_b2Joint_Dump_0:al,_emscripten_bind_b2WheelJointDef_b2WheelJointDef_0:rj,_emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1:Ap,_emscripten_bind_b2MotorJointDef_get_bodyA_0:mv,_emscripten_bind_b2WheelJointDef_get_enableMotor_0:zj,_emscripten_bind_b2Vec2_LengthSquared_0:pf,_emscripten_bind_b2FrictionJointDef_set_bodyA_1:Dg,_emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0:hq,_emscripten_bind_b2ContactFeature_get_indexB_0:$e,_emscripten_bind_b2Body_GetJointList_0:at,_emscripten_bind_b2FrictionJoint_GetBodyA_0:ot,_emscripten_bind_b2WheelJointDef_set_localAnchorB_1:wj,_emscripten_bind_b2DistanceJointDef_set_localAnchorA_1:Or,_emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0:jh,_emscripten_bind_b2Body_SetUserData_1:et,_emscripten_bind_b2DistanceJoint_GetUserData_0:$b,_emscripten_bind_b2PulleyJointDef_set_bodyA_1:qm,_emscripten_bind_b2Joint_GetType_0:Qk,_emscripten_bind_b2Manifold_get_pointCount_0:Qg,_emscripten_bind_b2Mat33_get_ez_0:pc,_emscripten_bind_b2DestructionListenerWrapper___destroy___0:Zi,_emscripten_bind_b2WheelJointDef_get_bodyA_0:Nj,_emscripten_enum_b2LimitState_e_atUpperLimit:Mv,_emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1:_l,_emscripten_bind_b2MouseJointDef_get_type_0:_q,_emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1:zi,_emscripten_bind_b2PulleyJointDef_get_collideConnected_0:tm,_emscripten_bind_b2RopeJoint_SetMaxLength_1:Sn,_emscripten_bind_b2Joint_SetUserData_1:Zk,_emscripten_bind_b2PolygonShape_set_m_radius_1:Ho,_emscripten_bind_b2Vec2_get_x_0:tf,_emscripten_bind_JSContactListener_JSContactListener_0:_i,runPostSets:TB,stackAlloc:wb,stackSave:xb,stackRestore:yb,setThrew:zb,setTempRet0:Cb,getTempRet0:Db,dynCall_iiii:XB,dynCall_viiiii:qC,dynCall_did:LC,dynCall_vi:eD,dynCall_diiiid:zD,dynCall_vii:UD,dynCall_viidii:nE,dynCall_ii:IE,dynCall_viidi:bF,dynCall_viii:wF,dynCall_v:RF,dynCall_viid:kG,dynCall_viiiiii:FG,dynCall_iii:_G,dynCall_iiiiii:tH,dynCall_viiii:OH}})


// EMSCRIPTEN_END_ASM
(e.X,e.Y,pb),pc=e._emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0=i._emscripten_bind_b2WheelJoint_GetSpringDampingRatio_0,qc=e._emscripten_bind_b2ContactEdge_set_next_1=i._emscripten_bind_b2ContactEdge_set_next_1,rc=e._emscripten_bind_b2ChainShape_get_m_count_0=i._emscripten_bind_b2ChainShape_get_m_count_0,sc=e._emscripten_bind_b2Fixture_SetFriction_1=i._emscripten_bind_b2Fixture_SetFriction_1,tc=e._emscripten_bind_b2Shape_ComputeAABB_3=i._emscripten_bind_b2Shape_ComputeAABB_3,
uc=e._emscripten_bind_b2FrictionJointDef_set_userData_1=i._emscripten_bind_b2FrictionJointDef_set_userData_1,vc=e._emscripten_bind_b2Vec3_get_z_0=i._emscripten_bind_b2Vec3_get_z_0,wc=e._emscripten_bind_b2World_IsLocked_0=i._emscripten_bind_b2World_IsLocked_0,xc=e._emscripten_bind_b2Draw_GetFlags_0=i._emscripten_bind_b2Draw_GetFlags_0,yc=e._emscripten_bind_b2FrictionJoint_IsActive_0=i._emscripten_bind_b2FrictionJoint_IsActive_0,zc=e._emscripten_bind_b2Color_set_g_1=i._emscripten_bind_b2Color_set_g_1,
Ac=e._emscripten_bind_b2WheelJointDef_get_frequencyHz_0=i._emscripten_bind_b2WheelJointDef_get_frequencyHz_0,Bc=e._emscripten_bind_b2RopeJointDef_set_localAnchorA_1=i._emscripten_bind_b2RopeJointDef_set_localAnchorA_1,Cc=e._emscripten_bind_b2PolygonShape_RayCast_4=i._emscripten_bind_b2PolygonShape_RayCast_4,Dc=e._emscripten_bind_b2World_GetTreeBalance_0=i._emscripten_bind_b2World_GetTreeBalance_0,Ec=e._emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0=i._emscripten_bind_b2PrismaticJointDef_get_upperTranslation_0,
Fc=e._emscripten_bind_JSDraw_DrawSolidCircle_4=i._emscripten_bind_JSDraw_DrawSolidCircle_4,Gc=e._emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0=i._emscripten_bind_b2RevoluteJoint_GetLocalAnchorA_0,Hc=e._emscripten_bind_b2FixtureDef_get_filter_0=i._emscripten_bind_b2FixtureDef_get_filter_0,Ic=e._emscripten_bind_b2FrictionJointDef_get_type_0=i._emscripten_bind_b2FrictionJointDef_get_type_0,Jc=e._emscripten_bind_b2RevoluteJoint_GetMotorTorque_1=i._emscripten_bind_b2RevoluteJoint_GetMotorTorque_1,
Kc=e._emscripten_bind_b2MotorJointDef_set_type_1=i._emscripten_bind_b2MotorJointDef_set_type_1,Lc=e._emscripten_bind_b2RayCastInput_get_p1_0=i._emscripten_bind_b2RayCastInput_get_p1_0,Mc=e._emscripten_bind_b2EdgeShape_set_m_hasVertex3_1=i._emscripten_bind_b2EdgeShape_set_m_hasVertex3_1,Nc=e._emscripten_bind_b2JointEdge_set_joint_1=i._emscripten_bind_b2JointEdge_set_joint_1,Oc=e._emscripten_enum_b2ShapeType_e_polygon=i._emscripten_enum_b2ShapeType_e_polygon,Pc=e._emscripten_bind_b2Fixture___destroy___0=
i._emscripten_bind_b2Fixture___destroy___0,Qc=e._emscripten_bind_b2PulleyJoint_SetUserData_1=i._emscripten_bind_b2PulleyJoint_SetUserData_1,Rc=e._emscripten_bind_b2World_SetWarmStarting_1=i._emscripten_bind_b2World_SetWarmStarting_1,Sc=e._emscripten_bind_JSDraw_DrawCircle_3=i._emscripten_bind_JSDraw_DrawCircle_3,Tc=e._emscripten_bind_b2WeldJoint_IsActive_0=i._emscripten_bind_b2WeldJoint_IsActive_0,Uc=e._emscripten_bind_b2DestructionListener___destroy___0=i._emscripten_bind_b2DestructionListener___destroy___0,
Vc=e._emscripten_bind_b2BodyDef_set_type_1=i._emscripten_bind_b2BodyDef_set_type_1,Wc=e._emscripten_bind_b2ChainShape_ComputeAABB_3=i._emscripten_bind_b2ChainShape_ComputeAABB_3,Xc=e._emscripten_bind_b2MouseJointDef_set_type_1=i._emscripten_bind_b2MouseJointDef_set_type_1,Yc=e._emscripten_bind_b2JointEdge_get_prev_0=i._emscripten_bind_b2JointEdge_get_prev_0,Zc=e._emscripten_bind_b2WeldJoint_GetReactionTorque_1=i._emscripten_bind_b2WeldJoint_GetReactionTorque_1,$c=e._emscripten_bind_b2MotorJointDef_get_maxForce_0=
i._emscripten_bind_b2MotorJointDef_get_maxForce_0,ad=e._emscripten_bind_b2DistanceJointDef_get_userData_0=i._emscripten_bind_b2DistanceJointDef_get_userData_0,bd=e._emscripten_bind_b2BodyDef_get_position_0=i._emscripten_bind_b2BodyDef_get_position_0,cd=e._emscripten_bind_b2RopeJointDef_get_localAnchorB_0=i._emscripten_bind_b2RopeJointDef_get_localAnchorB_0,dd=e._emscripten_bind_b2RevoluteJointDef_set_userData_1=i._emscripten_bind_b2RevoluteJointDef_set_userData_1,ed=e._emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0=
i._emscripten_bind_b2RevoluteJointDef_get_localAnchorA_0,fd=e._emscripten_bind_b2World_SetContactFilter_1=i._emscripten_bind_b2World_SetContactFilter_1,gd=e._emscripten_bind_b2WheelJointDef_get_collideConnected_0=i._emscripten_bind_b2WheelJointDef_get_collideConnected_0,hd=e._emscripten_bind_b2MouseJointDef_set_userData_1=i._emscripten_bind_b2MouseJointDef_set_userData_1,id=e._emscripten_bind_JSDraw_DrawSegment_3=i._emscripten_bind_JSDraw_DrawSegment_3,jd=e._emscripten_bind_b2FixtureDef_set_restitution_1=
i._emscripten_bind_b2FixtureDef_set_restitution_1,kd=e._emscripten_bind_b2MotorJointDef_Initialize_2=i._emscripten_bind_b2MotorJointDef_Initialize_2,ld=e._emscripten_bind_b2EdgeShape_GetChildCount_0=i._emscripten_bind_b2EdgeShape_GetChildCount_0,md=e._emscripten_bind_b2Mat33_get_ey_0=i._emscripten_bind_b2Mat33_get_ey_0,nd=e._emscripten_bind_b2MouseJoint_IsActive_0=i._emscripten_bind_b2MouseJoint_IsActive_0,od=e._emscripten_bind_b2World_GetGravity_0=i._emscripten_bind_b2World_GetGravity_0,pd=e._emscripten_bind_b2World_DrawDebugData_0=
i._emscripten_bind_b2World_DrawDebugData_0,qd=e._emscripten_bind_b2Profile_get_broadphase_0=i._emscripten_bind_b2Profile_get_broadphase_0,rd=e._emscripten_bind_b2PulleyJointDef_get_bodyA_0=i._emscripten_bind_b2PulleyJointDef_get_bodyA_0,sd=e._emscripten_bind_b2PrismaticJoint_SetLimits_2=i._emscripten_bind_b2PrismaticJoint_SetLimits_2,td=e._emscripten_bind_b2PulleyJointDef_get_localAnchorA_0=i._emscripten_bind_b2PulleyJointDef_get_localAnchorA_0,ud=e._emscripten_bind_b2DistanceJoint_GetAnchorA_0=i._emscripten_bind_b2DistanceJoint_GetAnchorA_0,
vd=e._emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1=i._emscripten_bind_b2ManifoldPoint_set_tangentImpulse_1,wd=e._emscripten_bind_b2PolygonShape_get_m_count_0=i._emscripten_bind_b2PolygonShape_get_m_count_0,xd=e._emscripten_bind_b2RopeJointDef_set_collideConnected_1=i._emscripten_bind_b2RopeJointDef_set_collideConnected_1,yd=e._emscripten_bind_b2CircleShape_set_m_p_1=i._emscripten_bind_b2CircleShape_set_m_p_1,zd=e._emscripten_bind_JSContactListener_EndContact_1=i._emscripten_bind_JSContactListener_EndContact_1,
Ad=e._emscripten_bind_b2MassData_set_mass_1=i._emscripten_bind_b2MassData_set_mass_1,Bd=e._emscripten_bind_b2Vec3_get_x_0=i._emscripten_bind_b2Vec3_get_x_0,Cd=e._emscripten_bind_b2ChainShape_CreateChain_2=i._emscripten_bind_b2ChainShape_CreateChain_2,Dd=e._emscripten_bind_b2Color_get_r_0=i._emscripten_bind_b2Color_get_r_0,Ed=e._emscripten_bind_b2World_DestroyBody_1=i._emscripten_bind_b2World_DestroyBody_1,Fd=e._emscripten_bind_b2Profile_get_solvePosition_0=i._emscripten_bind_b2Profile_get_solvePosition_0,
Gd=e._emscripten_bind_b2Shape_RayCast_4=i._emscripten_bind_b2Shape_RayCast_4,Hd=e._emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0=i._emscripten_bind_b2PulleyJoint_GetGroundAnchorA_0,Id=e._emscripten_bind_b2Mat33___destroy___0=i._emscripten_bind_b2Mat33___destroy___0,Jd=e._emscripten_bind_b2GearJoint_GetReactionTorque_1=i._emscripten_bind_b2GearJoint_GetReactionTorque_1,Kd=e._emscripten_bind_b2WeldJointDef_set_collideConnected_1=i._emscripten_bind_b2WeldJointDef_set_collideConnected_1,Ld=e._emscripten_bind_b2Manifold_get_type_0=
i._emscripten_bind_b2Manifold_get_type_0,Md=e._emscripten_bind_b2RevoluteJoint___destroy___0=i._emscripten_bind_b2RevoluteJoint___destroy___0,Nd=e._emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0=i._emscripten_bind_b2PulleyJointDef_b2PulleyJointDef_0,Od=e._emscripten_bind_b2World_SetAutoClearForces_1=i._emscripten_bind_b2World_SetAutoClearForces_1,Pd=e._emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1=i._emscripten_bind_b2PrismaticJointDef_set_lowerTranslation_1,Qd=e._emscripten_bind_b2BodyDef_set_position_1=
i._emscripten_bind_b2BodyDef_set_position_1,Rd=e._emscripten_bind_b2Transform_get_q_0=i._emscripten_bind_b2Transform_get_q_0,Sd=e._emscripten_bind_b2FrictionJoint_GetMaxForce_0=i._emscripten_bind_b2FrictionJoint_GetMaxForce_0,Td=e._emscripten_bind_b2PolygonShape_set_m_count_1=i._emscripten_bind_b2PolygonShape_set_m_count_1,Ud=e._emscripten_bind_b2Contact_GetNext_0=i._emscripten_bind_b2Contact_GetNext_0,Vd=e._emscripten_bind_b2MotorJointDef_set_userData_1=i._emscripten_bind_b2MotorJointDef_set_userData_1,
Wd=e._emscripten_bind_b2EdgeShape_get_m_type_0=i._emscripten_bind_b2EdgeShape_get_m_type_0,Xd=e._emscripten_bind_b2GearJoint_GetJoint1_0=i._emscripten_bind_b2GearJoint_GetJoint1_0,Yd=e._emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0=i._emscripten_bind_b2WheelJoint_GetMaxMotorTorque_0,Zd=e._emscripten_bind_b2MotorJoint_SetMaxTorque_1=i._emscripten_bind_b2MotorJoint_SetMaxTorque_1,$d=e._emscripten_bind_b2GearJoint_GetAnchorA_0=i._emscripten_bind_b2GearJoint_GetAnchorA_0,ae=e._emscripten_enum_b2JointType_e_mouseJoint=
i._emscripten_enum_b2JointType_e_mouseJoint,be=e._emscripten_bind_b2MouseJointDef_set_bodyA_1=i._emscripten_bind_b2MouseJointDef_set_bodyA_1,ce=e._emscripten_enum_b2JointType_e_revoluteJoint=i._emscripten_enum_b2JointType_e_revoluteJoint,de=e._emscripten_bind_b2World_SetContactListener_1=i._emscripten_bind_b2World_SetContactListener_1,ee=e._emscripten_bind_b2Body_IsAwake_0=i._emscripten_bind_b2Body_IsAwake_0,fe=e._emscripten_bind_b2JointEdge_set_other_1=i._emscripten_bind_b2JointEdge_set_other_1,
ge=e._emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0=i._emscripten_bind_b2RevoluteJoint_IsMotorEnabled_0,he=e._emscripten_bind_b2MouseJointDef_set_target_1=i._emscripten_bind_b2MouseJointDef_set_target_1,ie=e._emscripten_bind_b2MotorJoint_SetCorrectionFactor_1=i._emscripten_bind_b2MotorJoint_SetCorrectionFactor_1,je=e._emscripten_bind_b2FixtureDef_get_density_0=i._emscripten_bind_b2FixtureDef_get_density_0,ke=e._emscripten_bind_b2ChainShape_set_m_vertices_1=i._emscripten_bind_b2ChainShape_set_m_vertices_1,
le=e._emscripten_bind_b2ChainShape_get_m_vertices_0=i._emscripten_bind_b2ChainShape_get_m_vertices_0,me=e._emscripten_bind_b2Rot_set_s_1=i._emscripten_bind_b2Rot_set_s_1,ne=e._emscripten_bind_b2MotorJointDef_get_collideConnected_0=i._emscripten_bind_b2MotorJointDef_get_collideConnected_0,oe=e._emscripten_bind_b2RevoluteJoint_GetUpperLimit_0=i._emscripten_bind_b2RevoluteJoint_GetUpperLimit_0,pe=e._emscripten_bind_b2WheelJointDef_set_bodyB_1=i._emscripten_bind_b2WheelJointDef_set_bodyB_1,qe=e._emscripten_bind_b2WheelJointDef_set_enableMotor_1=
i._emscripten_bind_b2WheelJointDef_set_enableMotor_1,re=e._emscripten_bind_b2FixtureDef_get_userData_0=i._emscripten_bind_b2FixtureDef_get_userData_0,se=e._emscripten_bind_b2FrictionJointDef_set_collideConnected_1=i._emscripten_bind_b2FrictionJointDef_set_collideConnected_1,te=e._emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0=i._emscripten_bind_b2PrismaticJointDef_get_lowerTranslation_0,ue=e._emscripten_bind_b2GearJoint_GetCollideConnected_0=i._emscripten_bind_b2GearJoint_GetCollideConnected_0,
ve=e._emscripten_bind_b2RevoluteJointDef_get_upperAngle_0=i._emscripten_bind_b2RevoluteJointDef_get_upperAngle_0,we=e._emscripten_bind_b2Body_ApplyAngularImpulse_2=i._emscripten_bind_b2Body_ApplyAngularImpulse_2,xe=e._emscripten_enum_b2JointType_e_frictionJoint=i._emscripten_enum_b2JointType_e_frictionJoint,ye=e._emscripten_bind_b2RayCastOutput_set_fraction_1=i._emscripten_bind_b2RayCastOutput_set_fraction_1,ze=e._emscripten_bind_b2Color_set_r_1=i._emscripten_bind_b2Color_set_r_1,Ae=e._emscripten_bind_b2DistanceJointDef_get_length_0=
i._emscripten_bind_b2DistanceJointDef_get_length_0,Be=e._emscripten_bind_b2PulleyJoint_GetBodyB_0=i._emscripten_bind_b2PulleyJoint_GetBodyB_0,Ce=e._emscripten_bind_b2WheelJointDef_set_type_1=i._emscripten_bind_b2WheelJointDef_set_type_1,De=e._emscripten_bind_b2World_GetTreeQuality_0=i._emscripten_bind_b2World_GetTreeQuality_0,Ee=e._emscripten_bind_b2BodyDef_set_gravityScale_1=i._emscripten_bind_b2BodyDef_set_gravityScale_1,Fe=e._emscripten_bind_b2RopeJointDef_set_bodyB_1=i._emscripten_bind_b2RopeJointDef_set_bodyB_1,
Ge=e._emscripten_bind_b2PrismaticJoint_GetLowerLimit_0=i._emscripten_bind_b2PrismaticJoint_GetLowerLimit_0,He=e._emscripten_bind_b2AABB_get_lowerBound_0=i._emscripten_bind_b2AABB_get_lowerBound_0,Ie=e._emscripten_bind_b2WheelJoint_SetMotorSpeed_1=i._emscripten_bind_b2WheelJoint_SetMotorSpeed_1,Je=e._emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0=i._emscripten_bind_b2PrismaticJointDef_get_referenceAngle_0,Ke=e._emscripten_bind_b2Body_SetMassData_1=i._emscripten_bind_b2Body_SetMassData_1,
Le=e._emscripten_bind_b2BodyDef_get_angularVelocity_0=i._emscripten_bind_b2BodyDef_get_angularVelocity_0,Me=e._emscripten_bind_b2WeldJoint_SetDampingRatio_1=i._emscripten_bind_b2WeldJoint_SetDampingRatio_1,Ne=e._emscripten_bind_b2PrismaticJointDef___destroy___0=i._emscripten_bind_b2PrismaticJointDef___destroy___0,Oe=e._emscripten_bind_b2Contact_IsTouching_0=i._emscripten_bind_b2Contact_IsTouching_0,Pe=e._emscripten_bind_b2Draw_SetFlags_1=i._emscripten_bind_b2Draw_SetFlags_1,Qe=e._emscripten_bind_b2AABB_Contains_1=
i._emscripten_bind_b2AABB_Contains_1,Re=e._emscripten_bind_b2DistanceJoint_GetNext_0=i._emscripten_bind_b2DistanceJoint_GetNext_0,Se=e._emscripten_bind_b2GearJoint_GetReactionForce_1=i._emscripten_bind_b2GearJoint_GetReactionForce_1,Te=e._emscripten_bind_b2PrismaticJoint_GetNext_0=i._emscripten_bind_b2PrismaticJoint_GetNext_0,Ue=e._emscripten_bind_b2Filter_get_groupIndex_0=i._emscripten_bind_b2Filter_get_groupIndex_0,Ve=e._emscripten_bind_b2PrismaticJoint_GetType_0=i._emscripten_bind_b2PrismaticJoint_GetType_0,
We=e._emscripten_bind_b2Fixture_GetRestitution_0=i._emscripten_bind_b2Fixture_GetRestitution_0,Xe=e._emscripten_bind_b2Transform_set_q_1=i._emscripten_bind_b2Transform_set_q_1,Ye=e._emscripten_bind_b2PolygonShape___destroy___0=i._emscripten_bind_b2PolygonShape___destroy___0,Ze=e._emscripten_bind_b2AABB_get_upperBound_0=i._emscripten_bind_b2AABB_get_upperBound_0,$e=e._emscripten_bind_b2Transform___destroy___0=i._emscripten_bind_b2Transform___destroy___0,af=e._emscripten_bind_b2WeldJointDef_set_localAnchorB_1=
i._emscripten_bind_b2WeldJointDef_set_localAnchorB_1,bf=e._emscripten_bind_b2CircleShape_set_m_radius_1=i._emscripten_bind_b2CircleShape_set_m_radius_1,cf=e._emscripten_bind_b2EdgeShape_set_m_hasVertex0_1=i._emscripten_bind_b2EdgeShape_set_m_hasVertex0_1,df=e._emscripten_bind_b2RopeJoint_GetMaxLength_0=i._emscripten_bind_b2RopeJoint_GetMaxLength_0,ef=e._emscripten_bind_b2GearJoint_GetUserData_0=i._emscripten_bind_b2GearJoint_GetUserData_0,ff=e._emscripten_bind_b2MotorJoint_GetCollideConnected_0=i._emscripten_bind_b2MotorJoint_GetCollideConnected_0,
gf=e._emscripten_bind_b2GearJointDef_set_type_1=i._emscripten_bind_b2GearJointDef_set_type_1,hf=e._emscripten_bind_b2DistanceJoint_SetDampingRatio_1=i._emscripten_bind_b2DistanceJoint_SetDampingRatio_1,jf=e._emscripten_bind_b2Contact_GetFixtureA_0=i._emscripten_bind_b2Contact_GetFixtureA_0,kf=e._emscripten_bind_b2QueryCallback___destroy___0=i._emscripten_bind_b2QueryCallback___destroy___0,lf=e._emscripten_bind_b2PulleyJointDef_get_ratio_0=i._emscripten_bind_b2PulleyJointDef_get_ratio_0,mf=e._emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0=
i._emscripten_bind_b2PrismaticJointDef_get_localAnchorB_0,nf=e._emscripten_bind_b2CircleShape_set_m_type_1=i._emscripten_bind_b2CircleShape_set_m_type_1,of=e._emscripten_enum_b2ShapeType_e_typeCount=i._emscripten_enum_b2ShapeType_e_typeCount,pf=e._emscripten_bind_b2Body_SetTransform_2=i._emscripten_bind_b2Body_SetTransform_2,qf=e._emscripten_bind_b2RopeJoint_GetAnchorB_0=i._emscripten_bind_b2RopeJoint_GetAnchorB_0,rf=e._emscripten_bind_b2AABB_set_upperBound_1=i._emscripten_bind_b2AABB_set_upperBound_1,
sf=e._emscripten_bind_b2MouseJointDef_get_collideConnected_0=i._emscripten_bind_b2MouseJointDef_get_collideConnected_0,tf=e._emscripten_bind_b2ContactImpulse___destroy___0=i._emscripten_bind_b2ContactImpulse___destroy___0,uf=e._emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0=i._emscripten_bind_b2PrismaticJointDef_b2PrismaticJointDef_0,vf=e._emscripten_bind_b2Vec2_set_x_1=i._emscripten_bind_b2Vec2_set_x_1,wf=e._emscripten_bind_b2RayCastInput___destroy___0=i._emscripten_bind_b2RayCastInput___destroy___0,
xf=e._emscripten_bind_b2Body_ApplyForceToCenter_2=i._emscripten_bind_b2Body_ApplyForceToCenter_2,yf=e._emscripten_bind_JSDestructionListener_JSDestructionListener_0=i._emscripten_bind_JSDestructionListener_JSDestructionListener_0,zf=e._emscripten_bind_b2WheelJointDef_set_localAnchorA_1=i._emscripten_bind_b2WheelJointDef_set_localAnchorA_1,Af=e._emscripten_bind_b2FrictionJoint_GetBodyB_0=i._emscripten_bind_b2FrictionJoint_GetBodyB_0,Bf=e._emscripten_bind_b2DistanceJointDef_get_bodyA_0=i._emscripten_bind_b2DistanceJointDef_get_bodyA_0,
Cf=e._emscripten_bind_b2WeldJointDef_set_bodyA_1=i._emscripten_bind_b2WeldJointDef_set_bodyA_1,Df=e._emscripten_bind_b2World_SetDestructionListener_1=i._emscripten_bind_b2World_SetDestructionListener_1,Ef=e._emscripten_bind_b2RevoluteJoint_GetJointSpeed_0=i._emscripten_bind_b2RevoluteJoint_GetJointSpeed_0,Ff=e._emscripten_bind_b2WheelJoint_GetLocalAnchorB_0=i._emscripten_bind_b2WheelJoint_GetLocalAnchorB_0,Gf=e._emscripten_bind_b2JointDef___destroy___0=i._emscripten_bind_b2JointDef___destroy___0,
Hf=e._emscripten_bind_b2PrismaticJointDef_Initialize_4=i._emscripten_bind_b2PrismaticJointDef_Initialize_4,If=e._emscripten_bind_b2FrictionJointDef_get_localAnchorA_0=i._emscripten_bind_b2FrictionJointDef_get_localAnchorA_0,Jf=e._emscripten_bind_b2CircleShape_GetChildCount_0=i._emscripten_bind_b2CircleShape_GetChildCount_0,Kf=e._emscripten_bind_b2BodyDef_get_bullet_0=i._emscripten_bind_b2BodyDef_get_bullet_0,Lf=e._emscripten_bind_b2ManifoldPoint_get_localPoint_0=i._emscripten_bind_b2ManifoldPoint_get_localPoint_0,
Mf=e._emscripten_bind_b2PrismaticJointDef_get_type_0=i._emscripten_bind_b2PrismaticJointDef_get_type_0,Nf=e._emscripten_bind_b2MassData_get_center_0=i._emscripten_bind_b2MassData_get_center_0,Of=e._emscripten_bind_b2World_b2World_1=i._emscripten_bind_b2World_b2World_1,Pf=e._emscripten_bind_b2WheelJoint_GetReactionForce_1=i._emscripten_bind_b2WheelJoint_GetReactionForce_1,Qf=e._emscripten_bind_b2World_SetSubStepping_1=i._emscripten_bind_b2World_SetSubStepping_1,Rf=e._emscripten_bind_b2Vec2_op_add_1=
i._emscripten_bind_b2Vec2_op_add_1,Sf=e._emscripten_bind_b2Joint_GetBodyA_0=i._emscripten_bind_b2Joint_GetBodyA_0,Tf=e._emscripten_bind_b2Joint_GetCollideConnected_0=i._emscripten_bind_b2Joint_GetCollideConnected_0,Uf=e._emscripten_bind_b2MotorJoint_GetReactionTorque_1=i._emscripten_bind_b2MotorJoint_GetReactionTorque_1,Vf=e._emscripten_bind_b2WheelJoint_IsMotorEnabled_0=i._emscripten_bind_b2WheelJoint_IsMotorEnabled_0,Wf=e._emscripten_bind_b2WheelJointDef___destroy___0=i._emscripten_bind_b2WheelJointDef___destroy___0,
Xf=e._emscripten_bind_b2Vec3_SetZero_0=i._emscripten_bind_b2Vec3_SetZero_0,Yf=e._emscripten_enum_b2JointType_e_pulleyJoint=i._emscripten_enum_b2JointType_e_pulleyJoint,Zf=e._emscripten_bind_b2ChainShape_get_m_nextVertex_0=i._emscripten_bind_b2ChainShape_get_m_nextVertex_0,$f=e._emscripten_bind_b2Contact_SetEnabled_1=i._emscripten_bind_b2Contact_SetEnabled_1,ag=e._emscripten_bind_b2Shape_set_m_radius_1=i._emscripten_bind_b2Shape_set_m_radius_1,bg=e._emscripten_bind_b2GearJointDef_get_joint2_0=i._emscripten_bind_b2GearJointDef_get_joint2_0,
cg=e._emscripten_bind_b2World_SetDebugDraw_1=i._emscripten_bind_b2World_SetDebugDraw_1,dg=e._emscripten_bind_b2ContactID_set_key_1=i._emscripten_bind_b2ContactID_set_key_1,eg=e._emscripten_bind_b2RevoluteJointDef_set_collideConnected_1=i._emscripten_bind_b2RevoluteJointDef_set_collideConnected_1,ab=e._malloc=i._malloc,fg=e._emscripten_bind_b2World_GetProxyCount_0=i._emscripten_bind_b2World_GetProxyCount_0,gg=e._emscripten_bind_b2Vec2_Normalize_0=i._emscripten_bind_b2Vec2_Normalize_0,hg=e._emscripten_bind_b2WheelJoint_GetJointSpeed_0=
i._emscripten_bind_b2WheelJoint_GetJointSpeed_0,ig=e._emscripten_bind_b2FrictionJointDef_set_localAnchorA_1=i._emscripten_bind_b2FrictionJointDef_set_localAnchorA_1,jg=e._emscripten_bind_b2GearJoint_GetRatio_0=i._emscripten_bind_b2GearJoint_GetRatio_0,kg=e._emscripten_bind_JSRayCastCallback_JSRayCastCallback_0=i._emscripten_bind_JSRayCastCallback_JSRayCastCallback_0,lg=e._emscripten_bind_b2RayCastInput_set_p2_1=i._emscripten_bind_b2RayCastInput_set_p2_1,mg=e._emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0=
i._emscripten_bind_b2RevoluteJointDef_get_motorSpeed_0,ng=e._emscripten_bind_b2RayCastOutput_get_normal_0=i._emscripten_bind_b2RayCastOutput_get_normal_0,og=e._emscripten_bind_b2WeldJoint_GetBodyA_0=i._emscripten_bind_b2WeldJoint_GetBodyA_0,pg=e._emscripten_bind_b2MotorJointDef_set_maxForce_1=i._emscripten_bind_b2MotorJointDef_set_maxForce_1,qg=e._emscripten_enum_b2DrawFlag_e_jointBit=i._emscripten_enum_b2DrawFlag_e_jointBit,rg=e._emscripten_bind_b2FixtureDef_get_isSensor_0=i._emscripten_bind_b2FixtureDef_get_isSensor_0,
sg=e._emscripten_bind_b2PulleyJointDef_set_bodyB_1=i._emscripten_bind_b2PulleyJointDef_set_bodyB_1,tg=e._emscripten_bind_b2WheelJoint_EnableMotor_1=i._emscripten_bind_b2WheelJoint_EnableMotor_1,ug=e._emscripten_bind_b2WheelJoint_GetLocalAnchorA_0=i._emscripten_bind_b2WheelJoint_GetLocalAnchorA_0,vg=e._emscripten_bind_JSDraw_DrawSolidPolygon_3=i._emscripten_bind_JSDraw_DrawSolidPolygon_3,wg=e._emscripten_bind_b2Rot_Set_1=i._emscripten_bind_b2Rot_Set_1,xg=e._emscripten_bind_b2ContactFeature_set_typeB_1=
i._emscripten_bind_b2ContactFeature_set_typeB_1,yg=e._emscripten_bind_JSDraw___destroy___0=i._emscripten_bind_JSDraw___destroy___0,zg=e._emscripten_bind_b2MouseJointDef___destroy___0=i._emscripten_bind_b2MouseJointDef___destroy___0,Ag=e._emscripten_bind_b2Mat33_Solve22_1=i._emscripten_bind_b2Mat33_Solve22_1,Bg=e._emscripten_bind_b2Profile_set_solvePosition_1=i._emscripten_bind_b2Profile_set_solvePosition_1,Cg=e._emscripten_bind_b2ContactFilter___destroy___0=i._emscripten_bind_b2ContactFilter___destroy___0,
Dg=e._emscripten_bind_b2PulleyJointDef_get_localAnchorB_0=i._emscripten_bind_b2PulleyJointDef_get_localAnchorB_0,Eg=e._emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1=i._emscripten_bind_b2ChainShape_set_m_hasPrevVertex_1,Fg=e._emscripten_bind_b2PrismaticJoint___destroy___0=i._emscripten_bind_b2PrismaticJoint___destroy___0,Gg=e._emscripten_bind_b2World_CreateJoint_1=i._emscripten_bind_b2World_CreateJoint_1,Hg=e._emscripten_bind_b2Profile_get_solveTOI_0=i._emscripten_bind_b2Profile_get_solveTOI_0,
Ig=e._emscripten_bind_b2ManifoldPoint_get_id_0=i._emscripten_bind_b2ManifoldPoint_get_id_0,Jg=e._emscripten_bind_b2Manifold_set_pointCount_1=i._emscripten_bind_b2Manifold_set_pointCount_1,Kg=e._emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0=i._emscripten_bind_b2PrismaticJoint_GetMotorSpeed_0,Lg=e._emscripten_bind_b2Body_SetSleepingAllowed_1=i._emscripten_bind_b2Body_SetSleepingAllowed_1,Mg=e._emscripten_bind_b2Rot_SetIdentity_0=i._emscripten_bind_b2Rot_SetIdentity_0,Ng=e._emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0=
i._emscripten_bind_b2PulleyJoint_GetGroundAnchorB_0,Og=e._emscripten_bind_b2Vec3_op_add_1=i._emscripten_bind_b2Vec3_op_add_1,Pg=e._emscripten_bind_b2FrictionJoint_GetType_0=i._emscripten_bind_b2FrictionJoint_GetType_0,Qg=e._emscripten_bind_b2DistanceJointDef_set_dampingRatio_1=i._emscripten_bind_b2DistanceJointDef_set_dampingRatio_1,Rg=e._emscripten_bind_b2MotorJoint_GetBodyA_0=i._emscripten_bind_b2MotorJoint_GetBodyA_0,Sg=e._emscripten_bind_b2MouseJointDef_get_dampingRatio_0=i._emscripten_bind_b2MouseJointDef_get_dampingRatio_0,
Tg=e._emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0=i._emscripten_bind_b2RevoluteJoint_GetMotorSpeed_0,Ug=e._emscripten_bind_b2ChainShape_set_m_type_1=i._emscripten_bind_b2ChainShape_set_m_type_1,Vg=e._emscripten_bind_b2RevoluteJointDef_set_bodyB_1=i._emscripten_bind_b2RevoluteJointDef_set_bodyB_1,Wg=e._emscripten_bind_b2Body_GetGravityScale_0=i._emscripten_bind_b2Body_GetGravityScale_0,Xg=e._emscripten_bind_b2GearJointDef_get_bodyB_0=i._emscripten_bind_b2GearJointDef_get_bodyB_0,Yg=e._emscripten_bind_b2Mat33_b2Mat33_0=
i._emscripten_bind_b2Mat33_b2Mat33_0,Zg=e._emscripten_bind_b2MouseJointDef_get_bodyB_0=i._emscripten_bind_b2MouseJointDef_get_bodyB_0,$g=e._emscripten_bind_b2Shape_TestPoint_2=i._emscripten_bind_b2Shape_TestPoint_2,ah=e._emscripten_bind_b2Body_GetWorldVector_1=i._emscripten_bind_b2Body_GetWorldVector_1,bh=e._emscripten_bind_b2WeldJointDef_get_frequencyHz_0=i._emscripten_bind_b2WeldJointDef_get_frequencyHz_0,ch=e._emscripten_bind_b2PolygonShape_Set_2=i._emscripten_bind_b2PolygonShape_Set_2,dh=e._emscripten_bind_b2Manifold___destroy___0=
i._emscripten_bind_b2Manifold___destroy___0,eh=e._emscripten_bind_b2PulleyJointDef_set_lengthA_1=i._emscripten_bind_b2PulleyJointDef_set_lengthA_1,fh=e._emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1=i._emscripten_bind_b2RevoluteJointDef_set_localAnchorA_1,gh=e._emscripten_bind_b2GearJoint___destroy___0=i._emscripten_bind_b2GearJoint___destroy___0,hh=e._emscripten_bind_b2RevoluteJoint_GetJointAngle_0=i._emscripten_bind_b2RevoluteJoint_GetJointAngle_0,ih=e._emscripten_bind_b2PulleyJointDef_set_ratio_1=
i._emscripten_bind_b2PulleyJointDef_set_ratio_1,jh=e._emscripten_bind_b2JointEdge_set_prev_1=i._emscripten_bind_b2JointEdge_set_prev_1,kh=e._emscripten_bind_b2PrismaticJoint_GetReactionTorque_1=i._emscripten_bind_b2PrismaticJoint_GetReactionTorque_1,lh=e._emscripten_bind_b2Body_GetLocalPoint_1=i._emscripten_bind_b2Body_GetLocalPoint_1,mh=e._emscripten_bind_b2PrismaticJoint_GetCollideConnected_0=i._emscripten_bind_b2PrismaticJoint_GetCollideConnected_0,nh=e._emscripten_bind_b2RopeJointDef_get_userData_0=
i._emscripten_bind_b2RopeJointDef_get_userData_0,oh=e._emscripten_bind_b2DistanceJoint_IsActive_0=i._emscripten_bind_b2DistanceJoint_IsActive_0,ph=e._emscripten_bind_b2MotorJointDef_set_angularOffset_1=i._emscripten_bind_b2MotorJointDef_set_angularOffset_1,qh=e._emscripten_bind_b2Vec2_b2Vec2_2=i._emscripten_bind_b2Vec2_b2Vec2_2,rh=e._emscripten_bind_b2PrismaticJoint_GetJointTranslation_0=i._emscripten_bind_b2PrismaticJoint_GetJointTranslation_0,sh=e._emscripten_bind_b2Vec2_b2Vec2_0=i._emscripten_bind_b2Vec2_b2Vec2_0,
th=e._emscripten_bind_b2DistanceJoint_GetAnchorB_0=i._emscripten_bind_b2DistanceJoint_GetAnchorB_0,uh=e._emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0=i._emscripten_bind_b2WheelJointDef_get_maxMotorTorque_0,vh=e._emscripten_bind_b2Vec2_op_sub_1=i._emscripten_bind_b2Vec2_op_sub_1,wh=e._emscripten_bind_b2CircleShape_get_m_p_0=i._emscripten_bind_b2CircleShape_get_m_p_0,xh=e._emscripten_bind_b2ContactFeature_get_indexA_0=i._emscripten_bind_b2ContactFeature_get_indexA_0,yh=e._emscripten_bind_b2MotorJointDef_b2MotorJointDef_0=
i._emscripten_bind_b2MotorJointDef_b2MotorJointDef_0,zh=e._emscripten_bind_b2ChainShape_set_m_nextVertex_1=i._emscripten_bind_b2ChainShape_set_m_nextVertex_1,Ah=e._emscripten_bind_b2PulleyJoint_GetCollideConnected_0=i._emscripten_bind_b2PulleyJoint_GetCollideConnected_0,Bh=e._emscripten_bind_b2PulleyJoint_GetAnchorB_0=i._emscripten_bind_b2PulleyJoint_GetAnchorB_0,Ch=e._emscripten_bind_b2Mat33_get_ex_0=i._emscripten_bind_b2Mat33_get_ex_0,Dh=e._emscripten_bind_b2Body_GetPosition_0=i._emscripten_bind_b2Body_GetPosition_0,
Eh=e._emscripten_bind_b2Profile___destroy___0=i._emscripten_bind_b2Profile___destroy___0,Fh=e._emscripten_bind_b2ContactEdge_get_prev_0=i._emscripten_bind_b2ContactEdge_get_prev_0,Gh=e._emscripten_bind_b2DistanceJoint_SetFrequency_1=i._emscripten_bind_b2DistanceJoint_SetFrequency_1,Hh=e._emscripten_enum_b2ShapeType_e_chain=i._emscripten_enum_b2ShapeType_e_chain,Ih=e._emscripten_enum_b2ContactFeatureType_e_vertex=i._emscripten_enum_b2ContactFeatureType_e_vertex,Jh=e._emscripten_bind_b2Fixture_GetBody_0=
i._emscripten_bind_b2Fixture_GetBody_0,Kh=e._emscripten_bind_b2ContactImpulse_set_count_1=i._emscripten_bind_b2ContactImpulse_set_count_1,Lh=e._emscripten_bind_b2PulleyJointDef_get_bodyB_0=i._emscripten_bind_b2PulleyJointDef_get_bodyB_0,Mh=e._emscripten_bind_b2Rot_set_c_1=i._emscripten_bind_b2Rot_set_c_1,Nh=e._emscripten_bind_b2RevoluteJoint_GetReactionTorque_1=i._emscripten_bind_b2RevoluteJoint_GetReactionTorque_1,Oh=e._emscripten_bind_b2Fixture_SetDensity_1=i._emscripten_bind_b2Fixture_SetDensity_1,
Ph=e._emscripten_bind_b2ChainShape_get_m_prevVertex_0=i._emscripten_bind_b2ChainShape_get_m_prevVertex_0,Qh=e._emscripten_bind_b2World_ClearForces_0=i._emscripten_bind_b2World_ClearForces_0,Rh=e._emscripten_bind_b2Vec3___destroy___0=i._emscripten_bind_b2Vec3___destroy___0,Sh=e._emscripten_bind_b2WheelJointDef_set_userData_1=i._emscripten_bind_b2WheelJointDef_set_userData_1,Th=e._emscripten_bind_b2WeldJoint_SetFrequency_1=i._emscripten_bind_b2WeldJoint_SetFrequency_1,Uh=e._emscripten_bind_JSContactListener_PreSolve_2=
i._emscripten_bind_JSContactListener_PreSolve_2,Vh=e._emscripten_bind_b2Body_SetFixedRotation_1=i._emscripten_bind_b2Body_SetFixedRotation_1,Wh=e._emscripten_bind_b2RayCastOutput_set_normal_1=i._emscripten_bind_b2RayCastOutput_set_normal_1,Xh=e._emscripten_bind_b2DistanceJoint_GetDampingRatio_0=i._emscripten_bind_b2DistanceJoint_GetDampingRatio_0,Yh=e._emscripten_bind_b2WeldJointDef_set_userData_1=i._emscripten_bind_b2WeldJointDef_set_userData_1,Zh=e._emscripten_bind_b2Body_GetMassData_1=i._emscripten_bind_b2Body_GetMassData_1,
$h=e._emscripten_bind_b2MouseJointDef_set_bodyB_1=i._emscripten_bind_b2MouseJointDef_set_bodyB_1,ai=e._emscripten_bind_b2CircleShape_GetType_0=i._emscripten_bind_b2CircleShape_GetType_0,bi=e._emscripten_bind_b2PolygonShape_GetType_0=i._emscripten_bind_b2PolygonShape_GetType_0,ci=e._emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1=i._emscripten_bind_b2PrismaticJointDef_set_referenceAngle_1,di=e._emscripten_bind_b2RopeJointDef_get_collideConnected_0=i._emscripten_bind_b2RopeJointDef_get_collideConnected_0,
ei=e._emscripten_bind_b2FixtureDef_set_filter_1=i._emscripten_bind_b2FixtureDef_set_filter_1,fi=e._emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0=i._emscripten_bind_b2PulleyJointDef_get_groundAnchorA_0,gi=e._emscripten_bind_b2Fixture_SetFilterData_1=i._emscripten_bind_b2Fixture_SetFilterData_1,hi=e._emscripten_bind_b2FrictionJointDef_get_userData_0=i._emscripten_bind_b2FrictionJointDef_get_userData_0,ii=e._emscripten_bind_b2RayCastCallback___destroy___0=i._emscripten_bind_b2RayCastCallback___destroy___0,
ji=e._emscripten_bind_b2PulleyJointDef_set_localAnchorA_1=i._emscripten_bind_b2PulleyJointDef_set_localAnchorA_1,ki=e._emscripten_bind_b2MotorJoint_SetUserData_1=i._emscripten_bind_b2MotorJoint_SetUserData_1,li=e._emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0=i._emscripten_bind_b2PrismaticJoint_GetLocalAxisA_0,mi=e._emscripten_bind_b2MotorJoint_GetBodyB_0=i._emscripten_bind_b2MotorJoint_GetBodyB_0,ni=e._emscripten_bind_b2Transform_Set_2=i._emscripten_bind_b2Transform_Set_2,oi=e._emscripten_bind_b2MouseJoint_SetTarget_1=
i._emscripten_bind_b2MouseJoint_SetTarget_1,pi=e._emscripten_bind_b2RopeJointDef_get_localAnchorA_0=i._emscripten_bind_b2RopeJointDef_get_localAnchorA_0,qi=e._emscripten_bind_b2ContactEdge_set_contact_1=i._emscripten_bind_b2ContactEdge_set_contact_1,ri=e._emscripten_bind_b2RevoluteJointDef_get_enableLimit_0=i._emscripten_bind_b2RevoluteJointDef_get_enableLimit_0,si=e._emscripten_bind_b2CircleShape_get_m_radius_0=i._emscripten_bind_b2CircleShape_get_m_radius_0,ti=e._emscripten_bind_b2RevoluteJoint_GetUserData_0=
i._emscripten_bind_b2RevoluteJoint_GetUserData_0,ui=e._emscripten_bind_b2Profile_set_solveTOI_1=i._emscripten_bind_b2Profile_set_solveTOI_1,vi=e._emscripten_bind_b2PrismaticJointDef_set_type_1=i._emscripten_bind_b2PrismaticJointDef_set_type_1,wi=e._emscripten_bind_b2GearJointDef_get_userData_0=i._emscripten_bind_b2GearJointDef_get_userData_0,xi=e._emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1=i._emscripten_bind_b2WheelJoint_SetSpringFrequencyHz_1,yi=e._emscripten_bind_b2FrictionJointDef___destroy___0=
i._emscripten_bind_b2FrictionJointDef___destroy___0,zi=e._emscripten_bind_b2PrismaticJoint_GetReactionForce_1=i._emscripten_bind_b2PrismaticJoint_GetReactionForce_1,Ai=e._emscripten_bind_b2Transform_b2Transform_0=i._emscripten_bind_b2Transform_b2Transform_0,Bi=e._emscripten_bind_b2MouseJoint_GetCollideConnected_0=i._emscripten_bind_b2MouseJoint_GetCollideConnected_0,Ci=e._emscripten_enum_b2LimitState_e_equalLimits=i._emscripten_enum_b2LimitState_e_equalLimits,Di=e._emscripten_bind_b2ManifoldPoint_set_normalImpulse_1=
i._emscripten_bind_b2ManifoldPoint_set_normalImpulse_1,Ei=e._emscripten_bind_b2Body_GetContactList_0=i._emscripten_bind_b2Body_GetContactList_0,Fi=e._emscripten_bind_b2Body_IsFixedRotation_0=i._emscripten_bind_b2Body_IsFixedRotation_0,Gi=e._emscripten_enum_b2DrawFlag_e_shapeBit=i._emscripten_enum_b2DrawFlag_e_shapeBit,Hi=e._emscripten_bind_b2Contact_GetFriction_0=i._emscripten_bind_b2Contact_GetFriction_0,Ii=e._emscripten_bind_b2WheelJoint_GetAnchorB_0=i._emscripten_bind_b2WheelJoint_GetAnchorB_0,
Ji=e._emscripten_bind_b2DistanceJointDef_set_length_1=i._emscripten_bind_b2DistanceJointDef_set_length_1,Ki=e._emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0=i._emscripten_bind_b2DistanceJoint_GetLocalAnchorB_0,Li=e._emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0=i._emscripten_bind_b2FrictionJoint_GetLocalAnchorB_0,Mi=e._emscripten_bind_b2Mat33_set_ey_1=i._emscripten_bind_b2Mat33_set_ey_1,Ni=e._emscripten_bind_b2DistanceJointDef_get_type_0=i._emscripten_bind_b2DistanceJointDef_get_type_0,Oi=
e._emscripten_bind_b2Draw_ClearFlags_1=i._emscripten_bind_b2Draw_ClearFlags_1,Pi=e._emscripten_bind_b2Body_IsActive_0=i._emscripten_bind_b2Body_IsActive_0,Qi=e._emscripten_bind_b2Contact_ResetRestitution_0=i._emscripten_bind_b2Contact_ResetRestitution_0,Ri=e._emscripten_bind_b2World_GetAllowSleeping_0=i._emscripten_bind_b2World_GetAllowSleeping_0,Si=e._emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0=i._emscripten_bind_b2ManifoldPoint_b2ManifoldPoint_0,Ti=e._emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1=
i._emscripten_bind_b2PrismaticJointDef_set_maxMotorForce_1,Ui=e._emscripten_bind_b2GearJointDef_set_bodyA_1=i._emscripten_bind_b2GearJointDef_set_bodyA_1,Vi=e._emscripten_bind_b2RevoluteJointDef_set_enableMotor_1=i._emscripten_bind_b2RevoluteJointDef_set_enableMotor_1,Wi=e._emscripten_bind_b2PulleyJoint_IsActive_0=i._emscripten_bind_b2PulleyJoint_IsActive_0,Xi=e._emscripten_bind_b2MouseJoint_GetNext_0=i._emscripten_bind_b2MouseJoint_GetNext_0,Yi=e._emscripten_bind_b2Transform_set_p_1=i._emscripten_bind_b2Transform_set_p_1,
Zi=e._emscripten_bind_b2EdgeShape_set_m_vertex0_1=i._emscripten_bind_b2EdgeShape_set_m_vertex0_1,$i=e._emscripten_bind_b2PulleyJointDef_get_lengthB_0=i._emscripten_bind_b2PulleyJointDef_get_lengthB_0,aj=e._emscripten_bind_b2WeldJoint_SetUserData_1=i._emscripten_bind_b2WeldJoint_SetUserData_1,bj=e._emscripten_bind_b2Fixture_SetSensor_1=i._emscripten_bind_b2Fixture_SetSensor_1,cj=e._emscripten_bind_b2GearJointDef_get_joint1_0=i._emscripten_bind_b2GearJointDef_get_joint1_0,dj=e._emscripten_bind_b2PrismaticJoint_GetMotorForce_1=
i._emscripten_bind_b2PrismaticJoint_GetMotorForce_1,ej=e._emscripten_bind_b2DistanceJoint_GetBodyA_0=i._emscripten_bind_b2DistanceJoint_GetBodyA_0,fj=e._emscripten_bind_b2GearJoint_IsActive_0=i._emscripten_bind_b2GearJoint_IsActive_0,gj=e._emscripten_bind_b2EdgeShape_get_m_vertex0_0=i._emscripten_bind_b2EdgeShape_get_m_vertex0_0,hj=e._emscripten_bind_b2World_GetBodyCount_0=i._emscripten_bind_b2World_GetBodyCount_0,ij=e._emscripten_bind_b2Fixture_GetMassData_1=i._emscripten_bind_b2Fixture_GetMassData_1,
jj=e._emscripten_bind_b2WeldJointDef_get_collideConnected_0=i._emscripten_bind_b2WeldJointDef_get_collideConnected_0,kj=e._emscripten_bind_b2FrictionJoint_GetMaxTorque_0=i._emscripten_bind_b2FrictionJoint_GetMaxTorque_0,lj=e._emscripten_bind_b2EdgeShape_RayCast_4=i._emscripten_bind_b2EdgeShape_RayCast_4,mj=e._emscripten_bind_b2BodyDef_set_allowSleep_1=i._emscripten_bind_b2BodyDef_set_allowSleep_1,nj=e._emscripten_bind_b2PulleyJoint_GetType_0=i._emscripten_bind_b2PulleyJoint_GetType_0,oj=e._emscripten_bind_b2WeldJointDef_set_localAnchorA_1=
i._emscripten_bind_b2WeldJointDef_set_localAnchorA_1,pj=e._emscripten_bind_b2Profile_set_step_1=i._emscripten_bind_b2Profile_set_step_1,qj=e._emscripten_bind_b2ContactEdge_set_other_1=i._emscripten_bind_b2ContactEdge_set_other_1,rj=e._emscripten_bind_b2PulleyJoint_GetCurrentLengthB_0=i._emscripten_bind_b2PulleyJoint_GetCurrentLengthB_0,sj=e._emscripten_bind_b2Vec2_op_mul_1=i._emscripten_bind_b2Vec2_op_mul_1,tj=e._emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0=i._emscripten_bind_b2PrismaticJointDef_get_localAnchorA_0,
uj=e._emscripten_bind_b2EdgeShape___destroy___0=i._emscripten_bind_b2EdgeShape___destroy___0,vj=e._emscripten_bind_b2RopeJoint_GetAnchorA_0=i._emscripten_bind_b2RopeJoint_GetAnchorA_0,wj=e._emscripten_bind_b2World_GetContactCount_0=i._emscripten_bind_b2World_GetContactCount_0,xj=e._emscripten_bind_b2MotorJointDef_set_correctionFactor_1=i._emscripten_bind_b2MotorJointDef_set_correctionFactor_1,yj=e._emscripten_bind_b2DistanceJointDef_set_userData_1=i._emscripten_bind_b2DistanceJointDef_set_userData_1,
zj=e._emscripten_bind_b2ContactEdge_get_other_0=i._emscripten_bind_b2ContactEdge_get_other_0,Aj=e._emscripten_bind_b2RopeJoint_GetLocalAnchorB_0=i._emscripten_bind_b2RopeJoint_GetLocalAnchorB_0,Bj=e._emscripten_bind_b2PulleyJointDef___destroy___0=i._emscripten_bind_b2PulleyJointDef___destroy___0,Cj=e._emscripten_bind_b2MouseJoint_GetBodyB_0=i._emscripten_bind_b2MouseJoint_GetBodyB_0,Dj=e._emscripten_bind_b2PolygonShape_TestPoint_2=i._emscripten_bind_b2PolygonShape_TestPoint_2,Ej=e._emscripten_bind_b2EdgeShape_set_m_vertex3_1=
i._emscripten_bind_b2EdgeShape_set_m_vertex3_1,Fj=e._emscripten_bind_b2PolygonShape_b2PolygonShape_0=i._emscripten_bind_b2PolygonShape_b2PolygonShape_0,Gj=e._emscripten_bind_b2GearJointDef_set_ratio_1=i._emscripten_bind_b2GearJointDef_set_ratio_1,Hj=e._emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1=i._emscripten_bind_b2WheelJoint_SetMaxMotorTorque_1,Ij=e._emscripten_bind_b2WheelJointDef_get_localAxisA_0=i._emscripten_bind_b2WheelJointDef_get_localAxisA_0,Jj=e._emscripten_bind_b2DistanceJointDef_get_localAnchorA_0=
i._emscripten_bind_b2DistanceJointDef_get_localAnchorA_0,Kj=e._emscripten_bind_b2MassData_set_center_1=i._emscripten_bind_b2MassData_set_center_1,Lj=e._emscripten_bind_b2Contact_SetTangentSpeed_1=i._emscripten_bind_b2Contact_SetTangentSpeed_1,Mj=e._emscripten_bind_b2FrictionJointDef_get_localAnchorB_0=i._emscripten_bind_b2FrictionJointDef_get_localAnchorB_0,Nj=e._emscripten_bind_b2BodyDef_get_active_0=i._emscripten_bind_b2BodyDef_get_active_0,Oj=e._emscripten_bind_b2Body_GetAngularVelocity_0=i._emscripten_bind_b2Body_GetAngularVelocity_0,
Pj=e._emscripten_bind_b2WeldJoint_GetBodyB_0=i._emscripten_bind_b2WeldJoint_GetBodyB_0,Qj=e._emscripten_bind_b2Draw___destroy___0=i._emscripten_bind_b2Draw___destroy___0,Rj=e._emscripten_bind_b2WheelJointDef_Initialize_4=i._emscripten_bind_b2WheelJointDef_Initialize_4,Sj=e._emscripten_bind_b2WeldJointDef_set_dampingRatio_1=i._emscripten_bind_b2WeldJointDef_set_dampingRatio_1,Tj=e._emscripten_bind_b2Contact_IsEnabled_0=i._emscripten_bind_b2Contact_IsEnabled_0,Uj=e._emscripten_bind_b2Joint_GetAnchorB_0=
i._emscripten_bind_b2Joint_GetAnchorB_0,Vj=e._emscripten_bind_b2PrismaticJointDef_get_userData_0=i._emscripten_bind_b2PrismaticJointDef_get_userData_0,Wj=e._emscripten_bind_b2MotorJoint_GetMaxForce_0=i._emscripten_bind_b2MotorJoint_GetMaxForce_0,Xj=e._emscripten_bind_b2RevoluteJoint_GetBodyA_0=i._emscripten_bind_b2RevoluteJoint_GetBodyA_0,Yj=e._emscripten_bind_b2ContactID_set_cf_1=i._emscripten_bind_b2ContactID_set_cf_1,Zj=e._emscripten_bind_b2Rot_GetXAxis_0=i._emscripten_bind_b2Rot_GetXAxis_0,$j=
e._emscripten_bind_b2ContactEdge_set_prev_1=i._emscripten_bind_b2ContactEdge_set_prev_1,ak=e._emscripten_bind_b2Vec3_Set_3=i._emscripten_bind_b2Vec3_Set_3,bk=e._emscripten_bind_b2Fixture_GetNext_0=i._emscripten_bind_b2Fixture_GetNext_0,ck=e._emscripten_bind_b2FrictionJointDef_set_localAnchorB_1=i._emscripten_bind_b2FrictionJointDef_set_localAnchorB_1,dk=e._emscripten_bind_b2PulleyJoint_GetNext_0=i._emscripten_bind_b2PulleyJoint_GetNext_0,ek=e._emscripten_bind_b2ChainShape_get_m_type_0=i._emscripten_bind_b2ChainShape_get_m_type_0,
fk=e._emscripten_bind_b2GearJointDef_get_bodyA_0=i._emscripten_bind_b2GearJointDef_get_bodyA_0,gk=e._emscripten_bind_b2DistanceJointDef_set_frequencyHz_1=i._emscripten_bind_b2DistanceJointDef_set_frequencyHz_1,hk=e._emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0=i._emscripten_bind_b2RevoluteJointDef_get_localAnchorB_0,ik=e._emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0=i._emscripten_bind_b2RevoluteJointDef_get_referenceAngle_0,jk=e._emscripten_bind_JSContactFilter___destroy___0=i._emscripten_bind_JSContactFilter___destroy___0,
Wb=e._memset=i._memset,kk=e._emscripten_bind_b2PolygonShape_get_m_radius_0=i._emscripten_bind_b2PolygonShape_get_m_radius_0,lk=e._emscripten_bind_b2RopeJoint_GetUserData_0=i._emscripten_bind_b2RopeJoint_GetUserData_0,mk=e._emscripten_bind_b2RopeJointDef_get_bodyA_0=i._emscripten_bind_b2RopeJointDef_get_bodyA_0,nk=e._emscripten_bind_b2DistanceJointDef_get_dampingRatio_0=i._emscripten_bind_b2DistanceJointDef_get_dampingRatio_0,ok=e._emscripten_enum_b2ManifoldType_e_faceA=i._emscripten_enum_b2ManifoldType_e_faceA,
pk=e._emscripten_enum_b2ManifoldType_e_faceB=i._emscripten_enum_b2ManifoldType_e_faceB,qk=e._emscripten_bind_b2RevoluteJointDef_get_bodyB_0=i._emscripten_bind_b2RevoluteJointDef_get_bodyB_0,rk=e._emscripten_bind_b2FixtureDef_b2FixtureDef_0=i._emscripten_bind_b2FixtureDef_b2FixtureDef_0,sk=e._emscripten_bind_b2PrismaticJoint_SetUserData_1=i._emscripten_bind_b2PrismaticJoint_SetUserData_1,tk=e._emscripten_bind_b2EdgeShape_get_m_hasVertex3_0=i._emscripten_bind_b2EdgeShape_get_m_hasVertex3_0,uk=e._emscripten_enum_b2ShapeType_e_edge=
i._emscripten_enum_b2ShapeType_e_edge,vk=e._emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0=i._emscripten_bind_b2RevoluteJoint_GetMaxMotorTorque_0,wk=e._emscripten_bind_b2BodyDef_set_active_1=i._emscripten_bind_b2BodyDef_set_active_1,xk=e._emscripten_bind_b2DistanceJointDef_set_localAnchorB_1=i._emscripten_bind_b2DistanceJointDef_set_localAnchorB_1,yk=e._emscripten_bind_b2Body_GetWorldPoint_1=i._emscripten_bind_b2Body_GetWorldPoint_1,zk=e._emscripten_bind_b2ManifoldPoint_get_normalImpulse_0=i._emscripten_bind_b2ManifoldPoint_get_normalImpulse_0,
Ak=e._emscripten_bind_JSContactFilter_ShouldCollide_2=i._emscripten_bind_JSContactFilter_ShouldCollide_2,Bk=e._emscripten_bind_b2Joint_GetReactionTorque_1=i._emscripten_bind_b2Joint_GetReactionTorque_1,Ck=e._emscripten_bind_b2RevoluteJointDef_set_type_1=i._emscripten_bind_b2RevoluteJointDef_set_type_1,Dk=e._emscripten_bind_b2RopeJointDef_b2RopeJointDef_0=i._emscripten_bind_b2RopeJointDef_b2RopeJointDef_0,Ek=e._emscripten_bind_b2BodyDef_get_linearDamping_0=i._emscripten_bind_b2BodyDef_get_linearDamping_0,
Fk=e._emscripten_bind_b2MotorJointDef_get_bodyB_0=i._emscripten_bind_b2MotorJointDef_get_bodyB_0,Gk=e._emscripten_bind_b2World_Step_3=i._emscripten_bind_b2World_Step_3,Hk=e._emscripten_bind_b2CircleShape_RayCast_4=i._emscripten_bind_b2CircleShape_RayCast_4,Ik=e._emscripten_bind_b2Profile_get_step_0=i._emscripten_bind_b2Profile_get_step_0,Jk=e._emscripten_bind_b2Vec3_b2Vec3_0=i._emscripten_bind_b2Vec3_b2Vec3_0,Kk=e._emscripten_bind_b2Vec3_b2Vec3_3=i._emscripten_bind_b2Vec3_b2Vec3_3,Lk=e._emscripten_bind_b2PulleyJoint_GetLengthB_0=
i._emscripten_bind_b2PulleyJoint_GetLengthB_0,Mk=e._emscripten_bind_b2Filter_set_categoryBits_1=i._emscripten_bind_b2Filter_set_categoryBits_1,Nk=e._emscripten_bind_b2MotorJoint_GetUserData_0=i._emscripten_bind_b2MotorJoint_GetUserData_0,Ok=e._emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0=i._emscripten_bind_b2PrismaticJoint_GetLocalAnchorA_0,Pk=e._emscripten_bind_b2Shape_get_m_type_0=i._emscripten_bind_b2Shape_get_m_type_0,Qk=e._emscripten_bind_b2MouseJoint_SetDampingRatio_1=i._emscripten_bind_b2MouseJoint_SetDampingRatio_1,
Rk=e._emscripten_bind_b2World_GetAutoClearForces_0=i._emscripten_bind_b2World_GetAutoClearForces_0,Sk=e._emscripten_enum_b2ShapeType_e_circle=i._emscripten_enum_b2ShapeType_e_circle,Tk=e._emscripten_bind_b2BodyDef_set_fixedRotation_1=i._emscripten_bind_b2BodyDef_set_fixedRotation_1,Uk=e._emscripten_bind_b2RopeJoint_GetLimitState_0=i._emscripten_bind_b2RopeJoint_GetLimitState_0,Vk=e._emscripten_bind_b2JointDef_get_collideConnected_0=i._emscripten_bind_b2JointDef_get_collideConnected_0,Wk=e._emscripten_bind_b2Body_Dump_0=
i._emscripten_bind_b2Body_Dump_0,Xk=e._emscripten_bind_b2RevoluteJoint_GetLowerLimit_0=i._emscripten_bind_b2RevoluteJoint_GetLowerLimit_0,Yk=e._emscripten_bind_b2Body_GetWorldCenter_0=i._emscripten_bind_b2Body_GetWorldCenter_0,Zk=e._emscripten_bind_JSContactListener___destroy___0=i._emscripten_bind_JSContactListener___destroy___0,$k=e._emscripten_bind_b2BodyDef_set_linearVelocity_1=i._emscripten_bind_b2BodyDef_set_linearVelocity_1,al=e._emscripten_bind_b2JointDef_set_collideConnected_1=i._emscripten_bind_b2JointDef_set_collideConnected_1,
bl=e._emscripten_bind_b2MotorJoint___destroy___0=i._emscripten_bind_b2MotorJoint___destroy___0,cl=e._emscripten_bind_b2Body_GetUserData_0=i._emscripten_bind_b2Body_GetUserData_0,dl=e._emscripten_bind_b2World_GetContinuousPhysics_0=i._emscripten_bind_b2World_GetContinuousPhysics_0,el=e._emscripten_bind_b2Fixture_RayCast_3=i._emscripten_bind_b2Fixture_RayCast_3,fl=e._emscripten_bind_b2JointDef_set_bodyA_1=i._emscripten_bind_b2JointDef_set_bodyA_1,gl=e._emscripten_bind_b2GearJointDef_get_collideConnected_0=
i._emscripten_bind_b2GearJointDef_get_collideConnected_0,hl=e._emscripten_bind_b2RopeJointDef_get_maxLength_0=i._emscripten_bind_b2RopeJointDef_get_maxLength_0,il=e._emscripten_bind_b2MouseJointDef_get_bodyA_0=i._emscripten_bind_b2MouseJointDef_get_bodyA_0,jl=e._emscripten_bind_b2Body_SetBullet_1=i._emscripten_bind_b2Body_SetBullet_1,kl=e._emscripten_bind_b2DistanceJoint_GetType_0=i._emscripten_bind_b2DistanceJoint_GetType_0,ll=e._emscripten_bind_b2FixtureDef_get_restitution_0=i._emscripten_bind_b2FixtureDef_get_restitution_0,
ml=e._emscripten_bind_b2Fixture_GetType_0=i._emscripten_bind_b2Fixture_GetType_0,nl=e._emscripten_bind_b2PulleyJointDef_set_localAnchorB_1=i._emscripten_bind_b2PulleyJointDef_set_localAnchorB_1,ol=e._emscripten_bind_b2RevoluteJoint_GetBodyB_0=i._emscripten_bind_b2RevoluteJoint_GetBodyB_0,pl=e._emscripten_bind_b2Profile_set_solveInit_1=i._emscripten_bind_b2Profile_set_solveInit_1,ql=e._emscripten_bind_b2RopeJointDef_set_type_1=i._emscripten_bind_b2RopeJointDef_set_type_1,rl=e._emscripten_bind_b2PrismaticJointDef_get_bodyB_0=
i._emscripten_bind_b2PrismaticJointDef_get_bodyB_0,sl=e._emscripten_bind_b2Body_SetLinearVelocity_1=i._emscripten_bind_b2Body_SetLinearVelocity_1,tl=e._emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0=i._emscripten_bind_b2RevoluteJoint_GetReferenceAngle_0,ul=e._emscripten_bind_b2PulleyJointDef_get_userData_0=i._emscripten_bind_b2PulleyJointDef_get_userData_0,vl=e._emscripten_bind_b2PrismaticJointDef_set_bodyB_1=i._emscripten_bind_b2PrismaticJointDef_set_bodyB_1,wl=e._emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0=
i._emscripten_bind_b2FrictionJointDef_b2FrictionJointDef_0,eb=e._free=i._free,xl=e._emscripten_bind_b2PulleyJoint_GetCurrentLengthA_0=i._emscripten_bind_b2PulleyJoint_GetCurrentLengthA_0,yl=e._emscripten_bind_b2Manifold_get_localNormal_0=i._emscripten_bind_b2Manifold_get_localNormal_0,zl=e._emscripten_bind_b2AABB_RayCast_2=i._emscripten_bind_b2AABB_RayCast_2,Al=e._emscripten_bind_b2FixtureDef_set_isSensor_1=i._emscripten_bind_b2FixtureDef_set_isSensor_1,Bl=e._emscripten_bind_b2RopeJoint_GetBodyB_0=
i._emscripten_bind_b2RopeJoint_GetBodyB_0,Cl=e._emscripten_bind_b2PrismaticJoint_GetAnchorA_0=i._emscripten_bind_b2PrismaticJoint_GetAnchorA_0,Dl=e._emscripten_bind_b2ChainShape_set_m_count_1=i._emscripten_bind_b2ChainShape_set_m_count_1,El=e._emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0=i._emscripten_bind_b2PrismaticJoint_IsMotorEnabled_0,Fl=e._emscripten_bind_b2WeldJoint_GetFrequency_0=i._emscripten_bind_b2WeldJoint_GetFrequency_0,Gl=e._emscripten_bind_b2Joint_GetUserData_0=i._emscripten_bind_b2Joint_GetUserData_0,
Hl=e._emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0=i._emscripten_bind_b2RevoluteJointDef_get_lowerAngle_0,Il=e._emscripten_bind_b2Manifold_set_type_1=i._emscripten_bind_b2Manifold_set_type_1,Jl=e._emscripten_bind_b2DistanceJoint_GetLength_0=i._emscripten_bind_b2DistanceJoint_GetLength_0,Kl=e._emscripten_bind_b2RopeJointDef_set_maxLength_1=i._emscripten_bind_b2RopeJointDef_set_maxLength_1,Ll=e._emscripten_bind_b2ChainShape_TestPoint_2=i._emscripten_bind_b2ChainShape_TestPoint_2,Ml=e._emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0=
i._emscripten_bind_b2PrismaticJoint_GetReferenceAngle_0,Nl=e._emscripten_bind_b2RayCastInput_get_p2_0=i._emscripten_bind_b2RayCastInput_get_p2_0,Ol=e._emscripten_bind_b2RevoluteJoint_EnableLimit_1=i._emscripten_bind_b2RevoluteJoint_EnableLimit_1,Pl=e._emscripten_bind_b2BodyDef_set_angle_1=i._emscripten_bind_b2BodyDef_set_angle_1,Ql=e._emscripten_bind_b2WeldJoint_GetUserData_0=i._emscripten_bind_b2WeldJoint_GetUserData_0,Rl=e._emscripten_bind_b2WheelJointDef_get_localAnchorA_0=i._emscripten_bind_b2WheelJointDef_get_localAnchorA_0,
Sl=e._emscripten_bind_b2PulleyJointDef_set_type_1=i._emscripten_bind_b2PulleyJointDef_set_type_1,Tl=e._emscripten_bind_b2Body_IsBullet_0=i._emscripten_bind_b2Body_IsBullet_0,Ul=e._emscripten_bind_b2MotorJointDef_set_bodyA_1=i._emscripten_bind_b2MotorJointDef_set_bodyA_1,Vl=e._emscripten_bind_b2Mat33_GetSymInverse33_1=i._emscripten_bind_b2Mat33_GetSymInverse33_1,Wl=e._emscripten_bind_b2Body_ApplyLinearImpulse_3=i._emscripten_bind_b2Body_ApplyLinearImpulse_3,Xl=e._emscripten_bind_b2PolygonShape_ComputeMass_2=
i._emscripten_bind_b2PolygonShape_ComputeMass_2,Yl=e._emscripten_bind_b2WeldJoint_GetLocalAnchorA_0=i._emscripten_bind_b2WeldJoint_GetLocalAnchorA_0,Zl=e._emscripten_bind_b2MouseJoint_SetFrequency_1=i._emscripten_bind_b2MouseJoint_SetFrequency_1,$l=e._emscripten_bind_b2EdgeShape_get_m_vertex1_0=i._emscripten_bind_b2EdgeShape_get_m_vertex1_0,am=e._emscripten_bind_b2BodyDef_set_awake_1=i._emscripten_bind_b2BodyDef_set_awake_1,bm=e._emscripten_bind_b2Vec2_get_y_0=i._emscripten_bind_b2Vec2_get_y_0,cm=
e._emscripten_bind_b2Body_CreateFixture_1=i._emscripten_bind_b2Body_CreateFixture_1,dm=e._emscripten_bind_b2Body_CreateFixture_2=i._emscripten_bind_b2Body_CreateFixture_2,em=e._emscripten_bind_b2PulleyJoint_GetUserData_0=i._emscripten_bind_b2PulleyJoint_GetUserData_0,fm=e._emscripten_bind_b2Body_SetActive_1=i._emscripten_bind_b2Body_SetActive_1,gm=e._emscripten_bind_b2Fixture_GetUserData_0=i._emscripten_bind_b2Fixture_GetUserData_0,hm=e._emscripten_bind_b2PolygonShape_ComputeAABB_3=i._emscripten_bind_b2PolygonShape_ComputeAABB_3,
im=e._emscripten_bind_b2ContactFeature_get_typeA_0=i._emscripten_bind_b2ContactFeature_get_typeA_0,jm=e._emscripten_bind_b2MouseJoint_GetReactionForce_1=i._emscripten_bind_b2MouseJoint_GetReactionForce_1,km=e._emscripten_bind_b2FrictionJoint_GetReactionTorque_1=i._emscripten_bind_b2FrictionJoint_GetReactionTorque_1,lm=e._emscripten_bind_b2EdgeShape_TestPoint_2=i._emscripten_bind_b2EdgeShape_TestPoint_2,mc=e._memcpy=i._memcpy,mm=e._emscripten_bind_b2PolygonShape_get_m_centroid_0=i._emscripten_bind_b2PolygonShape_get_m_centroid_0,
nm=e._emscripten_bind_b2ChainShape___destroy___0=i._emscripten_bind_b2ChainShape___destroy___0,om=e._emscripten_bind_b2GearJoint_SetUserData_1=i._emscripten_bind_b2GearJoint_SetUserData_1,pm=e._emscripten_bind_b2Vec3_set_z_1=i._emscripten_bind_b2Vec3_set_z_1,qm=e._emscripten_bind_b2PrismaticJointDef_set_enableLimit_1=i._emscripten_bind_b2PrismaticJointDef_set_enableLimit_1,rm=e._emscripten_bind_b2DistanceJoint_GetFrequency_0=i._emscripten_bind_b2DistanceJoint_GetFrequency_0,sm=e._emscripten_bind_b2Body_SetGravityScale_1=
i._emscripten_bind_b2Body_SetGravityScale_1,tm=e._emscripten_enum_b2ContactFeatureType_e_face=i._emscripten_enum_b2ContactFeatureType_e_face,um=e._emscripten_bind_b2AABB_GetPerimeter_0=i._emscripten_bind_b2AABB_GetPerimeter_0,vm=e._emscripten_bind_b2PulleyJointDef_get_lengthA_0=i._emscripten_bind_b2PulleyJointDef_get_lengthA_0,wm=e._emscripten_bind_b2Vec3_set_x_1=i._emscripten_bind_b2Vec3_set_x_1,xm=e._emscripten_bind_b2PulleyJointDef_get_type_0=i._emscripten_bind_b2PulleyJointDef_get_type_0,ym=e._emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1=
i._emscripten_bind_JSDestructionListener_SayGoodbyeJoint_1,zm=e._emscripten_bind_b2Shape___destroy___0=i._emscripten_bind_b2Shape___destroy___0,Yb=e._strlen=i._strlen,Am=e._emscripten_bind_b2Color_set_b_1=i._emscripten_bind_b2Color_set_b_1,Bm=e._emscripten_bind_b2Joint_GetReactionForce_1=i._emscripten_bind_b2Joint_GetReactionForce_1,Cm=e._emscripten_bind_b2FixtureDef_set_friction_1=i._emscripten_bind_b2FixtureDef_set_friction_1,Dm=e._emscripten_bind_b2ContactID___destroy___0=i._emscripten_bind_b2ContactID___destroy___0,
Em=e._emscripten_bind_b2EdgeShape_get_m_hasVertex0_0=i._emscripten_bind_b2EdgeShape_get_m_hasVertex0_0,Fm=e._emscripten_bind_JSRayCastCallback_ReportFixture_4=i._emscripten_bind_JSRayCastCallback_ReportFixture_4,Gm=e._emscripten_bind_b2MotorJointDef_get_linearOffset_0=i._emscripten_bind_b2MotorJointDef_get_linearOffset_0,Hm=e._emscripten_bind_b2Profile_set_solveVelocity_1=i._emscripten_bind_b2Profile_set_solveVelocity_1,Im=e._emscripten_bind_b2PrismaticJoint_GetAnchorB_0=i._emscripten_bind_b2PrismaticJoint_GetAnchorB_0,
Jm=e._emscripten_bind_b2WeldJointDef_b2WeldJointDef_0=i._emscripten_bind_b2WeldJointDef_b2WeldJointDef_0,Km=e._emscripten_enum_b2BodyType_b2_staticBody=i._emscripten_enum_b2BodyType_b2_staticBody,Lm=e._emscripten_bind_b2RevoluteJointDef_set_upperAngle_1=i._emscripten_bind_b2RevoluteJointDef_set_upperAngle_1,Mm=e._emscripten_bind_b2RevoluteJointDef_get_type_0=i._emscripten_bind_b2RevoluteJointDef_get_type_0,Nm=e._emscripten_bind_b2GearJointDef_get_type_0=i._emscripten_bind_b2GearJointDef_get_type_0,
Om=e._emscripten_bind_b2ChainShape_GetType_0=i._emscripten_bind_b2ChainShape_GetType_0,Pm=e._emscripten_bind_b2RayCastInput_get_maxFraction_0=i._emscripten_bind_b2RayCastInput_get_maxFraction_0,Qm=e._emscripten_bind_b2GearJoint_GetBodyA_0=i._emscripten_bind_b2GearJoint_GetBodyA_0,Rm=e._emscripten_bind_b2Body_GetLocalVector_1=i._emscripten_bind_b2Body_GetLocalVector_1,Sm=e._emscripten_bind_b2PrismaticJoint_EnableLimit_1=i._emscripten_bind_b2PrismaticJoint_EnableLimit_1,Tm=e._emscripten_bind_b2FrictionJointDef_get_maxForce_0=
i._emscripten_bind_b2FrictionJointDef_get_maxForce_0,Um=e._emscripten_bind_b2BodyDef_set_angularVelocity_1=i._emscripten_bind_b2BodyDef_set_angularVelocity_1,Vm=e._emscripten_bind_b2Body_SetLinearDamping_1=i._emscripten_bind_b2Body_SetLinearDamping_1,Wm=e._emscripten_bind_b2WheelJoint_GetBodyB_0=i._emscripten_bind_b2WheelJoint_GetBodyB_0,Xm=e._emscripten_bind_b2Color___destroy___0=i._emscripten_bind_b2Color___destroy___0,Ym=e._emscripten_bind_b2PrismaticJoint_IsActive_0=i._emscripten_bind_b2PrismaticJoint_IsActive_0,
Zm=e._emscripten_bind_b2Filter_get_categoryBits_0=i._emscripten_bind_b2Filter_get_categoryBits_0,$m=e._emscripten_enum_b2JointType_e_weldJoint=i._emscripten_enum_b2JointType_e_weldJoint,an=e._emscripten_bind_b2World_SetContinuousPhysics_1=i._emscripten_bind_b2World_SetContinuousPhysics_1,bn=e._emscripten_bind_b2MouseJointDef_get_target_0=i._emscripten_bind_b2MouseJointDef_get_target_0,cn=e._emscripten_bind_b2Manifold_b2Manifold_0=i._emscripten_bind_b2Manifold_b2Manifold_0,dn=e._emscripten_bind_b2PulleyJointDef_set_userData_1=
i._emscripten_bind_b2PulleyJointDef_set_userData_1,en=e._emscripten_bind_b2FrictionJointDef_set_maxForce_1=i._emscripten_bind_b2FrictionJointDef_set_maxForce_1,fn=e._emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0=i._emscripten_bind_b2DistanceJointDef_b2DistanceJointDef_0,gn=e._emscripten_bind_b2PolygonShape_set_m_centroid_1=i._emscripten_bind_b2PolygonShape_set_m_centroid_1,hn=e._emscripten_bind_b2Mat33_GetInverse22_1=i._emscripten_bind_b2Mat33_GetInverse22_1,jn=e._emscripten_bind_b2PolygonShape_SetAsBox_4=
i._emscripten_bind_b2PolygonShape_SetAsBox_4,kn=e._emscripten_bind_b2EdgeShape_get_m_vertex2_0=i._emscripten_bind_b2EdgeShape_get_m_vertex2_0,ln=e._emscripten_bind_b2WheelJoint_GetReactionTorque_1=i._emscripten_bind_b2WheelJoint_GetReactionTorque_1,mn=e._emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0=i._emscripten_bind_b2RevoluteJointDef_b2RevoluteJointDef_0,nn=e._emscripten_bind_b2ContactFeature_set_typeA_1=i._emscripten_bind_b2ContactFeature_set_typeA_1,on=e._emscripten_bind_b2Fixture_Dump_1=
i._emscripten_bind_b2Fixture_Dump_1,pn=e._emscripten_bind_b2World_GetJointList_0=i._emscripten_bind_b2World_GetJointList_0,qn=e._emscripten_bind_b2Manifold_set_localPoint_1=i._emscripten_bind_b2Manifold_set_localPoint_1,rn=e._emscripten_bind_b2DistanceJoint_SetUserData_1=i._emscripten_bind_b2DistanceJoint_SetUserData_1,sn=e._emscripten_bind_b2BodyDef_set_bullet_1=i._emscripten_bind_b2BodyDef_set_bullet_1,tn=e._emscripten_bind_b2RayCastOutput___destroy___0=i._emscripten_bind_b2RayCastOutput___destroy___0;
e.___cxa_can_catch=i.___cxa_can_catch;
var un=e._emscripten_bind_b2WheelJoint_GetNext_0=i._emscripten_bind_b2WheelJoint_GetNext_0,vn=e._emscripten_bind_b2AABB_GetCenter_0=i._emscripten_bind_b2AABB_GetCenter_0,wn=e._emscripten_bind_b2Filter_set_groupIndex_1=i._emscripten_bind_b2Filter_set_groupIndex_1,xn=e._emscripten_bind_b2JointDef_b2JointDef_0=i._emscripten_bind_b2JointDef_b2JointDef_0,yn=e._emscripten_bind_b2CircleShape_b2CircleShape_0=i._emscripten_bind_b2CircleShape_b2CircleShape_0,zn=e._emscripten_bind_b2GearJointDef_b2GearJointDef_0=i._emscripten_bind_b2GearJointDef_b2GearJointDef_0,
An=e._emscripten_bind_b2JointDef_get_bodyB_0=i._emscripten_bind_b2JointDef_get_bodyB_0,Bn=e._emscripten_bind_b2DistanceJoint_GetReactionForce_1=i._emscripten_bind_b2DistanceJoint_GetReactionForce_1,Cn=e._emscripten_bind_b2PrismaticJoint_GetJointSpeed_0=i._emscripten_bind_b2PrismaticJoint_GetJointSpeed_0,Dn=e._emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0=i._emscripten_bind_b2PulleyJointDef_get_groundAnchorB_0,En=e._emscripten_bind_b2Joint_GetAnchorA_0=i._emscripten_bind_b2Joint_GetAnchorA_0,
Fn=e._emscripten_bind_b2Contact_GetRestitution_0=i._emscripten_bind_b2Contact_GetRestitution_0,Gn=e._emscripten_bind_b2ContactEdge_get_contact_0=i._emscripten_bind_b2ContactEdge_get_contact_0,Hn=e._emscripten_bind_b2RevoluteJointDef_get_userData_0=i._emscripten_bind_b2RevoluteJointDef_get_userData_0,In=e._emscripten_bind_b2Body_ApplyTorque_2=i._emscripten_bind_b2Body_ApplyTorque_2,Jn=e._emscripten_bind_b2Fixture_GetAABB_1=i._emscripten_bind_b2Fixture_GetAABB_1,Kn=e._emscripten_bind_b2DistanceJointDef_Initialize_4=
i._emscripten_bind_b2DistanceJointDef_Initialize_4,Ln=e._emscripten_bind_b2PrismaticJointDef_set_collideConnected_1=i._emscripten_bind_b2PrismaticJointDef_set_collideConnected_1,Mn=e._emscripten_bind_b2PrismaticJointDef_set_localAxisA_1=i._emscripten_bind_b2PrismaticJointDef_set_localAxisA_1,Nn=e._emscripten_bind_b2Contact_GetTangentSpeed_0=i._emscripten_bind_b2Contact_GetTangentSpeed_0,On=e._emscripten_enum_b2LimitState_e_atLowerLimit=i._emscripten_enum_b2LimitState_e_atLowerLimit,Pn=e._emscripten_bind_b2ManifoldPoint_set_id_1=
i._emscripten_bind_b2ManifoldPoint_set_id_1,Qn=e._emscripten_bind_b2WheelJointDef_get_bodyB_0=i._emscripten_bind_b2WheelJointDef_get_bodyB_0,Rn=e._emscripten_bind_b2WeldJoint_GetLocalAnchorB_0=i._emscripten_bind_b2WeldJoint_GetLocalAnchorB_0,Sn=e._emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1=i._emscripten_bind_b2RevoluteJointDef_set_localAnchorB_1,Tn=e._emscripten_bind_b2RevoluteJoint_GetType_0=i._emscripten_bind_b2RevoluteJoint_GetType_0,Un=e._emscripten_bind_b2Body_DestroyFixture_1=i._emscripten_bind_b2Body_DestroyFixture_1,
Vn=e._emscripten_bind_b2Profile_set_broadphase_1=i._emscripten_bind_b2Profile_set_broadphase_1,Wn=e._emscripten_bind_b2WheelJointDef_get_localAnchorB_0=i._emscripten_bind_b2WheelJointDef_get_localAnchorB_0,Xn=e._emscripten_bind_b2ContactImpulse_get_count_0=i._emscripten_bind_b2ContactImpulse_get_count_0,Yn=e._emscripten_bind_b2World_GetJointCount_0=i._emscripten_bind_b2World_GetJointCount_0,Zn=e._emscripten_bind_b2WheelJoint_GetMotorSpeed_0=i._emscripten_bind_b2WheelJoint_GetMotorSpeed_0,$n=e._emscripten_bind_b2Body_GetAngularDamping_0=
i._emscripten_bind_b2Body_GetAngularDamping_0,ao=e._emscripten_bind_b2WheelJointDef_get_dampingRatio_0=i._emscripten_bind_b2WheelJointDef_get_dampingRatio_0,bo=e._emscripten_bind_b2RayCastOutput_get_fraction_0=i._emscripten_bind_b2RayCastOutput_get_fraction_0,co=e._emscripten_enum_b2ManifoldType_e_circles=i._emscripten_enum_b2ManifoldType_e_circles,eo=e._emscripten_bind_b2GearJoint_SetRatio_1=i._emscripten_bind_b2GearJoint_SetRatio_1,fo=e._emscripten_bind_JSDraw_DrawPolygon_3=i._emscripten_bind_JSDraw_DrawPolygon_3,
go=e._emscripten_bind_b2Filter___destroy___0=i._emscripten_bind_b2Filter___destroy___0,ho=e._emscripten_bind_b2JointEdge_set_next_1=i._emscripten_bind_b2JointEdge_set_next_1;e.___cxa_is_pointer_type=i.___cxa_is_pointer_type;
var io=e._emscripten_bind_b2BodyDef_get_fixedRotation_0=i._emscripten_bind_b2BodyDef_get_fixedRotation_0,jo=e._emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1=i._emscripten_bind_b2PrismaticJointDef_set_motorSpeed_1,ko=e._emscripten_bind_b2ChainShape_SetPrevVertex_1=i._emscripten_bind_b2ChainShape_SetPrevVertex_1,lo=e._emscripten_bind_b2MotorJoint_IsActive_0=i._emscripten_bind_b2MotorJoint_IsActive_0,mo=e._emscripten_bind_b2MouseJoint_GetReactionTorque_1=i._emscripten_bind_b2MouseJoint_GetReactionTorque_1,
no=e._emscripten_bind_b2MouseJoint_GetUserData_0=i._emscripten_bind_b2MouseJoint_GetUserData_0,oo=e._emscripten_bind_b2WheelJoint_GetUserData_0=i._emscripten_bind_b2WheelJoint_GetUserData_0,po=e._emscripten_bind_b2Vec3_op_sub_1=i._emscripten_bind_b2Vec3_op_sub_1,qo=e._emscripten_bind_b2BodyDef_get_gravityScale_0=i._emscripten_bind_b2BodyDef_get_gravityScale_0,ro=e._emscripten_bind_b2Shape_GetType_0=i._emscripten_bind_b2Shape_GetType_0,so=e._emscripten_bind_b2AABB_IsValid_0=i._emscripten_bind_b2AABB_IsValid_0,
to=e._emscripten_bind_b2WheelJoint_GetBodyA_0=i._emscripten_bind_b2WheelJoint_GetBodyA_0,uo=e._emscripten_bind_JSDraw_DrawTransform_1=i._emscripten_bind_JSDraw_DrawTransform_1,vo=e._emscripten_bind_b2PulleyJoint_GetLengthA_0=i._emscripten_bind_b2PulleyJoint_GetLengthA_0,wo=e._emscripten_bind_b2DistanceJointDef_get_frequencyHz_0=i._emscripten_bind_b2DistanceJointDef_get_frequencyHz_0,xo=e._emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1=i._emscripten_bind_b2RevoluteJoint_SetMotorSpeed_1,yo=e._emscripten_bind_b2World___destroy___0=
i._emscripten_bind_b2World___destroy___0,zo=e._emscripten_bind_b2ChainShape_get_m_hasNextVertex_0=i._emscripten_bind_b2ChainShape_get_m_hasNextVertex_0,Ao=e._emscripten_bind_b2ChainShape_SetNextVertex_1=i._emscripten_bind_b2ChainShape_SetNextVertex_1,Bo=e._emscripten_bind_b2Body_SetType_1=i._emscripten_bind_b2Body_SetType_1,Co=e._emscripten_bind_b2Body_GetMass_0=i._emscripten_bind_b2Body_GetMass_0,Do=e._emscripten_bind_b2Rot_b2Rot_0=i._emscripten_bind_b2Rot_b2Rot_0,Eo=e._emscripten_bind_b2Rot_b2Rot_1=
i._emscripten_bind_b2Rot_b2Rot_1,Fo=e._emscripten_enum_b2JointType_e_distanceJoint=i._emscripten_enum_b2JointType_e_distanceJoint,Go=e._emscripten_bind_b2PulleyJoint___destroy___0=i._emscripten_bind_b2PulleyJoint___destroy___0,Ho=e._emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0=i._emscripten_bind_b2PrismaticJoint_GetLocalAnchorB_0,Io=e._emscripten_bind_b2MouseJoint_GetType_0=i._emscripten_bind_b2MouseJoint_GetType_0,Jo=e._emscripten_bind_JSQueryCallback___destroy___0=i._emscripten_bind_JSQueryCallback___destroy___0,
Ko=e._emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1=i._emscripten_bind_b2RevoluteJointDef_set_lowerAngle_1,Lo=e._emscripten_bind_b2JointEdge___destroy___0=i._emscripten_bind_b2JointEdge___destroy___0,Mo=e._emscripten_bind_b2PulleyJoint_GetRatio_0=i._emscripten_bind_b2PulleyJoint_GetRatio_0,No=e._emscripten_bind_JSContactListener_BeginContact_1=i._emscripten_bind_JSContactListener_BeginContact_1,Oo=e._emscripten_bind_b2MotorJointDef_set_linearOffset_1=i._emscripten_bind_b2MotorJointDef_set_linearOffset_1,
Po=e._emscripten_enum_b2JointType_e_motorJoint=i._emscripten_enum_b2JointType_e_motorJoint,Qo=e._emscripten_bind_b2JointEdge_get_next_0=i._emscripten_bind_b2JointEdge_get_next_0,Ro=e._emscripten_bind_b2RayCastInput_set_maxFraction_1=i._emscripten_bind_b2RayCastInput_set_maxFraction_1,So=e._emscripten_bind_b2MouseJoint_GetBodyA_0=i._emscripten_bind_b2MouseJoint_GetBodyA_0,To=e._emscripten_bind_b2Profile_set_collide_1=i._emscripten_bind_b2Profile_set_collide_1,Uo=e._emscripten_bind_b2AABB_b2AABB_0=
i._emscripten_bind_b2AABB_b2AABB_0,Vo=e._emscripten_bind_b2Fixture_Refilter_0=i._emscripten_bind_b2Fixture_Refilter_0,Wo=e._emscripten_bind_b2World_CreateBody_1=i._emscripten_bind_b2World_CreateBody_1,Xo=e._emscripten_bind_b2RopeJointDef_set_userData_1=i._emscripten_bind_b2RopeJointDef_set_userData_1,Yo=e._emscripten_bind_b2Fixture_IsSensor_0=i._emscripten_bind_b2Fixture_IsSensor_0,Zo=e._emscripten_bind_b2WeldJoint_GetType_0=i._emscripten_bind_b2WeldJoint_GetType_0,$o=e._emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0=
i._emscripten_bind_b2PrismaticJointDef_get_motorSpeed_0,ap=e._emscripten_bind_b2Rot___destroy___0=i._emscripten_bind_b2Rot___destroy___0,bp=e._emscripten_bind_b2Filter_get_maskBits_0=i._emscripten_bind_b2Filter_get_maskBits_0,cp=e._emscripten_bind_b2Mat22_get_ex_0=i._emscripten_bind_b2Mat22_get_ex_0,dp=e._emscripten_bind_b2Body_GetFixtureList_0=i._emscripten_bind_b2Body_GetFixtureList_0,ep=e._emscripten_bind_b2RevoluteJointDef_get_enableMotor_0=i._emscripten_bind_b2RevoluteJointDef_get_enableMotor_0,
fp=e._emscripten_bind_b2MouseJointDef_set_dampingRatio_1=i._emscripten_bind_b2MouseJointDef_set_dampingRatio_1,gp=e._emscripten_bind_JSRayCastCallback___destroy___0=i._emscripten_bind_JSRayCastCallback___destroy___0,hp=e._emscripten_bind_b2ContactListener___destroy___0=i._emscripten_bind_b2ContactListener___destroy___0,ip=e._emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1=i._emscripten_bind_b2PrismaticJointDef_set_localAnchorB_1,jp=e._emscripten_enum_b2DrawFlag_e_pairBit=i._emscripten_enum_b2DrawFlag_e_pairBit,
kp=e._emscripten_bind_b2FrictionJoint___destroy___0=i._emscripten_bind_b2FrictionJoint___destroy___0,lp=e._emscripten_bind_b2WeldJoint_Dump_0=i._emscripten_bind_b2WeldJoint_Dump_0,mp=e._emscripten_bind_b2MotorJoint_SetMaxForce_1=i._emscripten_bind_b2MotorJoint_SetMaxForce_1,np=e._emscripten_bind_b2FrictionJointDef_get_maxTorque_0=i._emscripten_bind_b2FrictionJointDef_get_maxTorque_0,op=e._emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0=i._emscripten_bind_b2FrictionJoint_GetLocalAnchorA_0,pp=e._emscripten_bind_b2WeldJointDef_get_localAnchorB_0=
i._emscripten_bind_b2WeldJointDef_get_localAnchorB_0,qp=e._emscripten_bind_b2PrismaticJointDef_get_bodyA_0=i._emscripten_bind_b2PrismaticJointDef_get_bodyA_0,rp=e._emscripten_bind_b2Vec2_IsValid_0=i._emscripten_bind_b2Vec2_IsValid_0,sp=e._emscripten_bind_b2PrismaticJointDef_set_bodyA_1=i._emscripten_bind_b2PrismaticJointDef_set_bodyA_1,tp=e._emscripten_bind_b2World_GetWarmStarting_0=i._emscripten_bind_b2World_GetWarmStarting_0,up=e._emscripten_bind_b2RevoluteJointDef_set_enableLimit_1=i._emscripten_bind_b2RevoluteJointDef_set_enableLimit_1,
vp=e._emscripten_bind_b2WeldJointDef___destroy___0=i._emscripten_bind_b2WeldJointDef___destroy___0,wp=e._emscripten_bind_b2Mat22_Solve_1=i._emscripten_bind_b2Mat22_Solve_1,xp=e._emscripten_bind_b2Color_get_g_0=i._emscripten_bind_b2Color_get_g_0,yp=e._emscripten_bind_VoidPtr___destroy___0=i._emscripten_bind_VoidPtr___destroy___0,zp=e._emscripten_bind_b2RopeJoint_GetNext_0=i._emscripten_bind_b2RopeJoint_GetNext_0,Ap=e._emscripten_bind_b2Filter_b2Filter_0=i._emscripten_bind_b2Filter_b2Filter_0,Bp=e._emscripten_bind_b2PolygonShape_GetChildCount_0=
i._emscripten_bind_b2PolygonShape_GetChildCount_0,Cp=e._emscripten_bind_b2GearJointDef_get_ratio_0=i._emscripten_bind_b2GearJointDef_get_ratio_0,Dp=e._emscripten_bind_b2Mat33_Solve33_1=i._emscripten_bind_b2Mat33_Solve33_1,Ep=e._emscripten_bind_b2PulleyJoint_GetReactionForce_1=i._emscripten_bind_b2PulleyJoint_GetReactionForce_1,Fp=e._emscripten_bind_b2WheelJoint_GetCollideConnected_0=i._emscripten_bind_b2WheelJoint_GetCollideConnected_0,Gp=e._emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1=i._emscripten_bind_b2WheelJoint_SetSpringDampingRatio_1,
Hp=e._emscripten_bind_b2RevoluteJointDef___destroy___0=i._emscripten_bind_b2RevoluteJointDef___destroy___0,Ip=e._emscripten_bind_b2MouseJointDef_get_maxForce_0=i._emscripten_bind_b2MouseJointDef_get_maxForce_0,Jp=e._emscripten_bind_b2RevoluteJoint_EnableMotor_1=i._emscripten_bind_b2RevoluteJoint_EnableMotor_1,Kp=e._emscripten_bind_b2ContactFeature_get_typeB_0=i._emscripten_bind_b2ContactFeature_get_typeB_0,Lp=e._emscripten_bind_b2MotorJoint_SetLinearOffset_1=i._emscripten_bind_b2MotorJoint_SetLinearOffset_1,
Mp=e._emscripten_bind_b2MotorJoint_GetReactionForce_1=i._emscripten_bind_b2MotorJoint_GetReactionForce_1,Np=e._emscripten_bind_b2Rot_GetAngle_0=i._emscripten_bind_b2Rot_GetAngle_0,Op=e._emscripten_bind_b2World_SetAllowSleeping_1=i._emscripten_bind_b2World_SetAllowSleeping_1,Pp=e._emscripten_bind_b2MotorJoint_SetAngularOffset_1=i._emscripten_bind_b2MotorJoint_SetAngularOffset_1,Qp=e._emscripten_bind_b2MotorJoint_GetLinearOffset_0=i._emscripten_bind_b2MotorJoint_GetLinearOffset_0,Rp=e._emscripten_bind_b2FrictionJoint_GetCollideConnected_0=
i._emscripten_bind_b2FrictionJoint_GetCollideConnected_0,Sp=e._emscripten_bind_b2WheelJointDef_set_motorSpeed_1=i._emscripten_bind_b2WheelJointDef_set_motorSpeed_1,Tp=e._emscripten_bind_b2MotorJoint_GetAnchorA_0=i._emscripten_bind_b2MotorJoint_GetAnchorA_0,Up=e._emscripten_bind_b2Fixture_GetDensity_0=i._emscripten_bind_b2Fixture_GetDensity_0,Vp=e._emscripten_bind_b2PolygonShape_get_m_type_0=i._emscripten_bind_b2PolygonShape_get_m_type_0,Wp=e._emscripten_bind_b2Vec2_Set_2=i._emscripten_bind_b2Vec2_Set_2,
Xp=e._emscripten_bind_b2WeldJointDef_get_type_0=i._emscripten_bind_b2WeldJointDef_get_type_0,Yp=e._emscripten_bind_b2MouseJointDef_b2MouseJointDef_0=i._emscripten_bind_b2MouseJointDef_b2MouseJointDef_0,Zp=e._emscripten_bind_b2Rot_get_s_0=i._emscripten_bind_b2Rot_get_s_0,$p=e._emscripten_bind_b2FrictionJoint_SetMaxTorque_1=i._emscripten_bind_b2FrictionJoint_SetMaxTorque_1,aq=e._emscripten_bind_b2MouseJointDef_get_frequencyHz_0=i._emscripten_bind_b2MouseJointDef_get_frequencyHz_0,bq=e._emscripten_bind_b2FrictionJoint_SetUserData_1=
i._emscripten_bind_b2FrictionJoint_SetUserData_1,cq=e._emscripten_bind_b2FixtureDef_set_userData_1=i._emscripten_bind_b2FixtureDef_set_userData_1,dq=e._emscripten_bind_b2JointDef_get_userData_0=i._emscripten_bind_b2JointDef_get_userData_0,eq=e._emscripten_bind_b2DistanceJointDef_get_collideConnected_0=i._emscripten_bind_b2DistanceJointDef_get_collideConnected_0,fq=e._emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1=i._emscripten_bind_b2RevoluteJointDef_set_referenceAngle_1,gq=e._emscripten_bind_b2ContactFeature___destroy___0=
i._emscripten_bind_b2ContactFeature___destroy___0,hq=e._emscripten_bind_b2DistanceJointDef_set_bodyB_1=i._emscripten_bind_b2DistanceJointDef_set_bodyB_1,iq=e._emscripten_bind_JSQueryCallback_JSQueryCallback_0=i._emscripten_bind_JSQueryCallback_JSQueryCallback_0,jq=e._emscripten_bind_b2ChainShape_GetChildCount_0=i._emscripten_bind_b2ChainShape_GetChildCount_0,kq=e._emscripten_bind_b2MassData_b2MassData_0=i._emscripten_bind_b2MassData_b2MassData_0,lq=e._emscripten_bind_b2Vec3_set_y_1=i._emscripten_bind_b2Vec3_set_y_1,
mq=e._emscripten_bind_b2AABB_Combine_1=i._emscripten_bind_b2AABB_Combine_1,nq=e._emscripten_bind_b2AABB_Combine_2=i._emscripten_bind_b2AABB_Combine_2,oq=e._emscripten_bind_b2PrismaticJoint_GetBodyA_0=i._emscripten_bind_b2PrismaticJoint_GetBodyA_0,pq=e._emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0=i._emscripten_bind_b2PrismaticJoint_GetMaxMotorForce_0,qq=e._emscripten_bind_b2AABB___destroy___0=i._emscripten_bind_b2AABB___destroy___0,rq=e._emscripten_bind_b2Body_IsSleepingAllowed_0=i._emscripten_bind_b2Body_IsSleepingAllowed_0,
sq=e._emscripten_bind_b2MouseJointDef_set_maxForce_1=i._emscripten_bind_b2MouseJointDef_set_maxForce_1,tq=e._emscripten_bind_b2MotorJoint_GetCorrectionFactor_0=i._emscripten_bind_b2MotorJoint_GetCorrectionFactor_0,uq=e._emscripten_bind_b2Profile_get_solve_0=i._emscripten_bind_b2Profile_get_solve_0,vq=e._emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1=i._emscripten_bind_JSDestructionListener_SayGoodbyeFixture_1,wq=e._emscripten_bind_b2PolygonShape_GetVertexCount_0=i._emscripten_bind_b2PolygonShape_GetVertexCount_0,
xq=e._emscripten_bind_b2Rot_get_c_0=i._emscripten_bind_b2Rot_get_c_0,yq=e._emscripten_bind_b2AABB_set_lowerBound_1=i._emscripten_bind_b2AABB_set_lowerBound_1,zq=e._emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0=i._emscripten_bind_b2ChainShape_get_m_hasPrevVertex_0,Aq=e._emscripten_bind_b2MouseJoint_SetMaxForce_1=i._emscripten_bind_b2MouseJoint_SetMaxForce_1,Bq=e._emscripten_bind_b2FrictionJointDef_get_bodyB_0=i._emscripten_bind_b2FrictionJointDef_get_bodyB_0,Cq=e._emscripten_bind_b2JointDef_set_userData_1=
i._emscripten_bind_b2JointDef_set_userData_1,Dq=e._emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0=i._emscripten_bind_b2ManifoldPoint_get_tangentImpulse_0,Eq=e._emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0=i._emscripten_bind_b2RevoluteJointDef_get_maxMotorTorque_0,Fq=e._emscripten_bind_b2WeldJointDef_get_dampingRatio_0=i._emscripten_bind_b2WeldJointDef_get_dampingRatio_0,Gq=e._emscripten_bind_b2MouseJoint___destroy___0=i._emscripten_bind_b2MouseJoint___destroy___0,Hq=e._emscripten_bind_b2EdgeShape_b2EdgeShape_0=
i._emscripten_bind_b2EdgeShape_b2EdgeShape_0,Iq=e._emscripten_bind_b2FrictionJoint_GetReactionForce_1=i._emscripten_bind_b2FrictionJoint_GetReactionForce_1,Jq=e._emscripten_bind_b2DistanceJointDef_set_type_1=i._emscripten_bind_b2DistanceJointDef_set_type_1,Kq=e._emscripten_bind_b2WeldJoint___destroy___0=i._emscripten_bind_b2WeldJoint___destroy___0,Lq=e._emscripten_bind_JSContactListener_PostSolve_2=i._emscripten_bind_JSContactListener_PostSolve_2,Mq=e._emscripten_bind_b2PulleyJoint_GetBodyA_0=i._emscripten_bind_b2PulleyJoint_GetBodyA_0,
Nq=e._emscripten_bind_b2RopeJointDef_get_type_0=i._emscripten_bind_b2RopeJointDef_get_type_0,Oq=e._emscripten_bind_b2CircleShape_ComputeMass_2=i._emscripten_bind_b2CircleShape_ComputeMass_2,Pq=e._emscripten_bind_b2DistanceJointDef_get_localAnchorB_0=i._emscripten_bind_b2DistanceJointDef_get_localAnchorB_0,Qq=e._emscripten_bind_b2GearJointDef___destroy___0=i._emscripten_bind_b2GearJointDef___destroy___0,Rq=e._emscripten_bind_b2RevoluteJointDef_set_bodyA_1=i._emscripten_bind_b2RevoluteJointDef_set_bodyA_1,
Sq=e._emscripten_enum_b2BodyType_b2_dynamicBody=i._emscripten_enum_b2BodyType_b2_dynamicBody,Tq=e._emscripten_bind_b2CircleShape_TestPoint_2=i._emscripten_bind_b2CircleShape_TestPoint_2,Uq=e._emscripten_bind_b2MotorJointDef_get_maxTorque_0=i._emscripten_bind_b2MotorJointDef_get_maxTorque_0,Vq=e._emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1=i._emscripten_bind_b2Body_GetLinearVelocityFromLocalPoint_1,Wq=e._emscripten_bind_b2Mat22_b2Mat22_0=i._emscripten_bind_b2Mat22_b2Mat22_0,Xq=e._emscripten_bind_b2MouseJoint_GetAnchorB_0=
i._emscripten_bind_b2MouseJoint_GetAnchorB_0,Yq=e._emscripten_enum_b2BodyType_b2_kinematicBody=i._emscripten_enum_b2BodyType_b2_kinematicBody,Zq=e._emscripten_bind_b2Manifold_get_localPoint_0=i._emscripten_bind_b2Manifold_get_localPoint_0,$q=e._emscripten_bind_b2GearJoint_GetBodyB_0=i._emscripten_bind_b2GearJoint_GetBodyB_0,ar=e._emscripten_bind_b2ChainShape_Clear_0=i._emscripten_bind_b2ChainShape_Clear_0,br=e._emscripten_bind_b2CircleShape___destroy___0=i._emscripten_bind_b2CircleShape___destroy___0,
cr=e._emscripten_bind_b2MotorJoint_GetType_0=i._emscripten_bind_b2MotorJoint_GetType_0,dr=e._emscripten_bind_b2BodyDef_get_awake_0=i._emscripten_bind_b2BodyDef_get_awake_0,er=e._emscripten_bind_b2Contact_SetRestitution_1=i._emscripten_bind_b2Contact_SetRestitution_1,fr=e._emscripten_bind_b2BodyDef_get_angularDamping_0=i._emscripten_bind_b2BodyDef_get_angularDamping_0,gr=e._emscripten_bind_b2EdgeShape_get_m_vertex3_0=i._emscripten_bind_b2EdgeShape_get_m_vertex3_0,hr=e._emscripten_bind_b2Fixture_SetUserData_1=
i._emscripten_bind_b2Fixture_SetUserData_1,ir=e._emscripten_bind_b2Transform_SetIdentity_0=i._emscripten_bind_b2Transform_SetIdentity_0,jr=e._emscripten_bind_b2GearJointDef_set_joint1_1=i._emscripten_bind_b2GearJointDef_set_joint1_1,kr=e._emscripten_bind_b2EdgeShape_set_m_vertex2_1=i._emscripten_bind_b2EdgeShape_set_m_vertex2_1,lr=e._emscripten_bind_b2ContactEdge_get_next_0=i._emscripten_bind_b2ContactEdge_get_next_0,mr=e._emscripten_bind_b2ContactFeature_set_indexB_1=i._emscripten_bind_b2ContactFeature_set_indexB_1,
nr=e._emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1=i._emscripten_bind_b2Body_GetLinearVelocityFromWorldPoint_1,or=e._emscripten_bind_b2WeldJoint_GetCollideConnected_0=i._emscripten_bind_b2WeldJoint_GetCollideConnected_0,pr=e._emscripten_bind_b2Mat22_set_ey_1=i._emscripten_bind_b2Mat22_set_ey_1,qr=e._emscripten_bind_b2WheelJointDef_set_frequencyHz_1=i._emscripten_bind_b2WheelJointDef_set_frequencyHz_1,rr=e._emscripten_bind_b2World_GetSubStepping_0=i._emscripten_bind_b2World_GetSubStepping_0,
sr=e._emscripten_bind_b2Rot_GetYAxis_0=i._emscripten_bind_b2Rot_GetYAxis_0,tr=e._emscripten_bind_b2Contact_GetChildIndexB_0=i._emscripten_bind_b2Contact_GetChildIndexB_0,ur=e._emscripten_bind_b2DistanceJoint___destroy___0=i._emscripten_bind_b2DistanceJoint___destroy___0,vr=e._emscripten_bind_b2EdgeShape_GetType_0=i._emscripten_bind_b2EdgeShape_GetType_0,wr=e._emscripten_bind_b2WheelJointDef_set_dampingRatio_1=i._emscripten_bind_b2WheelJointDef_set_dampingRatio_1,xr=e._emscripten_bind_b2ManifoldPoint___destroy___0=
i._emscripten_bind_b2ManifoldPoint___destroy___0,yr=e._emscripten_enum_b2JointType_e_prismaticJoint=i._emscripten_enum_b2JointType_e_prismaticJoint,zr=e._emscripten_bind_b2MotorJoint_GetNext_0=i._emscripten_bind_b2MotorJoint_GetNext_0,Ar=e._emscripten_bind_b2Vec2_Length_0=i._emscripten_bind_b2Vec2_Length_0,Br=e._emscripten_bind_b2Vec2_SetZero_0=i._emscripten_bind_b2Vec2_SetZero_0,Cr=e._emscripten_bind_b2RopeJoint___destroy___0=i._emscripten_bind_b2RopeJoint___destroy___0,Dr=e._emscripten_bind_b2World_DestroyJoint_1=
i._emscripten_bind_b2World_DestroyJoint_1,Er=e._emscripten_bind_b2JointDef_set_bodyB_1=i._emscripten_bind_b2JointDef_set_bodyB_1,Fr=e._emscripten_bind_b2Mat22_Set_2=i._emscripten_bind_b2Mat22_Set_2,Gr=e._emscripten_bind_b2Body_GetType_0=i._emscripten_bind_b2Body_GetType_0,Hr=e._emscripten_bind_b2WeldJoint_GetAnchorB_0=i._emscripten_bind_b2WeldJoint_GetAnchorB_0,Ir=e._emscripten_bind_b2WeldJoint_GetNext_0=i._emscripten_bind_b2WeldJoint_GetNext_0,Jr=e._emscripten_bind_b2Shape_get_m_radius_0=i._emscripten_bind_b2Shape_get_m_radius_0,
Kr=e._emscripten_bind_b2EdgeShape_ComputeAABB_3=i._emscripten_bind_b2EdgeShape_ComputeAABB_3,Lr=e._emscripten_bind_b2BodyDef_get_type_0=i._emscripten_bind_b2BodyDef_get_type_0,Mr=e._emscripten_bind_b2WheelJointDef_set_collideConnected_1=i._emscripten_bind_b2WheelJointDef_set_collideConnected_1,Nr=e._emscripten_bind_JSDestructionListener___destroy___0=i._emscripten_bind_JSDestructionListener___destroy___0,Or=e._emscripten_bind_b2MotorJointDef_get_type_0=i._emscripten_bind_b2MotorJointDef_get_type_0,
Pr=e._emscripten_bind_b2RopeJoint_GetLocalAnchorA_0=i._emscripten_bind_b2RopeJoint_GetLocalAnchorA_0,Qr=e._emscripten_bind_b2BodyDef_set_linearDamping_1=i._emscripten_bind_b2BodyDef_set_linearDamping_1,Rr=e._emscripten_bind_b2FrictionJoint_GetUserData_0=i._emscripten_bind_b2FrictionJoint_GetUserData_0,Sr=e._emscripten_bind_b2Contact_SetFriction_1=i._emscripten_bind_b2Contact_SetFriction_1,Tr=e._emscripten_bind_b2Manifold_set_localNormal_1=i._emscripten_bind_b2Manifold_set_localNormal_1,Ur=e._emscripten_bind_b2JointDef_get_bodyA_0=
i._emscripten_bind_b2JointDef_get_bodyA_0,Vr=e._emscripten_bind_b2Body_GetLinearDamping_0=i._emscripten_bind_b2Body_GetLinearDamping_0,Wr=e._emscripten_bind_b2WeldJointDef_set_frequencyHz_1=i._emscripten_bind_b2WeldJointDef_set_frequencyHz_1,Xr=e._emscripten_bind_b2Body_ResetMassData_0=i._emscripten_bind_b2Body_ResetMassData_0,Yr=e._emscripten_bind_b2PrismaticJointDef_set_enableMotor_1=i._emscripten_bind_b2PrismaticJointDef_set_enableMotor_1,Zr=e._emscripten_enum_b2JointType_e_wheelJoint=i._emscripten_enum_b2JointType_e_wheelJoint,
$r=e._emscripten_bind_b2Vec2_Skew_0=i._emscripten_bind_b2Vec2_Skew_0,as=e._emscripten_bind_b2MouseJoint_GetDampingRatio_0=i._emscripten_bind_b2MouseJoint_GetDampingRatio_0,bs=e._emscripten_bind_b2RevoluteJoint_GetAnchorA_0=i._emscripten_bind_b2RevoluteJoint_GetAnchorA_0,cs=e._emscripten_bind_b2ChainShape_set_m_prevVertex_1=i._emscripten_bind_b2ChainShape_set_m_prevVertex_1,ds=e._emscripten_bind_b2WheelJoint_GetAnchorA_0=i._emscripten_bind_b2WheelJoint_GetAnchorA_0,es=e._emscripten_bind_b2MotorJoint_GetMaxTorque_0=
i._emscripten_bind_b2MotorJoint_GetMaxTorque_0,fs=e._emscripten_bind_b2FrictionJoint_GetNext_0=i._emscripten_bind_b2FrictionJoint_GetNext_0,gs=e._emscripten_bind_b2PrismaticJointDef_set_userData_1=i._emscripten_bind_b2PrismaticJointDef_set_userData_1,hs=e._emscripten_bind_b2FrictionJointDef_set_type_1=i._emscripten_bind_b2FrictionJointDef_set_type_1,is=e._emscripten_bind_b2PrismaticJoint_GetUserData_0=i._emscripten_bind_b2PrismaticJoint_GetUserData_0,js=e._emscripten_bind_b2FrictionJointDef_get_collideConnected_0=
i._emscripten_bind_b2FrictionJointDef_get_collideConnected_0,ks=e._emscripten_bind_b2Body_GetInertia_0=i._emscripten_bind_b2Body_GetInertia_0,ls=e._emscripten_bind_b2WeldJointDef_set_referenceAngle_1=i._emscripten_bind_b2WeldJointDef_set_referenceAngle_1,ms=e._emscripten_bind_b2FrictionJoint_GetAnchorA_0=i._emscripten_bind_b2FrictionJoint_GetAnchorA_0,ns=e._emscripten_bind_b2RopeJoint_GetType_0=i._emscripten_bind_b2RopeJoint_GetType_0,os=e._emscripten_bind_b2MassData_get_I_0=i._emscripten_bind_b2MassData_get_I_0,
ps=e._emscripten_bind_b2WheelJointDef_get_motorSpeed_0=i._emscripten_bind_b2WheelJointDef_get_motorSpeed_0,qs=e._emscripten_bind_b2WeldJointDef_get_referenceAngle_0=i._emscripten_bind_b2WeldJointDef_get_referenceAngle_0,rs=e._emscripten_enum_b2JointType_e_ropeJoint=i._emscripten_enum_b2JointType_e_ropeJoint,ss=e._emscripten_bind_b2Filter_set_maskBits_1=i._emscripten_bind_b2Filter_set_maskBits_1,ts=e._emscripten_bind_b2EdgeShape_set_m_radius_1=i._emscripten_bind_b2EdgeShape_set_m_radius_1,us=e._emscripten_bind_b2MotorJointDef_set_collideConnected_1=
i._emscripten_bind_b2MotorJointDef_set_collideConnected_1,vs=e._emscripten_bind_b2Mat22_b2Mat22_2=i._emscripten_bind_b2Mat22_b2Mat22_2,xs=e._emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1=i._emscripten_bind_b2WheelJointDef_set_maxMotorTorque_1,ys=e._emscripten_bind_b2FrictionJointDef_set_bodyB_1=i._emscripten_bind_b2FrictionJointDef_set_bodyB_1,zs=e._emscripten_bind_b2Mat22_b2Mat22_4=i._emscripten_bind_b2Mat22_b2Mat22_4,As=e._emscripten_bind_b2ChainShape_set_m_hasNextVertex_1=i._emscripten_bind_b2ChainShape_set_m_hasNextVertex_1,
Bs=e._emscripten_bind_b2Mat22_GetInverse_0=i._emscripten_bind_b2Mat22_GetInverse_0,Cs=e._emscripten_bind_b2PrismaticJoint_EnableMotor_1=i._emscripten_bind_b2PrismaticJoint_EnableMotor_1,Ds=e._emscripten_bind_b2CircleShape_get_m_type_0=i._emscripten_bind_b2CircleShape_get_m_type_0,Es=e._emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0=i._emscripten_bind_b2DistanceJoint_GetLocalAnchorA_0,Fs=e._emscripten_bind_b2ContactEdge_b2ContactEdge_0=i._emscripten_bind_b2ContactEdge_b2ContactEdge_0,Gs=e._emscripten_bind_b2BodyDef___destroy___0=
i._emscripten_bind_b2BodyDef___destroy___0,Hs=e._emscripten_bind_b2FrictionJointDef_set_maxTorque_1=i._emscripten_bind_b2FrictionJointDef_set_maxTorque_1,Is=e._emscripten_bind_b2PolygonShape_GetVertex_1=i._emscripten_bind_b2PolygonShape_GetVertex_1,Js=e._emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1=i._emscripten_bind_b2PulleyJointDef_set_groundAnchorB_1,Ks=e._emscripten_bind_b2RevoluteJointDef_get_collideConnected_0=i._emscripten_bind_b2RevoluteJointDef_get_collideConnected_0,Ls=e._emscripten_bind_b2DistanceJointDef_set_bodyA_1=
i._emscripten_bind_b2DistanceJointDef_set_bodyA_1,Ms=e._emscripten_bind_b2RevoluteJoint_SetLimits_2=i._emscripten_bind_b2RevoluteJoint_SetLimits_2,Ns=e._emscripten_bind_b2WeldJointDef_set_type_1=i._emscripten_bind_b2WeldJointDef_set_type_1,Os=e._emscripten_bind_b2MotorJointDef___destroy___0=i._emscripten_bind_b2MotorJointDef___destroy___0,Ps=e._emscripten_bind_b2FixtureDef_set_density_1=i._emscripten_bind_b2FixtureDef_set_density_1,Qs=e._emscripten_bind_b2Shape_set_m_type_1=i._emscripten_bind_b2Shape_set_m_type_1,
Rs=e._emscripten_bind_b2WheelJoint_GetJointTranslation_0=i._emscripten_bind_b2WheelJoint_GetJointTranslation_0,Ss=e._emscripten_bind_b2WheelJoint_GetMotorTorque_1=i._emscripten_bind_b2WheelJoint_GetMotorTorque_1,Ts=e._emscripten_bind_b2RopeJoint_SetUserData_1=i._emscripten_bind_b2RopeJoint_SetUserData_1,Us=e._emscripten_bind_b2RopeJointDef___destroy___0=i._emscripten_bind_b2RopeJointDef___destroy___0,Vs=e._emscripten_bind_b2WheelJoint_IsActive_0=i._emscripten_bind_b2WheelJoint_IsActive_0,Ws=e._emscripten_bind_b2PrismaticJointDef_get_enableMotor_0=
i._emscripten_bind_b2PrismaticJointDef_get_enableMotor_0,Xs=e._emscripten_bind_b2MotorJointDef_set_bodyB_1=i._emscripten_bind_b2MotorJointDef_set_bodyB_1,Ys=e._emscripten_bind_b2Transform_b2Transform_2=i._emscripten_bind_b2Transform_b2Transform_2,Zs=e._emscripten_bind_b2WeldJoint_GetReactionForce_1=i._emscripten_bind_b2WeldJoint_GetReactionForce_1,$s=e._emscripten_bind_b2ChainShape_RayCast_4=i._emscripten_bind_b2ChainShape_RayCast_4,at=e._emscripten_bind_b2PrismaticJoint_GetUpperLimit_0=i._emscripten_bind_b2PrismaticJoint_GetUpperLimit_0,
bt=e._emscripten_bind_b2ContactID_get_cf_0=i._emscripten_bind_b2ContactID_get_cf_0,ct=e._emscripten_bind_b2MouseJointDef_set_frequencyHz_1=i._emscripten_bind_b2MouseJointDef_set_frequencyHz_1,dt=e._emscripten_bind_b2ChainShape_get_m_radius_0=i._emscripten_bind_b2ChainShape_get_m_radius_0,et=e._emscripten_bind_b2Body_GetLinearVelocity_0=i._emscripten_bind_b2Body_GetLinearVelocity_0,ft=e._emscripten_bind_b2ChainShape_set_m_radius_1=i._emscripten_bind_b2ChainShape_set_m_radius_1,gt=e._emscripten_bind_b2DistanceJoint_GetReactionTorque_1=
i._emscripten_bind_b2DistanceJoint_GetReactionTorque_1,ht=e._emscripten_bind_b2World_Dump_0=i._emscripten_bind_b2World_Dump_0,it=e._emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0=i._emscripten_bind_b2RevoluteJoint_GetLocalAnchorB_0,jt=e._emscripten_bind_JSContactFilter_JSContactFilter_0=i._emscripten_bind_JSContactFilter_JSContactFilter_0,kt=e._emscripten_bind_b2Profile_set_solve_1=i._emscripten_bind_b2Profile_set_solve_1,lt=e._emscripten_bind_b2WeldJoint_GetDampingRatio_0=i._emscripten_bind_b2WeldJoint_GetDampingRatio_0,
mt=e._emscripten_bind_b2Color_get_b_0=i._emscripten_bind_b2Color_get_b_0,nt=e._emscripten_bind_b2MouseJointDef_get_userData_0=i._emscripten_bind_b2MouseJointDef_get_userData_0,ot=e._emscripten_bind_b2CircleShape_ComputeAABB_3=i._emscripten_bind_b2CircleShape_ComputeAABB_3,pt=e._emscripten_bind_b2RopeJoint_GetReactionForce_1=i._emscripten_bind_b2RopeJoint_GetReactionForce_1,qt=e._emscripten_bind_b2PrismaticJointDef_get_enableLimit_0=i._emscripten_bind_b2PrismaticJointDef_get_enableLimit_0,rt=e._emscripten_bind_b2ManifoldPoint_set_localPoint_1=
i._emscripten_bind_b2ManifoldPoint_set_localPoint_1,st=e._emscripten_bind_b2Fixture_GetFilterData_0=i._emscripten_bind_b2Fixture_GetFilterData_0,tt=e._emscripten_bind_b2World_GetBodyList_0=i._emscripten_bind_b2World_GetBodyList_0,ut=e._emscripten_bind_b2Shape_ComputeMass_2=i._emscripten_bind_b2Shape_ComputeMass_2,vt=e._emscripten_bind_b2Joint_GetNext_0=i._emscripten_bind_b2Joint_GetNext_0,wt=e._emscripten_bind_b2PrismaticJointDef_get_collideConnected_0=i._emscripten_bind_b2PrismaticJointDef_get_collideConnected_0,
xt=e._emscripten_bind_b2World_RayCast_3=i._emscripten_bind_b2World_RayCast_3,yt=e._emscripten_bind_b2MassData_set_I_1=i._emscripten_bind_b2MassData_set_I_1,zt=e._emscripten_bind_b2MassData___destroy___0=i._emscripten_bind_b2MassData___destroy___0,At=e._emscripten_bind_b2Profile_get_collide_0=i._emscripten_bind_b2Profile_get_collide_0,Bt=e._emscripten_bind_b2Color_b2Color_3=i._emscripten_bind_b2Color_b2Color_3,Ct=e._emscripten_bind_b2Color_b2Color_0=i._emscripten_bind_b2Color_b2Color_0,Dt=e._emscripten_bind_b2MouseJoint_GetFrequency_0=
i._emscripten_bind_b2MouseJoint_GetFrequency_0,Et=e._emscripten_bind_b2WeldJointDef_Initialize_3=i._emscripten_bind_b2WeldJointDef_Initialize_3,Ft=e._emscripten_bind_b2Shape_GetChildCount_0=i._emscripten_bind_b2Shape_GetChildCount_0,Gt=e._emscripten_enum_b2JointType_e_gearJoint=i._emscripten_enum_b2JointType_e_gearJoint,Ht=e._emscripten_bind_b2FixtureDef_get_friction_0=i._emscripten_bind_b2FixtureDef_get_friction_0,It=e._emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1=i._emscripten_bind_b2PrismaticJointDef_set_localAnchorA_1,
Jt=e._emscripten_bind_b2Contact_GetManifold_0=i._emscripten_bind_b2Contact_GetManifold_0,Kt=e._emscripten_bind_b2MouseJoint_GetTarget_0=i._emscripten_bind_b2MouseJoint_GetTarget_0,Lt=e._emscripten_bind_b2WeldJointDef_get_localAnchorA_0=i._emscripten_bind_b2WeldJointDef_get_localAnchorA_0,Mt=e._emscripten_bind_b2MouseJoint_SetUserData_1=i._emscripten_bind_b2MouseJoint_SetUserData_1,Nt=e._emscripten_bind_b2JointEdge_get_other_0=i._emscripten_bind_b2JointEdge_get_other_0,Ot=e._emscripten_bind_b2ChainShape_GetChildEdge_2=
i._emscripten_bind_b2ChainShape_GetChildEdge_2,Pt=e._emscripten_bind_b2GearJointDef_set_collideConnected_1=i._emscripten_bind_b2GearJointDef_set_collideConnected_1,Qt=e._emscripten_bind_b2MotorJointDef_get_angularOffset_0=i._emscripten_bind_b2MotorJointDef_get_angularOffset_0,Rt=e._emscripten_bind_b2WheelJoint_SetUserData_1=i._emscripten_bind_b2WheelJoint_SetUserData_1,St=e._emscripten_bind_b2Body_ApplyForce_3=i._emscripten_bind_b2Body_ApplyForce_3,Tt=e._emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1=
i._emscripten_bind_b2PrismaticJoint_SetMotorSpeed_1,Ut=e._emscripten_bind_b2DistanceJoint_GetCollideConnected_0=i._emscripten_bind_b2DistanceJoint_GetCollideConnected_0,Vt=e._emscripten_bind_b2MouseJoint_GetMaxForce_0=i._emscripten_bind_b2MouseJoint_GetMaxForce_0,Wt=e._emscripten_bind_b2World_SetGravity_1=i._emscripten_bind_b2World_SetGravity_1,Xt=e._emscripten_bind_b2Mat22_SetZero_0=i._emscripten_bind_b2Mat22_SetZero_0,Yt=e._emscripten_bind_b2Contact_GetChildIndexA_0=i._emscripten_bind_b2Contact_GetChildIndexA_0,
Zt=e._emscripten_bind_b2Fixture_SetRestitution_1=i._emscripten_bind_b2Fixture_SetRestitution_1,$t=e._emscripten_bind_b2Body_GetTransform_0=i._emscripten_bind_b2Body_GetTransform_0,au=e._emscripten_bind_b2ContactEdge___destroy___0=i._emscripten_bind_b2ContactEdge___destroy___0,bu=e._emscripten_bind_b2Mat33_set_ex_1=i._emscripten_bind_b2Mat33_set_ex_1,cu=e._emscripten_bind_b2AABB_GetExtents_0=i._emscripten_bind_b2AABB_GetExtents_0,du=e._emscripten_bind_b2RevoluteJointDef_get_bodyA_0=i._emscripten_bind_b2RevoluteJointDef_get_bodyA_0,
eu=e._emscripten_bind_b2PrismaticJoint_GetBodyB_0=i._emscripten_bind_b2PrismaticJoint_GetBodyB_0,fu=e._emscripten_bind_b2WheelJointDef_set_bodyA_1=i._emscripten_bind_b2WheelJointDef_set_bodyA_1,gu=e._emscripten_bind_b2DistanceJointDef_set_collideConnected_1=i._emscripten_bind_b2DistanceJointDef_set_collideConnected_1,hu=e._emscripten_bind_b2BodyDef_get_angle_0=i._emscripten_bind_b2BodyDef_get_angle_0,iu=e._emscripten_bind_b2PulleyJoint_GetReactionTorque_1=i._emscripten_bind_b2PulleyJoint_GetReactionTorque_1,
ju=e._emscripten_bind_b2FixtureDef_get_shape_0=i._emscripten_bind_b2FixtureDef_get_shape_0,ku=e._emscripten_bind_b2WeldJointDef_get_userData_0=i._emscripten_bind_b2WeldJointDef_get_userData_0,lu=e._emscripten_bind_b2FrictionJoint_SetMaxForce_1=i._emscripten_bind_b2FrictionJoint_SetMaxForce_1,mu=e._emscripten_bind_b2Mat33_b2Mat33_3=i._emscripten_bind_b2Mat33_b2Mat33_3,nu=e._emscripten_bind_b2Vec3_get_y_0=i._emscripten_bind_b2Vec3_get_y_0,ou=e._emscripten_bind_b2JointDef_get_type_0=i._emscripten_bind_b2JointDef_get_type_0,
pu=e._emscripten_bind_JSQueryCallback_ReportFixture_1=i._emscripten_bind_JSQueryCallback_ReportFixture_1,qu=e._emscripten_bind_b2Fixture_TestPoint_1=i._emscripten_bind_b2Fixture_TestPoint_1,ru=e._emscripten_bind_b2RevoluteJoint_GetCollideConnected_0=i._emscripten_bind_b2RevoluteJoint_GetCollideConnected_0,su=e._emscripten_bind_JSDraw_JSDraw_0=i._emscripten_bind_JSDraw_JSDraw_0,tu=e._emscripten_bind_b2MouseJoint_GetAnchorA_0=i._emscripten_bind_b2MouseJoint_GetAnchorA_0,uu=e._emscripten_bind_b2Transform_get_p_0=
i._emscripten_bind_b2Transform_get_p_0,vu=e._emscripten_bind_b2EdgeShape_ComputeMass_2=i._emscripten_bind_b2EdgeShape_ComputeMass_2,wu=e._emscripten_bind_b2World_GetProfile_0=i._emscripten_bind_b2World_GetProfile_0,xu=e._emscripten_bind_b2DistanceJointDef___destroy___0=i._emscripten_bind_b2DistanceJointDef___destroy___0,yu=e._emscripten_bind_b2RopeJointDef_set_bodyA_1=i._emscripten_bind_b2RopeJointDef_set_bodyA_1,zu=e._emscripten_bind_b2JointDef_set_type_1=i._emscripten_bind_b2JointDef_set_type_1,
Au=e._emscripten_bind_b2Draw_AppendFlags_1=i._emscripten_bind_b2Draw_AppendFlags_1,Bu=e._emscripten_bind_b2MotorJointDef_get_userData_0=i._emscripten_bind_b2MotorJointDef_get_userData_0,Cu=e._emscripten_bind_b2World_GetContactList_0=i._emscripten_bind_b2World_GetContactList_0,Du=e._emscripten_bind_b2Mat33_set_ez_1=i._emscripten_bind_b2Mat33_set_ez_1,Eu=e._emscripten_bind_b2JointEdge_b2JointEdge_0=i._emscripten_bind_b2JointEdge_b2JointEdge_0,Fu=e._emscripten_bind_b2FrictionJointDef_get_bodyA_0=i._emscripten_bind_b2FrictionJointDef_get_bodyA_0,
Gu=e._emscripten_bind_b2WheelJointDef_get_type_0=i._emscripten_bind_b2WheelJointDef_get_type_0,Hu=e._emscripten_bind_b2RevoluteJoint_GetReactionForce_1=i._emscripten_bind_b2RevoluteJoint_GetReactionForce_1,Iu=e._emscripten_bind_b2PulleyJointDef_set_collideConnected_1=i._emscripten_bind_b2PulleyJointDef_set_collideConnected_1,Ju=e._emscripten_bind_b2RopeJoint_GetCollideConnected_0=i._emscripten_bind_b2RopeJoint_GetCollideConnected_0,Ku=e._emscripten_bind_b2GearJointDef_set_joint2_1=i._emscripten_bind_b2GearJointDef_set_joint2_1,
Lu=e._emscripten_bind_b2BodyDef_set_userData_1=i._emscripten_bind_b2BodyDef_set_userData_1,Mu=e._emscripten_bind_b2GearJoint_GetAnchorB_0=i._emscripten_bind_b2GearJoint_GetAnchorB_0,Nu=e._emscripten_bind_b2RopeJoint_IsActive_0=i._emscripten_bind_b2RopeJoint_IsActive_0,Ou=e._emscripten_bind_b2Fixture_GetFriction_0=i._emscripten_bind_b2Fixture_GetFriction_0,Pu=e._emscripten_enum_b2DrawFlag_e_aabbBit=i._emscripten_enum_b2DrawFlag_e_aabbBit,Qu=e._emscripten_bind_b2RevoluteJointDef_Initialize_3=i._emscripten_bind_b2RevoluteJointDef_Initialize_3,
Ru=e._emscripten_bind_b2Body_GetAngle_0=i._emscripten_bind_b2Body_GetAngle_0,Su=e._emscripten_bind_b2EdgeShape_Set_2=i._emscripten_bind_b2EdgeShape_Set_2,Tu=e._emscripten_bind_b2Mat33_SetZero_0=i._emscripten_bind_b2Mat33_SetZero_0,Uu=e._emscripten_bind_b2MotorJointDef_set_maxTorque_1=i._emscripten_bind_b2MotorJointDef_set_maxTorque_1,Vu=e._emscripten_bind_b2PrismaticJointDef_get_localAxisA_0=i._emscripten_bind_b2PrismaticJointDef_get_localAxisA_0,Wu=e._emscripten_bind_b2Mat22_get_ey_0=i._emscripten_bind_b2Mat22_get_ey_0,
Xu=e._emscripten_bind_b2Mat22_SetIdentity_0=i._emscripten_bind_b2Mat22_SetIdentity_0,Yu=e._emscripten_bind_b2Joint_IsActive_0=i._emscripten_bind_b2Joint_IsActive_0,Zu=e._emscripten_bind_b2BodyDef_get_allowSleep_0=i._emscripten_bind_b2BodyDef_get_allowSleep_0,$u=e._emscripten_bind_b2World_GetTreeHeight_0=i._emscripten_bind_b2World_GetTreeHeight_0,av=e._emscripten_bind_b2GearJoint_GetJoint2_0=i._emscripten_bind_b2GearJoint_GetJoint2_0,bv=e._emscripten_bind_b2EdgeShape_set_m_vertex1_1=i._emscripten_bind_b2EdgeShape_set_m_vertex1_1,
cv=e._emscripten_bind_b2Body_GetWorld_0=i._emscripten_bind_b2Body_GetWorld_0,dv=e._emscripten_enum_b2LimitState_e_inactiveLimit=i._emscripten_enum_b2LimitState_e_inactiveLimit,ev=e._emscripten_bind_b2PulleyJointDef_set_lengthB_1=i._emscripten_bind_b2PulleyJointDef_set_lengthB_1,fv=e._emscripten_bind_b2Body_SetAwake_1=i._emscripten_bind_b2Body_SetAwake_1,gv=e._emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1=i._emscripten_bind_b2PrismaticJointDef_set_upperTranslation_1,hv=e._emscripten_bind_b2Vec2___destroy___0=
i._emscripten_bind_b2Vec2___destroy___0,iv=e._emscripten_bind_b2RayCastInput_set_p1_1=i._emscripten_bind_b2RayCastInput_set_p1_1,jv=e._emscripten_bind_b2Contact_ResetFriction_0=i._emscripten_bind_b2Contact_ResetFriction_0,kv=e._emscripten_bind_b2PulleyJoint_GetAnchorA_0=i._emscripten_bind_b2PulleyJoint_GetAnchorA_0,lv=e._emscripten_bind_b2BodyDef_get_linearVelocity_0=i._emscripten_bind_b2BodyDef_get_linearVelocity_0,mv=e._emscripten_bind_b2DistanceJointDef_get_bodyB_0=i._emscripten_bind_b2DistanceJointDef_get_bodyB_0,
nv=e._emscripten_bind_b2Mat22___destroy___0=i._emscripten_bind_b2Mat22___destroy___0,ov=e._emscripten_bind_b2RevoluteJoint_GetAnchorB_0=i._emscripten_bind_b2RevoluteJoint_GetAnchorB_0,pv=e._emscripten_bind_b2RevoluteJoint_GetNext_0=i._emscripten_bind_b2RevoluteJoint_GetNext_0,qv=e._emscripten_bind_b2WeldJointDef_get_bodyA_0=i._emscripten_bind_b2WeldJointDef_get_bodyA_0,rv=e._emscripten_bind_b2MotorJoint_GetAnchorB_0=i._emscripten_bind_b2MotorJoint_GetAnchorB_0,sv=e._emscripten_bind_b2Fixture_GetShape_0=
i._emscripten_bind_b2Fixture_GetShape_0,tv=e._emscripten_bind_b2PolygonShape_SetAsBox_2=i._emscripten_bind_b2PolygonShape_SetAsBox_2,uv=e._emscripten_bind_b2Vec3_op_mul_1=i._emscripten_bind_b2Vec3_op_mul_1,vv=e._emscripten_bind_b2PolygonShape_set_m_type_1=i._emscripten_bind_b2PolygonShape_set_m_type_1,wv=e._emscripten_bind_b2WheelJoint_GetType_0=i._emscripten_bind_b2WheelJoint_GetType_0,xv=e._emscripten_bind_b2MotorJoint_GetAngularOffset_0=i._emscripten_bind_b2MotorJoint_GetAngularOffset_0,yv=e._emscripten_bind_b2RevoluteJoint_IsActive_0=
i._emscripten_bind_b2RevoluteJoint_IsActive_0,zv=e._emscripten_bind_b2GearJoint_GetNext_0=i._emscripten_bind_b2GearJoint_GetNext_0,Av=e._emscripten_bind_b2MotorJointDef_get_correctionFactor_0=i._emscripten_bind_b2MotorJointDef_get_correctionFactor_0,Bv=e._emscripten_bind_b2Color_Set_3=i._emscripten_bind_b2Color_Set_3,Cv=e._emscripten_bind_b2EdgeShape_set_m_type_1=i._emscripten_bind_b2EdgeShape_set_m_type_1,Dv=e._emscripten_bind_b2WheelJoint_GetLocalAxisA_0=i._emscripten_bind_b2WheelJoint_GetLocalAxisA_0,
Ev=e._emscripten_bind_b2Body_GetNext_0=i._emscripten_bind_b2Body_GetNext_0,Fv=e._emscripten_bind_b2RopeJoint_GetBodyA_0=i._emscripten_bind_b2RopeJoint_GetBodyA_0,Gv=e._emscripten_enum_b2JointType_e_unknownJoint=i._emscripten_enum_b2JointType_e_unknownJoint,Hv=e._emscripten_bind_b2ContactFeature_set_indexA_1=i._emscripten_bind_b2ContactFeature_set_indexA_1,Iv=e._emscripten_bind_b2Profile_get_solveInit_0=i._emscripten_bind_b2Profile_get_solveInit_0,Jv=e._emscripten_bind_b2BodyDef_set_angularDamping_1=
i._emscripten_bind_b2BodyDef_set_angularDamping_1,Kv=e._emscripten_bind_b2FrictionJoint_GetAnchorB_0=i._emscripten_bind_b2FrictionJoint_GetAnchorB_0,Lv=e._emscripten_bind_b2World_QueryAABB_2=i._emscripten_bind_b2World_QueryAABB_2,Mv=e._emscripten_bind_b2BodyDef_get_userData_0=i._emscripten_bind_b2BodyDef_get_userData_0,Nv=e._emscripten_bind_b2ContactID_get_key_0=i._emscripten_bind_b2ContactID_get_key_0,Ov=e._emscripten_bind_b2Body_SetAngularVelocity_1=i._emscripten_bind_b2Body_SetAngularVelocity_1,
Pv=e._emscripten_bind_b2WheelJointDef_get_userData_0=i._emscripten_bind_b2WheelJointDef_get_userData_0,Qv=e._emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0=i._emscripten_bind_b2RevoluteJoint_IsLimitEnabled_0,Rv=e._emscripten_bind_b2DistanceJoint_GetBodyB_0=i._emscripten_bind_b2DistanceJoint_GetBodyB_0,Sv=e._emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1=i._emscripten_bind_b2RevoluteJointDef_set_maxMotorTorque_1,Tv=e._emscripten_bind_b2WeldJointDef_set_bodyB_1=i._emscripten_bind_b2WeldJointDef_set_bodyB_1,
Uv=e._emscripten_bind_b2RevoluteJoint_SetUserData_1=i._emscripten_bind_b2RevoluteJoint_SetUserData_1,Vv=e._emscripten_bind_b2DistanceJoint_SetLength_1=i._emscripten_bind_b2DistanceJoint_SetLength_1,Wv=e._emscripten_bind_b2JointEdge_get_joint_0=i._emscripten_bind_b2JointEdge_get_joint_0,Xv=e._emscripten_bind_b2Body_GetLocalCenter_0=i._emscripten_bind_b2Body_GetLocalCenter_0,Yv=e._emscripten_bind_b2FixtureDef___destroy___0=i._emscripten_bind_b2FixtureDef___destroy___0,Zv=e._emscripten_bind_b2FixtureDef_set_shape_1=
i._emscripten_bind_b2FixtureDef_set_shape_1,$v=e._emscripten_bind_b2WeldJoint_GetAnchorA_0=i._emscripten_bind_b2WeldJoint_GetAnchorA_0,aw=e._emscripten_bind_b2Profile_get_solveVelocity_0=i._emscripten_bind_b2Profile_get_solveVelocity_0,bw=e._emscripten_bind_b2WeldJointDef_get_bodyB_0=i._emscripten_bind_b2WeldJointDef_get_bodyB_0,cw=e._emscripten_bind_b2Body_SetAngularDamping_1=i._emscripten_bind_b2Body_SetAngularDamping_1,dw=e._emscripten_bind_b2PulleyJointDef_Initialize_7=i._emscripten_bind_b2PulleyJointDef_Initialize_7,
ew=e._emscripten_bind_b2GearJointDef_set_bodyB_1=i._emscripten_bind_b2GearJointDef_set_bodyB_1,fw=e._emscripten_bind_b2RopeJoint_GetReactionTorque_1=i._emscripten_bind_b2RopeJoint_GetReactionTorque_1,gw=e._emscripten_bind_b2Mat22_set_ex_1=i._emscripten_bind_b2Mat22_set_ex_1,hw=e._emscripten_bind_b2GearJoint_GetType_0=i._emscripten_bind_b2GearJoint_GetType_0,iw=e._emscripten_enum_b2DrawFlag_e_centerOfMassBit=i._emscripten_enum_b2DrawFlag_e_centerOfMassBit,jw=e._emscripten_bind_b2ChainShape_b2ChainShape_0=
i._emscripten_bind_b2ChainShape_b2ChainShape_0,kw=e._emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1=i._emscripten_bind_b2RevoluteJoint_SetMaxMotorTorque_1,lw=e._emscripten_bind_b2RopeJointDef_set_localAnchorB_1=i._emscripten_bind_b2RopeJointDef_set_localAnchorB_1,mw=e._emscripten_bind_b2FrictionJointDef_Initialize_3=i._emscripten_bind_b2FrictionJointDef_Initialize_3,nw=e._emscripten_bind_b2GearJointDef_set_userData_1=i._emscripten_bind_b2GearJointDef_set_userData_1,ow=e._emscripten_bind_b2ChainShape_CreateLoop_2=
i._emscripten_bind_b2ChainShape_CreateLoop_2,pw=e._emscripten_bind_b2EdgeShape_get_m_radius_0=i._emscripten_bind_b2EdgeShape_get_m_radius_0,qw=e._emscripten_bind_b2Contact_GetFixtureB_0=i._emscripten_bind_b2Contact_GetFixtureB_0,rw=e._emscripten_bind_b2ChainShape_ComputeMass_2=i._emscripten_bind_b2ChainShape_ComputeMass_2,sw=e._emscripten_bind_b2Vec2_set_y_1=i._emscripten_bind_b2Vec2_set_y_1,tw=e._emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0=i._emscripten_bind_b2PrismaticJoint_IsLimitEnabled_0,
uw=e._emscripten_bind_b2RopeJointDef_get_bodyB_0=i._emscripten_bind_b2RopeJointDef_get_bodyB_0,vw=e._emscripten_bind_b2BodyDef_b2BodyDef_0=i._emscripten_bind_b2BodyDef_b2BodyDef_0,ww=e._emscripten_bind_b2MassData_get_mass_0=i._emscripten_bind_b2MassData_get_mass_0,xw=e._emscripten_bind_b2WheelJoint___destroy___0=i._emscripten_bind_b2WheelJoint___destroy___0,yw=e._emscripten_bind_b2Joint_GetBodyB_0=i._emscripten_bind_b2Joint_GetBodyB_0,zw=e._emscripten_bind_b2MouseJointDef_set_collideConnected_1=i._emscripten_bind_b2MouseJointDef_set_collideConnected_1,
Aw=e._emscripten_bind_b2WheelJointDef_set_localAxisA_1=i._emscripten_bind_b2WheelJointDef_set_localAxisA_1,Bw=e._emscripten_bind_b2Joint_Dump_0=i._emscripten_bind_b2Joint_Dump_0,Cw=e._emscripten_bind_b2WheelJointDef_b2WheelJointDef_0=i._emscripten_bind_b2WheelJointDef_b2WheelJointDef_0,Dw=e._emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1=i._emscripten_bind_b2RevoluteJointDef_set_motorSpeed_1,Ew=e._emscripten_bind_b2MotorJointDef_get_bodyA_0=i._emscripten_bind_b2MotorJointDef_get_bodyA_0,Fw=e._emscripten_bind_b2WheelJointDef_get_enableMotor_0=
i._emscripten_bind_b2WheelJointDef_get_enableMotor_0,Gw=e._emscripten_bind_b2Vec2_LengthSquared_0=i._emscripten_bind_b2Vec2_LengthSquared_0,Hw=e._emscripten_bind_b2FrictionJointDef_set_bodyA_1=i._emscripten_bind_b2FrictionJointDef_set_bodyA_1,Iw=e._emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0=i._emscripten_bind_b2WheelJoint_GetSpringFrequencyHz_0,Jw=e._emscripten_bind_b2ContactFeature_get_indexB_0=i._emscripten_bind_b2ContactFeature_get_indexB_0,Kw=e._emscripten_bind_b2Body_GetJointList_0=
i._emscripten_bind_b2Body_GetJointList_0,Lw=e._emscripten_bind_b2FrictionJoint_GetBodyA_0=i._emscripten_bind_b2FrictionJoint_GetBodyA_0,Mw=e._emscripten_bind_b2WheelJointDef_set_localAnchorB_1=i._emscripten_bind_b2WheelJointDef_set_localAnchorB_1,Nw=e._emscripten_bind_b2DistanceJointDef_set_localAnchorA_1=i._emscripten_bind_b2DistanceJointDef_set_localAnchorA_1,Ow=e._emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0=i._emscripten_bind_b2PrismaticJointDef_get_maxMotorForce_0,Pw=e._emscripten_bind_b2Body_SetUserData_1=
i._emscripten_bind_b2Body_SetUserData_1,Qw=e._emscripten_bind_b2DistanceJoint_GetUserData_0=i._emscripten_bind_b2DistanceJoint_GetUserData_0,Rw=e._emscripten_bind_b2PulleyJointDef_set_bodyA_1=i._emscripten_bind_b2PulleyJointDef_set_bodyA_1,Sw=e._emscripten_bind_b2Joint_GetType_0=i._emscripten_bind_b2Joint_GetType_0,Tw=e._emscripten_bind_b2Manifold_get_pointCount_0=i._emscripten_bind_b2Manifold_get_pointCount_0,Uw=e._emscripten_bind_b2Mat33_get_ez_0=i._emscripten_bind_b2Mat33_get_ez_0,Vw=e._emscripten_bind_b2DestructionListenerWrapper___destroy___0=
i._emscripten_bind_b2DestructionListenerWrapper___destroy___0,Ww=e._emscripten_bind_b2WheelJointDef_get_bodyA_0=i._emscripten_bind_b2WheelJointDef_get_bodyA_0,Xw=e._emscripten_enum_b2LimitState_e_atUpperLimit=i._emscripten_enum_b2LimitState_e_atUpperLimit,Yw=e._emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1=i._emscripten_bind_b2PulleyJointDef_set_groundAnchorA_1,Zw=e._emscripten_bind_b2MouseJointDef_get_type_0=i._emscripten_bind_b2MouseJointDef_get_type_0,$w=e._emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1=
i._emscripten_bind_b2PrismaticJoint_SetMaxMotorForce_1,ax=e._emscripten_bind_b2PulleyJointDef_get_collideConnected_0=i._emscripten_bind_b2PulleyJointDef_get_collideConnected_0,bx=e._emscripten_bind_b2RopeJoint_SetMaxLength_1=i._emscripten_bind_b2RopeJoint_SetMaxLength_1,cx=e._emscripten_bind_b2Joint_SetUserData_1=i._emscripten_bind_b2Joint_SetUserData_1,dx=e._emscripten_bind_b2PolygonShape_set_m_radius_1=i._emscripten_bind_b2PolygonShape_set_m_radius_1,ex=e._emscripten_bind_b2Vec2_get_x_0=i._emscripten_bind_b2Vec2_get_x_0,
fx=e._emscripten_bind_JSContactListener_JSContactListener_0=i._emscripten_bind_JSContactListener_JSContactListener_0;e.runPostSets=i.runPostSets;e.dynCall_iiii=i.dynCall_iiii;e.dynCall_viiiii=i.dynCall_viiiii;e.dynCall_did=i.dynCall_did;e.dynCall_vi=i.dynCall_vi;e.dynCall_diiiid=i.dynCall_diiiid;e.dynCall_vii=i.dynCall_vii;e.dynCall_viidii=i.dynCall_viidii;e.dynCall_ii=i.dynCall_ii;e.dynCall_viidi=i.dynCall_viidi;e.dynCall_viii=i.dynCall_viii;e.dynCall_v=i.dynCall_v;e.dynCall_viid=i.dynCall_viid;
e.dynCall_viiiiii=i.dynCall_viiiiii;e.dynCall_iii=i.dynCall_iii;e.dynCall_iiiiii=i.dynCall_iiiiii;e.dynCall_viiii=i.dynCall_viiii;h.u=i.stackAlloc;h.A=i.stackSave;h.J=i.stackRestore;h.ga=i.setTempRet0;h.aa=i.getTempRet0;var jc=ba;
if(Nb)if("function"===typeof e.locateFile?Nb=e.locateFile(Nb):e.memoryInitializerPrefixURL&&(Nb=e.memoryInitializerPrefixURL+Nb),fa||ja){var gx=e.readBinary(Nb);bb.set(gx,jb)}else Lb(),Browser.oa(Nb,function(a){bb.set(a,jb);Mb()},function(){c("could not load memory initializer "+Nb)});function na(a){this.name="ExitStatus";this.message="Program terminated with exit("+a+")";this.status=a}na.prototype=Error();var hx,ix=ba,Kb=function jx(){!e.calledRun&&kx&&lx();e.calledRun||(Kb=jx)};
e.callMain=e.pa=function(a){function b(){for(var a=0;3>a;a++)g.push(0)}oa(0==Ib,"cannot call main when async dependencies remain! (listen on __ATMAIN__)");oa(0==rb.length,"cannot call main when preRun functions remain to be called");a=a||[];wb||(wb=aa,qb(sb));var f=a.length+1,g=[$a(Ab(e.thisProgram),"i8",0)];b();for(var k=0;k<f-1;k+=1)g.push($a(Ab(a[k]),"i8",0)),b();g.push(0);g=$a(g,"i32",0);hx=ra;try{var n=e._main(f,g,0);mx(n)}catch(m){m instanceof na||("SimulateInfiniteLoop"==m?e.noExitRuntime=
aa:(m&&("object"===typeof m&&m.stack)&&e.n("exception thrown: "+[m,m.stack]),c(m)))}finally{}};
function lx(a){function b(){if(!e.calledRun&&(e.calledRun=aa,!za)){wb||(wb=aa,qb(sb));qb(tb);ga&&ix!==ba&&e.n("pre-main prep time: "+(Date.now()-ix)+" ms");e._main&&kx&&e.callMain(a);if(e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;)zb(e.postRun.shift());qb(vb)}}a=a||e.arguments;ix===ba&&(ix=Date.now());if(!(0<Ib)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)yb(e.preRun.shift());qb(rb);!(0<Ib)&&!e.calledRun&&(e.setStatus?
(e.setStatus("Running..."),setTimeout(function(){setTimeout(function(){e.setStatus("")},1);b()},1)):b())}}e.run=e.Aa=lx;function mx(a){e.noExitRuntime||(za=aa,ra=hx,qb(ub),fa?(process.stdout.once("drain",function(){process.exit(a)}),console.log(" "),setTimeout(function(){process.exit(a)},500)):ja&&"function"===typeof quit&&quit(a),c(new na(a)))}e.exit=e.ra=mx;
function ua(a){a&&(e.print(a),e.n(a));za=aa;c("abort() at "+fb()+"\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.")}e.abort=e.abort=ua;if(e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();var kx=aa;e.noInitialRun&&(kx=ca);e.noExitRuntime=aa;lx();function j(){}j.prototype=Object.create(j.prototype);j.prototype.g=j;j.k={};e.WrapperObject=j;function p(a){return(a||j).k}e.getCache=p;
function q(a,b){var f=p(b),g=f[a];if(g)return g;g=Object.create((b||j).prototype);g.e=a;return f[a]=g}e.wrapPointer=q;function nx(a,b){return q(a.e,b)}e.castObject=nx;e.NULL=q(0);function ox(a){a.__destroy__||c("Error: Cannot destroy object. (Did you create it yourself?)");a.__destroy__();delete p(a.g)[a.e]}e.destroy=ox;function px(a,b){return a.e===b.e}e.compare=px;function qx(a){return a.e}e.getPointer=qx;function rx(a){return a.g}e.getClass=rx;
function r(a){return"string"==typeof a?$a(Ab(a),"i8",Wa):a}function sx(){this.e=yf();p(sx)[this.e]=this}sx.prototype=Object.create(tx.prototype);sx.prototype.g=sx;sx.k={};e.JSDestructionListener=sx;sx.prototype.SayGoodbyeJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ym(b,a)};sx.prototype.SayGoodbyeFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vq(b,a)};sx.prototype.__destroy__=function(){Nr(this.e)};
function ux(){c("cannot construct a b2ContactImpulse, no constructor in IDL")}ux.prototype=Object.create(j.prototype);ux.prototype.g=ux;ux.k={};e.b2ContactImpulse=ux;ux.prototype.get_count=function(){return Xn(this.e)};ux.prototype.set_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kh(b,a)};ux.prototype.__destroy__=function(){tf(this.e)};function s(){c("cannot construct a b2DistanceJoint, no constructor in IDL")}s.prototype=Object.create(t.prototype);s.prototype.g=s;s.k={};
e.b2DistanceJoint=s;s.prototype.GetLocalAnchorA=function(){return q(Es(this.e),u)};s.prototype.GetLocalAnchorB=function(){return q(Ki(this.e),u)};s.prototype.SetLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vv(b,a)};s.prototype.GetLength=function(){return Jl(this.e)};s.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gh(b,a)};s.prototype.GetFrequency=function(){return rm(this.e)};
s.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hf(b,a)};s.prototype.GetDampingRatio=function(){return Xh(this.e)};s.prototype.GetType=function(){return kl(this.e)};s.prototype.GetBodyA=function(){return q(ej(this.e),v)};s.prototype.GetBodyB=function(){return q(Rv(this.e),v)};s.prototype.GetAnchorA=function(){return q(ud(this.e),u)};s.prototype.GetAnchorB=function(){return q(th(this.e),u)};
s.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Bn(b,a),u)};s.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return gt(b,a)};s.prototype.GetNext=function(){return q(Re(this.e),t)};s.prototype.GetUserData=function(){return Qw(this.e)};s.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rn(b,a)};s.prototype.IsActive=function(){return oh(this.e)};s.prototype.GetCollideConnected=function(){return Ut(this.e)};
s.prototype.__destroy__=function(){ur(this.e)};function vx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Yg():b===d?_emscripten_bind_b2Mat33_b2Mat33_1(a):f===d?_emscripten_bind_b2Mat33_b2Mat33_2(a,b):mu(a,b,f);p(vx)[this.e]=this}vx.prototype=Object.create(j.prototype);vx.prototype.g=vx;vx.k={};e.b2Mat33=vx;vx.prototype.SetZero=function(){Tu(this.e)};
vx.prototype.Solve33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Dp(b,a),wx)};vx.prototype.Solve22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Ag(b,a),u)};vx.prototype.GetInverse22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hn(b,a)};vx.prototype.GetSymInverse33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vl(b,a)};vx.prototype.get_ex=function(){return q(Ch(this.e),wx)};
vx.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bu(b,a)};vx.prototype.get_ey=function(){return q(md(this.e),wx)};vx.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mi(b,a)};vx.prototype.get_ez=function(){return q(Uw(this.e),wx)};vx.prototype.set_ez=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Du(b,a)};vx.prototype.__destroy__=function(){Id(this.e)};function w(){c("cannot construct a b2Fixture, no constructor in IDL")}
w.prototype=Object.create(j.prototype);w.prototype.g=w;w.k={};e.b2Fixture=w;w.prototype.GetType=function(){return ml(this.e)};w.prototype.GetShape=function(){return q(sv(this.e),xx)};w.prototype.SetSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bj(b,a)};w.prototype.IsSensor=function(){return Yo(this.e)};w.prototype.SetFilterData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gi(b,a)};w.prototype.GetFilterData=function(){return q(st(this.e),yx)};
w.prototype.Refilter=function(){Vo(this.e)};w.prototype.GetBody=function(){return q(Jh(this.e),v)};w.prototype.GetNext=function(){return q(bk(this.e),w)};w.prototype.GetUserData=function(){return gm(this.e)};w.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hr(b,a)};w.prototype.TestPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return qu(b,a)};
w.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);return el(g,a,b,f)};w.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ij(b,a)};w.prototype.SetDensity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oh(b,a)};w.prototype.GetDensity=function(){return Up(this.e)};w.prototype.GetFriction=function(){return Ou(this.e)};
w.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sc(b,a)};w.prototype.GetRestitution=function(){return We(this.e)};w.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zt(b,a)};w.prototype.GetAABB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Jn(b,a),zx)};w.prototype.Dump=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);on(b,a)};w.prototype.__destroy__=function(){Pc(this.e)};
function yx(){this.e=Ap();p(yx)[this.e]=this}yx.prototype=Object.create(j.prototype);yx.prototype.g=yx;yx.k={};e.b2Filter=yx;yx.prototype.get_categoryBits=function(){return Zm(this.e)};yx.prototype.set_categoryBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mk(b,a)};yx.prototype.get_maskBits=function(){return bp(this.e)};yx.prototype.set_maskBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ss(b,a)};yx.prototype.get_groupIndex=function(){return Ue(this.e)};
yx.prototype.set_groupIndex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wn(b,a)};yx.prototype.__destroy__=function(){go(this.e)};function Ax(){this.e=iq();p(Ax)[this.e]=this}Ax.prototype=Object.create(Bx.prototype);Ax.prototype.g=Ax;Ax.k={};e.JSQueryCallback=Ax;Ax.prototype.ReportFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return pu(b,a)};Ax.prototype.__destroy__=function(){Jo(this.e)};function y(){c("cannot construct a b2MouseJoint, no constructor in IDL")}
y.prototype=Object.create(t.prototype);y.prototype.g=y;y.k={};e.b2MouseJoint=y;y.prototype.SetTarget=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);oi(b,a)};y.prototype.GetTarget=function(){return q(Kt(this.e),u)};y.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Aq(b,a)};y.prototype.GetMaxForce=function(){return Vt(this.e)};y.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zl(b,a)};y.prototype.GetFrequency=function(){return Dt(this.e)};
y.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qk(b,a)};y.prototype.GetDampingRatio=function(){return as(this.e)};y.prototype.GetType=function(){return Io(this.e)};y.prototype.GetBodyA=function(){return q(So(this.e),v)};y.prototype.GetBodyB=function(){return q(Cj(this.e),v)};y.prototype.GetAnchorA=function(){return q(tu(this.e),u)};y.prototype.GetAnchorB=function(){return q(Xq(this.e),u)};
y.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(jm(b,a),u)};y.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return mo(b,a)};y.prototype.GetNext=function(){return q(Xi(this.e),t)};y.prototype.GetUserData=function(){return no(this.e)};y.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mt(b,a)};y.prototype.IsActive=function(){return nd(this.e)};y.prototype.GetCollideConnected=function(){return Bi(this.e)};
y.prototype.__destroy__=function(){Gq(this.e)};function Cx(a){a=a&&"object"===typeof a?a.e:r(a);this.e=a===d?Do():Eo(a);p(Cx)[this.e]=this}Cx.prototype=Object.create(j.prototype);Cx.prototype.g=Cx;Cx.k={};e.b2Rot=Cx;Cx.prototype.Set=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wg(b,a)};Cx.prototype.SetIdentity=function(){Mg(this.e)};Cx.prototype.GetAngle=function(){return Np(this.e)};Cx.prototype.GetXAxis=function(){return q(Zj(this.e),u)};
Cx.prototype.GetYAxis=function(){return q(sr(this.e),u)};Cx.prototype.get_s=function(){return Zp(this.e)};Cx.prototype.set_s=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);me(b,a)};Cx.prototype.get_c=function(){return xq(this.e)};Cx.prototype.set_c=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mh(b,a)};Cx.prototype.__destroy__=function(){ap(this.e)};function z(){c("cannot construct a b2MotorJoint, no constructor in IDL")}z.prototype=Object.create(t.prototype);
z.prototype.g=z;z.k={};e.b2MotorJoint=z;z.prototype.SetLinearOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lp(b,a)};z.prototype.GetLinearOffset=function(){return q(Qp(this.e),u)};z.prototype.SetAngularOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pp(b,a)};z.prototype.GetAngularOffset=function(){return xv(this.e)};z.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mp(b,a)};z.prototype.GetMaxForce=function(){return Wj(this.e)};
z.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zd(b,a)};z.prototype.GetMaxTorque=function(){return es(this.e)};z.prototype.SetCorrectionFactor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ie(b,a)};z.prototype.GetCorrectionFactor=function(){return tq(this.e)};z.prototype.GetType=function(){return cr(this.e)};z.prototype.GetBodyA=function(){return q(Rg(this.e),v)};z.prototype.GetBodyB=function(){return q(mi(this.e),v)};
z.prototype.GetAnchorA=function(){return q(Tp(this.e),u)};z.prototype.GetAnchorB=function(){return q(rv(this.e),u)};z.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Mp(b,a),u)};z.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Uf(b,a)};z.prototype.GetNext=function(){return q(zr(this.e),t)};z.prototype.GetUserData=function(){return Nk(this.e)};
z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ki(b,a)};z.prototype.IsActive=function(){return lo(this.e)};z.prototype.GetCollideConnected=function(){return ff(this.e)};z.prototype.__destroy__=function(){bl(this.e)};function A(){c("cannot construct a b2Profile, no constructor in IDL")}A.prototype=Object.create(j.prototype);A.prototype.g=A;A.k={};e.b2Profile=A;A.prototype.get_step=function(){return Ik(this.e)};
A.prototype.set_step=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pj(b,a)};A.prototype.get_collide=function(){return At(this.e)};A.prototype.set_collide=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);To(b,a)};A.prototype.get_solve=function(){return uq(this.e)};A.prototype.set_solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kt(b,a)};A.prototype.get_solveInit=function(){return Iv(this.e)};
A.prototype.set_solveInit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pl(b,a)};A.prototype.get_solveVelocity=function(){return aw(this.e)};A.prototype.set_solveVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hm(b,a)};A.prototype.get_solvePosition=function(){return Fd(this.e)};A.prototype.set_solvePosition=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bg(b,a)};A.prototype.get_broadphase=function(){return qd(this.e)};
A.prototype.set_broadphase=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vn(b,a)};A.prototype.get_solveTOI=function(){return Hg(this.e)};A.prototype.set_solveTOI=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ui(b,a)};A.prototype.__destroy__=function(){Eh(this.e)};function Dx(){c("cannot construct a VoidPtr, no constructor in IDL")}Dx.prototype=Object.create(j.prototype);Dx.prototype.g=Dx;Dx.k={};e.VoidPtr=Dx;Dx.prototype.__destroy__=function(){yp(this.e)};
function B(){this.e=vw();p(B)[this.e]=this}B.prototype=Object.create(j.prototype);B.prototype.g=B;B.k={};e.b2BodyDef=B;B.prototype.get_type=function(){return Lr(this.e)};B.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vc(b,a)};B.prototype.get_position=function(){return q(bd(this.e),u)};B.prototype.set_position=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qd(b,a)};B.prototype.get_angle=function(){return hu(this.e)};
B.prototype.set_angle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pl(b,a)};B.prototype.get_linearVelocity=function(){return q(lv(this.e),u)};B.prototype.set_linearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$k(b,a)};B.prototype.get_angularVelocity=function(){return Le(this.e)};B.prototype.set_angularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Um(b,a)};B.prototype.get_linearDamping=function(){return Ek(this.e)};
B.prototype.set_linearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qr(b,a)};B.prototype.get_angularDamping=function(){return fr(this.e)};B.prototype.set_angularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jv(b,a)};B.prototype.get_allowSleep=function(){return Zu(this.e)};B.prototype.set_allowSleep=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mj(b,a)};B.prototype.get_awake=function(){return dr(this.e)};
B.prototype.set_awake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);am(b,a)};B.prototype.get_fixedRotation=function(){return io(this.e)};B.prototype.set_fixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tk(b,a)};B.prototype.get_bullet=function(){return Kf(this.e)};B.prototype.set_bullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sn(b,a)};B.prototype.get_active=function(){return Nj(this.e)};
B.prototype.set_active=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wk(b,a)};B.prototype.get_userData=function(){return Mv(this.e)};B.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lu(b,a)};B.prototype.get_gravityScale=function(){return qo(this.e)};B.prototype.set_gravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ee(b,a)};B.prototype.__destroy__=function(){Gs(this.e)};function Ex(){this.e=kg();p(Ex)[this.e]=this}Ex.prototype=Object.create(Fx.prototype);
Ex.prototype.g=Ex;Ex.k={};e.JSRayCastCallback=Ex;Ex.prototype.ReportFixture=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Fm(k,a,b,f,g)};Ex.prototype.__destroy__=function(){gp(this.e)};function Gx(){c("cannot construct a b2ContactFeature, no constructor in IDL")}Gx.prototype=Object.create(j.prototype);Gx.prototype.g=Gx;Gx.k={};e.b2ContactFeature=Gx;
Gx.prototype.get_indexA=function(){return xh(this.e)};Gx.prototype.set_indexA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hv(b,a)};Gx.prototype.get_indexB=function(){return Jw(this.e)};Gx.prototype.set_indexB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mr(b,a)};Gx.prototype.get_typeA=function(){return im(this.e)};Gx.prototype.set_typeA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nn(b,a)};Gx.prototype.get_typeB=function(){return Kp(this.e)};
Gx.prototype.set_typeB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xg(b,a)};Gx.prototype.__destroy__=function(){gq(this.e)};function u(a,b){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);this.e=a===d?sh():b===d?_emscripten_bind_b2Vec2_b2Vec2_1(a):qh(a,b);p(u)[this.e]=this}u.prototype=Object.create(j.prototype);u.prototype.g=u;u.k={};e.b2Vec2=u;u.prototype.SetZero=function(){Br(this.e)};
u.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Wp(f,a,b)};u.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rf(b,a)};u.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vh(b,a)};u.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sj(b,a)};u.prototype.Length=function(){return Ar(this.e)};u.prototype.LengthSquared=function(){return Gw(this.e)};
u.prototype.Normalize=function(){return gg(this.e)};u.prototype.IsValid=function(){return rp(this.e)};u.prototype.Skew=function(){return q($r(this.e),u)};u.prototype.get_x=function(){return ex(this.e)};u.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vf(b,a)};u.prototype.get_y=function(){return bm(this.e)};u.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sw(b,a)};u.prototype.__destroy__=function(){hv(this.e)};
function wx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Jk():b===d?_emscripten_bind_b2Vec3_b2Vec3_1(a):f===d?_emscripten_bind_b2Vec3_b2Vec3_2(a,b):Kk(a,b,f);p(wx)[this.e]=this}wx.prototype=Object.create(j.prototype);wx.prototype.g=wx;wx.k={};e.b2Vec3=wx;wx.prototype.SetZero=function(){Xf(this.e)};
wx.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);ak(g,a,b,f)};wx.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Og(b,a)};wx.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);po(b,a)};wx.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uv(b,a)};wx.prototype.get_x=function(){return Bd(this.e)};
wx.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wm(b,a)};wx.prototype.get_y=function(){return nu(this.e)};wx.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lq(b,a)};wx.prototype.get_z=function(){return vc(this.e)};wx.prototype.set_z=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pm(b,a)};wx.prototype.__destroy__=function(){Rh(this.e)};function zx(){this.e=Uo();p(zx)[this.e]=this}zx.prototype=Object.create(j.prototype);
zx.prototype.g=zx;zx.k={};e.b2AABB=zx;zx.prototype.IsValid=function(){return so(this.e)};zx.prototype.GetCenter=function(){return q(vn(this.e),u)};zx.prototype.GetExtents=function(){return q(cu(this.e),u)};zx.prototype.GetPerimeter=function(){return um(this.e)};zx.prototype.Combine=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);b===d?mq(f,a):nq(f,a,b)};zx.prototype.Contains=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Qe(b,a)};
zx.prototype.RayCast=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return zl(f,a,b)};zx.prototype.get_lowerBound=function(){return q(He(this.e),u)};zx.prototype.set_lowerBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yq(b,a)};zx.prototype.get_upperBound=function(){return q(Ze(this.e),u)};zx.prototype.set_upperBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rf(b,a)};zx.prototype.__destroy__=function(){qq(this.e)};
function Hx(){this.e=rk();p(Hx)[this.e]=this}Hx.prototype=Object.create(j.prototype);Hx.prototype.g=Hx;Hx.k={};e.b2FixtureDef=Hx;Hx.prototype.get_shape=function(){return q(ju(this.e),xx)};Hx.prototype.set_shape=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zv(b,a)};Hx.prototype.get_userData=function(){return re(this.e)};Hx.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cq(b,a)};Hx.prototype.get_friction=function(){return Ht(this.e)};
Hx.prototype.set_friction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cm(b,a)};Hx.prototype.get_restitution=function(){return ll(this.e)};Hx.prototype.set_restitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jd(b,a)};Hx.prototype.get_density=function(){return je(this.e)};Hx.prototype.set_density=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ps(b,a)};Hx.prototype.get_isSensor=function(){return rg(this.e)};
Hx.prototype.set_isSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Al(b,a)};Hx.prototype.get_filter=function(){return q(Hc(this.e),yx)};Hx.prototype.set_filter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ei(b,a)};Hx.prototype.__destroy__=function(){Yv(this.e)};function C(){this.e=wl();p(C)[this.e]=this}C.prototype=Object.create(D.prototype);C.prototype.g=C;C.k={};e.b2FrictionJointDef=C;
C.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);mw(g,a,b,f)};C.prototype.get_localAnchorA=function(){return q(If(this.e),u)};C.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ig(b,a)};C.prototype.get_localAnchorB=function(){return q(Mj(this.e),u)};C.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ck(b,a)};
C.prototype.get_maxForce=function(){return Tm(this.e)};C.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);en(b,a)};C.prototype.get_maxTorque=function(){return np(this.e)};C.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hs(b,a)};C.prototype.get_type=function(){return Ic(this.e)};C.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hs(b,a)};C.prototype.get_userData=function(){return hi(this.e)};
C.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uc(b,a)};C.prototype.get_bodyA=function(){return q(Fu(this.e),v)};C.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hw(b,a)};C.prototype.get_bodyB=function(){return q(Bq(this.e),v)};C.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ys(b,a)};C.prototype.get_collideConnected=function(){return js(this.e)};
C.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);se(b,a)};C.prototype.__destroy__=function(){yi(this.e)};function Ix(){this.e=cn();p(Ix)[this.e]=this}Ix.prototype=Object.create(j.prototype);Ix.prototype.g=Ix;Ix.k={};e.b2Manifold=Ix;Ix.prototype.get_localNormal=function(){return q(yl(this.e),u)};Ix.prototype.set_localNormal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tr(b,a)};Ix.prototype.get_localPoint=function(){return q(Zq(this.e),u)};
Ix.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qn(b,a)};Ix.prototype.get_type=function(){return Ld(this.e)};Ix.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Il(b,a)};Ix.prototype.get_pointCount=function(){return Tw(this.e)};Ix.prototype.set_pointCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jg(b,a)};Ix.prototype.__destroy__=function(){dh(this.e)};function E(){this.e=uf();p(E)[this.e]=this}E.prototype=Object.create(D.prototype);
E.prototype.g=E;E.k={};e.b2PrismaticJointDef=E;E.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Hf(k,a,b,f,g)};E.prototype.get_localAnchorA=function(){return q(tj(this.e),u)};E.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);It(b,a)};E.prototype.get_localAnchorB=function(){return q(mf(this.e),u)};
E.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ip(b,a)};E.prototype.get_localAxisA=function(){return q(Vu(this.e),u)};E.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mn(b,a)};E.prototype.get_referenceAngle=function(){return Je(this.e)};E.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ci(b,a)};E.prototype.get_enableLimit=function(){return qt(this.e)};
E.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qm(b,a)};E.prototype.get_lowerTranslation=function(){return te(this.e)};E.prototype.set_lowerTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pd(b,a)};E.prototype.get_upperTranslation=function(){return Ec(this.e)};E.prototype.set_upperTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gv(b,a)};E.prototype.get_enableMotor=function(){return Ws(this.e)};
E.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yr(b,a)};E.prototype.get_maxMotorForce=function(){return Ow(this.e)};E.prototype.set_maxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ti(b,a)};E.prototype.get_motorSpeed=function(){return $o(this.e)};E.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jo(b,a)};E.prototype.get_type=function(){return Mf(this.e)};
E.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vi(b,a)};E.prototype.get_userData=function(){return Vj(this.e)};E.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gs(b,a)};E.prototype.get_bodyA=function(){return q(qp(this.e),v)};E.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sp(b,a)};E.prototype.get_bodyB=function(){return q(rl(this.e),v)};
E.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vl(b,a)};E.prototype.get_collideConnected=function(){return wt(this.e)};E.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ln(b,a)};E.prototype.__destroy__=function(){Ne(this.e)};function F(a){a=a&&"object"===typeof a?a.e:r(a);this.e=Of(a);p(F)[this.e]=this}F.prototype=Object.create(j.prototype);F.prototype.g=F;F.k={};e.b2World=F;
F.prototype.SetDestructionListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Df(b,a)};F.prototype.SetContactFilter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fd(b,a)};F.prototype.SetContactListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);de(b,a)};F.prototype.SetDebugDraw=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cg(b,a)};F.prototype.CreateBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Wo(b,a),v)};
F.prototype.DestroyBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ed(b,a)};F.prototype.CreateJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Gg(b,a),t)};F.prototype.DestroyJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dr(b,a)};F.prototype.Step=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Gk(g,a,b,f)};F.prototype.ClearForces=function(){Qh(this.e)};
F.prototype.DrawDebugData=function(){pd(this.e)};F.prototype.QueryAABB=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Lv(f,a,b)};F.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);xt(g,a,b,f)};F.prototype.GetBodyList=function(){return q(tt(this.e),v)};F.prototype.GetJointList=function(){return q(pn(this.e),t)};
F.prototype.GetContactList=function(){return q(Cu(this.e),G)};F.prototype.SetAllowSleeping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Op(b,a)};F.prototype.GetAllowSleeping=function(){return Ri(this.e)};F.prototype.SetWarmStarting=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rc(b,a)};F.prototype.GetWarmStarting=function(){return tp(this.e)};F.prototype.SetContinuousPhysics=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);an(b,a)};
F.prototype.GetContinuousPhysics=function(){return dl(this.e)};F.prototype.SetSubStepping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qf(b,a)};F.prototype.GetSubStepping=function(){return rr(this.e)};F.prototype.GetProxyCount=function(){return fg(this.e)};F.prototype.GetBodyCount=function(){return hj(this.e)};F.prototype.GetJointCount=function(){return Yn(this.e)};F.prototype.GetContactCount=function(){return wj(this.e)};F.prototype.GetTreeHeight=function(){return $u(this.e)};
F.prototype.GetTreeBalance=function(){return Dc(this.e)};F.prototype.GetTreeQuality=function(){return De(this.e)};F.prototype.SetGravity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wt(b,a)};F.prototype.GetGravity=function(){return q(od(this.e),u)};F.prototype.IsLocked=function(){return wc(this.e)};F.prototype.SetAutoClearForces=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Od(b,a)};F.prototype.GetAutoClearForces=function(){return Rk(this.e)};
F.prototype.GetProfile=function(){return q(wu(this.e),A)};F.prototype.Dump=function(){ht(this.e)};F.prototype.__destroy__=function(){yo(this.e)};function H(){c("cannot construct a b2PrismaticJoint, no constructor in IDL")}H.prototype=Object.create(t.prototype);H.prototype.g=H;H.k={};e.b2PrismaticJoint=H;H.prototype.GetLocalAnchorA=function(){return q(Ok(this.e),u)};H.prototype.GetLocalAnchorB=function(){return q(Ho(this.e),u)};H.prototype.GetLocalAxisA=function(){return q(li(this.e),u)};
H.prototype.GetReferenceAngle=function(){return Ml(this.e)};H.prototype.GetJointTranslation=function(){return rh(this.e)};H.prototype.GetJointSpeed=function(){return Cn(this.e)};H.prototype.IsLimitEnabled=function(){return tw(this.e)};H.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sm(b,a)};H.prototype.GetLowerLimit=function(){return Ge(this.e)};H.prototype.GetUpperLimit=function(){return at(this.e)};
H.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);sd(f,a,b)};H.prototype.IsMotorEnabled=function(){return El(this.e)};H.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cs(b,a)};H.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tt(b,a)};H.prototype.GetMotorSpeed=function(){return Kg(this.e)};
H.prototype.SetMaxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$w(b,a)};H.prototype.GetMaxMotorForce=function(){return pq(this.e)};H.prototype.GetMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return dj(b,a)};H.prototype.GetType=function(){return Ve(this.e)};H.prototype.GetBodyA=function(){return q(oq(this.e),v)};H.prototype.GetBodyB=function(){return q(eu(this.e),v)};H.prototype.GetAnchorA=function(){return q(Cl(this.e),u)};
H.prototype.GetAnchorB=function(){return q(Im(this.e),u)};H.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(zi(b,a),u)};H.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return kh(b,a)};H.prototype.GetNext=function(){return q(Te(this.e),t)};H.prototype.GetUserData=function(){return is(this.e)};H.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sk(b,a)};H.prototype.IsActive=function(){return Ym(this.e)};
H.prototype.GetCollideConnected=function(){return mh(this.e)};H.prototype.__destroy__=function(){Fg(this.e)};function Jx(){c("cannot construct a b2RayCastOutput, no constructor in IDL")}Jx.prototype=Object.create(j.prototype);Jx.prototype.g=Jx;Jx.k={};e.b2RayCastOutput=Jx;Jx.prototype.get_normal=function(){return q(ng(this.e),u)};Jx.prototype.set_normal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wh(b,a)};Jx.prototype.get_fraction=function(){return bo(this.e)};
Jx.prototype.set_fraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ye(b,a)};Jx.prototype.__destroy__=function(){tn(this.e)};function Kx(){c("cannot construct a b2ContactID, no constructor in IDL")}Kx.prototype=Object.create(j.prototype);Kx.prototype.g=Kx;Kx.k={};e.b2ContactID=Kx;Kx.prototype.get_cf=function(){return q(bt(this.e),Gx)};Kx.prototype.set_cf=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yj(b,a)};Kx.prototype.get_key=function(){return Nv(this.e)};
Kx.prototype.set_key=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dg(b,a)};Kx.prototype.__destroy__=function(){Dm(this.e)};function tx(){c("cannot construct a b2DestructionListenerWrapper, no constructor in IDL")}tx.prototype=Object.create(j.prototype);tx.prototype.g=tx;tx.k={};e.b2DestructionListenerWrapper=tx;tx.prototype.__destroy__=function(){Vw(this.e)};function Lx(){this.e=fx();p(Lx)[this.e]=this}Lx.prototype=Object.create(Mx.prototype);Lx.prototype.g=Lx;Lx.k={};
e.JSContactListener=Lx;Lx.prototype.BeginContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);No(b,a)};Lx.prototype.EndContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zd(b,a)};Lx.prototype.PreSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Uh(f,a,b)};Lx.prototype.PostSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Lq(f,a,b)};Lx.prototype.__destroy__=function(){Zk(this.e)};
function Nx(a,b,f,g){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);g=g&&"object"===typeof g?g.e:r(g);this.e=a===d?Wq():b===d?_emscripten_bind_b2Mat22_b2Mat22_1(a):f===d?vs(a,b):g===d?_emscripten_bind_b2Mat22_b2Mat22_3(a,b,f):zs(a,b,f,g);p(Nx)[this.e]=this}Nx.prototype=Object.create(j.prototype);Nx.prototype.g=Nx;Nx.k={};e.b2Mat22=Nx;
Nx.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Fr(f,a,b)};Nx.prototype.SetIdentity=function(){Xu(this.e)};Nx.prototype.SetZero=function(){Xt(this.e)};Nx.prototype.GetInverse=function(){return q(Bs(this.e),Nx)};Nx.prototype.Solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(wp(b,a),u)};Nx.prototype.get_ex=function(){return q(cp(this.e),u)};
Nx.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gw(b,a)};Nx.prototype.get_ey=function(){return q(Wu(this.e),u)};Nx.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pr(b,a)};Nx.prototype.__destroy__=function(){nv(this.e)};function I(){this.e=Cw();p(I)[this.e]=this}I.prototype=Object.create(D.prototype);I.prototype.g=I;I.k={};e.b2WheelJointDef=I;
I.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Rj(k,a,b,f,g)};I.prototype.get_localAnchorA=function(){return q(Rl(this.e),u)};I.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zf(b,a)};I.prototype.get_localAnchorB=function(){return q(Wn(this.e),u)};
I.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mw(b,a)};I.prototype.get_localAxisA=function(){return q(Ij(this.e),u)};I.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Aw(b,a)};I.prototype.get_enableMotor=function(){return Fw(this.e)};I.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qe(b,a)};I.prototype.get_maxMotorTorque=function(){return uh(this.e)};
I.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xs(b,a)};I.prototype.get_motorSpeed=function(){return ps(this.e)};I.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sp(b,a)};I.prototype.get_frequencyHz=function(){return Ac(this.e)};I.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qr(b,a)};I.prototype.get_dampingRatio=function(){return ao(this.e)};
I.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wr(b,a)};I.prototype.get_type=function(){return Gu(this.e)};I.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ce(b,a)};I.prototype.get_userData=function(){return Pv(this.e)};I.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sh(b,a)};I.prototype.get_bodyA=function(){return q(Ww(this.e),v)};
I.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fu(b,a)};I.prototype.get_bodyB=function(){return q(Qn(this.e),v)};I.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pe(b,a)};I.prototype.get_collideConnected=function(){return gd(this.e)};I.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mr(b,a)};I.prototype.__destroy__=function(){Wf(this.e)};function Ox(){this.e=yn();p(Ox)[this.e]=this}
Ox.prototype=Object.create(xx.prototype);Ox.prototype.g=Ox;Ox.k={};e.b2CircleShape=Ox;Ox.prototype.GetType=function(){return ai(this.e)};Ox.prototype.GetChildCount=function(){return Jf(this.e)};Ox.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Tq(f,a,b)};
Ox.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Hk(k,a,b,f,g)};Ox.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);ot(g,a,b,f)};
Ox.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Oq(f,a,b)};Ox.prototype.get_m_p=function(){return q(wh(this.e),u)};Ox.prototype.set_m_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yd(b,a)};Ox.prototype.get_m_type=function(){return Ds(this.e)};Ox.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nf(b,a)};Ox.prototype.get_m_radius=function(){return si(this.e)};
Ox.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bf(b,a)};Ox.prototype.__destroy__=function(){br(this.e)};function J(){this.e=Jm();p(J)[this.e]=this}J.prototype=Object.create(D.prototype);J.prototype.g=J;J.k={};e.b2WeldJointDef=J;J.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Et(g,a,b,f)};J.prototype.get_localAnchorA=function(){return q(Lt(this.e),u)};
J.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);oj(b,a)};J.prototype.get_localAnchorB=function(){return q(pp(this.e),u)};J.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);af(b,a)};J.prototype.get_referenceAngle=function(){return qs(this.e)};J.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ls(b,a)};J.prototype.get_frequencyHz=function(){return bh(this.e)};
J.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wr(b,a)};J.prototype.get_dampingRatio=function(){return Fq(this.e)};J.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sj(b,a)};J.prototype.get_type=function(){return Xp(this.e)};J.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ns(b,a)};J.prototype.get_userData=function(){return ku(this.e)};
J.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yh(b,a)};J.prototype.get_bodyA=function(){return q(qv(this.e),v)};J.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cf(b,a)};J.prototype.get_bodyB=function(){return q(bw(this.e),v)};J.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tv(b,a)};J.prototype.get_collideConnected=function(){return jj(this.e)};
J.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kd(b,a)};J.prototype.__destroy__=function(){vp(this.e)};function Px(){c("cannot construct a b2Draw, no constructor in IDL")}Px.prototype=Object.create(j.prototype);Px.prototype.g=Px;Px.k={};e.b2Draw=Px;Px.prototype.SetFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pe(b,a)};Px.prototype.GetFlags=function(){return xc(this.e)};
Px.prototype.AppendFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Au(b,a)};Px.prototype.ClearFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oi(b,a)};Px.prototype.__destroy__=function(){Qj(this.e)};function Qx(){this.e=kq();p(Qx)[this.e]=this}Qx.prototype=Object.create(j.prototype);Qx.prototype.g=Qx;Qx.k={};e.b2MassData=Qx;Qx.prototype.get_mass=function(){return ww(this.e)};Qx.prototype.set_mass=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ad(b,a)};
Qx.prototype.get_center=function(){return q(Nf(this.e),u)};Qx.prototype.set_center=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kj(b,a)};Qx.prototype.get_I=function(){return os(this.e)};Qx.prototype.set_I=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yt(b,a)};Qx.prototype.__destroy__=function(){zt(this.e)};function t(){c("cannot construct a b2Joint, no constructor in IDL")}t.prototype=Object.create(j.prototype);t.prototype.g=t;t.k={};e.b2Joint=t;t.prototype.GetType=function(){return Sw(this.e)};
t.prototype.GetBodyA=function(){return q(Sf(this.e),v)};t.prototype.GetBodyB=function(){return q(yw(this.e),v)};t.prototype.GetAnchorA=function(){return q(En(this.e),u)};t.prototype.GetAnchorB=function(){return q(Uj(this.e),u)};t.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Bm(b,a),u)};t.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Bk(b,a)};t.prototype.GetNext=function(){return q(vt(this.e),t)};
t.prototype.GetUserData=function(){return Gl(this.e)};t.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cx(b,a)};t.prototype.IsActive=function(){return Yu(this.e)};t.prototype.GetCollideConnected=function(){return Tf(this.e)};t.prototype.Dump=function(){Bw(this.e)};function Rx(){c("cannot construct a b2GearJoint, no constructor in IDL")}Rx.prototype=Object.create(t.prototype);Rx.prototype.g=Rx;Rx.k={};e.b2GearJoint=Rx;
Rx.prototype.GetJoint1=function(){return q(Xd(this.e),t)};Rx.prototype.GetJoint2=function(){return q(av(this.e),t)};Rx.prototype.SetRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eo(b,a)};Rx.prototype.GetRatio=function(){return jg(this.e)};Rx.prototype.GetType=function(){return hw(this.e)};Rx.prototype.GetBodyA=function(){return q(Qm(this.e),v)};Rx.prototype.GetBodyB=function(){return q($q(this.e),v)};Rx.prototype.GetAnchorA=function(){return q($d(this.e),u)};
Rx.prototype.GetAnchorB=function(){return q(Mu(this.e),u)};Rx.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Se(b,a),u)};Rx.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Jd(b,a)};Rx.prototype.GetNext=function(){return q(zv(this.e),t)};Rx.prototype.GetUserData=function(){return ef(this.e)};Rx.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);om(b,a)};
Rx.prototype.IsActive=function(){return fj(this.e)};Rx.prototype.GetCollideConnected=function(){return ue(this.e)};Rx.prototype.__destroy__=function(){gh(this.e)};function Fx(){c("cannot construct a b2RayCastCallback, no constructor in IDL")}Fx.prototype=Object.create(j.prototype);Fx.prototype.g=Fx;Fx.k={};e.b2RayCastCallback=Fx;Fx.prototype.__destroy__=function(){ii(this.e)};function K(){c("cannot construct a b2WeldJoint, no constructor in IDL")}K.prototype=Object.create(t.prototype);
K.prototype.g=K;K.k={};e.b2WeldJoint=K;K.prototype.GetLocalAnchorA=function(){return q(Yl(this.e),u)};K.prototype.GetLocalAnchorB=function(){return q(Rn(this.e),u)};K.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Th(b,a)};K.prototype.GetFrequency=function(){return Fl(this.e)};K.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Me(b,a)};K.prototype.GetDampingRatio=function(){return lt(this.e)};K.prototype.Dump=function(){lp(this.e)};
K.prototype.GetType=function(){return Zo(this.e)};K.prototype.GetBodyA=function(){return q(og(this.e),v)};K.prototype.GetBodyB=function(){return q(Pj(this.e),v)};K.prototype.GetAnchorA=function(){return q($v(this.e),u)};K.prototype.GetAnchorB=function(){return q(Hr(this.e),u)};K.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Zs(b,a),u)};K.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Zc(b,a)};
K.prototype.GetNext=function(){return q(Ir(this.e),t)};K.prototype.GetUserData=function(){return Ql(this.e)};K.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);aj(b,a)};K.prototype.IsActive=function(){return Tc(this.e)};K.prototype.GetCollideConnected=function(){return or(this.e)};K.prototype.__destroy__=function(){Kq(this.e)};function Sx(){this.e=Eu();p(Sx)[this.e]=this}Sx.prototype=Object.create(j.prototype);Sx.prototype.g=Sx;Sx.k={};e.b2JointEdge=Sx;
Sx.prototype.get_other=function(){return q(Nt(this.e),v)};Sx.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fe(b,a)};Sx.prototype.get_joint=function(){return q(Wv(this.e),t)};Sx.prototype.set_joint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Nc(b,a)};Sx.prototype.get_prev=function(){return q(Yc(this.e),Sx)};Sx.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jh(b,a)};Sx.prototype.get_next=function(){return q(Qo(this.e),Sx)};
Sx.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ho(b,a)};Sx.prototype.__destroy__=function(){Lo(this.e)};function L(){this.e=Nd();p(L)[this.e]=this}L.prototype=Object.create(D.prototype);L.prototype.g=L;L.k={};e.b2PulleyJointDef=L;
L.prototype.Initialize=function(a,b,f,g,k,n,m){var l=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g),k=k&&"object"===typeof k?k.e:r(k),n=n&&"object"===typeof n?n.e:r(n),m=m&&"object"===typeof m?m.e:r(m);dw(l,a,b,f,g,k,n,m)};L.prototype.get_groundAnchorA=function(){return q(fi(this.e),u)};L.prototype.set_groundAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yw(b,a)};
L.prototype.get_groundAnchorB=function(){return q(Dn(this.e),u)};L.prototype.set_groundAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Js(b,a)};L.prototype.get_localAnchorA=function(){return q(td(this.e),u)};L.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ji(b,a)};L.prototype.get_localAnchorB=function(){return q(Dg(this.e),u)};L.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nl(b,a)};
L.prototype.get_lengthA=function(){return vm(this.e)};L.prototype.set_lengthA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eh(b,a)};L.prototype.get_lengthB=function(){return $i(this.e)};L.prototype.set_lengthB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ev(b,a)};L.prototype.get_ratio=function(){return lf(this.e)};L.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ih(b,a)};L.prototype.get_type=function(){return xm(this.e)};
L.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sl(b,a)};L.prototype.get_userData=function(){return ul(this.e)};L.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dn(b,a)};L.prototype.get_bodyA=function(){return q(rd(this.e),v)};L.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rw(b,a)};L.prototype.get_bodyB=function(){return q(Lh(this.e),v)};
L.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sg(b,a)};L.prototype.get_collideConnected=function(){return ax(this.e)};L.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Iu(b,a)};L.prototype.__destroy__=function(){Bj(this.e)};function Mx(){c("cannot construct a b2ContactListener, no constructor in IDL")}Mx.prototype=Object.create(j.prototype);Mx.prototype.g=Mx;Mx.k={};e.b2ContactListener=Mx;Mx.prototype.__destroy__=function(){hp(this.e)};
function Tx(){this.e=Si();p(Tx)[this.e]=this}Tx.prototype=Object.create(j.prototype);Tx.prototype.g=Tx;Tx.k={};e.b2ManifoldPoint=Tx;Tx.prototype.get_localPoint=function(){return q(Lf(this.e),u)};Tx.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rt(b,a)};Tx.prototype.get_normalImpulse=function(){return zk(this.e)};Tx.prototype.set_normalImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Di(b,a)};Tx.prototype.get_tangentImpulse=function(){return Dq(this.e)};
Tx.prototype.set_tangentImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vd(b,a)};Tx.prototype.get_id=function(){return q(Ig(this.e),Kx)};Tx.prototype.set_id=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pn(b,a)};Tx.prototype.__destroy__=function(){xr(this.e)};function Bx(){c("cannot construct a b2QueryCallback, no constructor in IDL")}Bx.prototype=Object.create(j.prototype);Bx.prototype.g=Bx;Bx.k={};e.b2QueryCallback=Bx;Bx.prototype.__destroy__=function(){kf(this.e)};
function D(){this.e=xn();p(D)[this.e]=this}D.prototype=Object.create(j.prototype);D.prototype.g=D;D.k={};e.b2JointDef=D;D.prototype.get_type=function(){return ou(this.e)};D.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zu(b,a)};D.prototype.get_userData=function(){return dq(this.e)};D.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cq(b,a)};D.prototype.get_bodyA=function(){return q(Ur(this.e),v)};
D.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fl(b,a)};D.prototype.get_bodyB=function(){return q(An(this.e),v)};D.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Er(b,a)};D.prototype.get_collideConnected=function(){return Vk(this.e)};D.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);al(b,a)};D.prototype.__destroy__=function(){Gf(this.e)};
function Ux(a,b){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);this.e=a===d?Ai():b===d?_emscripten_bind_b2Transform_b2Transform_1(a):Ys(a,b);p(Ux)[this.e]=this}Ux.prototype=Object.create(j.prototype);Ux.prototype.g=Ux;Ux.k={};e.b2Transform=Ux;Ux.prototype.SetIdentity=function(){ir(this.e)};Ux.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ni(f,a,b)};Ux.prototype.get_p=function(){return q(uu(this.e),u)};
Ux.prototype.set_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yi(b,a)};Ux.prototype.get_q=function(){return q(Rd(this.e),Cx)};Ux.prototype.set_q=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xe(b,a)};Ux.prototype.__destroy__=function(){$e(this.e)};function M(){this.e=jw();p(M)[this.e]=this}M.prototype=Object.create(xx.prototype);M.prototype.g=M;M.k={};e.b2ChainShape=M;M.prototype.Clear=function(){ar(this.e)};
M.prototype.CreateLoop=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ow(f,a,b)};M.prototype.CreateChain=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Cd(f,a,b)};M.prototype.SetPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ko(b,a)};M.prototype.SetNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ao(b,a)};
M.prototype.GetChildEdge=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Ot(f,a,b)};M.prototype.GetType=function(){return Om(this.e)};M.prototype.GetChildCount=function(){return jq(this.e)};M.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Ll(f,a,b)};
M.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return $s(k,a,b,f,g)};M.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Wc(g,a,b,f)};
M.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);rw(f,a,b)};M.prototype.get_m_vertices=function(){return q(le(this.e),u)};M.prototype.set_m_vertices=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ke(b,a)};M.prototype.get_m_count=function(){return rc(this.e)};M.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dl(b,a)};M.prototype.get_m_prevVertex=function(){return q(Ph(this.e),u)};
M.prototype.set_m_prevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cs(b,a)};M.prototype.get_m_nextVertex=function(){return q(Zf(this.e),u)};M.prototype.set_m_nextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zh(b,a)};M.prototype.get_m_hasPrevVertex=function(){return zq(this.e)};M.prototype.set_m_hasPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Eg(b,a)};M.prototype.get_m_hasNextVertex=function(){return zo(this.e)};
M.prototype.set_m_hasNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);As(b,a)};M.prototype.get_m_type=function(){return ek(this.e)};M.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ug(b,a)};M.prototype.get_m_radius=function(){return dt(this.e)};M.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ft(b,a)};M.prototype.__destroy__=function(){nm(this.e)};
function Vx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Ct():b===d?_emscripten_bind_b2Color_b2Color_1(a):f===d?_emscripten_bind_b2Color_b2Color_2(a,b):Bt(a,b,f);p(Vx)[this.e]=this}Vx.prototype=Object.create(j.prototype);Vx.prototype.g=Vx;Vx.k={};e.b2Color=Vx;Vx.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Bv(g,a,b,f)};
Vx.prototype.get_r=function(){return Dd(this.e)};Vx.prototype.set_r=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ze(b,a)};Vx.prototype.get_g=function(){return xp(this.e)};Vx.prototype.set_g=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zc(b,a)};Vx.prototype.get_b=function(){return mt(this.e)};Vx.prototype.set_b=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Am(b,a)};Vx.prototype.__destroy__=function(){Xm(this.e)};
function N(){c("cannot construct a b2RopeJoint, no constructor in IDL")}N.prototype=Object.create(t.prototype);N.prototype.g=N;N.k={};e.b2RopeJoint=N;N.prototype.GetLocalAnchorA=function(){return q(Pr(this.e),u)};N.prototype.GetLocalAnchorB=function(){return q(Aj(this.e),u)};N.prototype.SetMaxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bx(b,a)};N.prototype.GetMaxLength=function(){return df(this.e)};N.prototype.GetLimitState=function(){return Uk(this.e)};N.prototype.GetType=function(){return ns(this.e)};
N.prototype.GetBodyA=function(){return q(Fv(this.e),v)};N.prototype.GetBodyB=function(){return q(Bl(this.e),v)};N.prototype.GetAnchorA=function(){return q(vj(this.e),u)};N.prototype.GetAnchorB=function(){return q(qf(this.e),u)};N.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(pt(b,a),u)};N.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return fw(b,a)};N.prototype.GetNext=function(){return q(zp(this.e),t)};
N.prototype.GetUserData=function(){return lk(this.e)};N.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ts(b,a)};N.prototype.IsActive=function(){return Nu(this.e)};N.prototype.GetCollideConnected=function(){return Ju(this.e)};N.prototype.__destroy__=function(){Cr(this.e)};function Wx(){c("cannot construct a b2RayCastInput, no constructor in IDL")}Wx.prototype=Object.create(j.prototype);Wx.prototype.g=Wx;Wx.k={};e.b2RayCastInput=Wx;
Wx.prototype.get_p1=function(){return q(Lc(this.e),u)};Wx.prototype.set_p1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);iv(b,a)};Wx.prototype.get_p2=function(){return q(Nl(this.e),u)};Wx.prototype.set_p2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lg(b,a)};Wx.prototype.get_maxFraction=function(){return Pm(this.e)};Wx.prototype.set_maxFraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ro(b,a)};Wx.prototype.__destroy__=function(){wf(this.e)};
function O(){this.e=Fj();p(O)[this.e]=this}O.prototype=Object.create(xx.prototype);O.prototype.g=O;O.k={};e.b2PolygonShape=O;O.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ch(f,a,b)};
O.prototype.SetAsBox=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);f===d?tv(k,a,b):g===d?_emscripten_bind_b2PolygonShape_SetAsBox_3(k,a,b,f):jn(k,a,b,f,g)};O.prototype.GetVertexCount=function(){return wq(this.e)};O.prototype.GetVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Is(b,a),u)};O.prototype.GetType=function(){return bi(this.e)};
O.prototype.GetChildCount=function(){return Bp(this.e)};O.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Dj(f,a,b)};O.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Cc(k,a,b,f,g)};
O.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);hm(g,a,b,f)};O.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Xl(f,a,b)};O.prototype.get_m_centroid=function(){return q(mm(this.e),u)};O.prototype.set_m_centroid=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gn(b,a)};O.prototype.get_m_count=function(){return wd(this.e)};
O.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Td(b,a)};O.prototype.get_m_type=function(){return Vp(this.e)};O.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vv(b,a)};O.prototype.get_m_radius=function(){return kk(this.e)};O.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dx(b,a)};O.prototype.__destroy__=function(){Ye(this.e)};function P(){this.e=Hq();p(P)[this.e]=this}P.prototype=Object.create(xx.prototype);
P.prototype.g=P;P.k={};e.b2EdgeShape=P;P.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Su(f,a,b)};P.prototype.GetType=function(){return vr(this.e)};P.prototype.GetChildCount=function(){return ld(this.e)};P.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return lm(f,a,b)};
P.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return lj(k,a,b,f,g)};P.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Kr(g,a,b,f)};
P.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);vu(f,a,b)};P.prototype.get_m_vertex1=function(){return q($l(this.e),u)};P.prototype.set_m_vertex1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bv(b,a)};P.prototype.get_m_vertex2=function(){return q(kn(this.e),u)};P.prototype.set_m_vertex2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kr(b,a)};P.prototype.get_m_vertex0=function(){return q(gj(this.e),u)};
P.prototype.set_m_vertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zi(b,a)};P.prototype.get_m_vertex3=function(){return q(gr(this.e),u)};P.prototype.set_m_vertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ej(b,a)};P.prototype.get_m_hasVertex0=function(){return Em(this.e)};P.prototype.set_m_hasVertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cf(b,a)};P.prototype.get_m_hasVertex3=function(){return tk(this.e)};
P.prototype.set_m_hasVertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mc(b,a)};P.prototype.get_m_type=function(){return Wd(this.e)};P.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cv(b,a)};P.prototype.get_m_radius=function(){return pw(this.e)};P.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ts(b,a)};P.prototype.__destroy__=function(){uj(this.e)};function Xx(){this.e=jt();p(Xx)[this.e]=this}Xx.prototype=Object.create(Yx.prototype);
Xx.prototype.g=Xx;Xx.k={};e.JSContactFilter=Xx;Xx.prototype.ShouldCollide=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Ak(f,a,b)};Xx.prototype.__destroy__=function(){jk(this.e)};function Q(){this.e=mn();p(Q)[this.e]=this}Q.prototype=Object.create(D.prototype);Q.prototype.g=Q;Q.k={};e.b2RevoluteJointDef=Q;
Q.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Qu(g,a,b,f)};Q.prototype.get_localAnchorA=function(){return q(ed(this.e),u)};Q.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fh(b,a)};Q.prototype.get_localAnchorB=function(){return q(hk(this.e),u)};Q.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sn(b,a)};
Q.prototype.get_referenceAngle=function(){return ik(this.e)};Q.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fq(b,a)};Q.prototype.get_enableLimit=function(){return ri(this.e)};Q.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);up(b,a)};Q.prototype.get_lowerAngle=function(){return Hl(this.e)};Q.prototype.set_lowerAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ko(b,a)};Q.prototype.get_upperAngle=function(){return ve(this.e)};
Q.prototype.set_upperAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lm(b,a)};Q.prototype.get_enableMotor=function(){return ep(this.e)};Q.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vi(b,a)};Q.prototype.get_motorSpeed=function(){return mg(this.e)};Q.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dw(b,a)};Q.prototype.get_maxMotorTorque=function(){return Eq(this.e)};
Q.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sv(b,a)};Q.prototype.get_type=function(){return Mm(this.e)};Q.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ck(b,a)};Q.prototype.get_userData=function(){return Hn(this.e)};Q.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dd(b,a)};Q.prototype.get_bodyA=function(){return q(du(this.e),v)};
Q.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rq(b,a)};Q.prototype.get_bodyB=function(){return q(qk(this.e),v)};Q.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vg(b,a)};Q.prototype.get_collideConnected=function(){return Ks(this.e)};Q.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eg(b,a)};Q.prototype.__destroy__=function(){Hp(this.e)};function Zx(){this.e=su();p(Zx)[this.e]=this}
Zx.prototype=Object.create(Px.prototype);Zx.prototype.g=Zx;Zx.k={};e.JSDraw=Zx;Zx.prototype.DrawPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);fo(g,a,b,f)};Zx.prototype.DrawSolidPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);vg(g,a,b,f)};
Zx.prototype.DrawCircle=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Sc(g,a,b,f)};Zx.prototype.DrawSolidCircle=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Fc(k,a,b,f,g)};
Zx.prototype.DrawSegment=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);id(g,a,b,f)};Zx.prototype.DrawTransform=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uo(b,a)};Zx.prototype.__destroy__=function(){yg(this.e)};function R(){c("cannot construct a b2WheelJoint, no constructor in IDL")}R.prototype=Object.create(t.prototype);R.prototype.g=R;R.k={};e.b2WheelJoint=R;
R.prototype.GetLocalAnchorA=function(){return q(ug(this.e),u)};R.prototype.GetLocalAnchorB=function(){return q(Ff(this.e),u)};R.prototype.GetLocalAxisA=function(){return q(Dv(this.e),u)};R.prototype.GetJointTranslation=function(){return Rs(this.e)};R.prototype.GetJointSpeed=function(){return hg(this.e)};R.prototype.IsMotorEnabled=function(){return Vf(this.e)};R.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);tg(b,a)};
R.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ie(b,a)};R.prototype.GetMotorSpeed=function(){return Zn(this.e)};R.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hj(b,a)};R.prototype.GetMaxMotorTorque=function(){return Yd(this.e)};R.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Ss(b,a)};
R.prototype.SetSpringFrequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xi(b,a)};R.prototype.GetSpringFrequencyHz=function(){return Iw(this.e)};R.prototype.SetSpringDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gp(b,a)};R.prototype.GetSpringDampingRatio=function(){return pc(this.e)};R.prototype.GetType=function(){return wv(this.e)};R.prototype.GetBodyA=function(){return q(to(this.e),v)};R.prototype.GetBodyB=function(){return q(Wm(this.e),v)};
R.prototype.GetAnchorA=function(){return q(ds(this.e),u)};R.prototype.GetAnchorB=function(){return q(Ii(this.e),u)};R.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Pf(b,a),u)};R.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return ln(b,a)};R.prototype.GetNext=function(){return q(un(this.e),t)};R.prototype.GetUserData=function(){return oo(this.e)};
R.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rt(b,a)};R.prototype.IsActive=function(){return Vs(this.e)};R.prototype.GetCollideConnected=function(){return Fp(this.e)};R.prototype.__destroy__=function(){xw(this.e)};function S(){c("cannot construct a b2PulleyJoint, no constructor in IDL")}S.prototype=Object.create(t.prototype);S.prototype.g=S;S.k={};e.b2PulleyJoint=S;S.prototype.GetGroundAnchorA=function(){return q(Hd(this.e),u)};
S.prototype.GetGroundAnchorB=function(){return q(Ng(this.e),u)};S.prototype.GetLengthA=function(){return vo(this.e)};S.prototype.GetLengthB=function(){return Lk(this.e)};S.prototype.GetRatio=function(){return Mo(this.e)};S.prototype.GetCurrentLengthA=function(){return xl(this.e)};S.prototype.GetCurrentLengthB=function(){return rj(this.e)};S.prototype.GetType=function(){return nj(this.e)};S.prototype.GetBodyA=function(){return q(Mq(this.e),v)};S.prototype.GetBodyB=function(){return q(Be(this.e),v)};
S.prototype.GetAnchorA=function(){return q(kv(this.e),u)};S.prototype.GetAnchorB=function(){return q(Bh(this.e),u)};S.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Ep(b,a),u)};S.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return iu(b,a)};S.prototype.GetNext=function(){return q(dk(this.e),t)};S.prototype.GetUserData=function(){return em(this.e)};
S.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qc(b,a)};S.prototype.IsActive=function(){return Wi(this.e)};S.prototype.GetCollideConnected=function(){return Ah(this.e)};S.prototype.__destroy__=function(){Go(this.e)};function T(){this.e=Yp();p(T)[this.e]=this}T.prototype=Object.create(D.prototype);T.prototype.g=T;T.k={};e.b2MouseJointDef=T;T.prototype.get_target=function(){return q(bn(this.e),u)};
T.prototype.set_target=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);he(b,a)};T.prototype.get_maxForce=function(){return Ip(this.e)};T.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sq(b,a)};T.prototype.get_frequencyHz=function(){return aq(this.e)};T.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ct(b,a)};T.prototype.get_dampingRatio=function(){return Sg(this.e)};
T.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fp(b,a)};T.prototype.get_type=function(){return Zw(this.e)};T.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xc(b,a)};T.prototype.get_userData=function(){return nt(this.e)};T.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hd(b,a)};T.prototype.get_bodyA=function(){return q(il(this.e),v)};
T.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);be(b,a)};T.prototype.get_bodyB=function(){return q(Zg(this.e),v)};T.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$h(b,a)};T.prototype.get_collideConnected=function(){return sf(this.e)};T.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zw(b,a)};T.prototype.__destroy__=function(){zg(this.e)};
function G(){c("cannot construct a b2Contact, no constructor in IDL")}G.prototype=Object.create(j.prototype);G.prototype.g=G;G.k={};e.b2Contact=G;G.prototype.GetManifold=function(){return q(Jt(this.e),Ix)};G.prototype.IsTouching=function(){return Oe(this.e)};G.prototype.SetEnabled=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$f(b,a)};G.prototype.IsEnabled=function(){return Tj(this.e)};G.prototype.GetNext=function(){return q(Ud(this.e),G)};
G.prototype.GetFixtureA=function(){return q(jf(this.e),w)};G.prototype.GetChildIndexA=function(){return Yt(this.e)};G.prototype.GetFixtureB=function(){return q(qw(this.e),w)};G.prototype.GetChildIndexB=function(){return tr(this.e)};G.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sr(b,a)};G.prototype.GetFriction=function(){return Hi(this.e)};G.prototype.ResetFriction=function(){jv(this.e)};
G.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);er(b,a)};G.prototype.GetRestitution=function(){return Fn(this.e)};G.prototype.ResetRestitution=function(){Qi(this.e)};G.prototype.SetTangentSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lj(b,a)};G.prototype.GetTangentSpeed=function(){return Nn(this.e)};function xx(){c("cannot construct a b2Shape, no constructor in IDL")}xx.prototype=Object.create(j.prototype);xx.prototype.g=xx;xx.k={};
e.b2Shape=xx;xx.prototype.GetType=function(){return ro(this.e)};xx.prototype.GetChildCount=function(){return Ft(this.e)};xx.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return $g(f,a,b)};xx.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Gd(k,a,b,f,g)};
xx.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);tc(g,a,b,f)};xx.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ut(f,a,b)};xx.prototype.get_m_type=function(){return Pk(this.e)};xx.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qs(b,a)};xx.prototype.get_m_radius=function(){return Jr(this.e)};
xx.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ag(b,a)};xx.prototype.__destroy__=function(){zm(this.e)};function U(){this.e=fn();p(U)[this.e]=this}U.prototype=Object.create(D.prototype);U.prototype.g=U;U.k={};e.b2DistanceJointDef=U;U.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Kn(k,a,b,f,g)};
U.prototype.get_localAnchorA=function(){return q(Jj(this.e),u)};U.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Nw(b,a)};U.prototype.get_localAnchorB=function(){return q(Pq(this.e),u)};U.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xk(b,a)};U.prototype.get_length=function(){return Ae(this.e)};U.prototype.set_length=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ji(b,a)};U.prototype.get_frequencyHz=function(){return wo(this.e)};
U.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gk(b,a)};U.prototype.get_dampingRatio=function(){return nk(this.e)};U.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qg(b,a)};U.prototype.get_type=function(){return Ni(this.e)};U.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jq(b,a)};U.prototype.get_userData=function(){return ad(this.e)};
U.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yj(b,a)};U.prototype.get_bodyA=function(){return q(Bf(this.e),v)};U.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ls(b,a)};U.prototype.get_bodyB=function(){return q(mv(this.e),v)};U.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hq(b,a)};U.prototype.get_collideConnected=function(){return eq(this.e)};
U.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gu(b,a)};U.prototype.__destroy__=function(){xu(this.e)};function v(){c("cannot construct a b2Body, no constructor in IDL")}v.prototype=Object.create(j.prototype);v.prototype.g=v;v.k={};e.b2Body=v;v.prototype.CreateFixture=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return b===d?q(cm(f,a),w):q(dm(f,a,b),w)};
v.prototype.DestroyFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Un(b,a)};v.prototype.SetTransform=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);pf(f,a,b)};v.prototype.GetTransform=function(){return q($t(this.e),Ux)};v.prototype.GetPosition=function(){return q(Dh(this.e),u)};v.prototype.GetAngle=function(){return Ru(this.e)};v.prototype.GetWorldCenter=function(){return q(Yk(this.e),u)};
v.prototype.GetLocalCenter=function(){return q(Xv(this.e),u)};v.prototype.SetLinearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sl(b,a)};v.prototype.GetLinearVelocity=function(){return q(et(this.e),u)};v.prototype.SetAngularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ov(b,a)};v.prototype.GetAngularVelocity=function(){return Oj(this.e)};
v.prototype.ApplyForce=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);St(g,a,b,f)};v.prototype.ApplyForceToCenter=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);xf(f,a,b)};v.prototype.ApplyTorque=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);In(f,a,b)};
v.prototype.ApplyLinearImpulse=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Wl(g,a,b,f)};v.prototype.ApplyAngularImpulse=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);we(f,a,b)};v.prototype.GetMass=function(){return Co(this.e)};v.prototype.GetInertia=function(){return ks(this.e)};
v.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zh(b,a)};v.prototype.SetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ke(b,a)};v.prototype.ResetMassData=function(){Xr(this.e)};v.prototype.GetWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(yk(b,a),u)};v.prototype.GetWorldVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(ah(b,a),u)};
v.prototype.GetLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(lh(b,a),u)};v.prototype.GetLocalVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Rm(b,a),u)};v.prototype.GetLinearVelocityFromWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(nr(b,a),u)};v.prototype.GetLinearVelocityFromLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Vq(b,a),u)};v.prototype.GetLinearDamping=function(){return Vr(this.e)};
v.prototype.SetLinearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vm(b,a)};v.prototype.GetAngularDamping=function(){return $n(this.e)};v.prototype.SetAngularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cw(b,a)};v.prototype.GetGravityScale=function(){return Wg(this.e)};v.prototype.SetGravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sm(b,a)};v.prototype.SetType=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bo(b,a)};
v.prototype.GetType=function(){return Gr(this.e)};v.prototype.SetBullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jl(b,a)};v.prototype.IsBullet=function(){return Tl(this.e)};v.prototype.SetSleepingAllowed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lg(b,a)};v.prototype.IsSleepingAllowed=function(){return rq(this.e)};v.prototype.SetAwake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fv(b,a)};v.prototype.IsAwake=function(){return ee(this.e)};
v.prototype.SetActive=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fm(b,a)};v.prototype.IsActive=function(){return Pi(this.e)};v.prototype.SetFixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vh(b,a)};v.prototype.IsFixedRotation=function(){return Fi(this.e)};v.prototype.GetFixtureList=function(){return q(dp(this.e),w)};v.prototype.GetJointList=function(){return q(Kw(this.e),Sx)};v.prototype.GetContactList=function(){return q(Ei(this.e),$x)};
v.prototype.GetNext=function(){return q(Ev(this.e),v)};v.prototype.GetUserData=function(){return cl(this.e)};v.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pw(b,a)};v.prototype.GetWorld=function(){return q(cv(this.e),F)};v.prototype.Dump=function(){Wk(this.e)};function W(){c("cannot construct a b2FrictionJoint, no constructor in IDL")}W.prototype=Object.create(t.prototype);W.prototype.g=W;W.k={};e.b2FrictionJoint=W;
W.prototype.GetLocalAnchorA=function(){return q(op(this.e),u)};W.prototype.GetLocalAnchorB=function(){return q(Li(this.e),u)};W.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lu(b,a)};W.prototype.GetMaxForce=function(){return Sd(this.e)};W.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$p(b,a)};W.prototype.GetMaxTorque=function(){return kj(this.e)};W.prototype.GetType=function(){return Pg(this.e)};
W.prototype.GetBodyA=function(){return q(Lw(this.e),v)};W.prototype.GetBodyB=function(){return q(Af(this.e),v)};W.prototype.GetAnchorA=function(){return q(ms(this.e),u)};W.prototype.GetAnchorB=function(){return q(Kv(this.e),u)};W.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Iq(b,a),u)};W.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return km(b,a)};W.prototype.GetNext=function(){return q(fs(this.e),t)};
W.prototype.GetUserData=function(){return Rr(this.e)};W.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bq(b,a)};W.prototype.IsActive=function(){return yc(this.e)};W.prototype.GetCollideConnected=function(){return Rp(this.e)};W.prototype.__destroy__=function(){kp(this.e)};function ay(){c("cannot construct a b2DestructionListener, no constructor in IDL")}ay.prototype=Object.create(j.prototype);ay.prototype.g=ay;ay.k={};e.b2DestructionListener=ay;
ay.prototype.__destroy__=function(){Uc(this.e)};function X(){this.e=zn();p(X)[this.e]=this}X.prototype=Object.create(D.prototype);X.prototype.g=X;X.k={};e.b2GearJointDef=X;X.prototype.get_joint1=function(){return q(cj(this.e),t)};X.prototype.set_joint1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jr(b,a)};X.prototype.get_joint2=function(){return q(bg(this.e),t)};X.prototype.set_joint2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ku(b,a)};X.prototype.get_ratio=function(){return Cp(this.e)};
X.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gj(b,a)};X.prototype.get_type=function(){return Nm(this.e)};X.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gf(b,a)};X.prototype.get_userData=function(){return wi(this.e)};X.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nw(b,a)};X.prototype.get_bodyA=function(){return q(fk(this.e),v)};
X.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ui(b,a)};X.prototype.get_bodyB=function(){return q(Xg(this.e),v)};X.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ew(b,a)};X.prototype.get_collideConnected=function(){return gl(this.e)};X.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pt(b,a)};X.prototype.__destroy__=function(){Qq(this.e)};
function Y(){c("cannot construct a b2RevoluteJoint, no constructor in IDL")}Y.prototype=Object.create(t.prototype);Y.prototype.g=Y;Y.k={};e.b2RevoluteJoint=Y;Y.prototype.GetLocalAnchorA=function(){return q(Gc(this.e),u)};Y.prototype.GetLocalAnchorB=function(){return q(it(this.e),u)};Y.prototype.GetReferenceAngle=function(){return tl(this.e)};Y.prototype.GetJointAngle=function(){return hh(this.e)};Y.prototype.GetJointSpeed=function(){return Ef(this.e)};Y.prototype.IsLimitEnabled=function(){return Qv(this.e)};
Y.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ol(b,a)};Y.prototype.GetLowerLimit=function(){return Xk(this.e)};Y.prototype.GetUpperLimit=function(){return oe(this.e)};Y.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Ms(f,a,b)};Y.prototype.IsMotorEnabled=function(){return ge(this.e)};Y.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jp(b,a)};
Y.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xo(b,a)};Y.prototype.GetMotorSpeed=function(){return Tg(this.e)};Y.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kw(b,a)};Y.prototype.GetMaxMotorTorque=function(){return vk(this.e)};Y.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Jc(b,a)};Y.prototype.GetType=function(){return Tn(this.e)};
Y.prototype.GetBodyA=function(){return q(Xj(this.e),v)};Y.prototype.GetBodyB=function(){return q(ol(this.e),v)};Y.prototype.GetAnchorA=function(){return q(bs(this.e),u)};Y.prototype.GetAnchorB=function(){return q(ov(this.e),u)};Y.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Hu(b,a),u)};Y.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Nh(b,a)};Y.prototype.GetNext=function(){return q(pv(this.e),t)};
Y.prototype.GetUserData=function(){return ti(this.e)};Y.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Uv(b,a)};Y.prototype.IsActive=function(){return yv(this.e)};Y.prototype.GetCollideConnected=function(){return ru(this.e)};Y.prototype.__destroy__=function(){Md(this.e)};function Yx(){c("cannot construct a b2ContactFilter, no constructor in IDL")}Yx.prototype=Object.create(j.prototype);Yx.prototype.g=Yx;Yx.k={};e.b2ContactFilter=Yx;Yx.prototype.__destroy__=function(){Cg(this.e)};
function $x(){this.e=Fs();p($x)[this.e]=this}$x.prototype=Object.create(j.prototype);$x.prototype.g=$x;$x.k={};e.b2ContactEdge=$x;$x.prototype.get_other=function(){return q(zj(this.e),v)};$x.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qj(b,a)};$x.prototype.get_contact=function(){return q(Gn(this.e),G)};$x.prototype.set_contact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qi(b,a)};$x.prototype.get_prev=function(){return q(Fh(this.e),$x)};
$x.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$j(b,a)};$x.prototype.get_next=function(){return q(lr(this.e),$x)};$x.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qc(b,a)};$x.prototype.__destroy__=function(){au(this.e)};function Z(){this.e=Dk();p(Z)[this.e]=this}Z.prototype=Object.create(D.prototype);Z.prototype.g=Z;Z.k={};e.b2RopeJointDef=Z;Z.prototype.get_localAnchorA=function(){return q(pi(this.e),u)};
Z.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bc(b,a)};Z.prototype.get_localAnchorB=function(){return q(cd(this.e),u)};Z.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lw(b,a)};Z.prototype.get_maxLength=function(){return hl(this.e)};Z.prototype.set_maxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kl(b,a)};Z.prototype.get_type=function(){return Nq(this.e)};
Z.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ql(b,a)};Z.prototype.get_userData=function(){return nh(this.e)};Z.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xo(b,a)};Z.prototype.get_bodyA=function(){return q(mk(this.e),v)};Z.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yu(b,a)};Z.prototype.get_bodyB=function(){return q(uw(this.e),v)};
Z.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Fe(b,a)};Z.prototype.get_collideConnected=function(){return di(this.e)};Z.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xd(b,a)};Z.prototype.__destroy__=function(){Us(this.e)};function $(){this.e=yh();p($)[this.e]=this}$.prototype=Object.create(D.prototype);$.prototype.g=$;$.k={};e.b2MotorJointDef=$;
$.prototype.Initialize=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);kd(f,a,b)};$.prototype.get_linearOffset=function(){return q(Gm(this.e),u)};$.prototype.set_linearOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oo(b,a)};$.prototype.get_angularOffset=function(){return Qt(this.e)};$.prototype.set_angularOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ph(b,a)};$.prototype.get_maxForce=function(){return $c(this.e)};
$.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pg(b,a)};$.prototype.get_maxTorque=function(){return Uq(this.e)};$.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Uu(b,a)};$.prototype.get_correctionFactor=function(){return Av(this.e)};$.prototype.set_correctionFactor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xj(b,a)};$.prototype.get_type=function(){return Or(this.e)};
$.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kc(b,a)};$.prototype.get_userData=function(){return Bu(this.e)};$.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vd(b,a)};$.prototype.get_bodyA=function(){return q(Ew(this.e),v)};$.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ul(b,a)};$.prototype.get_bodyB=function(){return q(Fk(this.e),v)};
$.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xs(b,a)};$.prototype.get_collideConnected=function(){return ne(this.e)};$.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);us(b,a)};$.prototype.__destroy__=function(){Os(this.e)};e.b2Shape.e_circle=Sk();e.b2Shape.e_edge=uk();e.b2Shape.e_polygon=Oc();e.b2Shape.e_chain=Hh();e.b2Shape.e_typeCount=of();e.e_unknownJoint=Gv();e.e_revoluteJoint=ce();e.e_prismaticJoint=yr();
e.e_distanceJoint=Fo();e.e_pulleyJoint=Yf();e.e_mouseJoint=ae();e.e_gearJoint=Gt();e.e_wheelJoint=Zr();e.e_weldJoint=$m();e.e_frictionJoint=xe();e.e_ropeJoint=rs();e.e_motorJoint=Po();e.e_inactiveLimit=dv();e.e_atLowerLimit=On();e.e_atUpperLimit=Xw();e.e_equalLimits=Ci();e.b2Manifold.e_circles=co();e.b2Manifold.e_faceA=ok();e.b2Manifold.e_faceB=pk();e.b2_staticBody=Km();e.b2_kinematicBody=Yq();e.b2_dynamicBody=Sq();e.b2Draw.e_shapeBit=Gi();e.b2Draw.e_jointBit=qg();e.b2Draw.e_aabbBit=Pu();
e.b2Draw.e_pairBit=jp();e.b2Draw.e_centerOfMassBit=iw();e.b2ContactFeature.e_vertex=Ih();e.b2ContactFeature.e_face=tm();function j(){}j.prototype=Object.create(j.prototype);j.prototype.g=j;j.k={};e.WrapperObject=j;function p(a){return(a||j).k}e.getCache=p;function q(a,b){var f=p(b),g=f[a];if(g)return g;g=Object.create((b||j).prototype);g.e=a;return f[a]=g}e.wrapPointer=q;function nx(a,b){return q(a.e,b)}e.castObject=nx;e.NULL=q(0);
function ox(a){a.__destroy__||c("Error: Cannot destroy object. (Did you create it yourself?)");a.__destroy__();delete p(a.g)[a.e]}e.destroy=ox;function px(a,b){return a.e===b.e}e.compare=px;function qx(a){return a.e}e.getPointer=qx;function rx(a){return a.g}e.getClass=rx;function r(a){return"string"==typeof a?$a(Ab(a),"i8",Wa):a}function sx(){this.e=yf();p(sx)[this.e]=this}sx.prototype=Object.create(tx.prototype);sx.prototype.g=sx;sx.k={};e.JSDestructionListener=sx;
sx.prototype.SayGoodbyeJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ym(b,a)};sx.prototype.SayGoodbyeFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vq(b,a)};sx.prototype.__destroy__=function(){Nr(this.e)};function ux(){c("cannot construct a b2ContactImpulse, no constructor in IDL")}ux.prototype=Object.create(j.prototype);ux.prototype.g=ux;ux.k={};e.b2ContactImpulse=ux;ux.prototype.get_count=function(){return Xn(this.e)};
ux.prototype.set_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kh(b,a)};ux.prototype.__destroy__=function(){tf(this.e)};function s(){c("cannot construct a b2DistanceJoint, no constructor in IDL")}s.prototype=Object.create(t.prototype);s.prototype.g=s;s.k={};e.b2DistanceJoint=s;s.prototype.GetLocalAnchorA=function(){return q(Es(this.e),u)};s.prototype.GetLocalAnchorB=function(){return q(Ki(this.e),u)};
s.prototype.SetLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vv(b,a)};s.prototype.GetLength=function(){return Jl(this.e)};s.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gh(b,a)};s.prototype.GetFrequency=function(){return rm(this.e)};s.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hf(b,a)};s.prototype.GetDampingRatio=function(){return Xh(this.e)};s.prototype.GetType=function(){return kl(this.e)};
s.prototype.GetBodyA=function(){return q(ej(this.e),v)};s.prototype.GetBodyB=function(){return q(Rv(this.e),v)};s.prototype.GetAnchorA=function(){return q(ud(this.e),u)};s.prototype.GetAnchorB=function(){return q(th(this.e),u)};s.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Bn(b,a),u)};s.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return gt(b,a)};s.prototype.GetNext=function(){return q(Re(this.e),t)};
s.prototype.GetUserData=function(){return Qw(this.e)};s.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rn(b,a)};s.prototype.IsActive=function(){return oh(this.e)};s.prototype.GetCollideConnected=function(){return Ut(this.e)};s.prototype.__destroy__=function(){ur(this.e)};
function vx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Yg():b===d?_emscripten_bind_b2Mat33_b2Mat33_1(a):f===d?_emscripten_bind_b2Mat33_b2Mat33_2(a,b):mu(a,b,f);p(vx)[this.e]=this}vx.prototype=Object.create(j.prototype);vx.prototype.g=vx;vx.k={};e.b2Mat33=vx;vx.prototype.SetZero=function(){Tu(this.e)};vx.prototype.Solve33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Dp(b,a),wx)};
vx.prototype.Solve22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Ag(b,a),u)};vx.prototype.GetInverse22=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hn(b,a)};vx.prototype.GetSymInverse33=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vl(b,a)};vx.prototype.get_ex=function(){return q(Ch(this.e),wx)};vx.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bu(b,a)};vx.prototype.get_ey=function(){return q(md(this.e),wx)};
vx.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mi(b,a)};vx.prototype.get_ez=function(){return q(Uw(this.e),wx)};vx.prototype.set_ez=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Du(b,a)};vx.prototype.__destroy__=function(){Id(this.e)};function w(){c("cannot construct a b2Fixture, no constructor in IDL")}w.prototype=Object.create(j.prototype);w.prototype.g=w;w.k={};e.b2Fixture=w;w.prototype.GetType=function(){return ml(this.e)};
w.prototype.GetShape=function(){return q(sv(this.e),xx)};w.prototype.SetSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bj(b,a)};w.prototype.IsSensor=function(){return Yo(this.e)};w.prototype.SetFilterData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gi(b,a)};w.prototype.GetFilterData=function(){return q(st(this.e),yx)};w.prototype.Refilter=function(){Vo(this.e)};w.prototype.GetBody=function(){return q(Jh(this.e),v)};
w.prototype.GetNext=function(){return q(bk(this.e),w)};w.prototype.GetUserData=function(){return gm(this.e)};w.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hr(b,a)};w.prototype.TestPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return qu(b,a)};w.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);return el(g,a,b,f)};
w.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ij(b,a)};w.prototype.SetDensity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oh(b,a)};w.prototype.GetDensity=function(){return Up(this.e)};w.prototype.GetFriction=function(){return Ou(this.e)};w.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sc(b,a)};w.prototype.GetRestitution=function(){return We(this.e)};
w.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zt(b,a)};w.prototype.GetAABB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Jn(b,a),zx)};w.prototype.Dump=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);on(b,a)};w.prototype.__destroy__=function(){Pc(this.e)};function yx(){this.e=Ap();p(yx)[this.e]=this}yx.prototype=Object.create(j.prototype);yx.prototype.g=yx;yx.k={};e.b2Filter=yx;yx.prototype.get_categoryBits=function(){return Zm(this.e)};
yx.prototype.set_categoryBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mk(b,a)};yx.prototype.get_maskBits=function(){return bp(this.e)};yx.prototype.set_maskBits=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ss(b,a)};yx.prototype.get_groupIndex=function(){return Ue(this.e)};yx.prototype.set_groupIndex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wn(b,a)};yx.prototype.__destroy__=function(){go(this.e)};function Ax(){this.e=iq();p(Ax)[this.e]=this}
Ax.prototype=Object.create(Bx.prototype);Ax.prototype.g=Ax;Ax.k={};e.JSQueryCallback=Ax;Ax.prototype.ReportFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return pu(b,a)};Ax.prototype.__destroy__=function(){Jo(this.e)};function y(){c("cannot construct a b2MouseJoint, no constructor in IDL")}y.prototype=Object.create(t.prototype);y.prototype.g=y;y.k={};e.b2MouseJoint=y;y.prototype.SetTarget=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);oi(b,a)};
y.prototype.GetTarget=function(){return q(Kt(this.e),u)};y.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Aq(b,a)};y.prototype.GetMaxForce=function(){return Vt(this.e)};y.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zl(b,a)};y.prototype.GetFrequency=function(){return Dt(this.e)};y.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qk(b,a)};y.prototype.GetDampingRatio=function(){return as(this.e)};
y.prototype.GetType=function(){return Io(this.e)};y.prototype.GetBodyA=function(){return q(So(this.e),v)};y.prototype.GetBodyB=function(){return q(Cj(this.e),v)};y.prototype.GetAnchorA=function(){return q(tu(this.e),u)};y.prototype.GetAnchorB=function(){return q(Xq(this.e),u)};y.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(jm(b,a),u)};y.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return mo(b,a)};
y.prototype.GetNext=function(){return q(Xi(this.e),t)};y.prototype.GetUserData=function(){return no(this.e)};y.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mt(b,a)};y.prototype.IsActive=function(){return nd(this.e)};y.prototype.GetCollideConnected=function(){return Bi(this.e)};y.prototype.__destroy__=function(){Gq(this.e)};function Cx(a){a=a&&"object"===typeof a?a.e:r(a);this.e=a===d?Do():Eo(a);p(Cx)[this.e]=this}Cx.prototype=Object.create(j.prototype);
Cx.prototype.g=Cx;Cx.k={};e.b2Rot=Cx;Cx.prototype.Set=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wg(b,a)};Cx.prototype.SetIdentity=function(){Mg(this.e)};Cx.prototype.GetAngle=function(){return Np(this.e)};Cx.prototype.GetXAxis=function(){return q(Zj(this.e),u)};Cx.prototype.GetYAxis=function(){return q(sr(this.e),u)};Cx.prototype.get_s=function(){return Zp(this.e)};Cx.prototype.set_s=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);me(b,a)};Cx.prototype.get_c=function(){return xq(this.e)};
Cx.prototype.set_c=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mh(b,a)};Cx.prototype.__destroy__=function(){ap(this.e)};function z(){c("cannot construct a b2MotorJoint, no constructor in IDL")}z.prototype=Object.create(t.prototype);z.prototype.g=z;z.k={};e.b2MotorJoint=z;z.prototype.SetLinearOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lp(b,a)};z.prototype.GetLinearOffset=function(){return q(Qp(this.e),u)};
z.prototype.SetAngularOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pp(b,a)};z.prototype.GetAngularOffset=function(){return xv(this.e)};z.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mp(b,a)};z.prototype.GetMaxForce=function(){return Wj(this.e)};z.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zd(b,a)};z.prototype.GetMaxTorque=function(){return es(this.e)};
z.prototype.SetCorrectionFactor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ie(b,a)};z.prototype.GetCorrectionFactor=function(){return tq(this.e)};z.prototype.GetType=function(){return cr(this.e)};z.prototype.GetBodyA=function(){return q(Rg(this.e),v)};z.prototype.GetBodyB=function(){return q(mi(this.e),v)};z.prototype.GetAnchorA=function(){return q(Tp(this.e),u)};z.prototype.GetAnchorB=function(){return q(rv(this.e),u)};
z.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Mp(b,a),u)};z.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Uf(b,a)};z.prototype.GetNext=function(){return q(zr(this.e),t)};z.prototype.GetUserData=function(){return Nk(this.e)};z.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ki(b,a)};z.prototype.IsActive=function(){return lo(this.e)};z.prototype.GetCollideConnected=function(){return ff(this.e)};
z.prototype.__destroy__=function(){bl(this.e)};function A(){c("cannot construct a b2Profile, no constructor in IDL")}A.prototype=Object.create(j.prototype);A.prototype.g=A;A.k={};e.b2Profile=A;A.prototype.get_step=function(){return Ik(this.e)};A.prototype.set_step=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pj(b,a)};A.prototype.get_collide=function(){return At(this.e)};A.prototype.set_collide=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);To(b,a)};
A.prototype.get_solve=function(){return uq(this.e)};A.prototype.set_solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kt(b,a)};A.prototype.get_solveInit=function(){return Iv(this.e)};A.prototype.set_solveInit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pl(b,a)};A.prototype.get_solveVelocity=function(){return aw(this.e)};A.prototype.set_solveVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hm(b,a)};A.prototype.get_solvePosition=function(){return Fd(this.e)};
A.prototype.set_solvePosition=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bg(b,a)};A.prototype.get_broadphase=function(){return qd(this.e)};A.prototype.set_broadphase=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vn(b,a)};A.prototype.get_solveTOI=function(){return Hg(this.e)};A.prototype.set_solveTOI=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ui(b,a)};A.prototype.__destroy__=function(){Eh(this.e)};
function Dx(){c("cannot construct a VoidPtr, no constructor in IDL")}Dx.prototype=Object.create(j.prototype);Dx.prototype.g=Dx;Dx.k={};e.VoidPtr=Dx;Dx.prototype.__destroy__=function(){yp(this.e)};function B(){this.e=vw();p(B)[this.e]=this}B.prototype=Object.create(j.prototype);B.prototype.g=B;B.k={};e.b2BodyDef=B;B.prototype.get_type=function(){return Lr(this.e)};B.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vc(b,a)};
B.prototype.get_position=function(){return q(bd(this.e),u)};B.prototype.set_position=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qd(b,a)};B.prototype.get_angle=function(){return hu(this.e)};B.prototype.set_angle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pl(b,a)};B.prototype.get_linearVelocity=function(){return q(lv(this.e),u)};B.prototype.set_linearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$k(b,a)};B.prototype.get_angularVelocity=function(){return Le(this.e)};
B.prototype.set_angularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Um(b,a)};B.prototype.get_linearDamping=function(){return Ek(this.e)};B.prototype.set_linearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qr(b,a)};B.prototype.get_angularDamping=function(){return fr(this.e)};B.prototype.set_angularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jv(b,a)};B.prototype.get_allowSleep=function(){return Zu(this.e)};
B.prototype.set_allowSleep=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mj(b,a)};B.prototype.get_awake=function(){return dr(this.e)};B.prototype.set_awake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);am(b,a)};B.prototype.get_fixedRotation=function(){return io(this.e)};B.prototype.set_fixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tk(b,a)};B.prototype.get_bullet=function(){return Kf(this.e)};
B.prototype.set_bullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sn(b,a)};B.prototype.get_active=function(){return Nj(this.e)};B.prototype.set_active=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wk(b,a)};B.prototype.get_userData=function(){return Mv(this.e)};B.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lu(b,a)};B.prototype.get_gravityScale=function(){return qo(this.e)};
B.prototype.set_gravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ee(b,a)};B.prototype.__destroy__=function(){Gs(this.e)};function Ex(){this.e=kg();p(Ex)[this.e]=this}Ex.prototype=Object.create(Fx.prototype);Ex.prototype.g=Ex;Ex.k={};e.JSRayCastCallback=Ex;Ex.prototype.ReportFixture=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Fm(k,a,b,f,g)};
Ex.prototype.__destroy__=function(){gp(this.e)};function Gx(){c("cannot construct a b2ContactFeature, no constructor in IDL")}Gx.prototype=Object.create(j.prototype);Gx.prototype.g=Gx;Gx.k={};e.b2ContactFeature=Gx;Gx.prototype.get_indexA=function(){return xh(this.e)};Gx.prototype.set_indexA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hv(b,a)};Gx.prototype.get_indexB=function(){return Jw(this.e)};
Gx.prototype.set_indexB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);mr(b,a)};Gx.prototype.get_typeA=function(){return im(this.e)};Gx.prototype.set_typeA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nn(b,a)};Gx.prototype.get_typeB=function(){return Kp(this.e)};Gx.prototype.set_typeB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xg(b,a)};Gx.prototype.__destroy__=function(){gq(this.e)};
function u(a,b){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);this.e=a===d?sh():b===d?_emscripten_bind_b2Vec2_b2Vec2_1(a):qh(a,b);p(u)[this.e]=this}u.prototype=Object.create(j.prototype);u.prototype.g=u;u.k={};e.b2Vec2=u;u.prototype.SetZero=function(){Br(this.e)};u.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Wp(f,a,b)};u.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rf(b,a)};
u.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vh(b,a)};u.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sj(b,a)};u.prototype.Length=function(){return Ar(this.e)};u.prototype.LengthSquared=function(){return Gw(this.e)};u.prototype.Normalize=function(){return gg(this.e)};u.prototype.IsValid=function(){return rp(this.e)};u.prototype.Skew=function(){return q($r(this.e),u)};u.prototype.get_x=function(){return ex(this.e)};
u.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vf(b,a)};u.prototype.get_y=function(){return bm(this.e)};u.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sw(b,a)};u.prototype.__destroy__=function(){hv(this.e)};
function wx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Jk():b===d?_emscripten_bind_b2Vec3_b2Vec3_1(a):f===d?_emscripten_bind_b2Vec3_b2Vec3_2(a,b):Kk(a,b,f);p(wx)[this.e]=this}wx.prototype=Object.create(j.prototype);wx.prototype.g=wx;wx.k={};e.b2Vec3=wx;wx.prototype.SetZero=function(){Xf(this.e)};
wx.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);ak(g,a,b,f)};wx.prototype.op_add=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Og(b,a)};wx.prototype.op_sub=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);po(b,a)};wx.prototype.op_mul=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uv(b,a)};wx.prototype.get_x=function(){return Bd(this.e)};
wx.prototype.set_x=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wm(b,a)};wx.prototype.get_y=function(){return nu(this.e)};wx.prototype.set_y=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lq(b,a)};wx.prototype.get_z=function(){return vc(this.e)};wx.prototype.set_z=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pm(b,a)};wx.prototype.__destroy__=function(){Rh(this.e)};function zx(){this.e=Uo();p(zx)[this.e]=this}zx.prototype=Object.create(j.prototype);
zx.prototype.g=zx;zx.k={};e.b2AABB=zx;zx.prototype.IsValid=function(){return so(this.e)};zx.prototype.GetCenter=function(){return q(vn(this.e),u)};zx.prototype.GetExtents=function(){return q(cu(this.e),u)};zx.prototype.GetPerimeter=function(){return um(this.e)};zx.prototype.Combine=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);b===d?mq(f,a):nq(f,a,b)};zx.prototype.Contains=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Qe(b,a)};
zx.prototype.RayCast=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return zl(f,a,b)};zx.prototype.get_lowerBound=function(){return q(He(this.e),u)};zx.prototype.set_lowerBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yq(b,a)};zx.prototype.get_upperBound=function(){return q(Ze(this.e),u)};zx.prototype.set_upperBound=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rf(b,a)};zx.prototype.__destroy__=function(){qq(this.e)};
function Hx(){this.e=rk();p(Hx)[this.e]=this}Hx.prototype=Object.create(j.prototype);Hx.prototype.g=Hx;Hx.k={};e.b2FixtureDef=Hx;Hx.prototype.get_shape=function(){return q(ju(this.e),xx)};Hx.prototype.set_shape=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zv(b,a)};Hx.prototype.get_userData=function(){return re(this.e)};Hx.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cq(b,a)};Hx.prototype.get_friction=function(){return Ht(this.e)};
Hx.prototype.set_friction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cm(b,a)};Hx.prototype.get_restitution=function(){return ll(this.e)};Hx.prototype.set_restitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jd(b,a)};Hx.prototype.get_density=function(){return je(this.e)};Hx.prototype.set_density=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ps(b,a)};Hx.prototype.get_isSensor=function(){return rg(this.e)};
Hx.prototype.set_isSensor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Al(b,a)};Hx.prototype.get_filter=function(){return q(Hc(this.e),yx)};Hx.prototype.set_filter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ei(b,a)};Hx.prototype.__destroy__=function(){Yv(this.e)};function C(){this.e=wl();p(C)[this.e]=this}C.prototype=Object.create(D.prototype);C.prototype.g=C;C.k={};e.b2FrictionJointDef=C;
C.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);mw(g,a,b,f)};C.prototype.get_localAnchorA=function(){return q(If(this.e),u)};C.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ig(b,a)};C.prototype.get_localAnchorB=function(){return q(Mj(this.e),u)};C.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ck(b,a)};
C.prototype.get_maxForce=function(){return Tm(this.e)};C.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);en(b,a)};C.prototype.get_maxTorque=function(){return np(this.e)};C.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hs(b,a)};C.prototype.get_type=function(){return Ic(this.e)};C.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hs(b,a)};C.prototype.get_userData=function(){return hi(this.e)};
C.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uc(b,a)};C.prototype.get_bodyA=function(){return q(Fu(this.e),v)};C.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hw(b,a)};C.prototype.get_bodyB=function(){return q(Bq(this.e),v)};C.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ys(b,a)};C.prototype.get_collideConnected=function(){return js(this.e)};
C.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);se(b,a)};C.prototype.__destroy__=function(){yi(this.e)};function Ix(){this.e=cn();p(Ix)[this.e]=this}Ix.prototype=Object.create(j.prototype);Ix.prototype.g=Ix;Ix.k={};e.b2Manifold=Ix;Ix.prototype.get_localNormal=function(){return q(yl(this.e),u)};Ix.prototype.set_localNormal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tr(b,a)};Ix.prototype.get_localPoint=function(){return q(Zq(this.e),u)};
Ix.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qn(b,a)};Ix.prototype.get_type=function(){return Ld(this.e)};Ix.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Il(b,a)};Ix.prototype.get_pointCount=function(){return Tw(this.e)};Ix.prototype.set_pointCount=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jg(b,a)};Ix.prototype.__destroy__=function(){dh(this.e)};function E(){this.e=uf();p(E)[this.e]=this}E.prototype=Object.create(D.prototype);
E.prototype.g=E;E.k={};e.b2PrismaticJointDef=E;E.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Hf(k,a,b,f,g)};E.prototype.get_localAnchorA=function(){return q(tj(this.e),u)};E.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);It(b,a)};E.prototype.get_localAnchorB=function(){return q(mf(this.e),u)};
E.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ip(b,a)};E.prototype.get_localAxisA=function(){return q(Vu(this.e),u)};E.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mn(b,a)};E.prototype.get_referenceAngle=function(){return Je(this.e)};E.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ci(b,a)};E.prototype.get_enableLimit=function(){return qt(this.e)};
E.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qm(b,a)};E.prototype.get_lowerTranslation=function(){return te(this.e)};E.prototype.set_lowerTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pd(b,a)};E.prototype.get_upperTranslation=function(){return Ec(this.e)};E.prototype.set_upperTranslation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gv(b,a)};E.prototype.get_enableMotor=function(){return Ws(this.e)};
E.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yr(b,a)};E.prototype.get_maxMotorForce=function(){return Ow(this.e)};E.prototype.set_maxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ti(b,a)};E.prototype.get_motorSpeed=function(){return $o(this.e)};E.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jo(b,a)};E.prototype.get_type=function(){return Mf(this.e)};
E.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vi(b,a)};E.prototype.get_userData=function(){return Vj(this.e)};E.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gs(b,a)};E.prototype.get_bodyA=function(){return q(qp(this.e),v)};E.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sp(b,a)};E.prototype.get_bodyB=function(){return q(rl(this.e),v)};
E.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vl(b,a)};E.prototype.get_collideConnected=function(){return wt(this.e)};E.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ln(b,a)};E.prototype.__destroy__=function(){Ne(this.e)};function F(a){a=a&&"object"===typeof a?a.e:r(a);this.e=Of(a);p(F)[this.e]=this}F.prototype=Object.create(j.prototype);F.prototype.g=F;F.k={};e.b2World=F;
F.prototype.SetDestructionListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Df(b,a)};F.prototype.SetContactFilter=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fd(b,a)};F.prototype.SetContactListener=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);de(b,a)};F.prototype.SetDebugDraw=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cg(b,a)};F.prototype.CreateBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Wo(b,a),v)};
F.prototype.DestroyBody=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ed(b,a)};F.prototype.CreateJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Gg(b,a),t)};F.prototype.DestroyJoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dr(b,a)};F.prototype.Step=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Gk(g,a,b,f)};F.prototype.ClearForces=function(){Qh(this.e)};
F.prototype.DrawDebugData=function(){pd(this.e)};F.prototype.QueryAABB=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Lv(f,a,b)};F.prototype.RayCast=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);xt(g,a,b,f)};F.prototype.GetBodyList=function(){return q(tt(this.e),v)};F.prototype.GetJointList=function(){return q(pn(this.e),t)};
F.prototype.GetContactList=function(){return q(Cu(this.e),G)};F.prototype.SetAllowSleeping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Op(b,a)};F.prototype.GetAllowSleeping=function(){return Ri(this.e)};F.prototype.SetWarmStarting=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rc(b,a)};F.prototype.GetWarmStarting=function(){return tp(this.e)};F.prototype.SetContinuousPhysics=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);an(b,a)};
F.prototype.GetContinuousPhysics=function(){return dl(this.e)};F.prototype.SetSubStepping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qf(b,a)};F.prototype.GetSubStepping=function(){return rr(this.e)};F.prototype.GetProxyCount=function(){return fg(this.e)};F.prototype.GetBodyCount=function(){return hj(this.e)};F.prototype.GetJointCount=function(){return Yn(this.e)};F.prototype.GetContactCount=function(){return wj(this.e)};F.prototype.GetTreeHeight=function(){return $u(this.e)};
F.prototype.GetTreeBalance=function(){return Dc(this.e)};F.prototype.GetTreeQuality=function(){return De(this.e)};F.prototype.SetGravity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wt(b,a)};F.prototype.GetGravity=function(){return q(od(this.e),u)};F.prototype.IsLocked=function(){return wc(this.e)};F.prototype.SetAutoClearForces=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Od(b,a)};F.prototype.GetAutoClearForces=function(){return Rk(this.e)};
F.prototype.GetProfile=function(){return q(wu(this.e),A)};F.prototype.Dump=function(){ht(this.e)};F.prototype.__destroy__=function(){yo(this.e)};function H(){c("cannot construct a b2PrismaticJoint, no constructor in IDL")}H.prototype=Object.create(t.prototype);H.prototype.g=H;H.k={};e.b2PrismaticJoint=H;H.prototype.GetLocalAnchorA=function(){return q(Ok(this.e),u)};H.prototype.GetLocalAnchorB=function(){return q(Ho(this.e),u)};H.prototype.GetLocalAxisA=function(){return q(li(this.e),u)};
H.prototype.GetReferenceAngle=function(){return Ml(this.e)};H.prototype.GetJointTranslation=function(){return rh(this.e)};H.prototype.GetJointSpeed=function(){return Cn(this.e)};H.prototype.IsLimitEnabled=function(){return tw(this.e)};H.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sm(b,a)};H.prototype.GetLowerLimit=function(){return Ge(this.e)};H.prototype.GetUpperLimit=function(){return at(this.e)};
H.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);sd(f,a,b)};H.prototype.IsMotorEnabled=function(){return El(this.e)};H.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cs(b,a)};H.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tt(b,a)};H.prototype.GetMotorSpeed=function(){return Kg(this.e)};
H.prototype.SetMaxMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$w(b,a)};H.prototype.GetMaxMotorForce=function(){return pq(this.e)};H.prototype.GetMotorForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return dj(b,a)};H.prototype.GetType=function(){return Ve(this.e)};H.prototype.GetBodyA=function(){return q(oq(this.e),v)};H.prototype.GetBodyB=function(){return q(eu(this.e),v)};H.prototype.GetAnchorA=function(){return q(Cl(this.e),u)};
H.prototype.GetAnchorB=function(){return q(Im(this.e),u)};H.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(zi(b,a),u)};H.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return kh(b,a)};H.prototype.GetNext=function(){return q(Te(this.e),t)};H.prototype.GetUserData=function(){return is(this.e)};H.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sk(b,a)};H.prototype.IsActive=function(){return Ym(this.e)};
H.prototype.GetCollideConnected=function(){return mh(this.e)};H.prototype.__destroy__=function(){Fg(this.e)};function Jx(){c("cannot construct a b2RayCastOutput, no constructor in IDL")}Jx.prototype=Object.create(j.prototype);Jx.prototype.g=Jx;Jx.k={};e.b2RayCastOutput=Jx;Jx.prototype.get_normal=function(){return q(ng(this.e),u)};Jx.prototype.set_normal=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wh(b,a)};Jx.prototype.get_fraction=function(){return bo(this.e)};
Jx.prototype.set_fraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ye(b,a)};Jx.prototype.__destroy__=function(){tn(this.e)};function Kx(){c("cannot construct a b2ContactID, no constructor in IDL")}Kx.prototype=Object.create(j.prototype);Kx.prototype.g=Kx;Kx.k={};e.b2ContactID=Kx;Kx.prototype.get_cf=function(){return q(bt(this.e),Gx)};Kx.prototype.set_cf=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yj(b,a)};Kx.prototype.get_key=function(){return Nv(this.e)};
Kx.prototype.set_key=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dg(b,a)};Kx.prototype.__destroy__=function(){Dm(this.e)};function tx(){c("cannot construct a b2DestructionListenerWrapper, no constructor in IDL")}tx.prototype=Object.create(j.prototype);tx.prototype.g=tx;tx.k={};e.b2DestructionListenerWrapper=tx;tx.prototype.__destroy__=function(){Vw(this.e)};function Lx(){this.e=fx();p(Lx)[this.e]=this}Lx.prototype=Object.create(Mx.prototype);Lx.prototype.g=Lx;Lx.k={};
e.JSContactListener=Lx;Lx.prototype.BeginContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);No(b,a)};Lx.prototype.EndContact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zd(b,a)};Lx.prototype.PreSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Uh(f,a,b)};Lx.prototype.PostSolve=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Lq(f,a,b)};Lx.prototype.__destroy__=function(){Zk(this.e)};
function Nx(a,b,f,g){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);g=g&&"object"===typeof g?g.e:r(g);this.e=a===d?Wq():b===d?_emscripten_bind_b2Mat22_b2Mat22_1(a):f===d?vs(a,b):g===d?_emscripten_bind_b2Mat22_b2Mat22_3(a,b,f):zs(a,b,f,g);p(Nx)[this.e]=this}Nx.prototype=Object.create(j.prototype);Nx.prototype.g=Nx;Nx.k={};e.b2Mat22=Nx;
Nx.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Fr(f,a,b)};Nx.prototype.SetIdentity=function(){Xu(this.e)};Nx.prototype.SetZero=function(){Xt(this.e)};Nx.prototype.GetInverse=function(){return q(Bs(this.e),Nx)};Nx.prototype.Solve=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(wp(b,a),u)};Nx.prototype.get_ex=function(){return q(cp(this.e),u)};
Nx.prototype.set_ex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gw(b,a)};Nx.prototype.get_ey=function(){return q(Wu(this.e),u)};Nx.prototype.set_ey=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pr(b,a)};Nx.prototype.__destroy__=function(){nv(this.e)};function I(){this.e=Cw();p(I)[this.e]=this}I.prototype=Object.create(D.prototype);I.prototype.g=I;I.k={};e.b2WheelJointDef=I;
I.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Rj(k,a,b,f,g)};I.prototype.get_localAnchorA=function(){return q(Rl(this.e),u)};I.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zf(b,a)};I.prototype.get_localAnchorB=function(){return q(Wn(this.e),u)};
I.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mw(b,a)};I.prototype.get_localAxisA=function(){return q(Ij(this.e),u)};I.prototype.set_localAxisA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Aw(b,a)};I.prototype.get_enableMotor=function(){return Fw(this.e)};I.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qe(b,a)};I.prototype.get_maxMotorTorque=function(){return uh(this.e)};
I.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xs(b,a)};I.prototype.get_motorSpeed=function(){return ps(this.e)};I.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sp(b,a)};I.prototype.get_frequencyHz=function(){return Ac(this.e)};I.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qr(b,a)};I.prototype.get_dampingRatio=function(){return ao(this.e)};
I.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);wr(b,a)};I.prototype.get_type=function(){return Gu(this.e)};I.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ce(b,a)};I.prototype.get_userData=function(){return Pv(this.e)};I.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sh(b,a)};I.prototype.get_bodyA=function(){return q(Ww(this.e),v)};
I.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fu(b,a)};I.prototype.get_bodyB=function(){return q(Qn(this.e),v)};I.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pe(b,a)};I.prototype.get_collideConnected=function(){return gd(this.e)};I.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mr(b,a)};I.prototype.__destroy__=function(){Wf(this.e)};function Ox(){this.e=yn();p(Ox)[this.e]=this}
Ox.prototype=Object.create(xx.prototype);Ox.prototype.g=Ox;Ox.k={};e.b2CircleShape=Ox;Ox.prototype.GetType=function(){return ai(this.e)};Ox.prototype.GetChildCount=function(){return Jf(this.e)};Ox.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Tq(f,a,b)};
Ox.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Hk(k,a,b,f,g)};Ox.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);ot(g,a,b,f)};
Ox.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Oq(f,a,b)};Ox.prototype.get_m_p=function(){return q(wh(this.e),u)};Ox.prototype.set_m_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yd(b,a)};Ox.prototype.get_m_type=function(){return Ds(this.e)};Ox.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nf(b,a)};Ox.prototype.get_m_radius=function(){return si(this.e)};
Ox.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bf(b,a)};Ox.prototype.__destroy__=function(){br(this.e)};function J(){this.e=Jm();p(J)[this.e]=this}J.prototype=Object.create(D.prototype);J.prototype.g=J;J.k={};e.b2WeldJointDef=J;J.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Et(g,a,b,f)};J.prototype.get_localAnchorA=function(){return q(Lt(this.e),u)};
J.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);oj(b,a)};J.prototype.get_localAnchorB=function(){return q(pp(this.e),u)};J.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);af(b,a)};J.prototype.get_referenceAngle=function(){return qs(this.e)};J.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ls(b,a)};J.prototype.get_frequencyHz=function(){return bh(this.e)};
J.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Wr(b,a)};J.prototype.get_dampingRatio=function(){return Fq(this.e)};J.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sj(b,a)};J.prototype.get_type=function(){return Xp(this.e)};J.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ns(b,a)};J.prototype.get_userData=function(){return ku(this.e)};
J.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yh(b,a)};J.prototype.get_bodyA=function(){return q(qv(this.e),v)};J.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cf(b,a)};J.prototype.get_bodyB=function(){return q(bw(this.e),v)};J.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Tv(b,a)};J.prototype.get_collideConnected=function(){return jj(this.e)};
J.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kd(b,a)};J.prototype.__destroy__=function(){vp(this.e)};function Px(){c("cannot construct a b2Draw, no constructor in IDL")}Px.prototype=Object.create(j.prototype);Px.prototype.g=Px;Px.k={};e.b2Draw=Px;Px.prototype.SetFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pe(b,a)};Px.prototype.GetFlags=function(){return xc(this.e)};
Px.prototype.AppendFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Au(b,a)};Px.prototype.ClearFlags=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oi(b,a)};Px.prototype.__destroy__=function(){Qj(this.e)};function Qx(){this.e=kq();p(Qx)[this.e]=this}Qx.prototype=Object.create(j.prototype);Qx.prototype.g=Qx;Qx.k={};e.b2MassData=Qx;Qx.prototype.get_mass=function(){return ww(this.e)};Qx.prototype.set_mass=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ad(b,a)};
Qx.prototype.get_center=function(){return q(Nf(this.e),u)};Qx.prototype.set_center=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kj(b,a)};Qx.prototype.get_I=function(){return os(this.e)};Qx.prototype.set_I=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yt(b,a)};Qx.prototype.__destroy__=function(){zt(this.e)};function t(){c("cannot construct a b2Joint, no constructor in IDL")}t.prototype=Object.create(j.prototype);t.prototype.g=t;t.k={};e.b2Joint=t;t.prototype.GetType=function(){return Sw(this.e)};
t.prototype.GetBodyA=function(){return q(Sf(this.e),v)};t.prototype.GetBodyB=function(){return q(yw(this.e),v)};t.prototype.GetAnchorA=function(){return q(En(this.e),u)};t.prototype.GetAnchorB=function(){return q(Uj(this.e),u)};t.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Bm(b,a),u)};t.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Bk(b,a)};t.prototype.GetNext=function(){return q(vt(this.e),t)};
t.prototype.GetUserData=function(){return Gl(this.e)};t.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cx(b,a)};t.prototype.IsActive=function(){return Yu(this.e)};t.prototype.GetCollideConnected=function(){return Tf(this.e)};t.prototype.Dump=function(){Bw(this.e)};function Rx(){c("cannot construct a b2GearJoint, no constructor in IDL")}Rx.prototype=Object.create(t.prototype);Rx.prototype.g=Rx;Rx.k={};e.b2GearJoint=Rx;
Rx.prototype.GetJoint1=function(){return q(Xd(this.e),t)};Rx.prototype.GetJoint2=function(){return q(av(this.e),t)};Rx.prototype.SetRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eo(b,a)};Rx.prototype.GetRatio=function(){return jg(this.e)};Rx.prototype.GetType=function(){return hw(this.e)};Rx.prototype.GetBodyA=function(){return q(Qm(this.e),v)};Rx.prototype.GetBodyB=function(){return q($q(this.e),v)};Rx.prototype.GetAnchorA=function(){return q($d(this.e),u)};
Rx.prototype.GetAnchorB=function(){return q(Mu(this.e),u)};Rx.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Se(b,a),u)};Rx.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Jd(b,a)};Rx.prototype.GetNext=function(){return q(zv(this.e),t)};Rx.prototype.GetUserData=function(){return ef(this.e)};Rx.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);om(b,a)};
Rx.prototype.IsActive=function(){return fj(this.e)};Rx.prototype.GetCollideConnected=function(){return ue(this.e)};Rx.prototype.__destroy__=function(){gh(this.e)};function Fx(){c("cannot construct a b2RayCastCallback, no constructor in IDL")}Fx.prototype=Object.create(j.prototype);Fx.prototype.g=Fx;Fx.k={};e.b2RayCastCallback=Fx;Fx.prototype.__destroy__=function(){ii(this.e)};function K(){c("cannot construct a b2WeldJoint, no constructor in IDL")}K.prototype=Object.create(t.prototype);
K.prototype.g=K;K.k={};e.b2WeldJoint=K;K.prototype.GetLocalAnchorA=function(){return q(Yl(this.e),u)};K.prototype.GetLocalAnchorB=function(){return q(Rn(this.e),u)};K.prototype.SetFrequency=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Th(b,a)};K.prototype.GetFrequency=function(){return Fl(this.e)};K.prototype.SetDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Me(b,a)};K.prototype.GetDampingRatio=function(){return lt(this.e)};K.prototype.Dump=function(){lp(this.e)};
K.prototype.GetType=function(){return Zo(this.e)};K.prototype.GetBodyA=function(){return q(og(this.e),v)};K.prototype.GetBodyB=function(){return q(Pj(this.e),v)};K.prototype.GetAnchorA=function(){return q($v(this.e),u)};K.prototype.GetAnchorB=function(){return q(Hr(this.e),u)};K.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Zs(b,a),u)};K.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Zc(b,a)};
K.prototype.GetNext=function(){return q(Ir(this.e),t)};K.prototype.GetUserData=function(){return Ql(this.e)};K.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);aj(b,a)};K.prototype.IsActive=function(){return Tc(this.e)};K.prototype.GetCollideConnected=function(){return or(this.e)};K.prototype.__destroy__=function(){Kq(this.e)};function Sx(){this.e=Eu();p(Sx)[this.e]=this}Sx.prototype=Object.create(j.prototype);Sx.prototype.g=Sx;Sx.k={};e.b2JointEdge=Sx;
Sx.prototype.get_other=function(){return q(Nt(this.e),v)};Sx.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fe(b,a)};Sx.prototype.get_joint=function(){return q(Wv(this.e),t)};Sx.prototype.set_joint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Nc(b,a)};Sx.prototype.get_prev=function(){return q(Yc(this.e),Sx)};Sx.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jh(b,a)};Sx.prototype.get_next=function(){return q(Qo(this.e),Sx)};
Sx.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ho(b,a)};Sx.prototype.__destroy__=function(){Lo(this.e)};function L(){this.e=Nd();p(L)[this.e]=this}L.prototype=Object.create(D.prototype);L.prototype.g=L;L.k={};e.b2PulleyJointDef=L;
L.prototype.Initialize=function(a,b,f,g,k,n,m){var l=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g),k=k&&"object"===typeof k?k.e:r(k),n=n&&"object"===typeof n?n.e:r(n),m=m&&"object"===typeof m?m.e:r(m);dw(l,a,b,f,g,k,n,m)};L.prototype.get_groundAnchorA=function(){return q(fi(this.e),u)};L.prototype.set_groundAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yw(b,a)};
L.prototype.get_groundAnchorB=function(){return q(Dn(this.e),u)};L.prototype.set_groundAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Js(b,a)};L.prototype.get_localAnchorA=function(){return q(td(this.e),u)};L.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ji(b,a)};L.prototype.get_localAnchorB=function(){return q(Dg(this.e),u)};L.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nl(b,a)};
L.prototype.get_lengthA=function(){return vm(this.e)};L.prototype.set_lengthA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eh(b,a)};L.prototype.get_lengthB=function(){return $i(this.e)};L.prototype.set_lengthB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ev(b,a)};L.prototype.get_ratio=function(){return lf(this.e)};L.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ih(b,a)};L.prototype.get_type=function(){return xm(this.e)};
L.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sl(b,a)};L.prototype.get_userData=function(){return ul(this.e)};L.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dn(b,a)};L.prototype.get_bodyA=function(){return q(rd(this.e),v)};L.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rw(b,a)};L.prototype.get_bodyB=function(){return q(Lh(this.e),v)};
L.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sg(b,a)};L.prototype.get_collideConnected=function(){return ax(this.e)};L.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Iu(b,a)};L.prototype.__destroy__=function(){Bj(this.e)};function Mx(){c("cannot construct a b2ContactListener, no constructor in IDL")}Mx.prototype=Object.create(j.prototype);Mx.prototype.g=Mx;Mx.k={};e.b2ContactListener=Mx;Mx.prototype.__destroy__=function(){hp(this.e)};
function Tx(){this.e=Si();p(Tx)[this.e]=this}Tx.prototype=Object.create(j.prototype);Tx.prototype.g=Tx;Tx.k={};e.b2ManifoldPoint=Tx;Tx.prototype.get_localPoint=function(){return q(Lf(this.e),u)};Tx.prototype.set_localPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);rt(b,a)};Tx.prototype.get_normalImpulse=function(){return zk(this.e)};Tx.prototype.set_normalImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Di(b,a)};Tx.prototype.get_tangentImpulse=function(){return Dq(this.e)};
Tx.prototype.set_tangentImpulse=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vd(b,a)};Tx.prototype.get_id=function(){return q(Ig(this.e),Kx)};Tx.prototype.set_id=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pn(b,a)};Tx.prototype.__destroy__=function(){xr(this.e)};function Bx(){c("cannot construct a b2QueryCallback, no constructor in IDL")}Bx.prototype=Object.create(j.prototype);Bx.prototype.g=Bx;Bx.k={};e.b2QueryCallback=Bx;Bx.prototype.__destroy__=function(){kf(this.e)};
function D(){this.e=xn();p(D)[this.e]=this}D.prototype=Object.create(j.prototype);D.prototype.g=D;D.k={};e.b2JointDef=D;D.prototype.get_type=function(){return ou(this.e)};D.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zu(b,a)};D.prototype.get_userData=function(){return dq(this.e)};D.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cq(b,a)};D.prototype.get_bodyA=function(){return q(Ur(this.e),v)};
D.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fl(b,a)};D.prototype.get_bodyB=function(){return q(An(this.e),v)};D.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Er(b,a)};D.prototype.get_collideConnected=function(){return Vk(this.e)};D.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);al(b,a)};D.prototype.__destroy__=function(){Gf(this.e)};
function Ux(a,b){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);this.e=a===d?Ai():b===d?_emscripten_bind_b2Transform_b2Transform_1(a):Ys(a,b);p(Ux)[this.e]=this}Ux.prototype=Object.create(j.prototype);Ux.prototype.g=Ux;Ux.k={};e.b2Transform=Ux;Ux.prototype.SetIdentity=function(){ir(this.e)};Ux.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ni(f,a,b)};Ux.prototype.get_p=function(){return q(uu(this.e),u)};
Ux.prototype.set_p=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Yi(b,a)};Ux.prototype.get_q=function(){return q(Rd(this.e),Cx)};Ux.prototype.set_q=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xe(b,a)};Ux.prototype.__destroy__=function(){$e(this.e)};function M(){this.e=jw();p(M)[this.e]=this}M.prototype=Object.create(xx.prototype);M.prototype.g=M;M.k={};e.b2ChainShape=M;M.prototype.Clear=function(){ar(this.e)};
M.prototype.CreateLoop=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ow(f,a,b)};M.prototype.CreateChain=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Cd(f,a,b)};M.prototype.SetPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ko(b,a)};M.prototype.SetNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ao(b,a)};
M.prototype.GetChildEdge=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Ot(f,a,b)};M.prototype.GetType=function(){return Om(this.e)};M.prototype.GetChildCount=function(){return jq(this.e)};M.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Ll(f,a,b)};
M.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return $s(k,a,b,f,g)};M.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Wc(g,a,b,f)};
M.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);rw(f,a,b)};M.prototype.get_m_vertices=function(){return q(le(this.e),u)};M.prototype.set_m_vertices=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ke(b,a)};M.prototype.get_m_count=function(){return rc(this.e)};M.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dl(b,a)};M.prototype.get_m_prevVertex=function(){return q(Ph(this.e),u)};
M.prototype.set_m_prevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cs(b,a)};M.prototype.get_m_nextVertex=function(){return q(Zf(this.e),u)};M.prototype.set_m_nextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zh(b,a)};M.prototype.get_m_hasPrevVertex=function(){return zq(this.e)};M.prototype.set_m_hasPrevVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Eg(b,a)};M.prototype.get_m_hasNextVertex=function(){return zo(this.e)};
M.prototype.set_m_hasNextVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);As(b,a)};M.prototype.get_m_type=function(){return ek(this.e)};M.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ug(b,a)};M.prototype.get_m_radius=function(){return dt(this.e)};M.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ft(b,a)};M.prototype.__destroy__=function(){nm(this.e)};
function Vx(a,b,f){a=a&&"object"===typeof a?a.e:r(a);b=b&&"object"===typeof b?b.e:r(b);f=f&&"object"===typeof f?f.e:r(f);this.e=a===d?Ct():b===d?_emscripten_bind_b2Color_b2Color_1(a):f===d?_emscripten_bind_b2Color_b2Color_2(a,b):Bt(a,b,f);p(Vx)[this.e]=this}Vx.prototype=Object.create(j.prototype);Vx.prototype.g=Vx;Vx.k={};e.b2Color=Vx;Vx.prototype.Set=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Bv(g,a,b,f)};
Vx.prototype.get_r=function(){return Dd(this.e)};Vx.prototype.set_r=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ze(b,a)};Vx.prototype.get_g=function(){return xp(this.e)};Vx.prototype.set_g=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zc(b,a)};Vx.prototype.get_b=function(){return mt(this.e)};Vx.prototype.set_b=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Am(b,a)};Vx.prototype.__destroy__=function(){Xm(this.e)};
function N(){c("cannot construct a b2RopeJoint, no constructor in IDL")}N.prototype=Object.create(t.prototype);N.prototype.g=N;N.k={};e.b2RopeJoint=N;N.prototype.GetLocalAnchorA=function(){return q(Pr(this.e),u)};N.prototype.GetLocalAnchorB=function(){return q(Aj(this.e),u)};N.prototype.SetMaxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bx(b,a)};N.prototype.GetMaxLength=function(){return df(this.e)};N.prototype.GetLimitState=function(){return Uk(this.e)};N.prototype.GetType=function(){return ns(this.e)};
N.prototype.GetBodyA=function(){return q(Fv(this.e),v)};N.prototype.GetBodyB=function(){return q(Bl(this.e),v)};N.prototype.GetAnchorA=function(){return q(vj(this.e),u)};N.prototype.GetAnchorB=function(){return q(qf(this.e),u)};N.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(pt(b,a),u)};N.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return fw(b,a)};N.prototype.GetNext=function(){return q(zp(this.e),t)};
N.prototype.GetUserData=function(){return lk(this.e)};N.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ts(b,a)};N.prototype.IsActive=function(){return Nu(this.e)};N.prototype.GetCollideConnected=function(){return Ju(this.e)};N.prototype.__destroy__=function(){Cr(this.e)};function Wx(){c("cannot construct a b2RayCastInput, no constructor in IDL")}Wx.prototype=Object.create(j.prototype);Wx.prototype.g=Wx;Wx.k={};e.b2RayCastInput=Wx;
Wx.prototype.get_p1=function(){return q(Lc(this.e),u)};Wx.prototype.set_p1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);iv(b,a)};Wx.prototype.get_p2=function(){return q(Nl(this.e),u)};Wx.prototype.set_p2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lg(b,a)};Wx.prototype.get_maxFraction=function(){return Pm(this.e)};Wx.prototype.set_maxFraction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ro(b,a)};Wx.prototype.__destroy__=function(){wf(this.e)};
function O(){this.e=Fj();p(O)[this.e]=this}O.prototype=Object.create(xx.prototype);O.prototype.g=O;O.k={};e.b2PolygonShape=O;O.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ch(f,a,b)};
O.prototype.SetAsBox=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);f===d?tv(k,a,b):g===d?_emscripten_bind_b2PolygonShape_SetAsBox_3(k,a,b,f):jn(k,a,b,f,g)};O.prototype.GetVertexCount=function(){return wq(this.e)};O.prototype.GetVertex=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Is(b,a),u)};O.prototype.GetType=function(){return bi(this.e)};
O.prototype.GetChildCount=function(){return Bp(this.e)};O.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Dj(f,a,b)};O.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Cc(k,a,b,f,g)};
O.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);hm(g,a,b,f)};O.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Xl(f,a,b)};O.prototype.get_m_centroid=function(){return q(mm(this.e),u)};O.prototype.set_m_centroid=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gn(b,a)};O.prototype.get_m_count=function(){return wd(this.e)};
O.prototype.set_m_count=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Td(b,a)};O.prototype.get_m_type=function(){return Vp(this.e)};O.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);vv(b,a)};O.prototype.get_m_radius=function(){return kk(this.e)};O.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dx(b,a)};O.prototype.__destroy__=function(){Ye(this.e)};function P(){this.e=Hq();p(P)[this.e]=this}P.prototype=Object.create(xx.prototype);
P.prototype.g=P;P.k={};e.b2EdgeShape=P;P.prototype.Set=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Su(f,a,b)};P.prototype.GetType=function(){return vr(this.e)};P.prototype.GetChildCount=function(){return ld(this.e)};P.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return lm(f,a,b)};
P.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return lj(k,a,b,f,g)};P.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Kr(g,a,b,f)};
P.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);vu(f,a,b)};P.prototype.get_m_vertex1=function(){return q($l(this.e),u)};P.prototype.set_m_vertex1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bv(b,a)};P.prototype.get_m_vertex2=function(){return q(kn(this.e),u)};P.prototype.set_m_vertex2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kr(b,a)};P.prototype.get_m_vertex0=function(){return q(gj(this.e),u)};
P.prototype.set_m_vertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zi(b,a)};P.prototype.get_m_vertex3=function(){return q(gr(this.e),u)};P.prototype.set_m_vertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ej(b,a)};P.prototype.get_m_hasVertex0=function(){return Em(this.e)};P.prototype.set_m_hasVertex0=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cf(b,a)};P.prototype.get_m_hasVertex3=function(){return tk(this.e)};
P.prototype.set_m_hasVertex3=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Mc(b,a)};P.prototype.get_m_type=function(){return Wd(this.e)};P.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Cv(b,a)};P.prototype.get_m_radius=function(){return pw(this.e)};P.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ts(b,a)};P.prototype.__destroy__=function(){uj(this.e)};function Xx(){this.e=jt();p(Xx)[this.e]=this}Xx.prototype=Object.create(Yx.prototype);
Xx.prototype.g=Xx;Xx.k={};e.JSContactFilter=Xx;Xx.prototype.ShouldCollide=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return Ak(f,a,b)};Xx.prototype.__destroy__=function(){jk(this.e)};function Q(){this.e=mn();p(Q)[this.e]=this}Q.prototype=Object.create(D.prototype);Q.prototype.g=Q;Q.k={};e.b2RevoluteJointDef=Q;
Q.prototype.Initialize=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Qu(g,a,b,f)};Q.prototype.get_localAnchorA=function(){return q(ed(this.e),u)};Q.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fh(b,a)};Q.prototype.get_localAnchorB=function(){return q(hk(this.e),u)};Q.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sn(b,a)};
Q.prototype.get_referenceAngle=function(){return ik(this.e)};Q.prototype.set_referenceAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fq(b,a)};Q.prototype.get_enableLimit=function(){return ri(this.e)};Q.prototype.set_enableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);up(b,a)};Q.prototype.get_lowerAngle=function(){return Hl(this.e)};Q.prototype.set_lowerAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ko(b,a)};Q.prototype.get_upperAngle=function(){return ve(this.e)};
Q.prototype.set_upperAngle=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lm(b,a)};Q.prototype.get_enableMotor=function(){return ep(this.e)};Q.prototype.set_enableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vi(b,a)};Q.prototype.get_motorSpeed=function(){return mg(this.e)};Q.prototype.set_motorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Dw(b,a)};Q.prototype.get_maxMotorTorque=function(){return Eq(this.e)};
Q.prototype.set_maxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sv(b,a)};Q.prototype.get_type=function(){return Mm(this.e)};Q.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ck(b,a)};Q.prototype.get_userData=function(){return Hn(this.e)};Q.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);dd(b,a)};Q.prototype.get_bodyA=function(){return q(du(this.e),v)};
Q.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rq(b,a)};Q.prototype.get_bodyB=function(){return q(qk(this.e),v)};Q.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vg(b,a)};Q.prototype.get_collideConnected=function(){return Ks(this.e)};Q.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);eg(b,a)};Q.prototype.__destroy__=function(){Hp(this.e)};function Zx(){this.e=su();p(Zx)[this.e]=this}
Zx.prototype=Object.create(Px.prototype);Zx.prototype.g=Zx;Zx.k={};e.JSDraw=Zx;Zx.prototype.DrawPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);fo(g,a,b,f)};Zx.prototype.DrawSolidPolygon=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);vg(g,a,b,f)};
Zx.prototype.DrawCircle=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Sc(g,a,b,f)};Zx.prototype.DrawSolidCircle=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Fc(k,a,b,f,g)};
Zx.prototype.DrawSegment=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);id(g,a,b,f)};Zx.prototype.DrawTransform=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);uo(b,a)};Zx.prototype.__destroy__=function(){yg(this.e)};function R(){c("cannot construct a b2WheelJoint, no constructor in IDL")}R.prototype=Object.create(t.prototype);R.prototype.g=R;R.k={};e.b2WheelJoint=R;
R.prototype.GetLocalAnchorA=function(){return q(ug(this.e),u)};R.prototype.GetLocalAnchorB=function(){return q(Ff(this.e),u)};R.prototype.GetLocalAxisA=function(){return q(Dv(this.e),u)};R.prototype.GetJointTranslation=function(){return Rs(this.e)};R.prototype.GetJointSpeed=function(){return hg(this.e)};R.prototype.IsMotorEnabled=function(){return Vf(this.e)};R.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);tg(b,a)};
R.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ie(b,a)};R.prototype.GetMotorSpeed=function(){return Zn(this.e)};R.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Hj(b,a)};R.prototype.GetMaxMotorTorque=function(){return Yd(this.e)};R.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Ss(b,a)};
R.prototype.SetSpringFrequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xi(b,a)};R.prototype.GetSpringFrequencyHz=function(){return Iw(this.e)};R.prototype.SetSpringDampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gp(b,a)};R.prototype.GetSpringDampingRatio=function(){return pc(this.e)};R.prototype.GetType=function(){return wv(this.e)};R.prototype.GetBodyA=function(){return q(to(this.e),v)};R.prototype.GetBodyB=function(){return q(Wm(this.e),v)};
R.prototype.GetAnchorA=function(){return q(ds(this.e),u)};R.prototype.GetAnchorB=function(){return q(Ii(this.e),u)};R.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Pf(b,a),u)};R.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return ln(b,a)};R.prototype.GetNext=function(){return q(un(this.e),t)};R.prototype.GetUserData=function(){return oo(this.e)};
R.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Rt(b,a)};R.prototype.IsActive=function(){return Vs(this.e)};R.prototype.GetCollideConnected=function(){return Fp(this.e)};R.prototype.__destroy__=function(){xw(this.e)};function S(){c("cannot construct a b2PulleyJoint, no constructor in IDL")}S.prototype=Object.create(t.prototype);S.prototype.g=S;S.k={};e.b2PulleyJoint=S;S.prototype.GetGroundAnchorA=function(){return q(Hd(this.e),u)};
S.prototype.GetGroundAnchorB=function(){return q(Ng(this.e),u)};S.prototype.GetLengthA=function(){return vo(this.e)};S.prototype.GetLengthB=function(){return Lk(this.e)};S.prototype.GetRatio=function(){return Mo(this.e)};S.prototype.GetCurrentLengthA=function(){return xl(this.e)};S.prototype.GetCurrentLengthB=function(){return rj(this.e)};S.prototype.GetType=function(){return nj(this.e)};S.prototype.GetBodyA=function(){return q(Mq(this.e),v)};S.prototype.GetBodyB=function(){return q(Be(this.e),v)};
S.prototype.GetAnchorA=function(){return q(kv(this.e),u)};S.prototype.GetAnchorB=function(){return q(Bh(this.e),u)};S.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Ep(b,a),u)};S.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return iu(b,a)};S.prototype.GetNext=function(){return q(dk(this.e),t)};S.prototype.GetUserData=function(){return em(this.e)};
S.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qc(b,a)};S.prototype.IsActive=function(){return Wi(this.e)};S.prototype.GetCollideConnected=function(){return Ah(this.e)};S.prototype.__destroy__=function(){Go(this.e)};function T(){this.e=Yp();p(T)[this.e]=this}T.prototype=Object.create(D.prototype);T.prototype.g=T;T.k={};e.b2MouseJointDef=T;T.prototype.get_target=function(){return q(bn(this.e),u)};
T.prototype.set_target=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);he(b,a)};T.prototype.get_maxForce=function(){return Ip(this.e)};T.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sq(b,a)};T.prototype.get_frequencyHz=function(){return aq(this.e)};T.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ct(b,a)};T.prototype.get_dampingRatio=function(){return Sg(this.e)};
T.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fp(b,a)};T.prototype.get_type=function(){return Zw(this.e)};T.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xc(b,a)};T.prototype.get_userData=function(){return nt(this.e)};T.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hd(b,a)};T.prototype.get_bodyA=function(){return q(il(this.e),v)};
T.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);be(b,a)};T.prototype.get_bodyB=function(){return q(Zg(this.e),v)};T.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$h(b,a)};T.prototype.get_collideConnected=function(){return sf(this.e)};T.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);zw(b,a)};T.prototype.__destroy__=function(){zg(this.e)};
function G(){c("cannot construct a b2Contact, no constructor in IDL")}G.prototype=Object.create(j.prototype);G.prototype.g=G;G.k={};e.b2Contact=G;G.prototype.GetManifold=function(){return q(Jt(this.e),Ix)};G.prototype.IsTouching=function(){return Oe(this.e)};G.prototype.SetEnabled=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$f(b,a)};G.prototype.IsEnabled=function(){return Tj(this.e)};G.prototype.GetNext=function(){return q(Ud(this.e),G)};
G.prototype.GetFixtureA=function(){return q(jf(this.e),w)};G.prototype.GetChildIndexA=function(){return Yt(this.e)};G.prototype.GetFixtureB=function(){return q(qw(this.e),w)};G.prototype.GetChildIndexB=function(){return tr(this.e)};G.prototype.SetFriction=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Sr(b,a)};G.prototype.GetFriction=function(){return Hi(this.e)};G.prototype.ResetFriction=function(){jv(this.e)};
G.prototype.SetRestitution=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);er(b,a)};G.prototype.GetRestitution=function(){return Fn(this.e)};G.prototype.ResetRestitution=function(){Qi(this.e)};G.prototype.SetTangentSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lj(b,a)};G.prototype.GetTangentSpeed=function(){return Nn(this.e)};function xx(){c("cannot construct a b2Shape, no constructor in IDL")}xx.prototype=Object.create(j.prototype);xx.prototype.g=xx;xx.k={};
e.b2Shape=xx;xx.prototype.GetType=function(){return ro(this.e)};xx.prototype.GetChildCount=function(){return Ft(this.e)};xx.prototype.TestPoint=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return $g(f,a,b)};xx.prototype.RayCast=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);return Gd(k,a,b,f,g)};
xx.prototype.ComputeAABB=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);tc(g,a,b,f)};xx.prototype.ComputeMass=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);ut(f,a,b)};xx.prototype.get_m_type=function(){return Pk(this.e)};xx.prototype.set_m_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qs(b,a)};xx.prototype.get_m_radius=function(){return Jr(this.e)};
xx.prototype.set_m_radius=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ag(b,a)};xx.prototype.__destroy__=function(){zm(this.e)};function U(){this.e=fn();p(U)[this.e]=this}U.prototype=Object.create(D.prototype);U.prototype.g=U;U.k={};e.b2DistanceJointDef=U;U.prototype.Initialize=function(a,b,f,g){var k=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f),g=g&&"object"===typeof g?g.e:r(g);Kn(k,a,b,f,g)};
U.prototype.get_localAnchorA=function(){return q(Jj(this.e),u)};U.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Nw(b,a)};U.prototype.get_localAnchorB=function(){return q(Pq(this.e),u)};U.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xk(b,a)};U.prototype.get_length=function(){return Ae(this.e)};U.prototype.set_length=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ji(b,a)};U.prototype.get_frequencyHz=function(){return wo(this.e)};
U.prototype.set_frequencyHz=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gk(b,a)};U.prototype.get_dampingRatio=function(){return nk(this.e)};U.prototype.set_dampingRatio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Qg(b,a)};U.prototype.get_type=function(){return Ni(this.e)};U.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jq(b,a)};U.prototype.get_userData=function(){return ad(this.e)};
U.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yj(b,a)};U.prototype.get_bodyA=function(){return q(Bf(this.e),v)};U.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ls(b,a)};U.prototype.get_bodyB=function(){return q(mv(this.e),v)};U.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);hq(b,a)};U.prototype.get_collideConnected=function(){return eq(this.e)};
U.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gu(b,a)};U.prototype.__destroy__=function(){xu(this.e)};function v(){c("cannot construct a b2Body, no constructor in IDL")}v.prototype=Object.create(j.prototype);v.prototype.g=v;v.k={};e.b2Body=v;v.prototype.CreateFixture=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);return b===d?q(cm(f,a),w):q(dm(f,a,b),w)};
v.prototype.DestroyFixture=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Un(b,a)};v.prototype.SetTransform=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);pf(f,a,b)};v.prototype.GetTransform=function(){return q($t(this.e),Ux)};v.prototype.GetPosition=function(){return q(Dh(this.e),u)};v.prototype.GetAngle=function(){return Ru(this.e)};v.prototype.GetWorldCenter=function(){return q(Yk(this.e),u)};
v.prototype.GetLocalCenter=function(){return q(Xv(this.e),u)};v.prototype.SetLinearVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sl(b,a)};v.prototype.GetLinearVelocity=function(){return q(et(this.e),u)};v.prototype.SetAngularVelocity=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ov(b,a)};v.prototype.GetAngularVelocity=function(){return Oj(this.e)};
v.prototype.ApplyForce=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);St(g,a,b,f)};v.prototype.ApplyForceToCenter=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);xf(f,a,b)};v.prototype.ApplyTorque=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);In(f,a,b)};
v.prototype.ApplyLinearImpulse=function(a,b,f){var g=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b),f=f&&"object"===typeof f?f.e:r(f);Wl(g,a,b,f)};v.prototype.ApplyAngularImpulse=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);we(f,a,b)};v.prototype.GetMass=function(){return Co(this.e)};v.prototype.GetInertia=function(){return ks(this.e)};
v.prototype.GetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Zh(b,a)};v.prototype.SetMassData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ke(b,a)};v.prototype.ResetMassData=function(){Xr(this.e)};v.prototype.GetWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(yk(b,a),u)};v.prototype.GetWorldVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(ah(b,a),u)};
v.prototype.GetLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(lh(b,a),u)};v.prototype.GetLocalVector=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Rm(b,a),u)};v.prototype.GetLinearVelocityFromWorldPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(nr(b,a),u)};v.prototype.GetLinearVelocityFromLocalPoint=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Vq(b,a),u)};v.prototype.GetLinearDamping=function(){return Vr(this.e)};
v.prototype.SetLinearDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vm(b,a)};v.prototype.GetAngularDamping=function(){return $n(this.e)};v.prototype.SetAngularDamping=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);cw(b,a)};v.prototype.GetGravityScale=function(){return Wg(this.e)};v.prototype.SetGravityScale=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);sm(b,a)};v.prototype.SetType=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bo(b,a)};
v.prototype.GetType=function(){return Gr(this.e)};v.prototype.SetBullet=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jl(b,a)};v.prototype.IsBullet=function(){return Tl(this.e)};v.prototype.SetSleepingAllowed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Lg(b,a)};v.prototype.IsSleepingAllowed=function(){return rq(this.e)};v.prototype.SetAwake=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fv(b,a)};v.prototype.IsAwake=function(){return ee(this.e)};
v.prototype.SetActive=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);fm(b,a)};v.prototype.IsActive=function(){return Pi(this.e)};v.prototype.SetFixedRotation=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vh(b,a)};v.prototype.IsFixedRotation=function(){return Fi(this.e)};v.prototype.GetFixtureList=function(){return q(dp(this.e),w)};v.prototype.GetJointList=function(){return q(Kw(this.e),Sx)};v.prototype.GetContactList=function(){return q(Ei(this.e),$x)};
v.prototype.GetNext=function(){return q(Ev(this.e),v)};v.prototype.GetUserData=function(){return cl(this.e)};v.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pw(b,a)};v.prototype.GetWorld=function(){return q(cv(this.e),F)};v.prototype.Dump=function(){Wk(this.e)};function W(){c("cannot construct a b2FrictionJoint, no constructor in IDL")}W.prototype=Object.create(t.prototype);W.prototype.g=W;W.k={};e.b2FrictionJoint=W;
W.prototype.GetLocalAnchorA=function(){return q(op(this.e),u)};W.prototype.GetLocalAnchorB=function(){return q(Li(this.e),u)};W.prototype.SetMaxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lu(b,a)};W.prototype.GetMaxForce=function(){return Sd(this.e)};W.prototype.SetMaxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$p(b,a)};W.prototype.GetMaxTorque=function(){return kj(this.e)};W.prototype.GetType=function(){return Pg(this.e)};
W.prototype.GetBodyA=function(){return q(Lw(this.e),v)};W.prototype.GetBodyB=function(){return q(Af(this.e),v)};W.prototype.GetAnchorA=function(){return q(ms(this.e),u)};W.prototype.GetAnchorB=function(){return q(Kv(this.e),u)};W.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Iq(b,a),u)};W.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return km(b,a)};W.prototype.GetNext=function(){return q(fs(this.e),t)};
W.prototype.GetUserData=function(){return Rr(this.e)};W.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);bq(b,a)};W.prototype.IsActive=function(){return yc(this.e)};W.prototype.GetCollideConnected=function(){return Rp(this.e)};W.prototype.__destroy__=function(){kp(this.e)};function ay(){c("cannot construct a b2DestructionListener, no constructor in IDL")}ay.prototype=Object.create(j.prototype);ay.prototype.g=ay;ay.k={};e.b2DestructionListener=ay;
ay.prototype.__destroy__=function(){Uc(this.e)};function X(){this.e=zn();p(X)[this.e]=this}X.prototype=Object.create(D.prototype);X.prototype.g=X;X.k={};e.b2GearJointDef=X;X.prototype.get_joint1=function(){return q(cj(this.e),t)};X.prototype.set_joint1=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);jr(b,a)};X.prototype.get_joint2=function(){return q(bg(this.e),t)};X.prototype.set_joint2=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ku(b,a)};X.prototype.get_ratio=function(){return Cp(this.e)};
X.prototype.set_ratio=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Gj(b,a)};X.prototype.get_type=function(){return Nm(this.e)};X.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);gf(b,a)};X.prototype.get_userData=function(){return wi(this.e)};X.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);nw(b,a)};X.prototype.get_bodyA=function(){return q(fk(this.e),v)};
X.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ui(b,a)};X.prototype.get_bodyB=function(){return q(Xg(this.e),v)};X.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ew(b,a)};X.prototype.get_collideConnected=function(){return gl(this.e)};X.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Pt(b,a)};X.prototype.__destroy__=function(){Qq(this.e)};
function Y(){c("cannot construct a b2RevoluteJoint, no constructor in IDL")}Y.prototype=Object.create(t.prototype);Y.prototype.g=Y;Y.k={};e.b2RevoluteJoint=Y;Y.prototype.GetLocalAnchorA=function(){return q(Gc(this.e),u)};Y.prototype.GetLocalAnchorB=function(){return q(it(this.e),u)};Y.prototype.GetReferenceAngle=function(){return tl(this.e)};Y.prototype.GetJointAngle=function(){return hh(this.e)};Y.prototype.GetJointSpeed=function(){return Ef(this.e)};Y.prototype.IsLimitEnabled=function(){return Qv(this.e)};
Y.prototype.EnableLimit=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ol(b,a)};Y.prototype.GetLowerLimit=function(){return Xk(this.e)};Y.prototype.GetUpperLimit=function(){return oe(this.e)};Y.prototype.SetLimits=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);Ms(f,a,b)};Y.prototype.IsMotorEnabled=function(){return ge(this.e)};Y.prototype.EnableMotor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Jp(b,a)};
Y.prototype.SetMotorSpeed=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xo(b,a)};Y.prototype.GetMotorSpeed=function(){return Tg(this.e)};Y.prototype.SetMaxMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);kw(b,a)};Y.prototype.GetMaxMotorTorque=function(){return vk(this.e)};Y.prototype.GetMotorTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Jc(b,a)};Y.prototype.GetType=function(){return Tn(this.e)};
Y.prototype.GetBodyA=function(){return q(Xj(this.e),v)};Y.prototype.GetBodyB=function(){return q(ol(this.e),v)};Y.prototype.GetAnchorA=function(){return q(bs(this.e),u)};Y.prototype.GetAnchorB=function(){return q(ov(this.e),u)};Y.prototype.GetReactionForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return q(Hu(b,a),u)};Y.prototype.GetReactionTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);return Nh(b,a)};Y.prototype.GetNext=function(){return q(pv(this.e),t)};
Y.prototype.GetUserData=function(){return ti(this.e)};Y.prototype.SetUserData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Uv(b,a)};Y.prototype.IsActive=function(){return yv(this.e)};Y.prototype.GetCollideConnected=function(){return ru(this.e)};Y.prototype.__destroy__=function(){Md(this.e)};function Yx(){c("cannot construct a b2ContactFilter, no constructor in IDL")}Yx.prototype=Object.create(j.prototype);Yx.prototype.g=Yx;Yx.k={};e.b2ContactFilter=Yx;Yx.prototype.__destroy__=function(){Cg(this.e)};
function $x(){this.e=Fs();p($x)[this.e]=this}$x.prototype=Object.create(j.prototype);$x.prototype.g=$x;$x.k={};e.b2ContactEdge=$x;$x.prototype.get_other=function(){return q(zj(this.e),v)};$x.prototype.set_other=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qj(b,a)};$x.prototype.get_contact=function(){return q(Gn(this.e),G)};$x.prototype.set_contact=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qi(b,a)};$x.prototype.get_prev=function(){return q(Fh(this.e),$x)};
$x.prototype.set_prev=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);$j(b,a)};$x.prototype.get_next=function(){return q(lr(this.e),$x)};$x.prototype.set_next=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);qc(b,a)};$x.prototype.__destroy__=function(){au(this.e)};function Z(){this.e=Dk();p(Z)[this.e]=this}Z.prototype=Object.create(D.prototype);Z.prototype.g=Z;Z.k={};e.b2RopeJointDef=Z;Z.prototype.get_localAnchorA=function(){return q(pi(this.e),u)};
Z.prototype.set_localAnchorA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Bc(b,a)};Z.prototype.get_localAnchorB=function(){return q(cd(this.e),u)};Z.prototype.set_localAnchorB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);lw(b,a)};Z.prototype.get_maxLength=function(){return hl(this.e)};Z.prototype.set_maxLength=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kl(b,a)};Z.prototype.get_type=function(){return Nq(this.e)};
Z.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ql(b,a)};Z.prototype.get_userData=function(){return nh(this.e)};Z.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xo(b,a)};Z.prototype.get_bodyA=function(){return q(mk(this.e),v)};Z.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);yu(b,a)};Z.prototype.get_bodyB=function(){return q(uw(this.e),v)};
Z.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Fe(b,a)};Z.prototype.get_collideConnected=function(){return di(this.e)};Z.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xd(b,a)};Z.prototype.__destroy__=function(){Us(this.e)};function $(){this.e=yh();p($)[this.e]=this}$.prototype=Object.create(D.prototype);$.prototype.g=$;$.k={};e.b2MotorJointDef=$;
$.prototype.Initialize=function(a,b){var f=this.e,a=a&&"object"===typeof a?a.e:r(a),b=b&&"object"===typeof b?b.e:r(b);kd(f,a,b)};$.prototype.get_linearOffset=function(){return q(Gm(this.e),u)};$.prototype.set_linearOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Oo(b,a)};$.prototype.get_angularOffset=function(){return Qt(this.e)};$.prototype.set_angularOffset=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);ph(b,a)};$.prototype.get_maxForce=function(){return $c(this.e)};
$.prototype.set_maxForce=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);pg(b,a)};$.prototype.get_maxTorque=function(){return Uq(this.e)};$.prototype.set_maxTorque=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Uu(b,a)};$.prototype.get_correctionFactor=function(){return Av(this.e)};$.prototype.set_correctionFactor=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);xj(b,a)};$.prototype.get_type=function(){return Or(this.e)};
$.prototype.set_type=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Kc(b,a)};$.prototype.get_userData=function(){return Bu(this.e)};$.prototype.set_userData=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Vd(b,a)};$.prototype.get_bodyA=function(){return q(Ew(this.e),v)};$.prototype.set_bodyA=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Ul(b,a)};$.prototype.get_bodyB=function(){return q(Fk(this.e),v)};
$.prototype.set_bodyB=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);Xs(b,a)};$.prototype.get_collideConnected=function(){return ne(this.e)};$.prototype.set_collideConnected=function(a){var b=this.e,a=a&&"object"===typeof a?a.e:r(a);us(b,a)};$.prototype.__destroy__=function(){Os(this.e)};e.b2Shape.e_circle=Sk();e.b2Shape.e_edge=uk();e.b2Shape.e_polygon=Oc();e.b2Shape.e_chain=Hh();e.b2Shape.e_typeCount=of();e.e_unknownJoint=Gv();e.e_revoluteJoint=ce();e.e_prismaticJoint=yr();
e.e_distanceJoint=Fo();e.e_pulleyJoint=Yf();e.e_mouseJoint=ae();e.e_gearJoint=Gt();e.e_wheelJoint=Zr();e.e_weldJoint=$m();e.e_frictionJoint=xe();e.e_ropeJoint=rs();e.e_motorJoint=Po();e.e_inactiveLimit=dv();e.e_atLowerLimit=On();e.e_atUpperLimit=Xw();e.e_equalLimits=Ci();e.b2Manifold.e_circles=co();e.b2Manifold.e_faceA=ok();e.b2Manifold.e_faceB=pk();e.b2_staticBody=Km();e.b2_kinematicBody=Yq();e.b2_dynamicBody=Sq();e.b2Draw.e_shapeBit=Gi();e.b2Draw.e_jointBit=qg();e.b2Draw.e_aabbBit=Pu();
e.b2Draw.e_pairBit=jp();e.b2Draw.e_centerOfMassBit=iw();e.b2ContactFeature.e_vertex=Ih();e.b2ContactFeature.e_face=tm();this.Box2D=e;


define("lib/Box2d", function(){});

define( 'manager/PhysicsManager',[ 'manager/EventManager', 'lib/Box2d', 'core/Timer' ], function( EventManager, Box2d, Timer ) {

  var PhysicsManager = function() {
    this.world = null;

    // The more iterations, the more accurate the calculations
    this.velocityIterations = 2;
    this.positionIterations = 2;

    // Remove any accumulated forces at every physics update
    this.clearForcesOnUpdate = false;
  }

  PhysicsManager.prototype.createWorld = function( gravity, allowSleep ) {
    this.world = new Box2D.b2World( new Box2D.b2Vec2( gravity.x, gravity.y ), allowSleep );
    //this.createListener();
  };

  PhysicsManager.prototype.attachToWorld = function( bodyDef ) {
    return this.world.CreateBody( bodyDef );
  };

  PhysicsManager.prototype.createListener = function() {
    var listener = new Box2D.JSContactListener();

    listener.BeginContact = function( contact ) {
      // console.log(contact.GetFixtureA().GetBody().GetUserData());
      EventManager.notify( 'PhysicsManager.beginContact', contact );
    };

    listener.EndContact = function( contact ) {
      // console.log(contact.GetFixtureA().GetBody().GetUserData());
      EventManager.notify( 'PhysicsManager.endContact', contact );
    };

    // listener.PreSolve = function( contact, oldManifold ) {
    // EventManager.notify( "box2D_preSolve", {
    // "contact" : contact,
    // "oldManifold" : oldManifold
    // } );
    // };
    //
    // listener.PostSolve = function( contact, impulse ) {
    // EventManager.notify( "box2D_postSolve", {
    // "contact" : contact,
    // "impulse" : impulse
    // } );
    // };

    this.world.SetContactListener( listener );
  };

  PhysicsManager.prototype.update = function() {
    if ( this.world ) {
      var fps = Timer.fps;

      // Frame rate at which to update physics ( 1 / FPS or 1.0 / 60.0 )
      var physicsFrameRate = ( fps ) ? 1 / fps : Timer.FRAME_RATE_60FPS;

      this.world.Step( physicsFrameRate, this.velocityIterations, this.positionIterations );

      if ( this.clearForcesOnUpdate ) {
        this.world.ClearForces();
      }
    }
  };

  var instance = null;

  PhysicsManager.getInstance = function() {
    if ( instance === null ) {
      instance = new PhysicsManager();
    }
    return instance;
  };

  return PhysicsManager.getInstance();
} );

//  Chance.js 0.7.1
//  http://chancejs.com
//  (c) 2013 Victor Quinn
//  Chance may be freely distributed or modified under the MIT license.

(function () {

    // Constants
    var MAX_INT = 9007199254740992;
    var MIN_INT = -MAX_INT;
    var NUMBERS = '0123456789';
    var CHARS_LOWER = 'abcdefghijklmnopqrstuvwxyz';
    var CHARS_UPPER = CHARS_LOWER.toUpperCase();
    var HEX_POOL  = NUMBERS + "abcdef";

    // Cached array helpers
    var slice = Array.prototype.slice;

    // Constructor
    function Chance (seed) {
        if (!(this instanceof Chance)) {
            return new Chance(seed);
        }

        // if user has provided a function, use that as the generator
        if (typeof seed === 'function') {
            this.random = seed;
            return this;
        }

        var seedling;
        
        if (arguments.length) {
            // set a starting value of zero so we can add to it
            this.seed = 0;
        }
        // otherwise, leave this.seed blank so that MT will recieve a blank

        for (var i = 0; i < arguments.length; i++) {
            seedling = 0;
            if (typeof arguments[i] === 'string') {
                for (var j = 0; j < arguments[i].length; j++) {
                    seedling += (arguments[i].length - j) * arguments[i].charCodeAt(j);
                }
            } else {
                seedling = arguments[i];
            }
            this.seed += (arguments.length - i) * seedling;
        }

        // If no generator function was provided, use our MT
        this.mt = this.mersenne_twister(this.seed);
        this.random = function () {
            return this.mt.random(this.seed);
        };

        return this;
    }

    Chance.prototype.VERSION = "0.7.1";

    // Random helper functions
    function initOptions(options, defaults) {
        options || (options = {});

        if (defaults) {
            for (var i in defaults) {
                if (typeof options[i] === 'undefined') {
                    options[i] = defaults[i];
                }
            }
        }

        return options;
    }

    function testRange(test, errorMessage) {
        if (test) {
            throw new RangeError(errorMessage);
        }
    }

    /**
     * Encode the input string with Base64.
     * @param input
     */
    var base64 = function(input) {
        throw new Error('No Base64 encoder available.');
    };

    // Select proper Base64 encoder.
    (function determineBase64Encoder() {
        if (typeof btoa === 'function') {
            base64 = btoa;
        } else if (typeof Buffer === 'function') {
            base64 = function(input) {
                return new Buffer(input).toString('base64');
            };
        }
    })();

    // -- Basics --

    Chance.prototype.bool = function (options) {

        // likelihood of success (true)
        options = initOptions(options, {likelihood : 50});

        testRange(
            options.likelihood < 0 || options.likelihood > 100,
            "Chance: Likelihood accepts values from 0 to 100."
        );

        return this.random() * 100 < options.likelihood;
    };

    Chance.prototype.character = function (options) {
        options = initOptions(options);

        var symbols = "!@#$%^&*()[]",
            letters, pool;

        testRange(
            options.alpha && options.symbols,
            "Chance: Cannot specify both alpha and symbols."
        );


        if (options.casing === 'lower') {
            letters = CHARS_LOWER;
        } else if (options.casing === 'upper') {
            letters = CHARS_UPPER;
        } else {
            letters = CHARS_LOWER + CHARS_UPPER;
        }

        if (options.pool) {
            pool = options.pool;
        } else if (options.alpha) {
            pool = letters;
        } else if (options.symbols) {
            pool = symbols;
        } else {
            pool = letters + NUMBERS + symbols;
        }

        return pool.charAt(this.natural({max: (pool.length - 1)}));
    };

    // Note, wanted to use "float" or "double" but those are both JS reserved words.

    // Note, fixed means N OR LESS digits after the decimal. This because
    // It could be 14.9000 but in JavaScript, when this is cast as a number,
    // the trailing zeroes are dropped. Left to the consumer if trailing zeroes are
    // needed
    Chance.prototype.floating = function (options) {
        var num;

        options = initOptions(options, {fixed : 4});
        var fixed = Math.pow(10, options.fixed);

        testRange(
            options.fixed && options.precision,
            "Chance: Cannot specify both fixed and precision."
        );

        var max = MAX_INT / fixed;
        var min = -max;

        testRange(
            options.min && options.fixed && options.min < min,
            "Chance: Min specified is out of range with fixed. Min should be, at least, " + min
        );
        testRange(
            options.max && options.fixed && options.max > max,
            "Chance: Max specified is out of range with fixed. Max should be, at most, " + max
        );

        options = initOptions(options, {min : min, max : max});

        // Todo - Make this work!
        // options.precision = (typeof options.precision !== "undefined") ? options.precision : false;

        num = this.integer({min: options.min * fixed, max: options.max * fixed});
        var num_fixed = (num / fixed).toFixed(options.fixed);

        return parseFloat(num_fixed);
    };

    // NOTE the max and min are INCLUDED in the range. So:
    //
    // chance.natural({min: 1, max: 3});
    //
    // would return either 1, 2, or 3.

    Chance.prototype.integer = function (options) {

        // 9007199254740992 (2^53) is the max integer number in JavaScript
        // See: http://vq.io/132sa2j
        options = initOptions(options, {min: MIN_INT, max: MAX_INT});

        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return Math.floor(this.random() * (options.max - options.min + 1) + options.min);
    };

    Chance.prototype.natural = function (options) {
        options = initOptions(options, {min: 0, max: MAX_INT});
        return this.integer(options);
    };

    Chance.prototype.string = function (options) {
        options = initOptions(options);

        var length = options.length || this.natural({min: 5, max: 20}),
            pool = options.pool,
            text = this.n(this.character, length, {pool: pool});

        return text.join("");
    };

    // -- End Basics --

    // -- Helpers --

    Chance.prototype.capitalize = function (word) {
        return word.charAt(0).toUpperCase() + word.substr(1);
    };

    Chance.prototype.mixin = function (obj) {
        for (var func_name in obj) {
            Chance.prototype[func_name] = obj[func_name];
        }
        return this;
    };

    // Given a function that generates something random and a number of items to generate,
    // return an array of items where none repeat.
    Chance.prototype.unique = function(fn, num, options) {
        options = initOptions(options, {
            // Default comparator to check that val is not already in arr.
            // Should return `false` if item not in array, `true` otherwise
            comparator: function(arr, val) {
                return arr.indexOf(val) !== -1;
            }
        });

        var arr = [], count = 0, result, MAX_DUPLICATES = num * 50, params = slice.call(arguments, 2);

        while (arr.length < num) {
            result = fn.apply(this, params);
            if (!options.comparator(arr, result)) {
                arr.push(result);
                // reset count when unique found
                count = 0;
            }

            if (++count > MAX_DUPLICATES) {
                throw new RangeError("Chance: num is likely too large for sample set");
            }
        }
        return arr;
    };

    /**
     *  Gives an array of n random terms
     *  @param fn the function that generates something random
     *  @param n number of terms to generate
     *  @param options options for the function fn. 
     *  There can be more parameters after these. All additional parameters are provided to the given function
     */
    Chance.prototype.n = function(fn, n, options) {
        var i = n || 1, arr = [], params = slice.call(arguments, 2);
        // Providing a negative count should result in a noop.
        i = Math.max( 0, i );

        for (null; i--; null) {
            arr.push(fn.apply(this, params));
        }

        return arr;
    };

    // H/T to SO for this one: http://vq.io/OtUrZ5
    Chance.prototype.pad = function (number, width, pad) {
        // Default pad to 0 if none provided
        pad = pad || '0';
        // Convert number to a string
        number = number + '';
        return number.length >= width ? number : new Array(width - number.length + 1).join(pad) + number;
    };

    Chance.prototype.pick = function (arr, count) {
        if (arr.length === 0) {
            throw new RangeError("Chance: Cannot pick() from an empty array");
        }
        if (!count || count === 1) {
            return arr[this.natural({max: arr.length - 1})];
        } else {
            return this.shuffle(arr).slice(0, count);
        }
    };

    Chance.prototype.shuffle = function (arr) {
        var old_array = arr.slice(0),
            new_array = [],
            j = 0,
            length = Number(old_array.length);

        for (var i = 0; i < length; i++) {
            // Pick a random index from the array
            j = this.natural({max: old_array.length - 1});
            // Add it to the new array
            new_array[i] = old_array[j];
            // Remove that element from the original array
            old_array.splice(j, 1);
        }

        return new_array;
    };

    // Returns a single item from an array with relative weighting of odds
    Chance.prototype.weighted = function(arr, weights) {
        if (arr.length !== weights.length) {
            throw new RangeError("Chance: length of array and weights must match");
        }

        // If any of the weights are less than 1, we want to scale them up to whole
        //   numbers for the rest of this logic to work
        if (weights.some(function(weight) { return weight < 1; })) {
            var min = weights.reduce(function(min, weight) {
                return (weight < min) ? weight : min;
            }, weights[0]);

            var scaling_factor = 1 / min;

            weights = weights.map(function(weight) {
                return weight * scaling_factor;
            });
        }

        var sum = weights.reduce(function(total, weight) {
            return total + weight;
        }, 0);

        // get an index
        var selected = this.natural({ min: 1, max: sum });

        var total = 0;
        var chosen;
        // Using some() here so we can bail as soon as we get our match
        weights.some(function(weight, index) {
            if (selected <= total + weight) {
                chosen = arr[index];
                return true;
            }
            total += weight;
            return false;
        });

        return chosen;
    };

    // -- End Helpers --


    // -- Time

    Chance.prototype.ampm = function () {
        return this.bool() ? 'am' : 'pm';
    };

    Chance.prototype.date = function (options) {
        var date_string, date;

        // If interval is specified we ignore preset
        if(options && (options.min || options.max)) {
            options = initOptions(options, {
                american: true,
                string: false
            });
            var min = typeof options.min !== "undefined" ? options.min.getTime() : 1;
            // 100,000,000 days measured relative to midnight at the beginning of 01 January, 1970 UTC. http://es5.github.io/#x15.9.1.1
            var max = typeof options.max !== "undefined" ? options.max.getTime() : 8640000000000000;

            date = new Date(this.natural({min: min, max: max}));
        } else {
            var m = this.month({raw: true});

            options = initOptions(options, {
                year: parseInt(this.year(), 10),
                // Necessary to subtract 1 because Date() 0-indexes month but not day or year
                // for some reason.
                month: m.numeric - 1,
                day: this.natural({min: 1, max: m.days}),
                hour: this.hour(),
                minute: this.minute(),
                second: this.second(),
                millisecond: this.millisecond(),
                american: true,
                string: false
            });

            date = new Date(options.year, options.month, options.day, options.hour, options.minute, options.second, options.millisecond);
        }

        if (options.american) {
            // Adding 1 to the month is necessary because Date() 0-indexes
            // months but not day for some odd reason.
            date_string = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
        } else {
            date_string = date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getFullYear();
        }

        return options.string ? date_string : date;
    };

    Chance.prototype.hammertime = function (options) {
        return this.date(options).getTime();
    };

    Chance.prototype.hour = function (options) {
        options = initOptions(options, {min: 1, max: options && options.twentyfour ? 24 : 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.twentyfour && options.max > 24, "Chance: Max cannot be greater than 24 for twentyfour option.");
        testRange(!options.twentyfour && options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.millisecond = function () {
        return this.natural({max: 999});
    };

    Chance.prototype.minute = Chance.prototype.second = function (options) {
        options = initOptions(options, {min: 0, max: 59});

        testRange(options.min < 0, "Chance: Min cannot be less than 0.");
        testRange(options.max > 59, "Chance: Max cannot be greater than 59.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        return this.natural({min: options.min, max: options.max});
    };

    Chance.prototype.month = function (options) {
        options = initOptions(options, {min: 1, max: 12});

        testRange(options.min < 1, "Chance: Min cannot be less than 1.");
        testRange(options.max > 12, "Chance: Max cannot be greater than 12.");
        testRange(options.min > options.max, "Chance: Min cannot be greater than Max.");

        var month = this.pick(this.months().slice(options.min - 1, options.max));
        return options.raw ? month : month.name;
    };

    Chance.prototype.months = function () {
        return this.get("months");
    };

    Chance.prototype.second = function () {
        return this.natural({max: 59});
    };

    Chance.prototype.timestamp = function () {
        return this.natural({min: 1, max: parseInt(new Date().getTime() / 1000, 10)});
    };

    Chance.prototype.year = function (options) {
        // Default to current year as min if none specified
        options = initOptions(options, {min: new Date().getFullYear()});

        // Default to one century after current year as max if none specified
        options.max = (typeof options.max !== "undefined") ? options.max : options.min + 100;

        return this.natural(options).toString();
    };

    // -- End Time

  
    // -- Miscellaneous --

    // Dice - For all the board game geeks out there, myself included ;)
    function diceFn (range) {
        return function () {
            return this.natural(range);
        };
    }
    Chance.prototype.d4 = diceFn({min: 1, max: 4});
    Chance.prototype.d6 = diceFn({min: 1, max: 6});
    Chance.prototype.d8 = diceFn({min: 1, max: 8});
    Chance.prototype.d10 = diceFn({min: 1, max: 10});
    Chance.prototype.d12 = diceFn({min: 1, max: 12});
    Chance.prototype.d20 = diceFn({min: 1, max: 20});
    Chance.prototype.d30 = diceFn({min: 1, max: 30});
    Chance.prototype.d100 = diceFn({min: 1, max: 100});

    Chance.prototype.rpg = function (thrown, options) {
        options = initOptions(options);
        if (thrown === null) {
            throw new Error("A type of die roll must be included");
        } else {
            var bits = thrown.toLowerCase().split("d"),
                rolls = [];

            if (bits.length !== 2 || !parseInt(bits[0], 10) || !parseInt(bits[1], 10)) {
                throw new Error("Invalid format provided. Please provide #d# where the first # is the number of dice to roll, the second # is the max of each die");
            }
            for (var i = bits[0]; i > 0; i--) {
                rolls[i - 1] = this.natural({min: 1, max: bits[1]});
            }
            return (typeof options.sum !== 'undefined' && options.sum) ? rolls.reduce(function (p, c) { return p + c; }) : rolls;
        }
    };

    // Guid
    Chance.prototype.guid = function (options) {
        options = initOptions(options, { version: 5 });

        var guid_pool = "abcdef1234567890",
            variant_pool = "ab89",
            guid = this.string({ pool: guid_pool, length: 8 }) + '-' +
                   this.string({ pool: guid_pool, length: 4 }) + '-' +
                   // The Version
                   options.version +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   // The Variant
                   this.string({ pool: variant_pool, length: 1 }) +
                   this.string({ pool: guid_pool, length: 3 }) + '-' +
                   this.string({ pool: guid_pool, length: 12 });
        return guid;
    };
    
    // Hash
    Chance.prototype.hash = function (options) {
        options = initOptions(options, {length : 40, casing: 'lower'});
        var pool = options.casing === 'upper' ? HEX_POOL.toUpperCase() : HEX_POOL;
        return this.string({pool: pool, length: options.length});
    };

    Chance.prototype.luhn_check = function (num) {
        var str = num.toString();
        var checkDigit = +str.substring(str.length - 1);
        return checkDigit === this.luhn_calculate(+str.substring(0, str.length - 1));
    };

    Chance.prototype.luhn_calculate = function (num) {
        var digits = num.toString().split("").reverse();
        var sum = 0;
        var digit;

        for (var i = 0, l = digits.length; l > i; ++i) {
            digit = +digits[i];
            if (i % 2 === 0) {
                digit *= 2;
                if (digit > 9) {
                    digit -= 9;
                }
            }
            sum += digit;
        }
        return (sum * 9) % 10;
    };

    var o_hasOwnProperty = Object.prototype.hasOwnProperty;
    var o_keys = (Object.keys || function(obj) {
      var result = [];
      for (var key in obj) {
        if (o_hasOwnProperty.call(obj, key)) {
          result.push(key);
        }
      }

      return result;
    });

    function _copyObject(source, target) {
      var keys = o_keys(source);

      for (var i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        target[key] = source[key] || target[key];
      }
    }

    function _copyArray(source, target) {
      for (var i = 0, l = source.length; i < l; i++) {
        target[i] = source[i];
      }
    }

    function copyObject(source, _target) {
        var isArray = Array.isArray(source);
        var target = _target || (isArray ? new Array(source.length) : {});

        if (isArray) {
          _copyArray(source, target);
        } else {
          _copyObject(source, target);
        }

        return target;
    }

    // Mac Address
    Chance.prototype.mac_address = function(options){
        // typically mac addresses are separated by ":"
        // however they can also be separated by "-"
        // the network variant uses a dot every fourth byte

        options = initOptions(options);
        if(!options.separator) {
            options.separator =  options.networkVersion ? "." : ":";
        }

        var mac_pool="ABCDEF1234567890",
            mac = "";
        if(!options.networkVersion) {
            mac = this.n(this.string, 6, { pool: mac_pool, length:2 }).join(options.separator);
        } else {
            mac = this.n(this.string, 3, { pool: mac_pool, length:4 }).join(options.separator);
        }

        return mac;
    };

    Chance.prototype.normal = function (options) {
        options = initOptions(options, {mean : 0, dev : 1});

        // The Marsaglia Polar method
        var s, u, v, norm,
            mean = options.mean,
            dev = options.dev;

        do {
            // U and V are from the uniform distribution on (-1, 1)
            u = this.random() * 2 - 1;
            v = this.random() * 2 - 1;

            s = u * u + v * v;
        } while (s >= 1);

        // Compute the standard normal variate
        norm = u * Math.sqrt(-2 * Math.log(s) / s);

        // Shape and scale
        return dev * norm + mean;
    };

    Chance.prototype.radio = function (options) {
        // Initial Letter (Typically Designated by Side of Mississippi River)
        options = initOptions(options, {side : "?"});
        var fl = "";
        switch (options.side.toLowerCase()) {
        case "east":
        case "e":
            fl = "W";
            break;
        case "west":
        case "w":
            fl = "K";
            break;
        default:
            fl = this.character({pool: "KW"});
            break;
        }

        return fl + this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"}) +
                this.character({alpha: true, casing: "upper"});
    };

    // -- End Miscellaneous --

    Chance.prototype.mersenne_twister = function (seed) {
        return new MersenneTwister(seed);
    };

    // Mersenne Twister from https://gist.github.com/banksean/300494
    var MersenneTwister = function (seed) {
        if (seed === undefined) {
            seed = new Date().getTime();
        }
        /* Period parameters */
        this.N = 624;
        this.M = 397;
        this.MATRIX_A = 0x9908b0df;   /* constant vector a */
        this.UPPER_MASK = 0x80000000; /* most significant w-r bits */
        this.LOWER_MASK = 0x7fffffff; /* least significant r bits */

        this.mt = new Array(this.N); /* the array for the state vector */
        this.mti = this.N + 1; /* mti==N + 1 means mt[N] is not initialized */

        this.init_genrand(seed);
    };

    /* initializes mt[N] with a seed */
    MersenneTwister.prototype.init_genrand = function (s) {
        this.mt[0] = s >>> 0;
        for (this.mti = 1; this.mti < this.N; this.mti++) {
            s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);
            this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253) + this.mti;
            /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */
            /* In the previous versions, MSBs of the seed affect   */
            /* only MSBs of the array mt[].                        */
            /* 2002/01/09 modified by Makoto Matsumoto             */
            this.mt[this.mti] >>>= 0;
            /* for >32 bit machines */
        }
    };

    /* initialize by an array with array-length */
    /* init_key is the array for initializing keys */
    /* key_length is its length */
    /* slight change for C++, 2004/2/26 */
    MersenneTwister.prototype.init_by_array = function (init_key, key_length) {
        var i = 1, j = 0, k, s;
        this.init_genrand(19650218);
        k = (this.N > key_length ? this.N : key_length);
        for (; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525))) + init_key[j] + j; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            j++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
            if (j >= key_length) { j = 0; }
        }
        for (k = this.N - 1; k; k--) {
            s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);
            this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1566083941) << 16) + (s & 0x0000ffff) * 1566083941)) - i; /* non linear */
            this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */
            i++;
            if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }
        }

        this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */
    };

    /* generates a random number on [0,0xffffffff]-interval */
    MersenneTwister.prototype.genrand_int32 = function () {
        var y;
        var mag01 = new Array(0x0, this.MATRIX_A);
        /* mag01[x] = x * MATRIX_A  for x=0,1 */

        if (this.mti >= this.N) { /* generate N words at one time */
            var kk;

            if (this.mti === this.N + 1) {   /* if init_genrand() has not been called, */
                this.init_genrand(5489); /* a default initial seed is used */
            }
            for (kk = 0; kk < this.N - this.M; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            for (;kk < this.N - 1; kk++) {
                y = (this.mt[kk]&this.UPPER_MASK)|(this.mt[kk + 1]&this.LOWER_MASK);
                this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];
            }
            y = (this.mt[this.N - 1]&this.UPPER_MASK)|(this.mt[0]&this.LOWER_MASK);
            this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];

            this.mti = 0;
        }

        y = this.mt[this.mti++];

        /* Tempering */
        y ^= (y >>> 11);
        y ^= (y << 7) & 0x9d2c5680;
        y ^= (y << 15) & 0xefc60000;
        y ^= (y >>> 18);

        return y >>> 0;
    };

    /* generates a random number on [0,0x7fffffff]-interval */
    MersenneTwister.prototype.genrand_int31 = function () {
        return (this.genrand_int32() >>> 1);
    };

    /* generates a random number on [0,1]-real-interval */
    MersenneTwister.prototype.genrand_real1 = function () {
        return this.genrand_int32() * (1.0 / 4294967295.0);
        /* divided by 2^32-1 */
    };

    /* generates a random number on [0,1)-real-interval */
    MersenneTwister.prototype.random = function () {
        return this.genrand_int32() * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on (0,1)-real-interval */
    MersenneTwister.prototype.genrand_real3 = function () {
        return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);
        /* divided by 2^32 */
    };

    /* generates a random number on [0,1) with 53-bit resolution*/
    MersenneTwister.prototype.genrand_res53 = function () {
        var a = this.genrand_int32()>>>5, b = this.genrand_int32()>>>6;
        return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);
    };


    // CommonJS module
    if (typeof exports !== 'undefined') {
        if (typeof module !== 'undefined' && module.exports) {
            exports = module.exports = Chance;
        }
        exports.Chance = Chance;
    }

    // Register as an anonymous AMD module
    if (typeof define === 'function' && define.amd) {
        define('lib/Chance',[], function () {
            return Chance;
        });
    }

    // if there is a importsScrips object define chance for worker
    if (typeof importScripts !== 'undefined') {
        chance = new Chance();
    }

    // If there is a window object, that at least has a document property,
    // instantiate and define chance on the window
    if (typeof window === "object" && typeof window.document === "object") {
        window.Chance = Chance;
        window.chance = new Chance();
    }
})();

/**
 * This is the base Component all others shall extend.
 */
define(
  'component/Base',[],function() {

    var Component = function( type ) {
      this.type = ( type ) ? type : Component.BASE;
      this.isRenderable = false;
    };

    // State
    Component.STATE_INITIALIZING = 0;
    Component.STATE_BUFFERING = 1;
    Component.STATE_READY = 2;
    Component.STATE_FAILED = 3;

    // Types
    Component.BASE = 0;
    Component.BASE_THREE = 1;
    Component.BASE_FONT = 2;
    Component.RIGID_BODY = 3;
    Component.SPRITE = 4;
    Component.STATIC_TEXT = 5;
    Component.AUDIO_SOURCE = 6;
    Component.PARTICLE_EMITTER = 7;

    Component.CUSTOM = -1;

    return Component;
  }
);

/**
 * Exports the {@link module:core/GameObject~GameObject|GameObject} class.
 * @module core/GameObject
 */
define(
  'core/GameObject',[ 'core/Common', 'core/Timer', 'collection/Map', 'component/Base', 'lib/Three' ], function( Common, Timer, Map, Base, _Three ) {

    /**
     * The main build block of the engine. Create the game classes by inheriting from the Game Object.
     * For quick creation of GOs, it is also possible to use composition.
     *
     * @example
     * // Composition
     * var myGO = new m.GameObject( myGOId, myGOUpdateFunction );
     *
     * // Inheritance
     * var MyGOClass = function( id ) {
     *  m.GameObject.call( this, id );
     * };
     * MyGOClass.prototype = Object.create( m.GameObject.prototype );
     * MyGOClass.prototype.update = function() { ... };

     * @param {String} id Identifier. Not mandatory, but recommended
     * @param {function} update The object logic. Not necessary if using inheritance
     * @param {THREE.Vector3} position Initial position
     * @param {THREE.Vector3} rotation Initial rotation
     * @param {THREE.Vector3} scale Initial scale
     * @class GameObject
     */
    var GameObject = function( id, update, position, rotation, scale ) {

      /**
       * Unique identifier, created automatically.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {string}
       * @name uid
       */
      this.uid = Common.createUniqueId();

      /**
       * The Game Object id, used to recover the GO instance wherever necessary.
       * Recommended to be explicitly set.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {String|string}
       * @name id
       * @default uid
       */
      this.id = id || this.uid;

      /**
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {THREE.Vector3}
       * @name position
       * @default THREE.Vector3( 0, 0, 0 )
       */
      this.position = ( position ) ? position : new THREE.Vector3( 0, 0, 0 );

      /**
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {THREE.Vector3}
       * @name rotation
       * @default THREE.Vector3( 0, 1, 0 )
       */
      this.rotation = ( rotation ) ? rotation : new THREE.Vector3( 0, 1, 0 ); // new THREE.Euler()

      /**
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {THREE.Vector3}
       * @name scale
       * @default THREE.Vector3( 1, 1, 1 )
       */
      this.scale = ( scale ) ? scale : new THREE.Vector3( 1, 1, 1 );

      /**
       * Axis with Y flipped to calculate properly according to the engine orthographic camera.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {THREE.Vector3}
       * @name axis
       * @default THREE.Vector3( 0, -1, 0 );
       */
      this.axis = new THREE.Vector3( 0, -1, 0 );

      /**
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {Map}
       * @name components
       */
      this.components = new Map();

      /**
       * An iterator for the components.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @name componentsIt
       */
      this.componentsIt = this.components.iterator();

      /**
       * List of Game Objects that are children of this.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {Array}
       * @name children
       */
      this.children = [];

      /**
       * Controls if this Game Object will be rendered on canvas.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {boolean}
       * @name isVisible
       */
      this.isVisible = true;

      /**
       * Controls if this Game Object will be updated on engine cycle.
       * @memberOf module:core/GameObject~GameObject
       * @instance
       * @type {boolean}
       * @name isActive
       */
      this.isActive = true;

      this.lastUpdate = 0;

      this.update = ( update && typeof ( update ) === 'function' ) ? update : function() {};
    };

    /**
     * Method to be overridden when inheriting from Game Object.
     * It is called on every engine cycle, making it the place to put specific logic.
     * @method
     * @abstract
     * @instance
     * @name update
     * @memberOf module:core/GameObject~GameObject
     */
    GameObject.prototype.update = function() {
      throw new Error( 'Update method is not implemented in GameObject id: ' + this.id );
    };

    GameObject.prototype.postUpdate = function() {
      if( this.isActive ) {
        this.updateComponents();
      }
      this.lastUpdate = Timer.time;
    };

    GameObject.prototype.getEulerRotation = function() {
      var angle = this.rotation.angleTo( this.axis );
      return ( this.rotation.y * this.axis.x > this.rotation.x * this.axis.y ) ? angle : -angle;
    };

    GameObject.prototype.lookAt = function( target ) {
      this.rotation.x = target.x - this.position.x;
      this.rotation.y = target.y - this.position.y;
      this.rotation.normalize();
    };

    GameObject.prototype.getEulerRotationToTarget = function( target ) {
      var rotation = this.rotation.clone();

      rotation.x = target.x - this.position.x;
      rotation.y = target.y - this.position.y;

      rotation.normalize();

      var angle = rotation.angleTo( this.axis );

      return ( rotation.y * this.axis.x > rotation.x * this.axis.y ) ? angle : -angle;
    };

    GameObject.prototype.addComponent = function( component ) {
      this.components.put( component.type, component );
    };

    GameObject.prototype.findComponent = function( type ) {
      return this.components.get( type );
    };

    GameObject.prototype.removeComponent = function( type ) {
      this.components.remove( type );
    };

    GameObject.prototype.clearComponents = function() {
      this.components.clear();
    };

    GameObject.prototype.hasComponent = function( type ) {
      return ( this.components.contains( type ) ) ? true : false;
    };

    GameObject.prototype.listRenderableComponents = function() {
      var list = [];
      var c;
      this.componentsIt.first();
      while( this.componentsIt.hasNext() ) {
        c = this.componentsIt.next();
        if( c.isRenderable ) {
          list.push( c );
        }
      }
      return list;
    };

    GameObject.prototype.updateComponents = function() {
      // Updates object position from Box2D to the engine based on physics simulation (if applicable).
      // Only affect X and Y for safety reasons, messing with Z on 2D is probably not expected.
      var rigidBody = this.findComponent( Base.RIGID_BODY );
      if( rigidBody ) {
        this.position.x = rigidBody.body.GetPosition().get_x() * rigidBody.conversionFactor;
        this.position.y = rigidBody.body.GetPosition().get_y() * rigidBody.conversionFactor;
      }

      // For renderable components, updates engine transformations to Three.js
      this.componentsIt.first();
      while( this.componentsIt.hasNext() ) {
        var component = this.componentsIt.next();
        if( component.isRenderable && typeof ( component.getMesh ) === 'function' && component.getMesh() ) {
          component.getMesh().position.set( this.position.x, this.position.y, this.position.z );
          component.getMesh().rotation.z = this.getEulerRotation();
          component.getMesh().scale.set( -this.scale.x, this.scale.y, this.scale.z );
          component.visible = this.isVisible;
        }
      }
    };

    GameObject.prototype.equals = function( go ) {
      return ( go.id === this.id );
    };

    GameObject.prototype.updateAll = function() {
      for( var i = 0, len = this.children.length; i < len; i++ ) {
        this.children[ i ].updateAll();
      }
      this.update();
      this.postUpdate();
    };

    return GameObject;
  }
);

/*!
* SoundJS
* Visit http://createjs.com/ for documentation, updates and examples.
*
* Copyright (c) 2010 gskinner.com, inc.
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/


//##############################################################################
// version.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {

	/**
	 * Static class holding library specific information such as the version and buildDate of the library.
	 * The SoundJS class has been renamed {{#crossLink "Sound"}}{{/crossLink}}.  Please see {{#crossLink "Sound"}}{{/crossLink}}
	 * for information on using sound.
	 * @class SoundJS
	 **/
	var s = createjs.SoundJS = createjs.SoundJS || {};

	/**
	 * The version string for this release.
	 * @property version
	 * @type String
	 * @static
	 **/
	s.version = /*=version*/"0.6.0"; // injected by build process

	/**
	 * The build date for this release in UTC format.
	 * @property buildDate
	 * @type String
	 * @static
	 **/
	s.buildDate = /*=date*/"Thu, 11 Dec 2014 23:32:09 GMT"; // injected by build process

})();

//##############################################################################
// extend.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * @class Utility Methods
 */

/**
 * Sets up the prototype chain and constructor property for a new class.
 *
 * This should be called right after creating the class constructor.
 *
 * 	function MySubClass() {}
 * 	createjs.extend(MySubClass, MySuperClass);
 * 	ClassB.prototype.doSomething = function() { }
 *
 * 	var foo = new MySubClass();
 * 	console.log(foo instanceof MySuperClass); // true
 * 	console.log(foo.prototype.constructor === MySubClass); // true
 *
 * @method extends
 * @param {Function} subclass The subclass.
 * @param {Function} superclass The superclass to extend.
 * @return {Function} Returns the subclass's new prototype.
 */
createjs.extend = function(subclass, superclass) {
	"use strict";

	function o() { this.constructor = subclass; }
	o.prototype = superclass.prototype;
	return (subclass.prototype = new o());
};

//##############################################################################
// promote.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * @class Utility Methods
 */

/**
 * Promotes any methods on the super class that were overridden, by creating an alias in the format `prefix_methodName`.
 * It is recommended to use the super class's name as the prefix.
 * An alias to the super class's constructor is always added in the format `prefix_constructor`.
 * This allows the subclass to call super class methods without using `function.call`, providing better performance.
 *
 * For example, if `MySubClass` extends `MySuperClass`, and both define a `draw` method, then calling `promote(MySubClass, "MySuperClass")`
 * would add a `MySuperClass_constructor` method to MySubClass and promote the `draw` method on `MySuperClass` to the
 * prototype of `MySubClass` as `MySuperClass_draw`.
 *
 * This should be called after the class's prototype is fully defined.
 *
 * 	function ClassA(name) {
 * 		this.name = name;
 * 	}
 * 	ClassA.prototype.greet = function() {
 * 		return "Hello "+this.name;
 * 	}
 *
 * 	function ClassB(name, punctuation) {
 * 		this.ClassA_constructor(name);
 * 		this.punctuation = punctuation;
 * 	}
 * 	createjs.extend(ClassB, ClassA);
 * 	ClassB.prototype.greet = function() {
 * 		return this.ClassA_greet()+this.punctuation;
 * 	}
 * 	createjs.promote(ClassB, "ClassA");
 *
 * 	var foo = new ClassB("World", "!?!");
 * 	console.log(foo.greet()); // Hello World!?!
 *
 * @method promote
 * @param {Function} subclass The class to promote super class methods on.
 * @param {String} prefix The prefix to add to the promoted method names. Usually the name of the superclass.
 * @return {Function} Returns the subclass.
 */
createjs.promote = function(subclass, prefix) {
	"use strict";

	var subP = subclass.prototype, supP = (Object.getPrototypeOf&&Object.getPrototypeOf(subP))||subP.__proto__;
	if (supP) {
		subP[(prefix+="_") + "constructor"] = supP.constructor; // constructor is not always innumerable
		for (var n in supP) {
			if (subP.hasOwnProperty(n) && (typeof supP[n] == "function")) { subP[prefix + n] = supP[n]; }
		}
	}
	return subclass;
};

//##############################################################################
// IndexOf.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * @class Utility Methods
 */

/**
 * Finds the first occurrence of a specified value searchElement in the passed in array, and returns the index of
 * that value.  Returns -1 if value is not found.
 *
 *      var i = createjs.indexOf(myArray, myElementToFind);
 *
 * @method indexOf
 * @param {Array} array Array to search for searchElement
 * @param searchElement Element to find in array.
 * @return {Number} The first index of searchElement in array.
 */
createjs.indexOf = function (array, searchElement){
	"use strict";

	for (var i = 0,l=array.length; i < l; i++) {
		if (searchElement === array[i]) {
			return i;
		}
	}
	return -1;
};

//##############################################################################
// Proxy.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * Various utilities that the CreateJS Suite uses. Utilities are created as separate files, and will be available on the
 * createjs namespace directly.
 *
 * <h4>Example</h4>
 *
 *      myObject.addEventListener("change", createjs.proxy(myMethod, scope));
 *
 * @class Utility Methods
 * @main Utility Methods
 */

(function() {
	"use strict";

	/**
	 * A function proxy for methods. By default, JavaScript methods do not maintain scope, so passing a method as a
	 * callback will result in the method getting called in the scope of the caller. Using a proxy ensures that the
	 * method gets called in the correct scope.
	 *
	 * Additional arguments can be passed that will be applied to the function when it is called.
	 *
	 * <h4>Example</h4>
	 *
	 *      myObject.addEventListener("event", createjs.proxy(myHandler, this, arg1, arg2));
	 *
	 *      function myHandler(arg1, arg2) {
	 *           // This gets called when myObject.myCallback is executed.
	 *      }
	 *
	 * @method proxy
	 * @param {Function} method The function to call
	 * @param {Object} scope The scope to call the method name on
	 * @param {mixed} [arg] * Arguments that are appended to the callback for additional params.
	 * @public
	 * @static
	 */
	createjs.proxy = function (method, scope) {
		var aArgs = Array.prototype.slice.call(arguments, 2);
		return function () {
			return method.apply(scope, Array.prototype.slice.call(arguments, 0).concat(aArgs));
		};
	}

}());

//##############################################################################
// definePropertySupported.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * @class Utility Methods
 */
(function() {
	"use strict";

	/**
	 * Boolean value indicating if Object.defineProperty is supported.
	 *
	 * <h4>Example</h4>
	 *
	 *      if (createjs.definePropertySupported) { // add getter / setter}
	 *
	 * @property definePropertySupported
	 * @type {Boolean}
	 * @default true
	 */
	var t = Object.defineProperty ? true : false;

	// IE8 has Object.defineProperty, but only for DOM objects, so check if fails to suppress errors
	var foo = {};
	try {
		Object.defineProperty(foo, "bar", {
			get: function () {
				return this._bar;
			},
			set: function (value) {
				this._bar = value;
			}
		});
	} catch (e) {
		t = false;
	}

	createjs.definePropertySupported = t;
}());

//##############################################################################
// BrowserDetect.js
//##############################################################################

this.createjs = this.createjs||{};

/**
 * @class Utility Methods
 */
(function() {
	"use strict";

	/**
	 * An object that determines the current browser, version, operating system, and other environment
	 * variables via user agent string.
	 *
	 * Used for audio because feature detection is unable to detect the many limitations of mobile devices.
	 *
	 * <h4>Example</h4>
	 *
	 *      if (createjs.BrowserDetect.isIOS) { // do stuff }
	 *
	 * @property BrowserDetect
	 * @type {Object}
	 * @param {Boolean} isFirefox True if our browser is Firefox.
	 * @param {Boolean} isOpera True if our browser is opera.
	 * @param {Boolean} isChrome True if our browser is Chrome.  Note that Chrome for Android returns true, but is a
	 * completely different browser with different abilities.
	 * @param {Boolean} isIOS True if our browser is safari for iOS devices (iPad, iPhone, and iPod).
	 * @param {Boolean} isAndroid True if our browser is Android.
	 * @param {Boolean} isBlackberry True if our browser is Blackberry.
	 * @constructor
	 * @static
	 */
	function BrowserDetect() {
		throw "BrowserDetect cannot be instantiated";
	};

	var agent = BrowserDetect.agent = window.navigator.userAgent;
	BrowserDetect.isWindowPhone = (agent.indexOf("IEMobile") > -1) || (agent.indexOf("Windows Phone") > -1);
	BrowserDetect.isFirefox = (agent.indexOf("Firefox") > -1);
	BrowserDetect.isOpera = (window.opera != null);
	BrowserDetect.isChrome = (agent.indexOf("Chrome") > -1);  // NOTE that Chrome on Android returns true but is a completely different browser with different abilities
	BrowserDetect.isIOS = (agent.indexOf("iPod") > -1 || agent.indexOf("iPhone") > -1 || agent.indexOf("iPad") > -1) && !BrowserDetect.isWindowPhone;
	BrowserDetect.isAndroid = (agent.indexOf("Android") > -1) && !BrowserDetect.isWindowPhone;
	BrowserDetect.isBlackberry = (agent.indexOf("Blackberry") > -1);

	createjs.BrowserDetect = BrowserDetect;

}());

//##############################################################################
// EventDispatcher.js
//##############################################################################

this.createjs = this.createjs||{};

(function() {
	"use strict";


// constructor:
	/**
	 * EventDispatcher provides methods for managing queues of event listeners and dispatching events.
	 *
	 * You can either extend EventDispatcher or mix its methods into an existing prototype or instance by using the
	 * EventDispatcher {{#crossLink "EventDispatcher/initialize"}}{{/crossLink}} method.
	 *
	 * Together with the CreateJS Event class, EventDispatcher provides an extended event model that is based on the
	 * DOM Level 2 event model, including addEventListener, removeEventListener, and dispatchEvent. It supports
	 * bubbling / capture, preventDefault, stopPropagation, stopImmediatePropagation, and handleEvent.
	 *
	 * EventDispatcher also exposes a {{#crossLink "EventDispatcher/on"}}{{/crossLink}} method, which makes it easier
	 * to create scoped listeners, listeners that only run once, and listeners with associated arbitrary data. The
	 * {{#crossLink "EventDispatcher/off"}}{{/crossLink}} method is merely an alias to
	 * {{#crossLink "EventDispatcher/removeEventListener"}}{{/crossLink}}.
	 *
	 * Another addition to the DOM Level 2 model is the {{#crossLink "EventDispatcher/removeAllEventListeners"}}{{/crossLink}}
	 * method, which can be used to listeners for all events, or listeners for a specific event. The Event object also
	 * includes a {{#crossLink "Event/remove"}}{{/crossLink}} method which removes the active listener.
	 *
	 * <h4>Example</h4>
	 * Add EventDispatcher capabilities to the "MyClass" class.
	 *
	 *      EventDispatcher.initialize(MyClass.prototype);
	 *
	 * Add an event (see {{#crossLink "EventDispatcher/addEventListener"}}{{/crossLink}}).
	 *
	 *      instance.addEventListener("eventName", handlerMethod);
	 *      function handlerMethod(event) {
	 *          console.log(event.target + " Was Clicked");
	 *      }
	 *
	 * <b>Maintaining proper scope</b><br />
	 * Scope (ie. "this") can be be a challenge with events. Using the {{#crossLink "EventDispatcher/on"}}{{/crossLink}}
	 * method to subscribe to events simplifies this.
	 *
	 *      instance.addEventListener("click", function(event) {
	 *          console.log(instance == this); // false, scope is ambiguous.
	 *      });
	 *
	 *      instance.on("click", function(event) {
	 *          console.log(instance == this); // true, "on" uses dispatcher scope by default.
	 *      });
	 *
	 * If you want to use addEventListener instead, you may want to use function.bind() or a similar proxy to manage scope.
	 *
	 *
	 * @class EventDispatcher
	 * @constructor
	 **/
	function EventDispatcher() {


	// private properties:
		/**
		 * @protected
		 * @property _listeners
		 * @type Object
		 **/
		this._listeners = null;

		/**
		 * @protected
		 * @property _captureListeners
		 * @type Object
		 **/
		this._captureListeners = null;
	}
	var p = EventDispatcher.prototype;


// static public methods:
	/**
	 * Static initializer to mix EventDispatcher methods into a target object or prototype.
	 *
	 * 		EventDispatcher.initialize(MyClass.prototype); // add to the prototype of the class
	 * 		EventDispatcher.initialize(myObject); // add to a specific instance
	 *
	 * @method initialize
	 * @static
	 * @param {Object} target The target object to inject EventDispatcher methods into. This can be an instance or a
	 * prototype.
	 **/
	EventDispatcher.initialize = function(target) {
		target.addEventListener = p.addEventListener;
		target.on = p.on;
		target.removeEventListener = target.off =  p.removeEventListener;
		target.removeAllEventListeners = p.removeAllEventListeners;
		target.hasEventListener = p.hasEventListener;
		target.dispatchEvent = p.dispatchEvent;
		target._dispatchEvent = p._dispatchEvent;
		target.willTrigger = p.willTrigger;
	};


// public methods:
	/**
	 * Adds the specified event listener. Note that adding multiple listeners to the same function will result in
	 * multiple callbacks getting fired.
	 *
	 * <h4>Example</h4>
	 *
	 *      displayObject.addEventListener("click", handleClick);
	 *      function handleClick(event) {
	 *         // Click happened.
	 *      }
	 *
	 * @method addEventListener
	 * @param {String} type The string type of the event.
	 * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when
	 * the event is dispatched.
	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 * @return {Function | Object} Returns the listener for chaining or assignment.
	 **/
	p.addEventListener = function(type, listener, useCapture) {
		var listeners;
		if (useCapture) {
			listeners = this._captureListeners = this._captureListeners||{};
		} else {
			listeners = this._listeners = this._listeners||{};
		}
		var arr = listeners[type];
		if (arr) { this.removeEventListener(type, listener, useCapture); }
		arr = listeners[type]; // remove may have deleted the array
		if (!arr) { listeners[type] = [listener];  }
		else { arr.push(listener); }
		return listener;
	};

	/**
	 * A shortcut method for using addEventListener that makes it easier to specify an execution scope, have a listener
	 * only run once, associate arbitrary data with the listener, and remove the listener.
	 *
	 * This method works by creating an anonymous wrapper function and subscribing it with addEventListener.
	 * The created anonymous function is returned for use with .removeEventListener (or .off).
	 *
	 * <h4>Example</h4>
	 *
	 * 		var listener = myBtn.on("click", handleClick, null, false, {count:3});
	 * 		function handleClick(evt, data) {
	 * 			data.count -= 1;
	 * 			console.log(this == myBtn); // true - scope defaults to the dispatcher
	 * 			if (data.count == 0) {
	 * 				alert("clicked 3 times!");
	 * 				myBtn.off("click", listener);
	 * 				// alternately: evt.remove();
	 * 			}
	 * 		}
	 *
	 * @method on
	 * @param {String} type The string type of the event.
	 * @param {Function | Object} listener An object with a handleEvent method, or a function that will be called when
	 * the event is dispatched.
	 * @param {Object} [scope] The scope to execute the listener in. Defaults to the dispatcher/currentTarget for function listeners, and to the listener itself for object listeners (ie. using handleEvent).
	 * @param {Boolean} [once=false] If true, the listener will remove itself after the first time it is triggered.
	 * @param {*} [data] Arbitrary data that will be included as the second parameter when the listener is called.
	 * @param {Boolean} [useCapture=false] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 * @return {Function} Returns the anonymous function that was created and assigned as the listener. This is needed to remove the listener later using .removeEventListener.
	 **/
	p.on = function(type, listener, scope, once, data, useCapture) {
		if (listener.handleEvent) {
			scope = scope||listener;
			listener = listener.handleEvent;
		}
		scope = scope||this;
		return this.addEventListener(type, function(evt) {
				listener.call(scope, evt, data);
				once&&evt.remove();
			}, useCapture);
	};

	/**
	 * Removes the specified event listener.
	 *
	 * <b>Important Note:</b> that you must pass the exact function reference used when the event was added. If a proxy
	 * function, or function closure is used as the callback, the proxy/closure reference must be used - a new proxy or
	 * closure will not work.
	 *
	 * <h4>Example</h4>
	 *
	 *      displayObject.removeEventListener("click", handleClick);
	 *
	 * @method removeEventListener
	 * @param {String} type The string type of the event.
	 * @param {Function | Object} listener The listener function or object.
	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 **/
	p.removeEventListener = function(type, listener, useCapture) {
		var listeners = useCapture ? this._captureListeners : this._listeners;
		if (!listeners) { return; }
		var arr = listeners[type];
		if (!arr) { return; }
		for (var i=0,l=arr.length; i<l; i++) {
			if (arr[i] == listener) {
				if (l==1) { delete(listeners[type]); } // allows for faster checks.
				else { arr.splice(i,1); }
				break;
			}
		}
	};

	/**
	 * A shortcut to the removeEventListener method, with the same parameters and return value. This is a companion to the
	 * .on method.
	 *
	 * @method off
	 * @param {String} type The string type of the event.
	 * @param {Function | Object} listener The listener function or object.
	 * @param {Boolean} [useCapture] For events that bubble, indicates whether to listen for the event in the capture or bubbling/target phase.
	 **/
	p.off = p.removeEventListener;

	/**
	 * Removes all listeners for the specified type, or all listeners of all types.
	 *
	 * <h4>Example</h4>
	 *
	 *      // Remove all listeners
	 *      displayObject.removeAllEventListeners();
	 *
	 *      // Remove all click listeners
	 *      displayObject.removeAllEventListeners("click");
	 *
	 * @method removeAllEventListeners
	 * @param {String} [type] The string type of the event. If omitted, all listeners for all types will be removed.
	 **/
	p.removeAllEventListeners = function(type) {
		if (!type) { this._listeners = this._captureListeners = null; }
		else {
			if (this._listeners) { delete(this._listeners[type]); }
			if (this._captureListeners) { delete(this._captureListeners[type]); }
		}
	};

	/**
	 * Dispatches the specified event to all listeners.
	 *
	 * <h4>Example</h4>
	 *
	 *      // Use a string event
	 *      this.dispatchEvent("complete");
	 *
	 *      // Use an Event instance
	 *      var event = new createjs.Event("progress");
	 *      this.dispatchEvent(event);
	 *
	 * @method dispatchEvent
	 * @param {Object | String | Event} eventObj An object with a "type" property, or a string type.
	 * While a generic object will work, it is recommended to use a CreateJS Event instance. If a string is used,
	 * dispatchEvent will construct an Event instance with the specified type.
	 * @return {Boolean} Returns the value of eventObj.defaultPrevented.
	 **/
	p.dispatchEvent = function(eventObj) {
		if (typeof eventObj == "string") {
			// won't bubble, so skip everything if there's no listeners:
			var listeners = this._listeners;
			if (!listeners || !listeners[eventObj]) { return false; }
			eventObj = new createjs.Event(eventObj);
		} else if (eventObj.target && eventObj.clone) {
			// redispatching an active event object, so clone it:
			eventObj = eventObj.clone();
		}
		try { eventObj.target = this; } catch (e) {} // try/catch allows redispatching of native events

		if (!eventObj.bubbles || !this.parent) {
			this._dispatchEvent(eventObj, 2);
		} else {
			var top=this, list=[top];
			while (top.parent) { list.push(top = top.parent); }
			var i, l=list.length;

			// capture & atTarget
			for (i=l-1; i>=0 && !eventObj.propagationStopped; i--) {
				list[i]._dispatchEvent(eventObj, 1+(i==0));
			}
			// bubbling
			for (i=1; i<l && !eventObj.propagationStopped; i++) {
				list[i]._dispatchEvent(eventObj, 3);
			}
		}
		return eventObj.defaultPrevented;
	};

	/**
	 * Indicates whether there is at least one listener for the specified event type.
	 * @method hasEventListener
	 * @param {String} type The string type of the event.
	 * @return {Boolean} Returns true if there is at least one listener for the specified event.
	 **/
	p.hasEventListener = function(type) {
		var listeners = this._listeners, captureListeners = this._captureListeners;
		return !!((listeners && listeners[type]) || (captureListeners && captureListeners[type]));
	};

	/**
	 * Indicates whether there is at least one listener for the specified event type on this object or any of its
	 * ancestors (parent, parent's parent, etc). A return value of true indicates that if a bubbling event of the
	 * specified type is dispatched from this object, it will trigger at least one listener.
	 *
	 * This is similar to {{#crossLink "EventDispatcher/hasEventListener"}}{{/crossLink}}, but it searches the entire
	 * event flow for a listener, not just this object.
	 * @method willTrigger
	 * @param {String} type The string type of the event.
	 * @return {Boolean} Returns `true` if there is at least one listener for the specified event.
	 **/
	p.willTrigger = function(type) {
		var o = this;
		while (o) {
			if (o.hasEventListener(type)) { return true; }
			o = o.parent;
		}
		return false;
	};

	/**
	 * @method toString
	 * @return {String} a string representation of the instance.
	 **/
	p.toString = function() {
		return "[EventDispatcher]";
	};


// private methods:
	/**
	 * @method _dispatchEvent
	 * @param {Object | String | Event} eventObj
	 * @param {Object} eventPhase
	 * @protected
	 **/
	p._dispatchEvent = function(eventObj, eventPhase) {
		var l, listeners = (eventPhase==1) ? this._captureListeners : this._listeners;
		if (eventObj && listeners) {
			var arr = listeners[eventObj.type];
			if (!arr||!(l=arr.length)) { return; }
			try { eventObj.currentTarget = this; } catch (e) {}
			try { eventObj.eventPhase = eventPhase; } catch (e) {}
			eventObj.removed = false;

			arr = arr.slice(); // to avoid issues with items being removed or added during the dispatch
			for (var i=0; i<l && !eventObj.immediatePropagationStopped; i++) {
				var o = arr[i];
				if (o.handleEvent) { o.handleEvent(eventObj); }
				else { o(eventObj); }
				if (eventObj.removed) {
					this.off(eventObj.type, o, eventPhase==1);
					eventObj.removed = false;
				}
			}
		}
	};


	createjs.EventDispatcher = EventDispatcher;
}());

//##############################################################################
// Event.js
//##############################################################################

this.createjs = this.createjs||{};

(function() {
	"use strict";

// constructor:
	/**
	 * Contains properties and methods shared by all events for use with
	 * {{#crossLink "EventDispatcher"}}{{/crossLink}}.
	 *
	 * Note that Event objects are often reused, so you should never
	 * rely on an event object's state outside of the call stack it was received in.
	 * @class Event
	 * @param {String} type The event type.
	 * @param {Boolean} bubbles Indicates whether the event will bubble through the display list.
	 * @param {Boolean} cancelable Indicates whether the default behaviour of this event can be cancelled.
	 * @constructor
	 **/
	function Event(type, bubbles, cancelable) {


	// public properties:
		/**
		 * The type of event.
		 * @property type
		 * @type String
		 **/
		this.type = type;

		/**
		 * The object that generated an event.
		 * @property target
		 * @type Object
		 * @default null
		 * @readonly
		*/
		this.target = null;

		/**
		 * The current target that a bubbling event is being dispatched from. For non-bubbling events, this will
		 * always be the same as target. For example, if childObj.parent = parentObj, and a bubbling event
		 * is generated from childObj, then a listener on parentObj would receive the event with
		 * target=childObj (the original target) and currentTarget=parentObj (where the listener was added).
		 * @property currentTarget
		 * @type Object
		 * @default null
		 * @readonly
		*/
		this.currentTarget = null;

		/**
		 * For bubbling events, this indicates the current event phase:<OL>
		 * 	<LI> capture phase: starting from the top parent to the target</LI>
		 * 	<LI> at target phase: currently being dispatched from the target</LI>
		 * 	<LI> bubbling phase: from the target to the top parent</LI>
		 * </OL>
		 * @property eventPhase
		 * @type Number
		 * @default 0
		 * @readonly
		*/
		this.eventPhase = 0;

		/**
		 * Indicates whether the event will bubble through the display list.
		 * @property bubbles
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.bubbles = !!bubbles;

		/**
		 * Indicates whether the default behaviour of this event can be cancelled via
		 * {{#crossLink "Event/preventDefault"}}{{/crossLink}}. This is set via the Event constructor.
		 * @property cancelable
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.cancelable = !!cancelable;

		/**
		 * The epoch time at which this event was created.
		 * @property timeStamp
		 * @type Number
		 * @default 0
		 * @readonly
		*/
		this.timeStamp = (new Date()).getTime();

		/**
		 * Indicates if {{#crossLink "Event/preventDefault"}}{{/crossLink}} has been called
		 * on this event.
		 * @property defaultPrevented
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.defaultPrevented = false;

		/**
		 * Indicates if {{#crossLink "Event/stopPropagation"}}{{/crossLink}} or
		 * {{#crossLink "Event/stopImmediatePropagation"}}{{/crossLink}} has been called on this event.
		 * @property propagationStopped
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.propagationStopped = false;

		/**
		 * Indicates if {{#crossLink "Event/stopImmediatePropagation"}}{{/crossLink}} has been called
		 * on this event.
		 * @property immediatePropagationStopped
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.immediatePropagationStopped = false;

		/**
		 * Indicates if {{#crossLink "Event/remove"}}{{/crossLink}} has been called on this event.
		 * @property removed
		 * @type Boolean
		 * @default false
		 * @readonly
		*/
		this.removed = false;
	}
	var p = Event.prototype;


// public methods:
	/**
	 * Sets {{#crossLink "Event/defaultPrevented"}}{{/crossLink}} to true.
	 * Mirrors the DOM event standard.
	 * @method preventDefault
	 **/
	p.preventDefault = function() {
		this.defaultPrevented = this.cancelable&&true;
	};

	/**
	 * Sets {{#crossLink "Event/propagationStopped"}}{{/crossLink}} to true.
	 * Mirrors the DOM event standard.
	 * @method stopPropagation
	 **/
	p.stopPropagation = function() {
		this.propagationStopped = true;
	};

	/**
	 * Sets {{#crossLink "Event/propagationStopped"}}{{/crossLink}} and
	 * {{#crossLink "Event/immediatePropagationStopped"}}{{/crossLink}} to true.
	 * Mirrors the DOM event standard.
	 * @method stopImmediatePropagation
	 **/
	p.stopImmediatePropagation = function() {
		this.immediatePropagationStopped = this.propagationStopped = true;
	};

	/**
	 * Causes the active listener to be removed via removeEventListener();
	 *
	 * 		myBtn.addEventListener("click", function(evt) {
	 * 			// do stuff...
	 * 			evt.remove(); // removes this listener.
	 * 		});
	 *
	 * @method remove
	 **/
	p.remove = function() {
		this.removed = true;
	};

	/**
	 * Returns a clone of the Event instance.
	 * @method clone
	 * @return {Event} a clone of the Event instance.
	 **/
	p.clone = function() {
		return new Event(this.type, this.bubbles, this.cancelable);
	};

	/**
	 * Provides a chainable shortcut method for setting a number of properties on the instance.
	 *
	 * @method set
	 * @param {Object} props A generic object containing properties to copy to the instance.
	 * @return {Event} Returns the instance the method is called on (useful for chaining calls.)
	 * @chainable
	*/
	p.set = function(props) {
		for (var n in props) { this[n] = props[n]; }
		return this;
	};

	/**
	 * Returns a string representation of this object.
	 * @method toString
	 * @return {String} a string representation of the instance.
	 **/
	p.toString = function() {
		return "[Event (type="+this.type+")]";
	};

	createjs.Event = Event;
}());

//##############################################################################
// ErrorEvent.js
//##############################################################################

this.createjs = this.createjs||{};

(function() {
	"use strict";

	/**
	 * A general error {{#crossLink "Event"}}{{/crossLink}}, that describes an error that occurred, as well as any details.
	 * @class ErrorEvent
	 * @param {String} [title] The error title
	 * @param {String} [message] The error description
	 * @param {Object} [data] Additional error data
	 * @constructor
	 */
	function ErrorEvent(title, message, data) {
		this.Event_constructor("error");

		/**
		 * The short error title, which indicates the type of error that occurred.
		 * @property title
		 * @type String
		 */
		this.title = title;

		/**
		 * The verbose error message, containing details about the error.
		 * @property message
		 * @type String
		 */
		this.message = message;

		/**
		 * Additional data attached to an error.
		 * @property data
		 * @type {Object}
		 */
		this.data = data;
	}

	var p = createjs.extend(ErrorEvent, createjs.Event);

	p.clone = function() {
		return new createjs.ErrorEvent(this.title, this.message, this.data);
	};

	createjs.ErrorEvent = createjs.promote(ErrorEvent, "Event");

}());

//##############################################################################
// ProgressEvent.js
//##############################################################################

this.createjs = this.createjs || {};

(function (scope) {
	"use strict";

	// constructor
	/**
	 * A createjs {{#crossLink "Event"}}{{/crossLink}} that is dispatched when progress changes.
	 * @class ProgressEvent
	 * @param {Number} loaded The amount that has been loaded. This can be any number relative to the total.
	 * @param {Number} [total] The total amount that will load. This will default to 0, so does not need to be passed in,
	 * as long as the loaded value is a progress value (between 0 and 1).
	 * @todo Consider having this event be a "fileprogress" event as well
	 * @constructor
	 */
	function ProgressEvent(loaded, total) {
		this.Event_constructor("progress");

		/**
		 * The amount that has been loaded (out of a total amount)
		 * @property loaded
		 * @type {Number}
		 */
		this.loaded = loaded;

		/**
		 * The total "size" of the load.
		 * @property total
		 * @type {Number}
		 * @default 1
		 */
		this.total = (total == null) ? 1 : total;

		/**
		 * The percentage (out of 1) that the load has been completed. This is calculated using `loaded/total`.
		 * @property progress
		 * @type {Number}
		 * @default 0
		 */
		this.progress = (total == 0) ? 0 : this.loaded / this.total;
	};

	var p = createjs.extend(ProgressEvent, createjs.Event);

	/**
	 * Returns a clone of the ProgressEvent instance.
	 * @method clone
	 * @return {ProgressEvent} a clone of the Event instance.
	 **/
	p.clone = function() {
		return new createjs.ProgressEvent(this.loaded, this.total);
	};

	createjs.ProgressEvent = createjs.promote(ProgressEvent, "Event");

}(window));

//##############################################################################
// LoadItem.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	/**
	 * All loaders accept an item containing the properties defined in this class. If a raw object is passed instead,
	 * it will not be affected, but it must contain at least a {{#crossLink "src:property"}}{{/crossLink}} property. A
	 * string path or HTML tag is also acceptable, but it will be automatically converted to a LoadItem using the
	 * {{#crossLink "create"}}{{/crossLink}} method by {{#crossLink "AbstractLoader"}}{{/crossLink}}
	 * @class LoadItem
	 * @constructor
	 * @since 0.6.0
	 */
	function LoadItem() {
		/**
		 * The source of the file that is being loaded. This property is <b>required</b>. The source can either be a
		 * string (recommended), or an HTML tag.</li>
		 * @property src
		 * @type {String}
		 * @default null
		 */
		this.src = null;

		/**
		 * The source of the file that is being loaded. This property is <strong>required</strong>. The source can
		 * either be a string (recommended), or an HTML tag. See the {{#crossLink "AbstractLoader"}}{{/crossLink}}
		 * class for the full list of supported types.
		 * @property type
		 * @type {String}
		 * @default null
		 */
		this.type = null;

		/**
		 * A string identifier which can be used to reference the loaded object. If none is provided, this will be
		 * automatically set to the {{#crossLink "src:property"}}{{/crossLink}}.
		 * @property id
		 * @type {String}
		 * @default null
		 */
		this.id = null;

		/**
		 * Determines if a manifest will maintain the order of this item, in relation to other items in the manifest
		 * that have also set the `maintainOrder` property to `true`. This only applies when the max connections has
		 * been set above 1 (using {{#crossLink "LoadQueue/setMaxConnections"}}{{/crossLink}}). Everything with this
		 * property set to `false` will finish as it is loaded. Ordered items are combined with script tags loading in
		 * order when {{#crossLink "LoadQueue/maintainScriptOrder:property"}}{{/crossLink}} is set to `true`.
		 * @property maintainOrder
		 * @type {Boolean}
		 * @default false
		 */
		this.maintainOrder = false;

		/**
		 * A callback used by JSONP requests that defines what global method to call when the JSONP content is loaded.
		 * @property callback
		 * @type {String}
		 * @default null
		 */
		this.callback = null;

		/**
		 * An arbitrary data object, which is included with the loaded object.
		 * @property data
		 * @type {Object}
		 * @default null
		 */
		this.data = null;

		/**
		 * The request method used for HTTP calls. Both {{#crossLink "AbstractLoader/GET:property"}}{{/crossLink}} or
		 * {{#crossLink "AbstractLoader/POST:property"}}{{/crossLink}} request types are supported, and are defined as
		 * constants on {{#crossLink "AbstractLoader"}}{{/crossLink}}.
		 * @property method
		 * @type {String}
		 * @default get
		 */
		this.method = createjs.LoadItem.GET;

		/**
		 * An object hash of name/value pairs to send to the server.
		 * @property values
		 * @type {Object}
		 * @default null
		 */
		this.values = null;

		/**
		 * An object hash of headers to attach to an XHR request. PreloadJS will automatically attach some default
		 * headers when required, including "Origin", "Content-Type", and "X-Requested-With". You may override the
		 * default headers by including them in your headers object.
		 * @property headers
		 * @type {Object}
		 * @default null
		 */
		this.headers = null;

		/**
		 * Enable credentials for XHR requests.
		 * @property withCredentials
		 * @type {Boolean}
		 * @default false
		 */
		this.withCredentials = false;

		/**
		 * Set the mime type of XHR-based requests. This is automatically set to "text/plain; charset=utf-8" for text
		 * based files (json, xml, text, css, js).
		 * @property mimeType
		 * @type {String}
		 * @default null
		 */
		this.mimeType = null;

		/**
		 * Sets the crossOrigin attribute for CORS-enabled images loading cross-domain.
		 * @property crossOrigin
		 * @type {boolean}
		 * @default Anonymous
		 */
		this.crossOrigin = "Anonymous";

		/**
		 * The duration in milliseconds to wait before a request times out. This only applies to tag-based and and XHR
		 * (level one) loading, as XHR (level 2) provides its own timeout event.
		 * @property loadTimeout
		 * @type {Number}
		 * @default 8000 (8 seconds)
		 */
		this.loadTimeout = 8000;
	};

	var p = LoadItem.prototype = {};
	var s = LoadItem;

	/**
	 * Create/validate a LoadItem.
	 * <ul>
	 *     <li>String-based items are converted to a LoadItem with a populated {{#crossLink "src:property"}}{{/crossLink}}.</li>
	 *     <li>LoadItem instances are returned as-is</li>
	 *     <li>Objectss are returned as-is</li>
	 * </ul>
	 * @method create
	 * @param {LoadItem|String|Object} value The load item value
	 * @returns {Object|LoadItem}
	 * @static
	 */
	s.create = function (value) {
		if (typeof value == "string") {
			var item = new LoadItem();
			item.src = value;
			return item;
		} else if (value instanceof s) {
			return value;
		} else if (value instanceof Object) { // Don't modify object, allows users to attach random data to the item.
			// TODO: Disallow objects with no src?
			return value;
		} else {
			throw new Error("Type not recognized.");
		}
	};

	/**
	 * Provides a chainable shortcut method for setting a number of properties on the instance.
	 *
	 * <h4>Example</h4>
	 *
	 *      var loadItem = new createjs.LoadItem().set({src:"image.png", maintainOrder:true});
	 *
	 * @method set
	 * @param {Object} props A generic object containing properties to copy to the LoadItem instance.
	 * @return {LoadItem} Returns the instance the method is called on (useful for chaining calls.)
	*/
	p.set = function(props) {
		for (var n in props) { this[n] = props[n]; }
		return this;
	};

	createjs.LoadItem = s;

}());

//##############################################################################
// RequestUtils.js
//##############################################################################

(function () {

	/**
	 * Utilities that assist with parsing load items, and determining file types, etc.
	 * @class RequestUtils
	 */
	var s = {};

	/**
	 * The Regular Expression used to test file URLS for an absolute path.
	 * @property ABSOLUTE_PATH
	 * @type {RegExp}
	 * @static
	 */
	s.ABSOLUTE_PATT = /^(?:\w+:)?\/{2}/i;

	/**
	 * The Regular Expression used to test file URLS for an absolute path.
	 * @property RELATIVE_PATH
	 * @type {RegExp}
	 * @static
	 */
	s.RELATIVE_PATT = (/^[./]*?\//i);

	/**
	 * The Regular Expression used to test file URLS for an extension. Note that URIs must already have the query string
	 * removed.
	 * @property EXTENSION_PATT
	 * @type {RegExp}
	 * @static
	 */
	s.EXTENSION_PATT = /\/?[^/]+\.(\w{1,5})$/i;

	/**
	 * Parse a file path to determine the information we need to work with it. Currently, PreloadJS needs to know:
	 * <ul>
	 *     <li>If the path is absolute. Absolute paths start with a protocol (such as `http://`, `file://`, or
	 *     `//networkPath`)</li>
	 *     <li>If the path is relative. Relative paths start with `../` or `/path` (or similar)</li>
	 *     <li>The file extension. This is determined by the filename with an extension. Query strings are dropped, and
	 *     the file path is expected to follow the format `name.ext`.</li>
	 * </ul>
	 * @method parseURI
	 * @param {String} path
	 * @returns {Object} An Object with an `absolute` and `relative` Boolean values, as well as an optional 'extension`
	 * property, which is the lowercase extension.
	 * @static
	 */
	s.parseURI = function (path) {
		var info = {absolute: false, relative: false};
		if (path == null) { return info; }

		// Drop the query string
		var queryIndex = path.indexOf("?");
		if (queryIndex > -1) {
			path = path.substr(0, queryIndex);
		}

		// Absolute
		var match;
		if (s.ABSOLUTE_PATT.test(path)) {
			info.absolute = true;

			// Relative
		} else if (s.RELATIVE_PATT.test(path)) {
			info.relative = true;
		}

		// Extension
		if (match = path.match(s.EXTENSION_PATT)) {
			info.extension = match[1].toLowerCase();
		}
		return info;
	};

	/**
	 * Formats an object into a query string for either a POST or GET request.
	 * @method formatQueryString
	 * @param {Object} data The data to convert to a query string.
	 * @param {Array} [query] Existing name/value pairs to append on to this query.
	 * @static
	 */
	s.formatQueryString = function (data, query) {
		if (data == null) {
			throw new Error('You must specify data.');
		}
		var params = [];
		for (var n in data) {
			params.push(n + '=' + escape(data[n]));
		}
		if (query) {
			params = params.concat(query);
		}
		return params.join('&');
	};

	/**
	 * A utility method that builds a file path using a source and a data object, and formats it into a new path.
	 * @method buildPath
	 * @param {String} src The source path to add values to.
	 * @param {Object} [data] Object used to append values to this request as a query string. Existing parameters on the
	 * path will be preserved.
	 * @returns {string} A formatted string that contains the path and the supplied parameters.
	 * @static
	 */
	s.buildPath = function (src, data) {
		if (data == null) {
			return src;
		}

		var query = [];
		var idx = src.indexOf('?');

		if (idx != -1) {
			var q = src.slice(idx + 1);
			query = query.concat(q.split('&'));
		}

		if (idx != -1) {
			return src.slice(0, idx) + '?' + this._formatQueryString(data, query);
		} else {
			return src + '?' + this._formatQueryString(data, query);
		}
	};

	/**
	 * @method isCrossDomain
	 * @param {LoadItem|Object} item A load item with a `src` property.
	 * @return {Boolean} If the load item is loading from a different domain than the current location.
	 * @static
	 */
	s.isCrossDomain = function (item) {
		var target = document.createElement("a");
		target.href = item.src;

		var host = document.createElement("a");
		host.href = location.href;

		var crossdomain = (target.hostname != "") &&
						  (target.port != host.port ||
						   target.protocol != host.protocol ||
						   target.hostname != host.hostname);
		return crossdomain;
	};

	/**
	 * @method isLocal
	 * @param {LoadItem|Object} item A load item with a `src` property
	 * @return {Boolean} If the load item is loading from the "file:" protocol. Assume that the host must be local as
	 * well.
	 * @static
	 */
	s.isLocal = function (item) {
		var target = document.createElement("a");
		target.href = item.src;
		return target.hostname == "" && target.protocol == "file:";
	};

	/**
	 * Determine if a specific type should be loaded as a binary file. Currently, only images and items marked
	 * specifically as "binary" are loaded as binary. Note that audio is <b>not</b> a binary type, as we can not play
	 * back using an audio tag if it is loaded as binary. Plugins can change the item type to binary to ensure they get
	 * a binary result to work with. Binary files are loaded using XHR2. Types are defined as static constants on
	 * {{#crossLink "AbstractLoader"}}{{/crossLink}}.
	 * @method isBinary
	 * @param {String} type The item type.
	 * @return {Boolean} If the specified type is binary.
	 * @static
	 */
	s.isBinary = function (type) {
		switch (type) {
			case createjs.AbstractLoader.IMAGE:
			case createjs.AbstractLoader.BINARY:
				return true;
			default:
				return false;
		}
	};

	/**
	 * Check if item is a valid HTMLImageElement
	 * @method isImageTag
	 * @param {Object} item
	 * @returns {Boolean}
	 * @static
	 */
	s.isImageTag = function(item) {
		return item instanceof HTMLImageElement;
	};

	/**
	 * Check if item is a valid HTMLAudioElement
	 * @method isAudioTag
	 * @param {Object} item
	 * @returns {Boolean}
	 * @static
	 */
	s.isAudioTag = function(item) {
		if (window.HTMLAudioElement) {
			return item instanceof HTMLAudioElement;
		} else {
			return false;
		}
	};

	/**
	 * Check if item is a valid HTMLVideoElement
	 * @method isVideoTag
	 * @param {Objectitem
	 * @returns {Boolean}
	 * @static
	 */
	s.isVideoTag = function(item) {
		if (window.HTMLVideoElement) {
			return item instanceof HTMLVideoElement;
		} else {
			false;
		}
	};

	/**
	 * Determine if a specific type is a text-based asset, and should be loaded as UTF-8.
	 * @method isText
	 * @param {String} type The item type.
	 * @return {Boolean} If the specified type is text.
	 * @static
	 */
	s.isText = function (type) {
		switch (type) {
			case createjs.AbstractLoader.TEXT:
			case createjs.AbstractLoader.JSON:
			case createjs.AbstractLoader.MANIFEST:
			case createjs.AbstractLoader.XML:
			case createjs.AbstractLoader.CSS:
			case createjs.AbstractLoader.SVG:
			case createjs.AbstractLoader.JAVASCRIPT:
				return true;
			default:
				return false;
		}
	};

	/**
	 * Determine the type of the object using common extensions. Note that the type can be passed in with the load item
	 * if it is an unusual extension.
	 * @method getTypeByExtension
	 * @param {String} extension The file extension to use to determine the load type.
	 * @return {String} The determined load type (for example, <code>AbstractLoader.IMAGE</code>). Will return `null` if
	 * the type can not be determined by the extension.
	 * @static
	 */
	s.getTypeByExtension = function (extension) {
		if (extension == null) {
			return createjs.AbstractLoader.TEXT;
		}

		switch (extension.toLowerCase()) {
			case "jpeg":
			case "jpg":
			case "gif":
			case "png":
			case "webp":
			case "bmp":
				return createjs.AbstractLoader.IMAGE;
			case "ogg":
			case "mp3":
			case "webm":
				return createjs.AbstractLoader.SOUND;
			case "mp4":
			case "webm":
			case "ts":
				return createjs.AbstractLoader.VIDEO;
			case "json":
				return createjs.AbstractLoader.JSON;
			case "xml":
				return createjs.AbstractLoader.XML;
			case "css":
				return createjs.AbstractLoader.CSS;
			case "js":
				return createjs.AbstractLoader.JAVASCRIPT;
			case 'svg':
				return createjs.AbstractLoader.SVG;
			default:
				return createjs.AbstractLoader.TEXT;
		}
	};

	createjs.RequestUtils = s;

}());

//##############################################################################
// AbstractLoader.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

// constructor
	/**
	 * The base loader, which defines all the generic methods, properties, and events. All loaders extend this class,
	 * including the {{#crossLink "LoadQueue"}}{{/crossLink}}.
	 * @class AbstractLoader
	 * @param {LoadItem|object|string} The item to be loaded.
	 * @param {Boolean} [preferXHR] Determines if the LoadItem should <em>try</em> and load using XHR, or take a
	 * tag-based approach, which can be better in cross-domain situations. Not all loaders can load using one or the
	 * other, so this is a suggested directive.
	 * @oaram {String} [type] The type of loader. Loader types are defined as constants on the AbstractLoader class,
	 * such as {{#crossLink "IMAGE:property"}}{{/crossLink}}, {{#crossLink "CSS:property"}}{{/crossLink}}, etc.
	 * @extends EventDispatcher
	 */
	function AbstractLoader(loadItem, preferXHR, type) {
		this.EventDispatcher_constructor();

		// public properties
		/**
		 * If the loader has completed loading. This provides a quick check, but also ensures that the different approaches
		 * used for loading do not pile up resulting in more than one `complete` {{#crossLink "Event"}}{{/crossLink}}.
		 * @property loaded
		 * @type {Boolean}
		 * @default false
		 */
		this.loaded = false;

		/**
		 * Determine if the loader was canceled. Canceled loads will not fire complete events. Note that this property
		 * is readonly, so {{#crossLink "LoadQueue"}}{{/crossLink}} queues should be closed using {{#crossLink "LoadQueue/close"}}{{/crossLink}}
		 * instead.
		 * @property canceled
		 * @type {Boolean}
		 * @default false
		 */
		this.canceled = false;

		/**
		 * The current load progress (percentage) for this item. This will be a number between 0 and 1.
		 *
		 * <h4>Example</h4>
		 *
		 *     var queue = new createjs.LoadQueue();
		 *     queue.loadFile("largeImage.png");
		 *     queue.on("progress", function() {
		 *         console.log("Progress:", queue.progress, event.progress);
		 *     });
		 *
		 * @property progress
		 * @type {Number}
		 * @default 0
		 */
		this.progress = 0;

		/**
		 * The type of item this loader will load. See {{#crossLink "AbstractLoader"}}{{/crossLink}} for a full list of
		 * supported types.
		 * @property type
		 * @type {String}
		 */
		this.type = type;

		/**
		 * A formatter function that converts the loaded raw result into the final result. For example, the JSONLoader
		 * converts a string of text into a JavaScript object. Not all loaders have a resultFormatter, and this property
		 * can be overridden to provide custom formatting.
		 *
		 * Optionally, a resultFormatter can return a callback function in cases where the formatting needs to be
		 * asynchronous, such as creating a new image.
		 * @property resultFormatter
		 * @type {Function}
		 * @default null
		 */
		this.resultFormatter = null;

		// protected properties
		/**
		 * The {{#crossLink "LoadItem"}}{{/crossLink}} this loader represents. Note that this is null in a {{#crossLink "LoadQueue"}}{{/crossLink}},
		 * but will be available on loaders such as {{#crossLink "XMLLoader"}}{{/crossLink}} and {{#crossLink "ImageLoader"}}{{/crossLink}}.
		 * @property _item
		 * @type {LoadItem|Object}
		 * @private
		 */
		if (loadItem) {
			this._item = createjs.LoadItem.create(loadItem);
		} else {
			this._item = null;
		}

		/**
		 * Whether the loader will try and load content using XHR (true) or HTML tags (false).
		 * @property _preferXHR
		 * @type {Boolean}
		 * @private
		 */
		this._preferXHR = preferXHR;

		/**
		 * The loaded result after it is formatted by an optional {{#crossLink "resultFormatter"}}{{/crossLink}}. For
		 * items that are not formatted, this will be the same as the {{#crossLink "_rawResult:property"}}{{/crossLink}}.
		 * The result is accessed using the {{#crossLink "getResult"}}{{/crossLink}} method.
		 * @property _result
		 * @type {Object|String}
		 * @private
		 */
		this._result = null;

		/**
		 * The loaded result before it is formatted. The rawResult is accessed using the {{#crossLink "getResult"}}{{/crossLink}}
		 * method, and passing `true`.
		 * @property _rawResult
		 * @type {Object|String}
		 * @private
		 */
		this._rawResult = null;

		/**
		 * A list of items that loaders load behind the scenes. This does not include the main item the loader is
		 * responsible for loading. Examples of loaders that have sub-items include the {{#crossLink "SpriteSheetLoader"}}{{/crossLink}} and
		 * {{#crossLink "ManifestLoader"}}{{/crossLink}}.
		 * @property _loadItems
		 * @type {null}
		 * @protected
		 */
		this._loadedItems = null;

		/**
		 * The attribute the items loaded using tags use for the source.
		 * @type {string}
		 * @default null
		 * @private
		 */
		this._tagSrcAttribute = null;

		/**
		 * An HTML tag (or similar) that a loader may use to load HTML content, such as images, scripts, etc.
		 * @property _tag
		 * @type {Object}
		 * @private
		 */
		this._tag = null;
	};

	var p = createjs.extend(AbstractLoader, createjs.EventDispatcher);
	var s = AbstractLoader;

	/**
	 * Defines a POST request, use for a method value when loading data.
	 * @property POST
	 * @type {string}
	 * @default post
	 */
	s.POST = "POST";

	/**
	 * Defines a GET request, use for a method value when loading data.
	 * @property GET
	 * @type {string}
	 * @default get
	 */
	s.GET = "GET";

	/**
	 * The preload type for generic binary types. Note that images are loaded as binary files when using XHR.
	 * @property BINARY
	 * @type {String}
	 * @default binary
	 * @static
	 * @since 0.6.0
	 */
	s.BINARY = "binary";

	/**
	 * The preload type for css files. CSS files are loaded using a &lt;link&gt; when loaded with XHR, or a
	 * &lt;style&gt; tag when loaded with tags.
	 * @property CSS
	 * @type {String}
	 * @default css
	 * @static
	 * @since 0.6.0
	 */
	s.CSS = "css";

	/**
	 * The preload type for image files, usually png, gif, or jpg/jpeg. Images are loaded into an &lt;image&gt; tag.
	 * @property IMAGE
	 * @type {String}
	 * @default image
	 * @static
	 * @since 0.6.0
	 */
	s.IMAGE = "image";

	/**
	 * The preload type for javascript files, usually with the "js" file extension. JavaScript files are loaded into a
	 * &lt;script&gt; tag.
	 *
	 * Since version 0.4.1+, due to how tag-loaded scripts work, all JavaScript files are automatically injected into
	 * the body of the document to maintain parity between XHR and tag-loaded scripts. In version 0.4.0 and earlier,
	 * only tag-loaded scripts are injected.
	 * @property JAVASCRIPT
	 * @type {String}
	 * @default javascript
	 * @static
	 * @since 0.6.0
	 */
	s.JAVASCRIPT = "javascript";

	/**
	 * The preload type for json files, usually with the "json" file extension. JSON data is loaded and parsed into a
	 * JavaScript object. Note that if a `callback` is present on the load item, the file will be loaded with JSONP,
	 * no matter what the {{#crossLink "LoadQueue/preferXHR:property"}}{{/crossLink}} property is set to, and the JSON
	 * must contain a matching wrapper function.
	 * @property JSON
	 * @type {String}
	 * @default json
	 * @static
	 * @since 0.6.0
	 */
	s.JSON = "json";

	/**
	 * The preload type for jsonp files, usually with the "json" file extension. JSON data is loaded and parsed into a
	 * JavaScript object. You are required to pass a callback parameter that matches the function wrapper in the JSON.
	 * Note that JSONP will always be used if there is a callback present, no matter what the {{#crossLink "LoadQueue/preferXHR:property"}}{{/crossLink}}
	 * property is set to.
	 * @property JSONP
	 * @type {String}
	 * @default jsonp
	 * @static
	 * @since 0.6.0
	 */
	s.JSONP = "jsonp";

	/**
	 * The preload type for json-based manifest files, usually with the "json" file extension. The JSON data is loaded
	 * and parsed into a JavaScript object. PreloadJS will then look for a "manifest" property in the JSON, which is an
	 * Array of files to load, following the same format as the {{#crossLink "LoadQueue/loadManifest"}}{{/crossLink}}
	 * method. If a "callback" is specified on the manifest object, then it will be loaded using JSONP instead,
	 * regardless of what the {{#crossLink "LoadQueue/preferXHR:property"}}{{/crossLink}} property is set to.
	 * @property MANIFEST
	 * @type {String}
	 * @default manifest
	 * @static
	 * @since 0.6.0
	 */
	s.MANIFEST = "manifest";

	/**
	 * The preload type for sound files, usually mp3, ogg, or wav. When loading via tags, audio is loaded into an
	 * &lt;audio&gt; tag.
	 * @property SOUND
	 * @type {String}
	 * @default sound
	 * @static
	 * @since 0.6.0
	 */
	s.SOUND = "sound";

	/**
	 * The preload type for video files, usually mp4, ts, or ogg. When loading via tags, video is loaded into an
	 * &lt;video&gt; tag.
	 * @property VIDEO
	 * @type {String}
	 * @default video
	 * @static
	 * @since 0.6.0
	 */
	s.VIDEO = "video";

	/**
	 * The preload type for SpriteSheet files. SpriteSheet files are JSON files that contain string image paths.
	 * @property SPRITESHEET
	 * @type {String}
	 * @default spritesheet
	 * @static
	 * @since 0.6.0
	 */
	s.SPRITESHEET = "spritesheet";

	/**
	 * The preload type for SVG files.
	 * @property SVG
	 * @type {String}
	 * @default svg
	 * @static
	 * @since 0.6.0
	 */
	s.SVG = "svg";

	/**
	 * The preload type for text files, which is also the default file type if the type can not be determined. Text is
	 * loaded as raw text.
	 * @property TEXT
	 * @type {String}
	 * @default text
	 * @static
	 * @since 0.6.0
	 */
	s.TEXT = "text";

	/**
	 * The preload type for xml files. XML is loaded into an XML document.
	 * @property XML
	 * @type {String}
	 * @default xml
	 * @static
	 * @since 0.6.0
	 */
	s.XML = "xml";

// Events
	/**
	 * The {{#crossLink "ProgressEvent"}}{{/crossLink}} that is fired when the overall progress changes. Prior to
	 * version 0.6.0, this was just a regular {{#crossLink "Event"}}{{/crossLink}}.
	 * @event progress
	 * @since 0.3.0
	 */

	/**
	 * The {{#crossLink "Event"}}{{/crossLink}} that is fired when a load starts.
	 * @event loadstart
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type.
	 * @since 0.3.1
	 */

	/**
	 * The {{#crossLink "Event"}}{{/crossLink}} that is fired when the entire queue has been loaded.
	 * @event complete
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type.
	 * @since 0.3.0
	 */

	/**
	 * The {{#crossLink "ErrorEvent"}}{{/crossLink}} that is fired when the loader encounters an error. If the error was
	 * encountered by a file, the event will contain the item that caused the error. Prior to version 0.6.0, this was
	 * just a regular {{#crossLink "Event"}}{{/crossLink}}.
	 * @event error
	 * @since 0.3.0
	 */

	/**
	 * The {{#crossLink "Event"}}{{/crossLink}} that is fired when the loader encounters an internal file load error.
	 * This enables loaders to maintain internal queues, and surface file load errors.
	 * @event fileerror
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The even type ("fileerror")
	 * @param {LoadItem|object} The item that encountered the error
	 * @since 0.6.0
	 */

	/**
	 * The {{#crossLink "Event"}}{{/crossLink}} that is fired when a loader internally loads a file. This enables
	 * loaders such as {{#crossLink "ManifestLoader"}}{{/crossLink}} to maintain internal {{#crossLink "LoadQueue"}}{{/crossLink}}s
	 * and notify when they have loaded a file. The {{#crossLink "LoadQueue"}}{{/crossLink}} class dispatches a
	 * slightly different {{#crossLink "LoadQueue/fileload:event"}}{{/crossLink}} event.
	 * @event fileload
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type ("fileload")
	 * @param {Object} item The file item which was specified in the {{#crossLink "LoadQueue/loadFile"}}{{/crossLink}}
	 * or {{#crossLink "LoadQueue/loadManifest"}}{{/crossLink}} call. If only a string path or tag was specified, the
	 * object will contain that value as a `src` property.
	 * @param {Object} result The HTML tag or parsed result of the loaded item.
	 * @param {Object} rawResult The unprocessed result, usually the raw text or binary data before it is converted
	 * to a usable object.
	 * @since 0.6.0
	 */

	/**
	 * The {{#crossLink "Event"}}{{/crossLink}} that is fired after the internal request is created, but before a load.
	 * This allows updates to the loader for specific loading needs, such as binary or XHR image loading.
	 * @event initialize
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type ("initialize")
	 * @param {AbstractLoader} loader The loader that has been initialized.
	 */


	/**
	 * Get a reference to the manifest item that is loaded by this loader. In some cases this will be the value that was
	 * passed into {{#crossLink "LoadQueue"}}{{/crossLink}} using {{#crossLink "LoadQueue/loadFile"}}{{/crossLink}} or
	 * {{#crossLink "LoadQueue/loadManifest"}}{{/crossLink}}. However if only a String path was passed in, then it will
	 * be a {{#crossLink "LoadItem"}}{{/crossLink}}.
	 * @method getItem
	 * @return {Object} The manifest item that this loader is responsible for loading.
	 * @since 0.6.0
	 */
	p.getItem = function () {
		return this._item;
	};

	/**
	 * Get a reference to the content that was loaded by the loader (only available after the {{#crossLink "complete:event"}}{{/crossLink}}
	 * event is dispatched.
	 * @method getResult
	 * @param {Boolean} [raw=false] Determines if the returned result will be the formatted content, or the raw loaded
	 * data (if it exists).
	 * @return {Object}
	 * @since 0.6.0
	 */
	p.getResult = function (raw) {
		return raw ? this._rawResult : this._result;
	};

	/**
	 * Return the `tag` this object creates or uses for loading.
	 * @method getTag
	 * @return {Object} The tag instance
	 * @since 0.6.0
	 */
	p.getTag = function () {
		return this._tag;
	};

	/**
	 * Set the `tag` this item uses for loading.
	 * @method setTag
	 * @param {Object} tag The tag instance
	 * @since 0.6.0
	 */
	p.setTag = function(tag) {
	  this._tag = tag;
	};

	/**
	 * Begin loading the item. This method is required when using a loader by itself.
	 *
	 * <h4>Example</h4>
	 *
	 *      var queue = new createjs.LoadQueue();
	 *      queue.on("complete", handleComplete);
	 *      queue.loadManifest(fileArray, false); // Note the 2nd argument that tells the queue not to start loading yet
	 *      queue.load();
	 *
	 * @method load
	 */
	p.load = function () {
		this._createRequest();

		this._request.on("complete", this, this);
		this._request.on("progress", this, this);
		this._request.on("loadStart", this, this);
		this._request.on("abort", this, this);
		this._request.on("timeout", this, this);
		this._request.on("error", this, this);

		var evt = new createjs.Event("initialize");
		evt.loader = this._request;
		this.dispatchEvent(evt);

		this._request.load();
	};

	/**
	 * Close the the item. This will stop any open requests (although downloads using HTML tags may still continue in
	 * the background), but events will not longer be dispatched.
	 * @method cancel
	 */
	p.cancel = function () {
		this.canceled = true;
		this.destroy();
	};

	/**
	 * Clean up the loader.
	 * @method destroy
	 */
	p.destroy = function() {
		if (this._request) {
			this._request.removeAllEventListeners();
			this._request.destroy();
		}

		this._request = null;

		this._item = null;
		this._rawResult = null;
		this._result = null;

		this._loadItems = null;

		this.removeAllEventListeners();
	};

	/**
	 * Get any items loaded internally by the loader. The enables loaders such as {{#crossLink "ManifestLoader"}}{{/crossLink}}
	 * to expose items it loads internally.
	 * @method getLoadedItems
	 * @return {Array} A list of the items loaded by the loader.
	 * @since 0.6.0
	 */
	p.getLoadedItems = function () {
		return this._loadedItems;
	};


	// Private methods
	/**
	 * Create an internal request used for loading. By default, an {{#crossLink "XHRRequest"}}{{/crossLink}} or
	 * {{#crossLink "TagRequest"}}{{/crossLink}} is created, depending on the value of {{#crossLink "preferXHR:property"}}{{/crossLink}}.
	 * Other loaders may override this to use different request types, such as {{#crossLink "ManifestLoader"}}{{/crossLink}},
	 * which uses {{#crossLink "JSONLoader"}}{{/crossLink}} or {{#crossLink "JSONPLoader"}}{{/crossLink}} under the hood.
	 * @method _createRequest
	 * @protected
	 */
	p._createRequest = function() {
		if (!this._preferXHR) {
			this._request = new createjs.TagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
		} else {
			this._request = new createjs.XHRRequest(this._item);
		}
	};

	/**
	 * Create the HTML tag used for loading. This method does nothing by default, and needs to be implemented
	 * by loaders that require tag loading.
	 * @method _createTag
	 * @param {String} src The tag source
	 * @return {HTMLElement} The tag that was created
	 * @protected
	 */
	p._createTag = function(src) { return null; };

	/**
	 * Dispatch a loadstart {{#crossLink "Event"}}{{/crossLink}}. Please see the {{#crossLink "AbstractLoader/loadstart:event"}}{{/crossLink}}
	 * event for details on the event payload.
	 * @method _sendLoadStart
	 * @protected
	 */
	p._sendLoadStart = function () {
		if (this._isCanceled()) { return; }
		this.dispatchEvent("loadstart");
	};

	/**
	 * Dispatch a {{#crossLink "ProgressEvent"}}{{/crossLink}}.
	 * @method _sendProgress
	 * @param {Number | Object} value The progress of the loaded item, or an object containing <code>loaded</code>
	 * and <code>total</code> properties.
	 * @protected
	 */
	p._sendProgress = function (value) {
		if (this._isCanceled()) { return; }
		var event = null;
		if (typeof(value) == "number") {
			this.progress = value;
			event = new createjs.ProgressEvent(this.progress);
		} else {
			event = value;
			this.progress = value.loaded / value.total;
			event.progress = this.progress;
			if (isNaN(this.progress) || this.progress == Infinity) { this.progress = 0; }
		}
		this.hasEventListener("progress") && this.dispatchEvent(event);
	};

	/**
	 * Dispatch a complete {{#crossLink "Event"}}{{/crossLink}}. Please see the {{#crossLink "AbstractLoader/complete:event"}}{{/crossLink}} event
	 * @method _sendComplete
	 * @protected
	 */
	p._sendComplete = function () {
		if (this._isCanceled()) { return; }

		this.loaded = true;

		var event = new createjs.Event("complete");
		event.rawResult = this._rawResult;

		if (this._result != null) {
			event.result = this._result;
		}

		this.dispatchEvent(event);
	};

	/**
	 * Dispatch an error {{#crossLink "Event"}}{{/crossLink}}. Please see the {{#crossLink "AbstractLoader/error:event"}}{{/crossLink}}
	 * event for details on the event payload.
	 * @method _sendError
	 * @param {ErrorEvent} event The event object containing specific error properties.
	 * @protected
	 */
	p._sendError = function (event) {
		if (this._isCanceled() || !this.hasEventListener("error")) { return; }
		if (event == null) {
			event = new createjs.ErrorEvent("PRELOAD_ERROR_EMPTY"); // TODO: Populate error
		}
		this.dispatchEvent(event);
	};

	/**
	 * Determine if the load has been canceled. This is important to ensure that method calls or asynchronous events
	 * do not cause issues after the queue has been cleaned up.
	 * @method _isCanceled
	 * @return {Boolean} If the loader has been canceled.
	 * @protected
	 */
	p._isCanceled = function () {
		if (window.createjs == null || this.canceled) {
			return true;
		}
		return false;
	};

	/**
	 * A custom result formatter function, which is called just before a request dispatches its complete event. Most
	 * loader types already have an internal formatter, but this can be user-overridden for custom formatting. The
	 * formatted result will be available on Loaders using {{#crossLink "getResult"}}{{/crossLink}}, and passing `true`.
	 * @property resultFormatter
	 * @type Function
	 * @return {Object} The formatted result
	 * @since 0.6.0
	 */
	p.resultFormatter = null; //TODO: Add support for async formatting.

	/**
	 * Handle events from internal requests. By default, loaders will handle, and redispatch the necessary events, but
	 * this method can be overridden for custom behaviours.
	 * @method handleEvent
	 * @param {Event} The event that the internal request dispatches.
	 * @protected
	 * @since 0.6.0
	 */
	p.handleEvent = function (event) {
		switch (event.type) {
			case "complete":
				this._rawResult = event.target._response;
				var result = this.resultFormatter && this.resultFormatter(this);
				var _this = this;
				if (result instanceof Function) {
					result(function(result) {
						_this._result = result;
						_this._sendComplete();
					});
				} else {
					this._result =  result || this._rawResult;
					this._sendComplete();
				}
				break;
			case "progress":
				this._sendProgress(event);
				break;
			case "error":
				this._sendError(event);
				break;
			case "loadstart":
				this._sendLoadStart();
				break;
			case "abort":
			case "timeout":
				if (!this._isCanceled()) {
					this.dispatchEvent(event.type);
				}
				break;
		}
	};

	/**
	 * @method buildPath
	 * @protected
	 * @deprecated Use the {{#crossLink "RequestUtils"}}{{/crossLink}} method {{#crossLink "RequestUtils/buildPath"}}{{/crossLink}}
	 * instead.
	 */
	p.buildPath = function (src, data) {
		return createjs.RequestUtils.buildPath(src, data);
	};

	/**
	 * @method toString
	 * @return {String} a string representation of the instance.
	 */
	p.toString = function () {
		return "[PreloadJS AbstractLoader]";
	};

	createjs.AbstractLoader = createjs.promote(AbstractLoader, "EventDispatcher");

}());

//##############################################################################
// AbstractMediaLoader.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	// constructor
	/**
	 * The AbstractMediaLoader is a base class that handles some of the shared methods and properties of loaders that
	 * handle HTML media elements, such as Video and Audio.
	 * @class AbstractMediaLoader
	 * @param {LoadItem|Object} loadItem
	 * @param {Boolean} preferXHR
	 * @param {String} type The type of media to load. Usually "video" or "audio".
	 * @constructor
	 */
	function AbstractMediaLoader(loadItem, preferXHR, type) {
		this.AbstractLoader_constructor(loadItem, preferXHR, type);

		// public properties
		this.resultFormatter = this._formatResult;

		// protected properties
		this._tagSrcAttribute = "src";
	};

	var p = createjs.extend(AbstractMediaLoader, createjs.AbstractLoader);

	// static properties
	// public methods
	p.load = function () {
		// TagRequest will handle most of this, but Sound / Video need a few custom properties, so just handle them here.
		if (!this._tag) {
			this._tag = this._createTag(this._item.src);
		}

		this._tag.preload = "auto";
		this._tag.load();

		this.AbstractLoader_load();
	};

	// protected methods
	/**
	 * Creates a new tag for loading if it doesn't exist yet.
	 * @method _createTag
	 * @private
	 */
	p._createTag = function () {};


	p._createRequest = function() {
		if (!this._preferXHR) {
			this._request = new createjs.MediaTagRequest(this._item, this._tag || this._createTag(), this._tagSrcAttribute);
		} else {
			this._request = new createjs.XHRRequest(this._item);
		}
	};

	/**
	 * The result formatter for media files.
	 * @method _formatResult
	 * @param {AbstractLoader} loader
	 * @returns {HTMLVideoElement|HTMLAudioElement}
	 * @private
	 */
	p._formatResult = function (loader) {
		this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
		this._tag.onstalled = null;
		if (this._preferXHR) {
			loader.getTag().src = loader.getResult(true);
		}
		return loader.getTag();
	};

	createjs.AbstractMediaLoader = createjs.promote(AbstractMediaLoader, "AbstractLoader");

}());

//##############################################################################
// AbstractRequest.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	/**
	 * A base class for actual data requests, such as {{#crossLink "XHRRequest"}}{{/crossLink}}, {{#crossLink "TagRequest"}}{{/crossLink}},
	 * and {{#crossLink "MediaRequest"}}{{/crossLink}}. PreloadJS loaders will typically use a data loader under the
	 * hood to get data.
	 * @class AbstractRequest
	 * @param {LoadItem} item
	 * @constructor
	 */
	var AbstractRequest = function (item) {
		this._item = item;
	};

	var p = createjs.extend(AbstractRequest, createjs.EventDispatcher);

	// public methods
	/**
	 * Begin a load.
	 * @method load
	 */
	p.load =  function() {};

	/**
	 * Clean up a request.
	 * @method destroy
	 */
	p.destroy = function() {};

	/**
	 * Cancel an in-progress request.
	 * @method cancel
	 */
	p.cancel = function() {};

	createjs.AbstractRequest = createjs.promote(AbstractRequest, "EventDispatcher");

}());

//##############################################################################
// TagRequest.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	// constructor
	/**
	 * An {{#crossLink "AbstractRequest"}}{{/crossLink}} that loads HTML tags, such as images and scripts.
	 * @class TagRequest
	 * @param {LoadItem} loadItem
	 * @param {HTMLElement} tag
	 * @param {String} srcAttribute The tag attribute that specifies the source, such as "src", "href", etc.
	 */
	function TagRequest(loadItem, tag, srcAttribute) {
		this.AbstractRequest_constructor(loadItem);

		// protected properties
		/**
		 * The HTML tag instance that is used to load.
		 * @property _tag
		 * @type {HTMLElement}
		 * @protected
		 */
		this._tag = tag;

		/**
		 * The tag attribute that specifies the source, such as "src", "href", etc.
		 * @property _tagSrcAttribute
		 * @type {String}
		 * @protected
		 */
		this._tagSrcAttribute = srcAttribute;

		/**
		 * A method closure used for handling the tag load event.
		 * @property _loadedHandler
		 * @type {Function}
		 * @private
		 */
		this._loadedHandler = createjs.proxy(this._handleTagComplete, this);

		/**
		 * Determines if the element was added to the DOM automatically by PreloadJS, so it can be cleaned up after.
		 * @property _addedToDOM
		 * @type {Boolean}
		 * @private
		 */
		this._addedToDOM = false;

		/**
		 * Determines what the tags initial style.visibility was, so we can set it correctly after a load.
		 *
		 * @type {null}
		 * @private
		 */
		this._startTagVisibility = null;
	};

	var p = createjs.extend(TagRequest, createjs.AbstractRequest);

	// public methods
	p.load = function () {
		if (this._tag.parentNode == null) {
			window.document.body.appendChild(this._tag);
			this._addedToDOM = true;
		}

		this._tag.onload = createjs.proxy(this._handleTagComplete, this);
		this._tag.onreadystatechange = createjs.proxy(this._handleReadyStateChange, this);

		var evt = new createjs.Event("initialize");
		evt.loader = this._tag;

		this.dispatchEvent(evt);

		this._hideTag();

		this._tag[this._tagSrcAttribute] = this._item.src;
	};

	p.destroy = function() {
		this._clean();
		this._tag = null;

		this.AbstractRequest_destroy();
	};

	// private methods
	/**
	 * Handle the readyStateChange event from a tag. We need this in place of the `onload` callback (mainly SCRIPT
	 * and LINK tags), but other cases may exist.
	 * @method _handleReadyStateChange
	 * @private
	 */
	p._handleReadyStateChange = function () {
		clearTimeout(this._loadTimeout);
		// This is strictly for tags in browsers that do not support onload.
		var tag = this._tag;

		// Complete is for old IE support.
		if (tag.readyState == "loaded" || tag.readyState == "complete") {
			this._handleTagComplete();
		}
	};

	/**
	 * Handle the tag's onload callback.
	 * @method _handleTagComplete
	 * @private
	 */
	p._handleTagComplete = function () {
		this._rawResult = this._tag;
		this._result = this.resultFormatter && this.resultFormatter(this) || this._rawResult;

		this._clean();
		this._showTag();

		this.dispatchEvent("complete");
	};

	/**
	 * Remove event listeners, but don't destroy the request object
	 * @method _clean
	 * @private
	 */
	p._clean = function() {
		this._tag.onload = null;
		this._tag.onreadystatechange = null;
		if (this._addedToDOM && this._tag.parentNode != null) {
			this._tag.parentNode.removeChild(this._tag);
		}
	};

	p._hideTag = function() {
		this._startTagVisibility = this._tag.style.visibility;
		this._tag.style.visibility = "hidden";
	};

	p._showTag = function() {
		this._tag.style.visibility = this._startTagVisibility;
	};

	/**
	 * Handle a stalled audio event. The main place this happens is with HTMLAudio in Chrome when playing back audio
	 * that is already in a load, but not complete.
	 * @method _handleStalled
	 * @private
	 */
	p._handleStalled = function () {
		//Ignore, let the timeout take care of it. Sometimes its not really stopped.
	};

	createjs.TagRequest = createjs.promote(TagRequest, "AbstractRequest");

}());

//##############################################################################
// MediaTagRequest.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	// constructor
	/**
	 * An {{#crossLink "TagRequest"}}{{/crossLink}} that loads HTML tags for video and audio.
	 * @class MediaTagRequest
	 * @param {LoadItem} loadItem
	 * @param {HTMLAudioElement|HTMLVideoElement} tag
	 * @param {String} srcAttribute The tag attribute that specifies the source, such as "src", "href", etc.
	 * @constructor
	 */
	function MediaTagRequest(loadItem, tag, srcAttribute) {
		this.AbstractRequest_constructor(loadItem);

		// protected properties
		this._tag = tag;
		this._tagSrcAttribute = srcAttribute;
		this._loadedHandler = createjs.proxy(this._handleTagComplete, this);
	};

	var p = createjs.extend(MediaTagRequest, createjs.TagRequest);
	var s = MediaTagRequest;

	// public methods
	p.load = function () {
		this._tag.onstalled = createjs.proxy(this._handleStalled, this);
		this._tag.onprogress = createjs.proxy(this._handleProgress, this);

		// This will tell us when audio is buffered enough to play through, but not when its loaded.
		// The tag doesn't keep loading in Chrome once enough has buffered, and we have decided that behaviour is sufficient.
		this._tag.addEventListener && this._tag.addEventListener("canplaythrough", this._loadedHandler, false); // canplaythrough callback doesn't work in Chrome, so we use an event.

		this.TagRequest_load();
	};

	// private methods
	p._handleReadyStateChange = function () {
		clearTimeout(this._loadTimeout);
		// This is strictly for tags in browsers that do not support onload.
		var tag = this._tag;

		// Complete is for old IE support.
		if (tag.readyState == "loaded" || tag.readyState == "complete") {
			this._handleTagComplete();
		}
	};

	p._handleStalled = function () {
		//Ignore, let the timeout take care of it. Sometimes its not really stopped.
	};

	/**
	 * An XHR request has reported progress.
	 * @method _handleProgress
	 * @param {Object} event The XHR progress event.
	 * @private
	 */
	p._handleProgress = function (event) {
		if (!event || event.loaded > 0 && event.total == 0) {
			return; // Sometimes we get no "total", so just ignore the progress event.
		}

		var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
		this.dispatchEvent(newEvent);
	};

	// protected methods
	p._clean = function () {
		this._tag.removeEventListener && this._tag.removeEventListener("canplaythrough", this._loadedHandler);
		this._tag.onstalled = null;
		this._tag.onprogress = null;

		this.TagRequest__clean();
	};

	createjs.MediaTagRequest = createjs.promote(MediaTagRequest, "TagRequest");

}());

//##############################################################################
// XHRRequest.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

// constructor
	/**
	 * A preloader that loads items using XHR requests, usually XMLHttpRequest. However XDomainRequests will be used
	 * for cross-domain requests if possible, and older versions of IE fall back on to ActiveX objects when necessary.
	 * XHR requests load the content as text or binary data, provide progress and consistent completion events, and
	 * can be canceled during load. Note that XHR is not supported in IE 6 or earlier, and is not recommended for
	 * cross-domain loading.
	 * @class XHRRequest
	 * @constructor
	 * @param {Object} item The object that defines the file to load. Please see the {{#crossLink "LoadQueue/loadFile"}}{{/crossLink}}
	 * for an overview of supported file properties.
	 * @extends AbstractLoader
	 */
	function XHRRequest(item) {
		this.AbstractRequest_constructor(item);

		// protected properties
		/**
		 * A reference to the XHR request used to load the content.
		 * @property _request
		 * @type {XMLHttpRequest | XDomainRequest | ActiveX.XMLHTTP}
		 * @private
		 */
		this._request = null;

		/**
		 * A manual load timeout that is used for browsers that do not support the onTimeout event on XHR (XHR level 1,
		 * typically IE9).
		 * @property _loadTimeout
		 * @type {Number}
		 * @private
		 */
		this._loadTimeout = null;

		/**
		 * The browser's XHR (XMLHTTPRequest) version. Supported versions are 1 and 2. There is no official way to detect
		 * the version, so we use capabilities to make a best guess.
		 * @property _xhrLevel
		 * @type {Number}
		 * @default 1
		 * @private
		 */
		this._xhrLevel = 1;

		/**
		 * The response of a loaded file. This is set because it is expensive to look up constantly. This property will be
		 * null until the file is loaded.
		 * @property _response
		 * @type {mixed}
		 * @private
		 */
		this._response = null;

		/**
		 * The response of the loaded file before it is modified. In most cases, content is converted from raw text to
		 * an HTML tag or a formatted object which is set to the <code>result</code> property, but the developer may still
		 * want to access the raw content as it was loaded.
		 * @property _rawResponse
		 * @type {String|Object}
		 * @private
		 */
		this._rawResponse = null;

		this._canceled = false;

		// Setup our event handlers now.
		this._handleLoadStartProxy = createjs.proxy(this._handleLoadStart, this);
		this._handleProgressProxy = createjs.proxy(this._handleProgress, this);
		this._handleAbortProxy = createjs.proxy(this._handleAbort, this);
		this._handleErrorProxy = createjs.proxy(this._handleError, this);
		this._handleTimeoutProxy = createjs.proxy(this._handleTimeout, this);
		this._handleLoadProxy = createjs.proxy(this._handleLoad, this);
		this._handleReadyStateChangeProxy = createjs.proxy(this._handleReadyStateChange, this);

		if (!this._createXHR(item)) {
			//TODO: Throw error?
		}
	};

	var p = createjs.extend(XHRRequest, createjs.AbstractRequest);

// static properties
	/**
	 * A list of XMLHTTP object IDs to try when building an ActiveX object for XHR requests in earlier versions of IE.
	 * @property ACTIVEX_VERSIONS
	 * @type {Array}
	 * @since 0.4.2
	 * @private
	 */
	XHRRequest.ACTIVEX_VERSIONS = [
		"Msxml2.XMLHTTP.6.0",
		"Msxml2.XMLHTTP.5.0",
		"Msxml2.XMLHTTP.4.0",
		"MSXML2.XMLHTTP.3.0",
		"MSXML2.XMLHTTP",
		"Microsoft.XMLHTTP"
	];

// Public methods
	/**
	 * Look up the loaded result.
	 * @method getResult
	 * @param {Boolean} [raw=false] Return a raw result instead of a formatted result. This applies to content
	 * loaded via XHR such as scripts, XML, CSS, and Images. If there is no raw result, the formatted result will be
	 * returned instead.
	 * @return {Object} A result object containing the content that was loaded, such as:
	 * <ul>
	 *      <li>An image tag (&lt;image /&gt;) for images</li>
	 *      <li>A script tag for JavaScript (&lt;script /&gt;). Note that scripts loaded with tags may be added to the
	 *      HTML head.</li>
	 *      <li>A style tag for CSS (&lt;style /&gt;)</li>
	 *      <li>Raw text for TEXT</li>
	 *      <li>A formatted JavaScript object defined by JSON</li>
	 *      <li>An XML document</li>
	 *      <li>An binary arraybuffer loaded by XHR</li>
	 * </ul>
	 * Note that if a raw result is requested, but not found, the result will be returned instead.
	 */
	p.getResult = function (raw) {
		if (raw && this._rawResponse) {
			return this._rawResponse;
		}
		return this._response;
	};

	// Overrides abstract method in AbstractRequest
	p.cancel = function () {
		this.canceled = true;
		this._clean();
		this._request.abort();
	};

	// Overrides abstract method in AbstractLoader
	p.load = function () {
		if (this._request == null) {
			this._handleError();
			return;
		}

		//Events
		this._request.addEventListener("loadstart", this._handleLoadStartProxy, false);
		this._request.addEventListener("progress", this._handleProgressProxy, false);
		this._request.addEventListener("abort", this._handleAbortProxy, false);
		this._request.addEventListener("error",this._handleErrorProxy, false);
		this._request.addEventListener("timeout", this._handleTimeoutProxy, false);

		// Note: We don't get onload in all browsers (earlier FF and IE). onReadyStateChange handles these.
		this._request.addEventListener("load", this._handleLoadProxy, false);
		this._request.addEventListener("readystatechange", this._handleReadyStateChangeProxy, false);

		// Set up a timeout if we don't have XHR2
		if (this._xhrLevel == 1) {
			this._loadTimeout = setTimeout(createjs.proxy(this._handleTimeout, this), this._item.loadTimeout);
		}

		// Sometimes we get back 404s immediately, particularly when there is a cross origin request.  // note this does not catch in Chrome
		try {
			if (!this._item.values || this._item.method == createjs.AbstractLoader.GET) {
				this._request.send();
			} else if (this._item.method == createjs.AbstractLoader.POST) {
				this._request.send(createjs.RequestUtils.formatQueryString(this._item.values));
			}
		} catch (error) {
			this.dispatchEvent(new createjs.ErrorEvent("XHR_SEND", null, error));
		}
	};

	p.setResponseType = function (type) {
		this._request.responseType = type;
	};

	/**
	 * Get all the response headers from the XmlHttpRequest.
	 *
	 * <strong>From the docs:</strong> Return all the HTTP headers, excluding headers that are a case-insensitive match
	 * for Set-Cookie or Set-Cookie2, as a single string, with each header line separated by a U+000D CR U+000A LF pair,
	 * excluding the status line, and with each header name and header value separated by a U+003A COLON U+0020 SPACE
	 * pair.
	 * @method getAllResponseHeaders
	 * @return {String}
	 * @since 0.4.1
	 */
	p.getAllResponseHeaders = function () {
		if (this._request.getAllResponseHeaders instanceof Function) {
			return this._request.getAllResponseHeaders();
		} else {
			return null;
		}
	};

	/**
	 * Get a specific response header from the XmlHttpRequest.
	 *
	 * <strong>From the docs:</strong> Returns the header field value from the response of which the field name matches
	 * header, unless the field name is Set-Cookie or Set-Cookie2.
	 * @method getResponseHeader
	 * @param {String} header The header name to retrieve.
	 * @return {String}
	 * @since 0.4.1
	 */
	p.getResponseHeader = function (header) {
		if (this._request.getResponseHeader instanceof Function) {
			return this._request.getResponseHeader(header);
		} else {
			return null;
		}
	};

// protected methods
	/**
	 * The XHR request has reported progress.
	 * @method _handleProgress
	 * @param {Object} event The XHR progress event.
	 * @private
	 */
	p._handleProgress = function (event) {
		if (!event || event.loaded > 0 && event.total == 0) {
			return; // Sometimes we get no "total", so just ignore the progress event.
		}

		var newEvent = new createjs.ProgressEvent(event.loaded, event.total);
		this.dispatchEvent(newEvent);
	};

	/**
	 * The XHR request has reported a load start.
	 * @method _handleLoadStart
	 * @param {Object} event The XHR loadStart event.
	 * @private
	 */
	p._handleLoadStart = function (event) {
		clearTimeout(this._loadTimeout);
		this.dispatchEvent("loadstart");
	};

	/**
	 * The XHR request has reported an abort event.
	 * @method handleAbort
	 * @param {Object} event The XHR abort event.
	 * @private
	 */
	p._handleAbort = function (event) {
		this._clean();
		this.dispatchEvent(new createjs.ErrorEvent("XHR_ABORTED", null, event));
	};

	/**
	 * The XHR request has reported an error event.
	 * @method _handleError
	 * @param {Object} event The XHR error event.
	 * @private
	 */
	p._handleError = function (event) {
		this._clean();
		this.dispatchEvent(new createjs.ErrorEvent(event.message));
	};

	/**
	 * The XHR request has reported a readyState change. Note that older browsers (IE 7 & 8) do not provide an onload
	 * event, so we must monitor the readyStateChange to determine if the file is loaded.
	 * @method _handleReadyStateChange
	 * @param {Object} event The XHR readyStateChange event.
	 * @private
	 */
	p._handleReadyStateChange = function (event) {
		if (this._request.readyState == 4) {
			this._handleLoad();
		}
	};

	/**
	 * The XHR request has completed. This is called by the XHR request directly, or by a readyStateChange that has
	 * <code>request.readyState == 4</code>. Only the first call to this method will be processed.
	 * @method _handleLoad
	 * @param {Object} event The XHR load event.
	 * @private
	 */
	p._handleLoad = function (event) {
		if (this.loaded) {
			return;
		}
		this.loaded = true;

		var error = this._checkError();
		if (error) {
			this._handleError(error);
			return;
		}

		this._response = this._getResponse();
		this._clean();

		this.dispatchEvent(new createjs.Event("complete"));
	};

	/**
	 * The XHR request has timed out. This is called by the XHR request directly, or via a <code>setTimeout</code>
	 * callback.
	 * @method _handleTimeout
	 * @param {Object} [event] The XHR timeout event. This is occasionally null when called by the backup setTimeout.
	 * @private
	 */
	p._handleTimeout = function (event) {
		this._clean();

		this.dispatchEvent(new createjs.ErrorEvent("PRELOAD_TIMEOUT", null, event));
	};

// Protected
	/**
	 * Determine if there is an error in the current load. This checks the status of the request for problem codes. Note
	 * that this does not check for an actual response. Currently, it only checks for 404 or 0 error code.
	 * @method _checkError
	 * @return {int} If the request status returns an error code.
	 * @private
	 */
	p._checkError = function () {
		//LM: Probably need additional handlers here, maybe 501
		var status = parseInt(this._request.status);

		switch (status) {
			case 404:   // Not Found
			case 0:     // Not Loaded
				return new Error(status);
		}
		return null;
	};

	/**
	 * Validate the response. Different browsers have different approaches, some of which throw errors when accessed
	 * in other browsers. If there is no response, the <code>_response</code> property will remain null.
	 * @method _getResponse
	 * @private
	 */
	p._getResponse = function () {
		if (this._response != null) {
			return this._response;
		}

		if (this._request.response != null) {
			return this._request.response;
		}

		// Android 2.2 uses .responseText
		try {
			if (this._request.responseText != null) {
				return this._request.responseText;
			}
		} catch (e) {
		}

		// When loading XML, IE9 does not return .response, instead it returns responseXML.xml
		try {
			if (this._request.responseXML != null) {
				return this._request.responseXML;
			}
		} catch (e) {
		}

		return null;
	};

	/**
	 * Create an XHR request. Depending on a number of factors, we get totally different results.
	 * <ol><li>Some browsers get an <code>XDomainRequest</code> when loading cross-domain.</li>
	 *      <li>XMLHttpRequest are created when available.</li>
	 *      <li>ActiveX.XMLHTTP objects are used in older IE browsers.</li>
	 *      <li>Text requests override the mime type if possible</li>
	 *      <li>Origin headers are sent for crossdomain requests in some browsers.</li>
	 *      <li>Binary loads set the response type to "arraybuffer"</li></ol>
	 * @method _createXHR
	 * @param {Object} item The requested item that is being loaded.
	 * @return {Boolean} If an XHR request or equivalent was successfully created.
	 * @private
	 */
	p._createXHR = function (item) {
		// Check for cross-domain loads. We can't fully support them, but we can try.
		var crossdomain = createjs.RequestUtils.isCrossDomain(item);
		var headers = {};

		// Create the request. Fallback to whatever support we have.
		var req = null;
		if (window.XMLHttpRequest) {
			req = new XMLHttpRequest();
			// This is 8 or 9, so use XDomainRequest instead.
			if (crossdomain && req.withCredentials === undefined && window.XDomainRequest) {
				req = new XDomainRequest();
			}
		} else { // Old IE versions use a different approach
			for (var i = 0, l = s.ACTIVEX_VERSIONS.length; i < l; i++) {
				var axVersion = s.ACTIVEX_VERSIONS[i];
				try {
					req = new ActiveXObject(axVersions);
					break;
				} catch (e) {}
			}
			if (req == null) { return false; }
		}

		// IE9 doesn't support overrideMimeType(), so we need to check for it.
		if (item.mimeType && req.overrideMimeType) {
			req.overrideMimeType(item.mimeType);
		}

		// Determine the XHR level
		this._xhrLevel = (typeof req.responseType === "string") ? 2 : 1;

		var src = null;
		if (item.method == createjs.AbstractLoader.GET) {
			src = createjs.RequestUtils.buildPath(item.src, item.values);
		} else {
			src = item.src;
		}

		// Open the request.  Set cross-domain flags if it is supported (XHR level 1 only)
		req.open(item.method || createjs.AbstractLoader.GET, src, true);

		if (crossdomain && req instanceof XMLHttpRequest && this._xhrLevel == 1) {
			headers["Origin"] = location.origin;
		}

		// To send data we need to set the Content-type header)
		if (item.values && item.method == createjs.AbstractLoader.POST) {
			headers["Content-Type"] = "application/x-www-form-urlencoded";
		}

		if (!crossdomain && !headers["X-Requested-With"]) {
			headers["X-Requested-With"] = "XMLHttpRequest";
		}

		if (item.headers) {
			for (var n in item.headers) {
				headers[n] = item.headers[n];
			}
		}

		for (n in headers) {
			req.setRequestHeader(n, headers[n])
		}

		if (req instanceof XMLHttpRequest && item.withCredentials !== undefined) {
			req.withCredentials = item.withCredentials;
		}

		this._request = req;

		return true;
	};

	/**
	 * A request has completed (or failed or canceled), and needs to be disposed.
	 * @method _clean
	 * @private
	 */
	p._clean = function () {
		clearTimeout(this._loadTimeout);

		this._request.removeEventListener("loadstart", this._handleLoadStartProxy);
		this._request.removeEventListener("progress", this._handleProgressProxy);
		this._request.removeEventListener("abort", this._handleAbortProxy);
		this._request.removeEventListener("error",this._handleErrorProxy);
		this._request.removeEventListener("timeout", this._handleTimeoutProxy);
		this._request.removeEventListener("load", this._handleLoadProxy);
		this._request.removeEventListener("readystatechange", this._handleReadyStateChangeProxy);
	};

	p.toString = function () {
		return "[PreloadJS XHRRequest]";
	};

	createjs.XHRRequest = createjs.promote(XHRRequest, "AbstractRequest");

}());

//##############################################################################
// SoundLoader.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	// constructor
	/**
	 * A loader for HTML audio files. PreloadJS can not load WebAudio files, as a WebAudio context is required, which
	 * should be created by either a library playing the sound (such as <a href="http://soundjs.com">SoundJS</a>, or an
	 * external framework that handles audio playback. To load content that can be played by WebAudio, use the
	 * {{#crossLink "BinaryLoader"}}{{/crossLink}}, and handle the audio context decoding manually.
	 * @class SoundLoader
	 * @param {LoadItem|Object} loadItem
	 * @param {Boolean} preferXHR
	 * @constructor
	 */
	function SoundLoader(loadItem, preferXHR) {
		this.AbstractMediaLoader_constructor(loadItem, preferXHR, createjs.AbstractLoader.SOUND);

		// protected properties
		if (createjs.RequestUtils.isAudioTag(loadItem)) {
			this._tag = loadItem;
		} else if (createjs.RequestUtils.isAudioTag(loadItem.src)) {
			this._tag = loadItem;
		} else if (createjs.RequestUtils.isAudioTag(loadItem.tag)) {
			this._tag = createjs.RequestUtils.isAudioTag(loadItem) ? loadItem : loadItem.src;
		}

		if (this._tag != null) {
			this._preferXHR = false;
		}
	};

	var p = createjs.extend(SoundLoader, createjs.AbstractMediaLoader);
	var s = SoundLoader;

	// static methods
	/**
	 * Determines if the loader can load a specific item. This loader can only load items that are of type
	 * {{#crossLink "AbstractLoader/SOUND:property"}}{{/crossLink}}.
	 * @method canLoadItem
	 * @param {LoadItem|Object} item The LoadItem that a LoadQueue is trying to load.
	 * @returns {Boolean} Whether the loader can load the item.
	 * @static
	 */
	s.canLoadItem = function (item) {
		return item.type == createjs.AbstractLoader.SOUND;
	};

	// protected methods
	p._createTag = function (src) {
		var tag = document.createElement("audio");
		tag.autoplay = false;
		tag.preload = "none";

		//LM: Firefox fails when this the preload="none" for other tags, but it needs to be "none" to ensure PreloadJS works.
		tag.src = src;
		return tag;
	};

	createjs.SoundLoader = createjs.promote(SoundLoader, "AbstractMediaLoader");

}());

//##############################################################################
// Sound.js
//##############################################################################

this.createjs = this.createjs || {};



(function () {
	"use strict";

	/**
	 * The Sound class is the public API for creating sounds, controlling the overall sound levels, and managing plugins.
	 * All Sound APIs on this class are static.
	 *
	 * <b>Registering and Preloading</b><br />
	 * Before you can play a sound, it <b>must</b> be registered. You can do this with {{#crossLink "Sound/registerSound"}}{{/crossLink}},
	 * or register multiple sounds using {{#crossLink "Sound/registerSounds"}}{{/crossLink}}. If you don't register a
	 * sound prior to attempting to play it using {{#crossLink "Sound/play"}}{{/crossLink}} or create it using {{#crossLink "Sound/createInstance"}}{{/crossLink}},
	 * the sound source will be automatically registered but playback will fail as the source will not be ready. If you use
	 * <a href="http://preloadjs.com" target="_blank">PreloadJS</a>, registration is handled for you when the sound is
	 * preloaded. It is recommended to preload sounds either internally using the register functions or externally using
	 * PreloadJS so they are ready when you want to use them.
	 *
	 * <b>Playback</b><br />
	 * To play a sound once it's been registered and preloaded, use the {{#crossLink "Sound/play"}}{{/crossLink}} method.
	 * This method returns a {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} which can be paused, resumed, muted, etc.
	 * Please see the {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} documentation for more on the instance control APIs.
	 *
	 * <b>Plugins</b><br />
	 * By default, the {{#crossLink "WebAudioPlugin"}}{{/crossLink}} or the {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}
	 * are used (when available), although developers can change plugin priority or add new plugins (such as the
	 * provided {{#crossLink "FlashAudioPlugin"}}{{/crossLink}}). Please see the {{#crossLink "Sound"}}{{/crossLink}} API
	 * methods for more on the playback and plugin APIs. To install plugins, or specify a different plugin order, see
	 * {{#crossLink "Sound/installPlugins"}}{{/crossLink}}.
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.FlashAudioPlugin]);
	 *      createjs.Sound.alternateExtensions = ["mp3"];
	 *      createjs.Sound.on("fileload", createjs.proxy(this.loadHandler, (this));
	 *      createjs.Sound.registerSound("path/to/mySound.ogg", "sound");
	 *      function loadHandler(event) {
     *          // This is fired for each sound that is registered.
     *          var instance = createjs.Sound.play("sound");  // play using id.  Could also use full source path or event.src.
     *          instance.on("complete", createjs.proxy(this.handleComplete, this));
     *          instance.volume = 0.5;
	 *      }
	 *
	 * The maximum number of concurrently playing instances of the same sound can be specified in the "data" argument
	 * of {{#crossLink "Sound/registerSound"}}{{/crossLink}}.  Note that if not specified, the active plugin will apply
	 * a default limit.  Currently HTMLAudioPlugin sets a default limit of 2, while WebAudioPlugin and FlashAudioPlugin set a
	 * default limit of 100.
	 *
	 *      createjs.Sound.registerSound("sound.mp3", "soundId", 4);
	 *
	 * Sound can be used as a plugin with PreloadJS to help preload audio properly. Audio preloaded with PreloadJS is
	 * automatically registered with the Sound class. When audio is not preloaded, Sound will do an automatic internal
	 * load. As a result, it may fail to play the first time play is called if the audio is not finished loading. Use the
	 * {{#crossLink "Sound/fileload"}}{{/crossLink}} event to determine when a sound has finished internally preloading.
	 * It is recommended that all audio is preloaded before it is played.
	 *
	 *      var queue = new createjs.LoadQueue();
	 *		queue.installPlugin(createjs.Sound);
	 *
	 * <b>Audio Sprites</b><br />
	 * SoundJS has added support for Audio Sprites, available as of version 0.6.0.
	 * For those unfamiliar with audio sprites, they are much like CSS sprites or sprite sheets: multiple audio assets
	 * grouped into a single file.
	 *
	 * Benefits of Audio Sprites
	 * <ul><li>More robust support for older browsers and devices that only allow a single audio instance, such as iOS 5.</li>
	 * <li>They provide a work around for the Internet Explorer 9 audio tag limit, which until now restricted how many
	 * different sounds we could load at once.</li>
	 * <li>Faster loading by only requiring a single network request for several sounds, especially on mobile devices
	 * where the network round trip for each file can add significant latency.</li></ul>
	 *
	 * Drawbacks of Audio Sprites
	 * <ul><li>No guarantee of smooth looping when using HTML or Flash audio.  If you have a track that needs to loop
	 * smoothly and you are supporting non-web audio browsers, do not use audio sprites for that sound if you can avoid it.</li>
	 * <li>No guarantee that HTML audio will play back immediately, especially the first time. In some browsers (Chrome!),
	 * HTML audio will only load enough to play through – so we rely on the “canplaythrough” event to determine if the audio is loaded.
	 * Since audio sprites must jump ahead to play specific sounds, the audio may not yet have downloaded.</li>
	 * <li>Audio sprites share the same core source, so if you have a sprite with 5 sounds and are limited to 2
	 * concurrently playing instances, that means you can only play 2 of the sounds at the same time.</li></ul>
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.Sound.initializeDefaultPlugins();
	 *		var assetsPath = "./assets/";
	 *		var sounds = [{
	 *			src:"MyAudioSprite.ogg", data: {
	 *				audioSprite: [
	 *					{id:"sound1", startTime:0, duration:500},
	 *					{id:"sound2", startTime:1000, duration:400},
	 *					{id:"sound3", startTime:1700, duration: 1000}
	 *				]}
 *				}
	 *		];
	 *		createjs.Sound.alternateExtensions = ["mp3"];
	 *		createjs.Sound.on("fileload", loadSound);
	 *		createjs.Sound.registerSounds(sounds, assetsPath);
	 *		// after load is complete
	 *		createjs.Sound.play("sound2");
	 *
	 * You can also create audio sprites on the fly by setting the startTime and duration when creating an new AbstractSoundInstance.
	 *
	 * 		createjs.Sound.play("MyAudioSprite", {startTime: 1000, duration: 400});
	 *
	 * <b>Mobile Safe Approach</b><br />
	 * Mobile devices require sounds to be played inside of a user initiated event (touch/click) in varying degrees.
	 * As of SoundJS 0.4.1, you can launch a site inside of a user initiated event and have audio playback work. To
	 * enable as broadly as possible, the site needs to setup the Sound plugin in its initialization (for example via
	 * <code>createjs.Sound.initializeDefaultPlugins();</code>), and all sounds need to be played in the scope of the
	 * application.  See the MobileSafe demo for a working example.
	 *
	 * <h4>Example</h4>
	 *
	 *     document.getElementById("status").addEventListener("click", handleTouch, false);    // works on Android and iPad
	 *     function handleTouch(event) {
	 *         document.getElementById("status").removeEventListener("click", handleTouch, false);    // remove the listener
	 *         var thisApp = new myNameSpace.MyApp();    // launch the app
	 *     }
	 *
	 * <h4>Known Browser and OS issues</h4>
	 * <b>IE 9 HTML Audio limitations</b><br />
	 * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have
	 * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of
	 * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>
     * <li>MP3 encoding will not always work for audio tags, particularly in Internet Explorer. We've found default
	 * encoding with 64kbps works.</li>
	 * <li>Occasionally very short samples will get cut off.</li>
	 * <li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by
	 * hardware and browser settings.  See {{#crossLink "HTMLAudioPlugin.MAX_INSTANCES"}}{{/crossLink}} for a safe estimate.</li></ul>
	 *
	 * <b>Firefox 25 Web Audio limitations</b>
	 * <ul><li>mp3 audio files do not load properly on all windows machines, reported
	 * <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=929969" target="_blank">here</a>. </br>
	 * For this reason it is recommended to pass another FF supported type (ie ogg) first until this bug is resolved, if possible.</li></ul>

	 * <b>Safari limitations</b><br />
	 * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>
	 *
	 * <b>iOS 6 Web Audio limitations</b><br />
	 * <ul><li>Sound is initially muted and will only unmute through play being called inside a user initiated event
	 * (touch/click).</li>
	 * <li>A bug exists that will distort un-cached web audio when a video element is present in the DOM that has audio at a different sampleRate.</li>
	 * <li>Note HTMLAudioPlugin is not supported on iOS by default.  See {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}
	 * for more details.</li>
	 * </ul>
	 *
	 * <b>Android HTML Audio limitations</b><br />
	 * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>
	 * <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use
	 * a delay.</li></ul>
	 *
	 *
	 * @class Sound
	 * @static
	 * @uses EventDispatcher
	 */
	function Sound() {
		throw "Sound cannot be instantiated";
	}

	var s = Sound;


// Static Properties
	/**
	 * The interrupt value to interrupt any currently playing instance with the same source, if the maximum number of
	 * instances of the sound are already playing.
	 * @property INTERRUPT_ANY
	 * @type {String}
	 * @default any
	 * @static
	 */
	s.INTERRUPT_ANY = "any";

	/**
	 * The interrupt value to interrupt the earliest currently playing instance with the same source that progressed the
	 * least distance in the audio track, if the maximum number of instances of the sound are already playing.
	 * @property INTERRUPT_EARLY
	 * @type {String}
	 * @default early
	 * @static
	 */
	s.INTERRUPT_EARLY = "early";

	/**
	 * The interrupt value to interrupt the currently playing instance with the same source that progressed the most
	 * distance in the audio track, if the maximum number of instances of the sound are already playing.
	 * @property INTERRUPT_LATE
	 * @type {String}
	 * @default late
	 * @static
	 */
	s.INTERRUPT_LATE = "late";

	/**
	 * The interrupt value to not interrupt any currently playing instances with the same source, if the maximum number of
	 * instances of the sound are already playing.
	 * @property INTERRUPT_NONE
	 * @type {String}
	 * @default none
	 * @static
	 */
	s.INTERRUPT_NONE = "none";

	/**
	 * Defines the playState of an instance that is still initializing.
	 * @property PLAY_INITED
	 * @type {String}
	 * @default playInited
	 * @static
	 */
	s.PLAY_INITED = "playInited";

	/**
	 * Defines the playState of an instance that is currently playing or paused.
	 * @property PLAY_SUCCEEDED
	 * @type {String}
	 * @default playSucceeded
	 * @static
	 */
	s.PLAY_SUCCEEDED = "playSucceeded";

	/**
	 * Defines the playState of an instance that was interrupted by another instance.
	 * @property PLAY_INTERRUPTED
	 * @type {String}
	 * @default playInterrupted
	 * @static
	 */
	s.PLAY_INTERRUPTED = "playInterrupted";

	/**
	 * Defines the playState of an instance that completed playback.
	 * @property PLAY_FINISHED
	 * @type {String}
	 * @default playFinished
	 * @static
	 */
	s.PLAY_FINISHED = "playFinished";

	/**
	 * Defines the playState of an instance that failed to play. This is usually caused by a lack of available channels
	 * when the interrupt mode was "INTERRUPT_NONE", the playback stalled, or the sound could not be found.
	 * @property PLAY_FAILED
	 * @type {String}
	 * @default playFailed
	 * @static
	 */
	s.PLAY_FAILED = "playFailed";

	/**
	 * A list of the default supported extensions that Sound will <i>try</i> to play. Plugins will check if the browser
	 * can play these types, so modifying this list before a plugin is initialized will allow the plugins to try to
	 * support additional media types.
	 *
	 * NOTE this does not currently work for {{#crossLink "FlashAudioPlugin"}}{{/crossLink}}.
	 *
	 * More details on file formats can be found at <a href="http://en.wikipedia.org/wiki/Audio_file_format" target="_blank">http://en.wikipedia.org/wiki/Audio_file_format</a>.<br />
	 * A very detailed list of file formats can be found at <a href="http://www.fileinfo.com/filetypes/audio" target="_blank">http://www.fileinfo.com/filetypes/audio</a>.
	 * @property SUPPORTED_EXTENSIONS
	 * @type {Array[String]}
	 * @default ["mp3", "ogg", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"]
	 * @since 0.4.0
	 */
	s.SUPPORTED_EXTENSIONS = ["mp3", "ogg", "mpeg", "wav", "m4a", "mp4", "aiff", "wma", "mid"];

	/**
	 * Some extensions use another type of extension support to play (one of them is a codex).  This allows you to map
	 * that support so plugins can accurately determine if an extension is supported.  Adding to this list can help
	 * plugins determine more accurately if an extension is supported.
	 *
 	 * A useful list of extensions for each format can be found at <a href="http://html5doctor.com/html5-audio-the-state-of-play/" target="_blank">http://html5doctor.com/html5-audio-the-state-of-play/</a>.
	 * @property EXTENSION_MAP
	 * @type {Object}
	 * @since 0.4.0
	 * @default {m4a:"mp4"}
	 */
	s.EXTENSION_MAP = {
		m4a:"mp4"
	};

	/**
	 * The RegExp pattern used to parse file URIs. This supports simple file names, as well as full domain URIs with
	 * query strings. The resulting match is: protocol:$1 domain:$2 path:$3 file:$4 extension:$5 query:$6.
	 * @property FILE_PATTERN
	 * @type {RegExp}
	 * @static
	 * @protected
	 */
	s.FILE_PATTERN = /^(?:(\w+:)\/{2}(\w+(?:\.\w+)*\/?))?([/.]*?(?:[^?]+)?\/)?((?:[^/?]+)\.(\w+))(?:\?(\S+)?)?$/;


// Class Public properties
	/**
	 * Determines the default behavior for interrupting other currently playing instances with the same source, if the
	 * maximum number of instances of the sound are already playing.  Currently the default is {{#crossLink "Sound/INTERRUPT_NONE:property"}}{{/crossLink}}
	 * but this can be set and will change playback behavior accordingly.  This is only used when {{#crossLink "Sound/play"}}{{/crossLink}}
	 * is called without passing a value for interrupt.
	 * @property defaultInterruptBehavior
	 * @type {String}
	 * @default Sound.INTERRUPT_NONE, or "none"
	 * @static
	 * @since 0.4.0
	 */
	s.defaultInterruptBehavior = s.INTERRUPT_NONE;  // OJR does s.INTERRUPT_ANY make more sense as default?  Needs game dev testing to see which case makes more sense.

	/**
	 * An array of extensions to attempt to use when loading sound, if the default is unsupported by the active plugin.
	 * These are applied in order, so if you try to Load Thunder.ogg in a browser that does not support ogg, and your
	 * extensions array is ["mp3", "m4a", "wav"] it will check mp3 support, then m4a, then wav. The audio files need
	 * to exist in the same location, as only the extension is altered.
	 *
	 * Note that regardless of which file is loaded, you can call {{#crossLink "Sound/createInstance"}}{{/crossLink}}
	 * and {{#crossLink "Sound/play"}}{{/crossLink}} using the same id or full source path passed for loading.
	 *
	 * <h4>Example</h4>
	 *
	 *	var sounds = [
	 *		{src:"myPath/mySound.ogg", id:"example"},
	 *	];
	 *	createjs.Sound.alternateExtensions = ["mp3"]; // now if ogg is not supported, SoundJS will try asset0.mp3
	 *	createjs.Sound.on("fileload", handleLoad); // call handleLoad when each sound loads
	 *	createjs.Sound.registerSounds(sounds, assetPath);
	 *	// ...
	 *	createjs.Sound.play("myPath/mySound.ogg"); // works regardless of what extension is supported.  Note calling with ID is a better approach
	 *
	 * @property alternateExtensions
	 * @type {Array}
	 * @since 0.5.2
	 */
	s.alternateExtensions = [];

	/**
	 * The currently active plugin. If this is null, then no plugin could be initialized. If no plugin was specified,
	 * Sound attempts to apply the default plugins: {{#crossLink "WebAudioPlugin"}}{{/crossLink}}, followed by
	 * {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}.
	 * @property activePlugin
	 * @type {Object}
	 * @static
	 */
    s.activePlugin = null;


// Class Private properties
	/**
	 * Determines if the plugins have been registered. If false, the first call to play() will instantiate the default
	 * plugins ({{#crossLink "WebAudioPlugin"}}{{/crossLink}}, followed by {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}).
	 * If plugins have been registered, but none are applicable, then sound playback will fail.
	 * @property _pluginsRegistered
	 * @type {Boolean}
	 * @default false
	 * @static
	 * @protected
	 */
	s._pluginsRegistered = false;

	/**
	 * Used internally to assign unique IDs to each AbstractSoundInstance.
	 * @property _lastID
	 * @type {Number}
	 * @static
	 * @protected
	 */
	s._lastID = 0;

	/**
	 * The master volume value, which affects all sounds. Use {{#crossLink "Sound/getVolume"}}{{/crossLink}} and
	 * {{#crossLink "Sound/setVolume"}}{{/crossLink}} to modify the volume of all audio.
	 * @property _masterVolume
	 * @type {Number}
	 * @default 1
	 * @protected
	 * @since 0.4.0
	 */
	s._masterVolume = 1;

	/**
	 * The master mute value, which affects all sounds.  This is applies to all sound instances.  This value can be set
	 * through {{#crossLink "Sound/setMute"}}{{/crossLink}} and accessed via {{#crossLink "Sound/getMute"}}{{/crossLink}}.
	 * @property _masterMute
	 * @type {Boolean}
	 * @default false
	 * @protected
	 * @static
	 * @since 0.4.0
	 */
	s._masterMute = false;

	/**
	 * An array containing all currently playing instances. This allows Sound to control the volume, mute, and playback of
	 * all instances when using static APIs like {{#crossLink "Sound/stop"}}{{/crossLink}} and {{#crossLink "Sound/setVolume"}}{{/crossLink}}.
	 * When an instance has finished playback, it gets removed via the {{#crossLink "Sound/finishedPlaying"}}{{/crossLink}}
	 * method. If the user replays an instance, it gets added back in via the {{#crossLink "Sound/_beginPlaying"}}{{/crossLink}}
	 * method.
	 * @property _instances
	 * @type {Array}
	 * @protected
	 * @static
	 */
	s._instances = [];

	/**
	 * An object hash storing objects with sound sources, startTime, and duration via there corresponding ID.
	 * @property _idHash
	 * @type {Object}
	 * @protected
	 * @static
	 */
	s._idHash = {};

	/**
	 * An object hash that stores preloading sound sources via the parsed source that is passed to the plugin.  Contains the
	 * source, id, and data that was passed in by the user.  Parsed sources can contain multiple instances of source, id,
	 * and data.
	 * @property _preloadHash
	 * @type {Object}
	 * @protected
	 * @static
	 */
	s._preloadHash = {};


// EventDispatcher methods:
	s.addEventListener = null;
	s.removeEventListener = null;
	s.removeAllEventListeners = null;
	s.dispatchEvent = null;
	s.hasEventListener = null;
	s._listeners = null;

	createjs.EventDispatcher.initialize(s); // inject EventDispatcher methods.


// Events
	/**
	 * This event is fired when a file finishes loading internally. This event is fired for each loaded sound,
	 * so any handler methods should look up the <code>event.src</code> to handle a particular sound.
	 * @event fileload
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type.
	 * @param {String} src The source of the sound that was loaded.
	 * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.
	 * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.
	 * @since 0.4.1
	 */

	/**
	 * This event is fired when a file fails loading internally. This event is fired for each loaded sound,
	 * so any handler methods should look up the <code>event.src</code> to handle a particular sound.
	 * @event fileerror
	 * @param {Object} target The object that dispatched the event.
	 * @param {String} type The event type.
	 * @param {String} src The source of the sound that was loaded.
	 * @param {String} [id] The id passed in when the sound was registered. If one was not provided, it will be null.
	 * @param {Number|Object} [data] Any additional data associated with the item. If not provided, it will be undefined.
	 * @since 0.6.0
	 */


// Class Public Methods
	/**
	 * Get the preload rules to allow Sound to be used as a plugin by <a href="http://preloadjs.com" target="_blank">PreloadJS</a>.
	 * Any load calls that have the matching type or extension will fire the callback method, and use the resulting
	 * object, which is potentially modified by Sound. This helps when determining the correct path, as well as
	 * registering the audio instance(s) with Sound. This method should not be called, except by PreloadJS.
	 * @method getPreloadHandlers
	 * @return {Object} An object containing:
	 * <ul><li>callback: A preload callback that is fired when a file is added to PreloadJS, which provides
	 *      Sound a mechanism to modify the load parameters, select the correct file format, register the sound, etc.</li>
	 *      <li>types: A list of file types that are supported by Sound (currently supports "sound").</li>
	 *      <li>extensions: A list of file extensions that are supported by Sound (see {{#crossLink "Sound.SUPPORTED_EXTENSIONS"}}{{/crossLink}}).</li></ul>
	 * @static
	 * @protected
	 */
	s.getPreloadHandlers = function () {
		return {
			callback:createjs.proxy(s.initLoad, s),
			types:["sound"],
			extensions:s.SUPPORTED_EXTENSIONS
		};
	};

	/**
	 * Used to dispatch fileload events from internal loading.
	 * @method _handleLoadComplete
	 * @param event A loader event.
	 * @protected
	 * @static
	 * @since 0.6.0
	 */
	s._handleLoadComplete = function(event) {
		var src = event.target.getItem().src;
		if (!s._preloadHash[src]) {return;}

		for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
			var item = s._preloadHash[src][i];
			s._preloadHash[src][i] = true;

			if (!s.hasEventListener("fileload")) { continue; }

			var event = new createjs.Event("fileload");
			event.src = item.src;
			event.id = item.id;
			event.data = item.data;
			event.sprite = item.sprite;

			s.dispatchEvent(event);
		}
	};

	/**
	 * Used to dispatch error events from internal preloading.
	 * @param event
	 * @protected
	 * @since 0.6.0
	 */
	s._handleLoadError = function(event) {
		var src = event.target.getItem().src;
		if (!s._preloadHash[src]) {return;}

		for (var i = 0, l = s._preloadHash[src].length; i < l; i++) {
			var item = s._preloadHash[src][i];
			s._preloadHash[src][i] = false;

			if (!s.hasEventListener("fileerror")) { continue; }

			var event = new createjs.Event("fileerror");
			event.src = item.src;
			event.id = item.id;
			event.data = item.data;
			event.sprite = item.sprite;

			s.dispatchEvent(event);
		}
	};

	/**
	 * Used by {{#crossLink "Sound/registerPlugins"}}{{/crossLink}} to register a Sound plugin.
	 *
	 * @method _registerPlugin
	 * @param {Object} plugin The plugin class to install.
	 * @return {Boolean} Whether the plugin was successfully initialized.
	 * @static
	 * @private
	 */
	s._registerPlugin = function (plugin) {
		// Note: Each plugin is passed in as a class reference, but we store the activePlugin as an instance
		if (plugin.isSupported()) {
			s.activePlugin = new plugin();
			return true;
		}
		return false;
	};

	/**
	 * Register a list of Sound plugins, in order of precedence. To register a single plugin, pass a single element in the array.
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.FlashAudioPlugin.swfPath = "../src/soundjs/flashaudio/";
	 *      createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);
	 *
	 * @method registerPlugins
	 * @param {Array} plugins An array of plugins classes to install.
	 * @return {Boolean} Whether a plugin was successfully initialized.
	 * @static
	 */
	s.registerPlugins = function (plugins) {
		s._pluginsRegistered = true;
		for (var i = 0, l = plugins.length; i < l; i++) {
			if (s._registerPlugin(plugins[i])) {
				return true;
			}
		}
		return false;
	};

	/**
	 * Initialize the default plugins. This method is automatically called when any audio is played or registered before
	 * the user has manually registered plugins, and enables Sound to work without manual plugin setup. Currently, the
	 * default plugins are {{#crossLink "WebAudioPlugin"}}{{/crossLink}} followed by {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}.
	 *
	 * <h4>Example</h4>
	 *
	 * 	if (!createjs.initializeDefaultPlugins()) { return; }
	 *
	 * @method initializeDefaultPlugins
	 * @returns {Boolean} True if a plugin was initialized, false otherwise.
	 * @since 0.4.0
	 */
	s.initializeDefaultPlugins = function () {
		if (s.activePlugin != null) {return true;}
		if (s._pluginsRegistered) {return false;}
		if (s.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin])) {return true;}
		return false;
	};

	/**
	 * Determines if Sound has been initialized, and a plugin has been activated.
	 *
	 * <h4>Example</h4>
	 * This example sets up a Flash fallback, but only if there is no plugin specified yet.
	 *
	 * 	if (!createjs.Sound.isReady()) {
	 *		createjs.FlashAudioPlugin.swfPath = "../src/soundjs/flashaudio/";
	 * 		createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin, createjs.FlashAudioPlugin]);
	 *	}
	 *
	 * @method isReady
	 * @return {Boolean} If Sound has initialized a plugin.
	 * @static
	 */
	s.isReady = function () {
		return (s.activePlugin != null);
	};

	/**
	 * Get the active plugins capabilities, which help determine if a plugin can be used in the current environment,
	 * or if the plugin supports a specific feature. Capabilities include:
	 * <ul>
	 *     <li><b>panning:</b> If the plugin can pan audio from left to right</li>
	 *     <li><b>volume;</b> If the plugin can control audio volume.</li>
	 *     <li><b>tracks:</b> The maximum number of audio tracks that can be played back at a time. This will be -1
	 *     if there is no known limit.</li>
	 * <br />An entry for each file type in {{#crossLink "Sound/SUPPORTED_EXTENSIONS:property"}}{{/crossLink}}:
	 *     <li><b>mp3:</b> If MP3 audio is supported.</li>
	 *     <li><b>ogg:</b> If OGG audio is supported.</li>
	 *     <li><b>wav:</b> If WAV audio is supported.</li>
	 *     <li><b>mpeg:</b> If MPEG audio is supported.</li>
	 *     <li><b>m4a:</b> If M4A audio is supported.</li>
	 *     <li><b>mp4:</b> If MP4 audio is supported.</li>
	 *     <li><b>aiff:</b> If aiff audio is supported.</li>
	 *     <li><b>wma:</b> If wma audio is supported.</li>
	 *     <li><b>mid:</b> If mid audio is supported.</li>
	 * </ul>
	 * @method getCapabilities
	 * @return {Object} An object containing the capabilities of the active plugin.
	 * @static
	 */
	s.getCapabilities = function () {
		if (s.activePlugin == null) {return null;}
		return s.activePlugin._capabilities;
	};

	/**
	 * Get a specific capability of the active plugin. See {{#crossLink "Sound/getCapabilities"}}{{/crossLink}} for a
	 * full list of capabilities.
	 *
	 * <h4>Example</h4>
	 *
	 *      var maxAudioInstances = createjs.Sound.getCapability("tracks");
	 *
	 * @method getCapability
	 * @param {String} key The capability to retrieve
	 * @return {Number|Boolean} The value of the capability.
	 * @static
	 * @see getCapabilities
	 */
	s.getCapability = function (key) {
		if (s.activePlugin == null) {return null;}
		return s.activePlugin._capabilities[key];
	};

	/**
	 * Process manifest items from <a href="http://preloadjs.com" target="_blank">PreloadJS</a>. This method is intended
	 * for usage by a plugin, and not for direct interaction.
	 * @method initLoad
	 * @param {Object} src The object to load.
	 * @return {Object|AbstractLoader} An instance of AbstractLoader.
	 * @protected
	 * @static
	 */
	s.initLoad = function (loadItem) {
		return s._registerSound(loadItem);
	};

	/**
	 * Internal method for loading sounds.  This should not be called directly.
	 *
	 * @method _registerSound
	 * @param {Object} src The object to load, containing src property and optionally containing id and data.
	 * @return {Object} An object with the modified values that were passed in, which defines the sound.
	 * Returns false if the source cannot be parsed or no plugins can be initialized.
	 * Returns true if the source is already loaded.
	 * @static
	 * @private
	 * @since 0.6.0
	 */

	s._registerSound = function (loadItem) {
		if (!s.initializeDefaultPlugins()) {return false;}

		var details = s._parsePath(loadItem.src);
		if (details == null) {return false;}
		loadItem.src = details.src;
		loadItem.type = "sound";

		var data = loadItem.data;
		var numChannels = s.activePlugin.defaultNumChannels || null;
		if (data != null) {
			if (!isNaN(data.channels)) {
				numChannels = parseInt(data.channels);
			} else if (!isNaN(data)) {
				numChannels = parseInt(data);
			}

			if(data.audioSprite) {
				var sp;
				for(var i = data.audioSprite.length; i--; ) {
					sp = data.audioSprite[i];
					s._idHash[sp.id] = {src: loadItem.src, startTime: parseInt(sp.startTime), duration: parseInt(sp.duration)};
				}
			}
		}
		if (loadItem.id != null) {s._idHash[loadItem.id] = {src: loadItem.src}};
		var loader = s.activePlugin.register(loadItem, numChannels);  // Note only HTML audio uses numChannels

		SoundChannel.create(loadItem.src, numChannels);

		// return the number of instances to the user.  This will also be returned in the load event.
		if (data == null || !isNaN(data)) {
			loadItem.data = numChannels || SoundChannel.maxPerChannel();
		} else {
			loadItem.data.channels = numChannels || SoundChannel.maxPerChannel();
		}

		//if (loader.onload) {details.completeHandler = loader.onload;}	// used by preloadJS
		if (loader.type) {loadItem.type = loader.type;}

		return loader;
	};

	/**
	 * Register an audio file for loading and future playback in Sound. This is automatically called when using
	 * <a href="http://preloadjs.com" target="_blank">PreloadJS</a>.  It is recommended to register all sounds that
	 * need to be played back in order to properly prepare and preload them. Sound does internal preloading when required.
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.Sound.alternateExtensions = ["mp3"];
	 *      createjs.Sound.on("fileload", handleLoad); // add an event listener for when load is completed
	 *      createjs.Sound.registerSound("myAudioPath/mySound.ogg", "myID", 3);
	 *
	 * @method registerSound
	 * @param {String | Object} src The source or an Object with a "src" property
	 * @param {String} [id] An id specified by the user to play the sound later.
	 * @param {Number | Object} [data] Data associated with the item. Sound uses the data parameter as the number of
	 * channels for an audio instance, however a "channels" property can be appended to the data object if it is used
	 * for other information. The audio channels will set a default based on plugin if no value is found.
	 * Sound also uses the data property to hold an audioSprite array of objects in the following format {id, startTime, duration}.<br/>
	 *   id used to play the sound later, in the same manner as a sound src with an id.<br/>
	 *   startTime is the initial offset to start playback and loop from, in milliseconds.<br/>
	 *   duration is the amount of time to play the clip for, in milliseconds.<br/>
	 * This allows Sound to support audio sprites that are played back by id.
	 * @param {string} basePath Set a path that will be prepended to src for loading.
	 * @return {Object} An object with the modified values that were passed in, which defines the sound.
	 * Returns false if the source cannot be parsed or no plugins can be initialized.
	 * Returns true if the source is already loaded.
	 * @static
	 * @since 0.4.0
	 */
	s.registerSound = function (src, id, data, basePath) {
		var loadItem = {src: src, id: id, data:data};
		if (src instanceof Object) {
			basePath = id;
			loadItem = src;
		}
		loadItem = createjs.LoadItem.create(loadItem);

		if (basePath != null) {loadItem.src = basePath + src;}

		var loader = s._registerSound(loadItem);
		if(!loader) {return false;}

		if (!s._preloadHash[loadItem.src]) { s._preloadHash[loadItem.src] = [];}
		s._preloadHash[loadItem.src].push(loadItem);
		if (s._preloadHash[loadItem.src].length == 1) {
			// OJR note this will disallow reloading a sound if loading fails or the source changes
			loader.on("complete", createjs.proxy(this._handleLoadComplete, this));
			loader.on("error", createjs.proxy(this._handleLoadError, this));
			s.activePlugin.preload(loader);
		} else {
			if (s._preloadHash[loadItem.src][0] == true) {return true;}
		}

		return loadItem;
	};

	/**
	 * Register an array of audio files for loading and future playback in Sound. It is recommended to register all
	 * sounds that need to be played back in order to properly prepare and preload them. Sound does internal preloading
	 * when required.
	 *
	 * <h4>Example</h4>
	 *
	 *      var sounds = [
	 *          {src:"asset0.ogg", id:"example"},
	 *          {src:"asset1.ogg", id:"1", data:6},
	 *          {src:"asset2.mp3", id:"works"}
	 *      ];
	 *      createjs.Sound.alternateExtensions = ["mp3"];	// if the passed extension is not supported, try this extension
	 *      createjs.Sound.on("fileload", handleLoad); // call handleLoad when each sound loads
	 *      createjs.Sound.registerSounds(sounds, assetPath);
	 *
	 * @method registerSounds
	 * @param {Array} sounds An array of objects to load. Objects are expected to be in the format needed for
	 * {{#crossLink "Sound/registerSound"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data}</code>
	 * with "id" and "data" being optional.  You can also set an optional path property that will be prepended to the src of each object.
	 * @param {string} basePath Set a path that will be prepended to each src when loading.  When creating, playing, or removing
	 * audio that was loaded with a basePath by src, the basePath must be included.
	 * @return {Object} An array of objects with the modified values that were passed in, which defines each sound.
	 * Like registerSound, it will return false for any values when the source cannot be parsed or if no plugins can be initialized.
	 * Also, it will return true for any values when the source is already loaded.
	 * @static
	 * @since 0.6.0
	 */
	s.registerSounds = function (sounds, basePath) {
		var returnValues = [];
		if (sounds.path) {
			if (!basePath) {
				basePath = sounds.path;
			} else {
				basePath = basePath + sounds.path;
			}
		}
		for (var i = 0, l = sounds.length; i < l; i++) {
			returnValues[i] = createjs.Sound.registerSound(sounds[i].src, sounds[i].id, sounds[i].data, basePath);
		}
		return returnValues;
	};

	/**
	 * Deprecated.  Please use {{#crossLink "Sound/registerSounds"}}{{/crossLink} instead.
	 *
	 * @method registerManifest
	 * @param {Array} sounds An array of objects to load. Objects are expected to be in the format needed for
	 * {{#crossLink "Sound/registerSound"}}{{/crossLink}}: <code>{src:srcURI, id:ID, data:Data}</code>
	 * with "id" and "data" being optional.
	 * @param {string} basePath Set a path that will be prepended to each src when loading.  When creating, playing, or removing
	 * audio that was loaded with a basePath by src, the basePath must be included.
	 * @return {Object} An array of objects with the modified values that were passed in, which defines each sound.
	 * Like registerSound, it will return false for any values when the source cannot be parsed or if no plugins can be initialized.
	 * Also, it will return true for any values when the source is already loaded.
	 * @since 0.4.0
	 * @depreacted
 	 */
	s.registerManifest = function(manifest, basePath) {
		try {
			console.log("createjs.Sound.registerManifest is deprecated, please use createjs.Sound.registerSounds.")
		} catch (error) {

		};
		return this.registerSounds(manifest, basePath);
	};

	/**
	 * Remove a sound that has been registered with {{#crossLink "Sound/registerSound"}}{{/crossLink}} or
	 * {{#crossLink "Sound/registerSounds"}}{{/crossLink}}.
	 * <br />Note this will stop playback on active instances playing this sound before deleting them.
	 * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.Sound.removeSound("myAudioBasePath/mySound.ogg");
	 *      createjs.Sound.removeSound("myID");
	 *
	 * @method removeSound
	 * @param {String | Object} src The src or ID of the audio, or an Object with a "src" property
	 * @param {string} basePath Set a path that will be prepended to each src when removing.
	 * @return {Boolean} True if sound is successfully removed.
	 * @static
	 * @since 0.4.1
	 */
	s.removeSound = function(src, basePath) {
		if (s.activePlugin == null) {return false;}

		if (src instanceof Object) {src = src.src;}
		src = s._getSrcById(src).src;
		if (basePath != null) {src = basePath + src;}

		var details = s._parsePath(src);
		if (details == null) {return false;}
		src = details.src;

		for(var prop in s._idHash){
			if(s._idHash[prop].src == src) {
				delete(s._idHash[prop]);
			}
		}

		// clear from SoundChannel, which also stops and deletes all instances
		SoundChannel.removeSrc(src);

		delete(s._preloadHash[src]);

		s.activePlugin.removeSound(src);

		return true;
	};

	/**
	 * Remove an array of audio files that have been registered with {{#crossLink "Sound/registerSound"}}{{/crossLink}} or
	 * {{#crossLink "Sound/registerSounds"}}{{/crossLink}}.
	 * <br />Note this will stop playback on active instances playing this audio before deleting them.
	 * <br />Note if you passed in a basePath, you need to pass it or prepend it to the src here.
	 *
	 * <h4>Example</h4>
	 *
	 *      var sounds = [
	 *          {src:"asset0.ogg", id:"example"},
	 *          {src:"asset1.ogg", id:"1", data:6},
	 *          {src:"asset2.mp3", id:"works"}
	 *      ];
	 *      createjs.Sound.removeSounds(sounds, assetPath);
	 *
	 * @method removeSounds
	 * @param {Array} sounds An array of objects to remove. Objects are expected to be in the format needed for
	 * {{#crossLink "Sound/removeSound"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>.
	 * You can also set an optional path property that will be prepended to the src of each object.
	 * @param {string} basePath Set a path that will be prepended to each src when removing.
	 * @return {Object} An array of Boolean values representing if the sounds with the same array index were
	 * successfully removed.
	 * @static
	 * @since 0.4.1
	 */
	s.removeSounds = function (sounds, basePath) {
		var returnValues = [];
		if (sounds.path) {
			if (!basePath) {
				basePath = sounds.path;
			} else {
				basePath = basePath + sounds.path;
			}
		}
		for (var i = 0, l = sounds.length; i < l; i++) {
			returnValues[i] = createjs.Sound.removeSound(sounds[i].src, basePath);
		}
		return returnValues;
	};

	/**
	 * Deprecated.  Please use {{#crossLink "Sound/removeSounds"}}{{/crossLink}} instead.
	 *
	 * @method removeManifest
	 * @param {Array} manifest An array of objects to remove. Objects are expected to be in the format needed for
	 * {{#crossLink "Sound/removeSound"}}{{/crossLink}}: <code>{srcOrID:srcURIorID}</code>
	 * @param {string} basePath Set a path that will be prepended to each src when removing.
	 * @return {Object} An array of Boolean values representing if the sounds with the same array index in manifest was
	 * successfully removed.
	 * @static
	 * @since 0.4.1
	 * @deprecated
	 */
	s.removeManifest = function (manifest, basePath) {
		try {
			console.log("createjs.Sound.removeManifest is deprecated, please use createjs.Sound.removeSounds.");
		} catch (error) {

		};
		return s.removeSounds(manifest, basePath);
	};

	/**
	 * Remove all sounds that have been registered with {{#crossLink "Sound/registerSound"}}{{/crossLink}} or
	 * {{#crossLink "Sound/registerSounds"}}{{/crossLink}}.
	 * <br />Note this will stop playback on all active sound instances before deleting them.
	 *
	 * <h4>Example</h4>
	 *
	 *     createjs.Sound.removeAllSounds();
	 *
	 * @method removeAllSounds
	 * @static
	 * @since 0.4.1
	 */
	s.removeAllSounds = function() {
		s._idHash = {};
		s._preloadHash = {};
		SoundChannel.removeAll();
		if (s.activePlugin) {s.activePlugin.removeAllSounds();}
	};

	/**
	 * Check if a source has been loaded by internal preloaders. This is necessary to ensure that sounds that are
	 * not completed preloading will not kick off a new internal preload if they are played.
	 *
	 * <h4>Example</h4>
	 *
	 *     var mySound = "assetPath/asset0.ogg";
	 *     if(createjs.Sound.loadComplete(mySound) {
	 *         createjs.Sound.play(mySound);
	 *     }
	 *
	 * @method loadComplete
	 * @param {String} src The src or id that is being loaded.
	 * @return {Boolean} If the src is already loaded.
	 * @since 0.4.0
	 */
	s.loadComplete = function (src) {
		if (!s.isReady()) { return false; }
		var details = s._parsePath(src);
		if (details) {
			src = s._getSrcById(details.src).src;
		} else {
			src = s._getSrcById(src).src;
		}
		return (s._preloadHash[src][0] == true);  // src only loads once, so if it's true for the first it's true for all
	};

	/**
	 * Parse the path of a sound. alternate extensions will be attempted in order if the
	 * current extension is not supported
	 * @method _parsePath
	 * @param {String} value The path to an audio source.
	 * @return {Object} A formatted object that can be registered with the {{#crossLink "Sound/activePlugin:property"}}{{/crossLink}}
	 * and returned to a preloader like <a href="http://preloadjs.com" target="_blank">PreloadJS</a>.
	 * @protected
	 */
	s._parsePath = function (value) {
		if (typeof(value) != "string") {value = value.toString();}

		var match = value.match(s.FILE_PATTERN);
		if (match == null) {return false;}

		var name = match[4];
		var ext = match[5];
		var c = s.getCapabilities();
		var i = 0;
		while (!c[ext]) {
			ext = s.alternateExtensions[i++];
			if (i > s.alternateExtensions.length) { return null;}	// no extensions are supported
		}
		value = value.replace("."+match[5], "."+ext);

		var ret = {name:name, src:value, extension:ext};
		return ret;
	};

	/* ---------------
	 Static API.
	 --------------- */
	/**
	 * Play a sound and get a {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} to control. If the sound fails to play, a
	 * AbstractSoundInstance will still be returned, and have a playState of {{#crossLink "Sound/PLAY_FAILED:property"}}{{/crossLink}}.
	 * Note that even on sounds with failed playback, you may still be able to call AbstractSoundInstance {{#crossLink "AbstractSoundInstance/play"}}{{/crossLink}},
	 * since the failure could be due to lack of available channels. If the src does not have a supported extension or
	 * if there is no available plugin, a default AbstractSoundInstance will be returned which will not play any audio, but will not generate errors.
	 *
	 * <h4>Example</h4>
	 *
	 *      createjs.Sound.on("fileload", handleLoad);
	 *      createjs.Sound.registerSound("myAudioPath/mySound.mp3", "myID", 3);
	 *      function handleLoad(event) {
	 *      	createjs.Sound.play("myID");
	 *      	// we can pass in options we want to set inside of an object, and store off AbstractSoundInstance for controlling
	 *      	var myInstance = createjs.Sound.play("myID", {interrupt: createjs.Sound.INTERRUPT_ANY, loop:-1});
	 *      	// alternately, we can pass full source path and specify each argument individually
	 *      	var myInstance = createjs.Sound.play("myAudioPath/mySound.mp3", createjs.Sound.INTERRUPT_ANY, 0, 0, -1, 1, 0);
	 *      }
	 *
	 * NOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.
	 * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.
	 *
	 * @method play
	 * @param {String} src The src or ID of the audio.
	 * @param {String | Object} [interrupt="none"|options] How to interrupt any currently playing instances of audio with the same source,
	 * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>
	 * constants on the Sound class, with the default defined by {{#crossLink "Sound/defaultInterruptBehavior:property"}}{{/crossLink}}.
	 * <br /><strong>OR</strong><br />
	 * This parameter can be an object that contains any or all optional properties by name, including: interrupt,
	 * delay, offset, loop, volume, pan, startTime, and duration (see the above code sample).
	 * @param {Number} [delay=0] The amount of time to delay the start of audio playback, in milliseconds.
	 * @param {Number} [offset=0] The offset from the start of the audio to begin playback, in milliseconds.
	 * @param {Number} [loop=0] How many times the audio loops when it reaches the end of playback. The default is 0 (no
	 * loops), and -1 can be used for infinite playback.
	 * @param {Number} [volume=1] The volume of the sound, between 0 and 1. Note that the master volume is applied
	 * against the individual volume.
	 * @param {Number} [pan=0] The left-right pan of the sound (if supported), between -1 (left) and 1 (right).
	 * @param {Number} [startTime=null] To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.
	 * @param {Number} [duration=null] To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.
	 * @return {AbstractSoundInstance} A {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} that can be controlled after it is created.
	 * @static
	 */
	s.play = function (src, interrupt, delay, offset, loop, volume, pan, startTime, duration) {
		if (interrupt instanceof Object) {
			delay = interrupt.delay;
			offset = interrupt.offset;
			loop = interrupt.loop;
			volume = interrupt.volume;
			pan = interrupt.pan;
			startTime = interrupt.startTime;
			duration = interrupt.duration;
			interrupt = interrupt.interrupt;

		}
		var instance = s.createInstance(src, startTime, duration);
		var ok = s._playInstance(instance, interrupt, delay, offset, loop, volume, pan);
		if (!ok) {instance._playFailed();}
		return instance;
	};

	/**
	 * Creates a {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} using the passed in src. If the src does not have a
	 * supported extension or if there is no available plugin, a default AbstractSoundInstance will be returned that can be
	 * called safely but does nothing.
	 *
	 * <h4>Example</h4>
	 *
	 *      var myInstance = null;
	 *      createjs.Sound.on("fileload", handleLoad);
	 *      createjs.Sound.registerSound("myAudioPath/mySound.mp3", "myID", 3);
	 *      function handleLoad(event) {
	 *      	myInstance = createjs.Sound.createInstance("myID");
	 *      	// alternately we could call the following
	 *      	myInstance = createjs.Sound.createInstance("myAudioPath/mySound.mp3");
	 *      }
	 *
	 * NOTE to create an audio sprite that has not already been registered, both startTime and duration need to be set.
	 * This is only when creating a new audio sprite, not when playing using the id of an already registered audio sprite.
	 *
	 * @method createInstance
	 * @param {String} src The src or ID of the audio.
	 * @param {Number} [startTime=null] To create an audio sprite (with duration), the initial offset to start playback and loop from, in milliseconds.
	 * @param {Number} [duration=null] To create an audio sprite (with startTime), the amount of time to play the clip for, in milliseconds.
	 * @return {AbstractSoundInstance} A {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} that can be controlled after it is created.
	 * Unsupported extensions will return the default AbstractSoundInstance.
	 * @since 0.4.0
	 */
	s.createInstance = function (src, startTime, duration) {
		if (!s.initializeDefaultPlugins()) {return new createjs.DefaultSoundInstance(src, startTime, duration);}

		src = s._getSrcById(src);

		var details = s._parsePath(src.src);

		var instance = null;
		if (details != null && details.src != null) {
			SoundChannel.create(details.src);
			if (startTime == null) {startTime = src.startTime;}
			instance = s.activePlugin.create(details.src, startTime, duration || src.duration);
		} else {
			instance = new createjs.DefaultSoundInstance(src, startTime, duration);;
		}

		instance.uniqueId = s._lastID++;

		return instance;
	};

	/**
	 * Set the master volume of Sound. The master volume is multiplied against each sound's individual volume.  For
	 * example, if master volume is 0.5 and a sound's volume is 0.5, the resulting volume is 0.25. To set individual
	 * sound volume, use AbstractSoundInstance {{#crossLink "AbstractSoundInstance/setVolume"}}{{/crossLink}} instead.
	 *
	 * <h4>Example</h4>
	 *
	 *     createjs.Sound.setVolume(0.5);
	 *
	 * @method setVolume
	 * @param {Number} value The master volume value. The acceptable range is 0-1.
	 * @static
	 */
	s.setVolume = function (value) {
		if (Number(value) == null) {return false;}
		value = Math.max(0, Math.min(1, value));
		s._masterVolume = value;
		if (!this.activePlugin || !this.activePlugin.setVolume || !this.activePlugin.setVolume(value)) {
			var instances = this._instances;
			for (var i = 0, l = instances.length; i < l; i++) {
				instances[i].setMasterVolume(value);
			}
		}
	};

	/**
	 * Get the master volume of Sound. The master volume is multiplied against each sound's individual volume.
	 * To get individual sound volume, use AbstractSoundInstance {{#crossLink "AbstractSoundInstance/volume:property"}}{{/crossLink}} instead.
	 *
	 * <h4>Example</h4>
	 *
	 *     var masterVolume = createjs.Sound.getVolume();
	 *
	 * @method getVolume
	 * @return {Number} The master volume, in a range of 0-1.
	 * @static
	 */
	s.getVolume = function () {
		return s._masterVolume;
	};

	/**
	 * Mute/Unmute all audio. Note that muted audio still plays at 0 volume. This global mute value is maintained
	 * separately and when set will override, but not change the mute property of individual instances. To mute an individual
	 * instance, use AbstractSoundInstance {{#crossLink "AbstractSoundInstance/setMute"}}{{/crossLink}} instead.
	 *
	 * <h4>Example</h4>
	 *
	 *     createjs.Sound.setMute(true);
	 *
	 * @method setMute
	 * @param {Boolean} value Whether the audio should be muted or not.
	 * @return {Boolean} If the mute was set.
	 * @static
	 * @since 0.4.0
	 */
	s.setMute = function (value) {
		if (value == null) {return false;}

		this._masterMute = value;
		if (!this.activePlugin || !this.activePlugin.setMute || !this.activePlugin.setMute(value)) {
			var instances = this._instances;
			for (var i = 0, l = instances.length; i < l; i++) {
				instances[i].setMasterMute(value);
			}
		}
		return true;
	};

	/**
	 * Returns the global mute value. To get the mute value of an individual instance, use AbstractSoundInstance
	 * {{#crossLink "AbstractSoundInstance/getMute"}}{{/crossLink}} instead.
	 *
	 * <h4>Example</h4>
	 *
	 *     var muted = createjs.Sound.getMute();
	 *
	 * @method getMute
	 * @return {Boolean} The mute value of Sound.
	 * @static
	 * @since 0.4.0
	 */
	s.getMute = function () {
		return this._masterMute;
	};

	/**
	 * Stop all audio (global stop). Stopped audio is reset, and not paused. To play audio that has been stopped,
	 * call AbstractSoundInstance {{#crossLink "AbstractSoundInstance/play"}}{{/crossLink}}.
	 *
	 * <h4>Example</h4>
	 *
	 *     createjs.Sound.stop();
	 *
	 * @method stop
	 * @static
	 */
	s.stop = function () {
		var instances = this._instances;
		for (var i = instances.length; i--; ) {
			instances[i].stop();  // NOTE stop removes instance from this._instances
		}
	};


	/* ---------------
	 Internal methods
	 --------------- */
	/**
	 * Play an instance. This is called by the static API, as well as from plugins. This allows the core class to
	 * control delays.
	 * @method _playInstance
	 * @param {AbstractSoundInstance} instance The {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} to start playing.
	 * @param {String | Object} [interrupt="none"|options] How to interrupt any currently playing instances of audio with the same source,
	 * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>
	 * constants on the Sound class, with the default defined by {{#crossLink "Sound/defaultInterruptBehavior"}}{{/crossLink}}.
	 * <br /><strong>OR</strong><br />
	 * This parameter can be an object that contains any or all optional properties by name, including: interrupt,
	 * delay, offset, loop, volume, and pan (see the above code sample).
	 * @param {Number} [delay=0] Time in milliseconds before playback begins.
	 * @param {Number} [offset=instance.offset] Time into the sound to begin playback in milliseconds.  Defaults to the
	 * current value on the instance.
	 * @param {Number} [loop=0] The number of times to loop the audio. Use 0 for no loops, and -1 for an infinite loop.
	 * @param {Number} [volume] The volume of the sound between 0 and 1. Defaults to current instance value.
	 * @param {Number} [pan] The pan of the sound between -1 and 1. Defaults to current instance value.
	 * @return {Boolean} If the sound can start playing. Sounds that fail immediately will return false. Sounds that
	 * have a delay will return true, but may still fail to play.
	 * @protected
	 * @static
	 */
	s._playInstance = function (instance, interrupt, delay, offset, loop, volume, pan) {
		if (interrupt instanceof Object) {
			delay = interrupt.delay;
			offset = interrupt.offset;
			loop = interrupt.loop;
			volume = interrupt.volume;
			pan = interrupt.pan;
			interrupt = interrupt.interrupt;
		}

		interrupt = interrupt || s.defaultInterruptBehavior;
		if (delay == null) {delay = 0;}
		if (offset == null) {offset = instance.getPosition();}
		if (loop == null) {loop = instance.loop;}
		if (volume == null) {volume = instance.volume;}
		if (pan == null) {pan = instance.pan;}

		if (delay == 0) {
			var ok = s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
			if (!ok) {return false;}
		} else {
			//Note that we can't pass arguments to proxy OR setTimeout (IE only), so just wrap the function call.
			// OJR WebAudio may want to handle this differently, so it might make sense to move this functionality into the plugins in the future
			var delayTimeoutId = setTimeout(function () {
				s._beginPlaying(instance, interrupt, offset, loop, volume, pan);
			}, delay);
			instance.delayTimeoutId = delayTimeoutId;
		}

		this._instances.push(instance);

		return true;
	};

	/**
	 * Begin playback. This is called immediately or after delay by {{#crossLink "Sound/playInstance"}}{{/crossLink}}.
	 * @method _beginPlaying
	 * @param {AbstractSoundInstance} instance A {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} to begin playback.
	 * @param {String} [interrupt=none] How this sound interrupts other instances with the same source. Defaults to
	 * {{#crossLink "Sound/INTERRUPT_NONE:property"}}{{/crossLink}}. Interrupts are defined as <code>INTERRUPT_TYPE</code>
	 * constants on Sound.
	 * @param {Number} [offset] Time in milliseconds into the sound to begin playback.  Defaults to the current value on
	 * the instance.
	 * @param {Number} [loop=0] The number of times to loop the audio. Use 0 for no loops, and -1 for an infinite loop.
	 * @param {Number} [volume] The volume of the sound between 0 and 1. Defaults to the current value on the instance.
	 * @param {Number} [pan=instance.pan] The pan of the sound between -1 and 1. Defaults to current instance value.
	 * @return {Boolean} If the sound can start playing. If there are no available channels, or the instance fails to
	 * start, this will return false.
	 * @protected
	 * @static
	 */
	s._beginPlaying = function (instance, interrupt, offset, loop, volume, pan) {
		if (!SoundChannel.add(instance, interrupt)) {
			return false;
		}
		var result = instance._beginPlaying(offset, loop, volume, pan);
		if (!result) {
			var index = createjs.indexOf(this._instances, instance);
			if (index > -1) {this._instances.splice(index, 1);}
			return false;
		}
		return true;
	};

	/**
	 * Get the source of a sound via the ID passed in with a register call. If no ID is found the value is returned
	 * instead.
	 * @method _getSrcById
	 * @param {String} value The ID the sound was registered with.
	 * @return {String} The source of the sound if it has been registered with this ID or the value that was passed in.
	 * @protected
	 * @static
	 */
	s._getSrcById = function (value) {
		return s._idHash[value] || {src: value};
	};

	/**
	 * A sound has completed playback, been interrupted, failed, or been stopped. This method removes the instance from
	 * Sound management. It will be added again, if the sound re-plays. Note that this method is called from the
	 * instances themselves.
	 * @method _playFinished
	 * @param {AbstractSoundInstance} instance The instance that finished playback.
	 * @protected
	 * @static
	 */
	s._playFinished = function (instance) {
		SoundChannel.remove(instance);
		var index = createjs.indexOf(this._instances, instance);
		if (index > -1) {this._instances.splice(index, 1);}	// OJR this will always be > -1, there is no way for an instance to exist without being added to this._instances
	};

	createjs.Sound = Sound;

	/**
	 * An internal class that manages the number of active {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} instances for
	 * each sound type. This method is only used internally by the {{#crossLink "Sound"}}{{/crossLink}} class.
	 *
	 * The number of sounds is artificially limited by Sound in order to prevent over-saturation of a
	 * single sound, as well as to stay within hardware limitations, although the latter may disappear with better
	 * browser support.
	 *
	 * When a sound is played, this class ensures that there is an available instance, or interrupts an appropriate
	 * sound that is already playing.
	 * #class SoundChannel
	 * @param {String} src The source of the instances
	 * @param {Number} [max=1] The number of instances allowed
	 * @constructor
	 * @protected
	 */
	function SoundChannel(src, max) {
		this.init(src, max);
	}

	/* ------------
	 Static API
	 ------------ */
	/**
	 * A hash of channel instances indexed by source.
	 * #property channels
	 * @type {Object}
	 * @static
	 */
	SoundChannel.channels = {};

	/**
	 * Create a sound channel. Note that if the sound channel already exists, this will fail.
	 * #method create
	 * @param {String} src The source for the channel
	 * @param {Number} max The maximum amount this channel holds. The default is {{#crossLink "SoundChannel.maxDefault"}}{{/crossLink}}.
	 * @return {Boolean} If the channels were created.
	 * @static
	 */
	SoundChannel.create = function (src, max) {
		var channel = SoundChannel.get(src);
		if (channel == null) {
			SoundChannel.channels[src] = new SoundChannel(src, max);
			return true;
		}
		return false;
	};
	/**
	 * Delete a sound channel, stop and delete all related instances. Note that if the sound channel does not exist, this will fail.
	 * #method remove
	 * @param {String} src The source for the channel
	 * @return {Boolean} If the channels were deleted.
	 * @static
	 */
	SoundChannel.removeSrc = function (src) {
		var channel = SoundChannel.get(src);
		if (channel == null) {return false;}
		channel._removeAll();	// this stops and removes all active instances
		delete(SoundChannel.channels[src]);
		return true;
	};
	/**
	 * Delete all sound channels, stop and delete all related instances.
	 * #method removeAll
	 * @static
	 */
	SoundChannel.removeAll = function () {
		for(var channel in SoundChannel.channels) {
			SoundChannel.channels[channel]._removeAll();	// this stops and removes all active instances
		}
		SoundChannel.channels = {};
	};
	/**
	 * Add an instance to a sound channel.
	 * #method add
	 * @param {AbstractSoundInstance} instance The instance to add to the channel
	 * @param {String} interrupt The interrupt value to use. Please see the {{#crossLink "Sound/play"}}{{/crossLink}}
	 * for details on interrupt modes.
	 * @return {Boolean} The success of the method call. If the channel is full, it will return false.
	 * @static
	 */
	SoundChannel.add = function (instance, interrupt) {
		var channel = SoundChannel.get(instance.src);
		if (channel == null) {return false;}
		return channel._add(instance, interrupt);
	};
	/**
	 * Remove an instance from the channel.
	 * #method remove
	 * @param {AbstractSoundInstance} instance The instance to remove from the channel
	 * @return The success of the method call. If there is no channel, it will return false.
	 * @static
	 */
	SoundChannel.remove = function (instance) {
		var channel = SoundChannel.get(instance.src);
		if (channel == null) {return false;}
		channel._remove(instance);
		return true;
	};
	/**
	 * Get the maximum number of sounds you can have in a channel.
	 * #method maxPerChannel
	 * @return {Number} The maximum number of sounds you can have in a channel.
	 */
	SoundChannel.maxPerChannel = function () {
		return p.maxDefault;
	};
	/**
	 * Get a channel instance by its src.
	 * #method get
	 * @param {String} src The src to use to look up the channel
	 * @static
	 */
	SoundChannel.get = function (src) {
		return SoundChannel.channels[src];
	};

	var p = SoundChannel.prototype;
	p.constructor = SoundChannel;

	/**
	 * The source of the channel.
	 * #property src
	 * @type {String}
	 */
	p.src = null;

	/**
	 * The maximum number of instances in this channel.  -1 indicates no limit
	 * #property max
	 * @type {Number}
	 */
	p.max = null;

	/**
	 * The default value to set for max, if it isn't passed in.  Also used if -1 is passed.
	 * #property maxDefault
	 * @type {Number}
	 * @default 100
	 * @since 0.4.0
	 */
	p.maxDefault = 100;

	/**
	 * The current number of active instances.
	 * #property length
	 * @type {Number}
	 */
	p.length = 0;

	/**
	 * Initialize the channel.
	 * #method init
	 * @param {String} src The source of the channel
	 * @param {Number} max The maximum number of instances in the channel
	 * @protected
	 */
	p.init = function (src, max) {
		this.src = src;
		this.max = max || this.maxDefault;
		if (this.max == -1) {this.max = this.maxDefault;}
		this._instances = [];
	};

	/**
	 * Get an instance by index.
	 * #method get
	 * @param {Number} index The index to return.
	 * @return {AbstractSoundInstance} The AbstractSoundInstance at a specific instance.
	 */
	p._get = function (index) {
		return this._instances[index];
	};

	/**
	 * Add a new instance to the channel.
	 * #method add
	 * @param {AbstractSoundInstance} instance The instance to add.
	 * @return {Boolean} The success of the method call. If the channel is full, it will return false.
	 */
	p._add = function (instance, interrupt) {
		if (!this._getSlot(interrupt, instance)) {return false;}
		this._instances.push(instance);
		this.length++;
		return true;
	};

	/**
	 * Remove an instance from the channel, either when it has finished playing, or it has been interrupted.
	 * #method remove
	 * @param {AbstractSoundInstance} instance The instance to remove
	 * @return {Boolean} The success of the remove call. If the instance is not found in this channel, it will
	 * return false.
	 */
	p._remove = function (instance) {
		var index = createjs.indexOf(this._instances, instance);
		if (index == -1) {return false;}
		this._instances.splice(index, 1);
		this.length--;
		return true;
	};

	/**
	 * Stop playback and remove all instances from the channel.  Usually in response to a delete call.
	 * #method removeAll
	 */
	p._removeAll = function () {
		// Note that stop() removes the item from the list
		for (var i=this.length-1; i>=0; i--) {
			this._instances[i].stop();
		}
	};

	/**
	 * Get an available slot depending on interrupt value and if slots are available.
	 * #method getSlot
	 * @param {String} interrupt The interrupt value to use.
	 * @param {AbstractSoundInstance} instance The sound instance that will go in the channel if successful.
	 * @return {Boolean} Determines if there is an available slot. Depending on the interrupt mode, if there are no slots,
	 * an existing AbstractSoundInstance may be interrupted. If there are no slots, this method returns false.
	 */
	p._getSlot = function (interrupt, instance) {
		var target, replacement;

		if (interrupt != Sound.INTERRUPT_NONE) {
			// First replacement candidate
			replacement = this._get(0);
			if (replacement == null) {
				return true;
			}
		}

		for (var i = 0, l = this.max; i < l; i++) {
			target = this._get(i);

			// Available Space
			if (target == null) {
				return true;
			}

			// Audio is complete or not playing
			if (target.playState == Sound.PLAY_FINISHED ||
				target.playState == Sound.PLAY_INTERRUPTED ||
				target.playState == Sound.PLAY_FAILED) {
				replacement = target;
				break;
			}

			if (interrupt == Sound.INTERRUPT_NONE) {
				continue;
			}

			// Audio is a better candidate than the current target, according to playhead
			if ((interrupt == Sound.INTERRUPT_EARLY && target.getPosition() < replacement.getPosition()) ||
				(interrupt == Sound.INTERRUPT_LATE && target.getPosition() > replacement.getPosition())) {
					replacement = target;
			}
		}

		if (replacement != null) {
			replacement._interrupt();
			this._remove(replacement);
			return true;
		}
		return false;
	};

	p.toString = function () {
		return "[Sound SoundChannel]";
	};
	// do not add SoundChannel to namespace

}());

//##############################################################################
// AbstractSoundInstance.js
//##############################################################################

this.createjs = this.createjs || {};

/**
 * A AbstractSoundInstance is created when any calls to the Sound API method {{#crossLink "Sound/play"}}{{/crossLink}} or
 * {{#crossLink "Sound/createInstance"}}{{/crossLink}} are made. The AbstractSoundInstance is returned by the active plugin
 * for control by the user.
 *
 * <h4>Example</h4>
 *
 *      var myInstance = createjs.Sound.play("myAssetPath/mySrcFile.mp3");
 *
 * A number of additional parameters provide a quick way to determine how a sound is played. Please see the Sound
 * API method {{#crossLink "Sound/play"}}{{/crossLink}} for a list of arguments.
 *
 * Once a AbstractSoundInstance is created, a reference can be stored that can be used to control the audio directly through
 * the AbstractSoundInstance. If the reference is not stored, the AbstractSoundInstance will play out its audio (and any loops), and
 * is then de-referenced from the {{#crossLink "Sound"}}{{/crossLink}} class so that it can be cleaned up. If audio
 * playback has completed, a simple call to the {{#crossLink "AbstractSoundInstance/play"}}{{/crossLink}} instance method
 * will rebuild the references the Sound class need to control it.
 *
 *      var myInstance = createjs.Sound.play("myAssetPath/mySrcFile.mp3", {loop:2});
 *      myInstance.on("loop", handleLoop);
 *      function handleLoop(event) {
 *          myInstance.volume = myInstance.volume * 0.5;
 *      }
 *
 * Events are dispatched from the instance to notify when the sound has completed, looped, or when playback fails
 *
 *      var myInstance = createjs.Sound.play("myAssetPath/mySrcFile.mp3");
 *      myInstance.on("complete", handleComplete);
 *      myInstance.on("loop", handleLoop);
 *      myInstance.on("failed", handleFailed);
 *
 *
 * @class AbstractSoundInstance
 * @param {String} src The path to and file name of the sound.
 * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.
 * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.
 * @param {Object} playbackResource Any resource needed by plugin to support audio playback.
 * @extends EventDispatcher
 * @constructor
 */

(function () {
	"use strict";


// Constructor:
	var AbstractSoundInstance = function (src, startTime, duration, playbackResource) {
		this.EventDispatcher_constructor();


	// public properties:
		/**
		 * The source of the sound.
		 * @property src
		 * @type {String}
		 * @default null
		 */
		this.src = src;

		/**
		 * The unique ID of the instance. This is set by {{#crossLink "Sound"}}{{/crossLink}}.
		 * @property uniqueId
		 * @type {String} | Number
		 * @default -1
		 */
		this.uniqueId = -1;

		/**
		 * The play state of the sound. Play states are defined as constants on {{#crossLink "Sound"}}{{/crossLink}}.
		 * @property playState
		 * @type {String}
		 * @default null
		 */
		this.playState = null;

		/**
		 * A Timeout created by {{#crossLink "Sound"}}{{/crossLink}} when this AbstractSoundInstance is played with a delay.
		 * This allows AbstractSoundInstance to remove the delay if stop, pause, or cleanup are called before playback begins.
		 * @property delayTimeoutId
		 * @type {timeoutVariable}
		 * @default null
		 * @protected
		 * @since 0.4.0
		 */
		this.delayTimeoutId = null;
		// TODO consider moving delay into AbstractSoundInstance so it can be handled by plugins


	// private properties
		/**
		 * Audio sprite property used to determine the starting offset.
		 * @type {Number}
		 * @default null
		 * @protected
		 */
		this._startTime = Math.max(0, startTime || 0);
		//TODO add a getter / setter for startTime?


	// Getter / Setter Properties
		// OJR TODO find original reason that we didn't use defined functions.  I think it was performance related
		/**
		 * The volume of the sound, between 0 and 1.
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower and Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setVolume"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getVolume"}}{{/crossLink}}.
		 *
		 * The actual output volume of a sound can be calculated using:
		 * <code>myInstance.volume * createjs.Sound.getVolume();</code>
		 *
		 * @property volume
		 * @type {Number}
		 * @default 1
		 */
		this._volume =  1;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "volume", {
			get: this.getVolume,
			set: this.setVolume
			});
		}

		/**
		 * The pan of the sound, between -1 (left) and 1 (right). Note that pan is not supported by HTML Audio.
		 *
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setPan"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getPan"}}{{/crossLink}}.
		 * <br />Note in WebAudioPlugin this only gives us the "x" value of what is actually 3D audio.
		 *
		 * @property pan
		 * @type {Number}
		 * @default 0
		 */
		this._pan =  0;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "pan", {
				get: this.getPan,
				set: this.setPan
			});
		}

		/**
		 * The length of the audio clip, in milliseconds.
		 *
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setDuration"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getDuration"}}{{/crossLink}}.
		 *
		 * @property duration
		 * @type {Number}
		 * @default 0
		 * @since 0.6.0
		 */
		this._duration = Math.max(0, duration || 0);
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "duration", {
				get: this.getDuration,
				set: this.setDuration
			});
		}

		/**
		 * Object that holds plugin specific resource need for audio playback.
		 * This is set internally by the plugin.  For example, WebAudioPlugin will set an array buffer,
		 * HTMLAudioPlugin will set a tag, FlashAudioPlugin will set a flash reference.
		 *
		 * @property playbackResource
		 * @type {Object}
		 * @default null
		 */
		this._playbackResource = null;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "playbackResource", {
				get: this.getPlaybackResource,
				set: this.setPlaybackResource
			});
		}
		if(playbackResource !== false && playbackResource !== true) { this.setPlaybackResource(playbackResource); }

		/**
		 * The position of the playhead in milliseconds. This can be set while a sound is playing, paused, or stopped.
		 *
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setPosition"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getPosition"}}{{/crossLink}}.
		 *
		 * @property position
		 * @type {Number}
		 * @default 0
		 * @since 0.6.0
		 */
		this._position = 0;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "position", {
				get: this.getPosition,
				set: this.setPosition
			});
		}

		/**
		 * The number of play loops remaining. Negative values will loop infinitely.
		 *
  		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setLoop"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getLoop"}}{{/crossLink}}.
		 *
		 * @property loop
		 * @type {Number}
		 * @default 0
		 * @public
		 * @since 0.6.0
		 */
		this._loop = 0;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "loop", {
				get: this.getLoop,
				set: this.setLoop
			});
		}

		/**
		 * Determines if the audio is currently muted.
		 *
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.  Instead use {{#crossLink "AbstractSoundInstance/setMute"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/getMute"}}{{/crossLink}}.
		 *
		 * @property muted
		 * @type {Boolean}
		 * @default false
		 * @since 0.6.0
		 */
		this._muted = false;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "muted", {
				get: this.getMuted,
				set: this.setMuted
			});
		}

		/**
		 * Tells you if the audio is currently paused.
		 *
		 * <br />Note this uses a getter setter, which is not supported by Firefox versions 3.6 or lower, Opera versions 11.50 or lower,
		 * and Internet Explorer 8 or lower.
		 * Use {{#crossLink "AbstractSoundInstance/pause:method"}}{{/crossLink}} and {{#crossLink "AbstractSoundInstance/resume:method"}}{{/crossLink}} to set.
		 *
		 * @property paused
		 * @type {Boolean}
		 */
		this._paused = false;
		if (createjs.definePropertySupported) {
			Object.defineProperty(this, "paused", {
				get: this.getPaused,
				set: this.setPaused
			});
		}


	// Events
		/**
		 * The event that is fired when playback has started successfully.
		 * @event succeeded
		 * @param {Object} target The object that dispatched the event.
		 * @param {String} type The event type.
		 * @since 0.4.0
		 */

		/**
		 * The event that is fired when playback is interrupted. This happens when another sound with the same
		 * src property is played using an interrupt value that causes this instance to stop playing.
		 * @event interrupted
		 * @param {Object} target The object that dispatched the event.
		 * @param {String} type The event type.
		 * @since 0.4.0
		 */

		/**
		 * The event that is fired when playback has failed. This happens when there are too many channels with the same
		 * src property already playing (and the interrupt value doesn't cause an interrupt of another instance), or
		 * the sound could not be played, perhaps due to a 404 error.
		 * @event failed
		 * @param {Object} target The object that dispatched the event.
		 * @param {String} type The event type.
		 * @since 0.4.0
		 */

		/**
		 * The event that is fired when a sound has completed playing but has loops remaining.
		 * @event loop
		 * @param {Object} target The object that dispatched the event.
		 * @param {String} type The event type.
		 * @since 0.4.0
		 */

		/**
		 * The event that is fired when playback completes. This means that the sound has finished playing in its
		 * entirety, including its loop iterations.
		 * @event complete
		 * @param {Object} target The object that dispatched the event.
		 * @param {String} type The event type.
		 * @since 0.4.0
		 */
	};

	var p = createjs.extend(AbstractSoundInstance, createjs.EventDispatcher);


// Public Methods:
	/**
	 * Play an instance. This method is intended to be called on SoundInstances that already exist (created
	 * with the Sound API {{#crossLink "Sound/createInstance"}}{{/crossLink}} or {{#crossLink "Sound/play"}}{{/crossLink}}).
	 *
	 * <h4>Example</h4>
	 *
	 *      var myInstance = createjs.Sound.createInstance(mySrc);
	 *      myInstance.play({offset:1, loop:2, pan:0.5});	// options as object properties
	 *      myInstance.play(createjs.Sound.INTERRUPT_ANY);	// options as parameters
	 *
	 * Note that if this sound is already playing, this call will do nothing.
	 *
	 * @method play
	 * @param {String | Object} [interrupt="none"|options] How to interrupt any currently playing instances of audio with the same source,
	 * if the maximum number of instances of the sound are already playing. Values are defined as <code>INTERRUPT_TYPE</code>
	 * constants on the Sound class, with the default defined by Sound {{#crossLink "Sound/defaultInterruptBehavior:property"}}{{/crossLink}}.
	 * <br /><strong>OR</strong><br />
	 * This parameter can be an object that contains any or all optional properties by name, including: interrupt,
	 * delay, offset, loop, volume, and pan (see the above code sample).
	 * @param {Number} [delay=0] The delay in milliseconds before the sound starts
	 * @param {Number} [offset=0] How far into the sound to begin playback, in milliseconds.
	 * @param {Number} [loop=0] The number of times to loop the audio. Use -1 for infinite loops.
	 * @param {Number} [volume=1] The volume of the sound, between 0 and 1.
	 * @param {Number} [pan=0] The pan of the sound between -1 (left) and 1 (right). Note that pan is not supported
	 * for HTML Audio.
	 * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.
	 */
	p.play = function (interrupt, delay, offset, loop, volume, pan) {
		if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
			if (interrupt instanceof Object) {
				offset = interrupt.offset;
				loop = interrupt.loop;
				volume = interrupt.volume;
				pan = interrupt.pan;
			}
			if (offset != null) { this.setPosition(offset) }
			if (loop != null) { this.setLoop(loop); }
			if (volume != null) { this.setVolume(volume); }
			if (pan != null) { this.setPan(pan); }
			if (this._paused) {	this.setPaused(false); }
			return;
		}
		this._cleanUp();
		createjs.Sound._playInstance(this, interrupt, delay, offset, loop, volume, pan);	// make this an event dispatch??
		return this;
	};

	/**
	 * Deprecated, please use {{#crossLink "AbstractSoundInstance/paused:property"}}{{/crossLink}} instead.
	 *
	 * @method pause
	 * @return {Boolean} If the pause call succeeds. This will return false if the sound isn't currently playing.
	 * @deprecated
	 */
	p.pause = function () {
		if (this._paused || this.playState != createjs.Sound.PLAY_SUCCEEDED) {return false;}
		this.setPaused(true);
		return true;
	};

	/**
	 * Deprecated, please use {{#crossLink "AbstractSoundInstance/paused:property"}}{{/crossLink}} instead.
	 *
	 * @method resume
	 * @return {Boolean} If the resume call succeeds. This will return false if called on a sound that is not paused.
	 * @deprecated
	 */
	p.resume = function () {
		if (!this._paused) {return false;}
		this.setPaused(false);
		return true;
	};

	/**
	 * Stop playback of the instance. Stopped sounds will reset their position to 0, and calls to {{#crossLink "AbstractSoundInstance/resume"}}{{/crossLink}}
	 * will fail.  To start playback again, call {{#crossLink "AbstractSoundInstance/play"}}{{/crossLink}}.
	 *
	 * <h4>Example</h4>
	 *
	 *     myInstance.stop();
	 *
	 * @method stop
	 * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.
	 */
	p.stop = function () {
		this._position = 0;
		this._paused = false;
		this._handleStop();
		this._cleanUp();
		this.playState = createjs.Sound.PLAY_FINISHED;
		return this;
	};

	/**
	 * Remove all external references and resources from AbstractSoundInstance.  Note this is irreversible and AbstractSoundInstance will no longer work
	 * @method destroy
	 * @since 0.6.0
	 */
	p.destroy = function() {
		this._cleanUp();
		this.src = null;
		this.playbackResource = null;

		this.removeAllEventListeners();
	};

	p.toString = function () {
		return "[AbstractSoundInstance]";
	};


// get/set methods that allow support for IE8
	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/paused:property"}}{{/crossLink}} can be accessed directly as a property,
	 * and getPaused remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Returns true if the instance is currently paused.
	 *
	 * @method getPaused
	 * @returns {boolean} If the instance is currently paused
	 * @since 0.6.0
	 */
	p.getPaused = function() {
		return this._paused;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/paused:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setPaused remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Pause or resume the instance.  Note you can also resume playback with {{#crossLink "AbstractSoundInstance/play"}}{{/crossLink}}.
	 *
	 * @param {boolean} value
	 * @since 0.6.0
	 * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.
	 */
	p.setPaused = function (value) {
		if ((value !== true && value !== false) || this._paused == value) {return;}
		if (value == true && this.playState != createjs.Sound.PLAY_SUCCEEDED) {return;}
		this._paused = value;
		if(value) {
			this._pause();
		} else {
			this._resume();
		}
		clearTimeout(this.delayTimeoutId);
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/volume:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setVolume remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Set the volume of the instance.
	 *
	 * <h4>Example</h4>
	 *
	 *      myInstance.setVolume(0.5);
	 *
	 * Note that the master volume set using the Sound API method {{#crossLink "Sound/setVolume"}}{{/crossLink}}
	 * will be applied to the instance volume.
	 *
	 * @method setVolume
	 * @param value The volume to set, between 0 and 1.
	 * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.
	 */
	p.setVolume = function (value) {
		if (value == this._volume) { return this; }
		this._volume = Math.max(0, Math.min(1, value));
		if (!this._muted) {
			this._updateVolume();
		}
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/volume:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getVolume remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Get the volume of the instance. The actual output volume of a sound can be calculated using:
	 * <code>myInstance.getVolume() * createjs.Sound.getVolume();</code>
	 *
	 * @method getVolume
	 * @return The current volume of the sound instance.
	 */
	p.getVolume = function () {
		return this._volume;
	};

	/**
	 * Deprecated, please use {{#crossLink "AbstractSoundInstance/muted:property"}}{{/crossLink}} instead.
	 *
	 * @method setMute
	 * @param {Boolean} value If the sound should be muted.
	 * @return {Boolean} If the mute call succeeds.
	 * @deprecated
	 */
	p.setMute = function (value) {
		this.setMuted(value);
	};

	/**
	 * Deprecated, please use {{#crossLink "AbstractSoundInstance/muted:property"}}{{/crossLink}} instead.
	 *
	 * @method getMute
	 * @return {Boolean} If the sound is muted.
	 * @deprecated
	 */
	p.getMute = function () {
		return this._muted;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/muted:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setMuted exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Mute and unmute the sound. Muted sounds will still play at 0 volume. Note that an unmuted sound may still be
	 * silent depending on {{#crossLink "Sound"}}{{/crossLink}} volume, instance volume, and Sound muted.
	 *
	 * <h4>Example</h4>
	 *
	 *     myInstance.setMuted(true);
	 *
	 * @method setMute
	 * @param {Boolean} value If the sound should be muted.
	 * @return {AbstractSoundInstance} A reference to itself, intended for chaining calls.
	 * @since 0.6.0
	 */
	p.setMuted = function (value) {
		if (value !== true && value !== false) {return;}
		this._muted = value;
		this._updateVolume();
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/muted:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getMuted remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Get the mute value of the instance.
	 *
	 * <h4>Example</h4>
	 *
	 *      var isMuted = myInstance.getMuted();
	 *
	 * @method getMute
	 * @return {Boolean} If the sound is muted.
	 * @since 0.6.0
	 */
	p.getMuted = function () {
		return this._muted;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/pan:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getPan remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Set the left(-1)/right(+1) pan of the instance. Note that {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}} does not
	 * support panning, and only simple left/right panning has been implemented for {{#crossLink "WebAudioPlugin"}}{{/crossLink}}.
	 * The default pan value is 0 (center).
	 *
	 * <h4>Example</h4>
	 *
	 *     myInstance.setPan(-1);  // to the left!
	 *
	 * @method setPan
	 * @param {Number} value The pan value, between -1 (left) and 1 (right).
	 * @return {AbstractSoundInstance} Returns reference to itself for chaining calls
	 */
	p.setPan = function (value) {
		if(value == this._pan) { return this; }
		this._pan = Math.max(-1, Math.min(1, value));
		this._updatePan();
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/pan:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getPan remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Get the left/right pan of the instance. Note in WebAudioPlugin this only gives us the "x" value of what is
	 * actually 3D audio.
	 *
	 * <h4>Example</h4>
	 *
	 *     var myPan = myInstance.getPan();
	 *
	 * @method getPan
	 * @return {Number} The value of the pan, between -1 (left) and 1 (right).
	 */
	p.getPan = function () {
		return this._pan;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/position:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getPosition remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Get the position of the playhead of the instance in milliseconds.
	 *
	 * <h4>Example</h4>
	 *
	 *     var currentOffset = myInstance.getPosition();
	 *
	 * @method getPosition
	 * @return {Number} The position of the playhead in the sound, in milliseconds.
	 */
	p.getPosition = function () {
		if (!this._paused && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
			return this._calculateCurrentPosition();	// sets this._position
		}
		return this._position;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/position:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setPosition remains to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Set the position of the playhead in the instance. This can be set while a sound is playing, paused, or
	 * stopped.
	 *
	 * <h4>Example</h4>
	 *
	 *      myInstance.setPosition(myInstance.getDuration()/2); // set audio to its halfway point.
	 *
	 * @method setPosition
	 * @param {Number} value The position to place the playhead, in milliseconds.
	 * @return {AbstractSoundInstance} Returns reference to itself for chaining calls
	 */
	p.setPosition = function (value) {
		this._position = Math.max(0, value);
		if (this.playState == createjs.Sound.PLAY_SUCCEEDED) {
			this._updatePosition();
		}
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/duration:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getDuration exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Get the duration of the instance, in milliseconds.
	 * Note a sound needs to be loaded before it will have duration, unless it was set manually to create an audio sprite.
	 *
	 * <h4>Example</h4>
	 *
	 *     var soundDur = myInstance.getDuration();
	 *
	 * @method getDuration
	 * @return {Number} The duration of the sound instance in milliseconds.
	 */
	p.getDuration = function () {
		return this._duration;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/duration:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setDuration exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Set the duration of the audio.  Generally this is not called, but it can be used to create an audio sprite out of an existing AbstractSoundInstance.
	 *
	 * @method setDuration
	 * @param {number} value The new duration time in milli seconds.
	 * @return {AbstractSoundInstance} Returns reference to itself for chaining calls
	 * @since 0.6.0
	 */
	p.setDuration = function (value) {
		if (value == this._duration) { return this; }
		this._duration = Math.max(0, value || 0);
		this._updateDuration();
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/playbackResource:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setPlaybackResource exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * An object containing any resources needed for audio playback, set by the plugin.
	 * Only meant for use by advanced users.
	 *
	 * @method setPlayback
	 * @param {Object} value The new playback resource.
	 * @return {AbstractSoundInstance} Returns reference to itself for chaining calls
	 * @since 0.6.0
	 **/
	p.setPlaybackResource = function (value) {
		this._playbackResource = value;
		if (this._duration == 0) { this._setDurationFromSource(); }
		return this;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/playbackResource:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getPlaybackResource exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * An object containing any resources needed for audio playback, usually set by the plugin.
	 *
	 * @method setPlayback
	 * @param {Object} value The new playback resource.
	 * @return {Object} playback resource used for playing audio
	 * @since 0.6.0
	 **/
	p.getPlaybackResource = function () {
		return this._playbackResource;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/loop:property"}}{{/crossLink}} can be accessed directly as a property,
	 * getLoop exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * The number of play loops remaining. Negative values will loop infinitely.
	 *
	 * @method getLoop
	 * @return {number}
	 * @since 0.6.0
	 **/
	p.getLoop = function () {
		return this._loop;
	};

	/**
	 * NOTE {{#crossLink "AbstractSoundInstance/loop:property"}}{{/crossLink}} can be accessed directly as a property,
	 * setLoop exists to allow support for IE8 with FlashAudioPlugin.
	 *
	 * Set the number of play loops remaining.
	 *
	 * @method setLoop
	 * @param {number} value The number of times to loop after play.
	 * @since 0.6.0
	 */
	p.setLoop = function (value) {
		if(this._playbackResource != null) {
			// remove looping
			if (this._loop != 0 && value == 0) {
				this._removeLooping(value);
			}
			// add looping
			if (this._loop == 0 && value != 0) {
				this._addLooping(value);
			}
		}
		this._loop = value;
	};


// Private Methods:
	/**
	 * A helper method that dispatches all events for AbstractSoundInstance.
	 * @method _sendEvent
	 * @param {String} type The event type
	 * @protected
	 */
	p._sendEvent = function (type) {
		var event = new createjs.Event(type);
		this.dispatchEvent(event);
	};

	/**
	 * Clean up the instance. Remove references and clean up any additional properties such as timers.
	 * @method _cleanUp
	 * @protected
	 */
	p._cleanUp = function () {
		clearTimeout(this.delayTimeoutId); // clear timeout that plays delayed sound
		this._handleCleanUp();
		this._paused = false;

		createjs.Sound._playFinished(this);	// TODO change to an event
	};

	/**
	 * The sound has been interrupted.
	 * @method _interrupt
	 * @protected
	 */
	p._interrupt = function () {
		this._cleanUp();
		this.playState = createjs.Sound.PLAY_INTERRUPTED;
		this._sendEvent("interrupted");
	};

	/**
	 * Called by the Sound class when the audio is ready to play (delay has completed). Starts sound playing if the
	 * src is loaded, otherwise playback will fail.
	 * @method _beginPlaying
	 * @param {Number} offset How far into the sound to begin playback, in milliseconds.
	 * @param {Number} loop The number of times to loop the audio. Use -1 for infinite loops.
	 * @param {Number} volume The volume of the sound, between 0 and 1.
	 * @param {Number} pan The pan of the sound between -1 (left) and 1 (right). Note that pan does not work for HTML Audio.
	 * @return {Boolean} If playback succeeded.
	 * @protected
	 */
	p._beginPlaying = function (offset, loop, volume, pan) {
		this.setPosition(offset);
		this.setLoop(loop);
		this.setVolume(volume);
		this.setPan(pan);

		if (this._playbackResource != null && this._position < this._duration) {
			this._paused = false;
			this._handleSoundReady();
			this.playState = createjs.Sound.PLAY_SUCCEEDED;
			this._sendEvent("succeeded");
			return true;
		} else {
			this._playFailed();
			return false;
		}
	};

	/**
	 * Play has failed, which can happen for a variety of reasons.
	 * Cleans up instance and dispatches failed event
	 * @method _playFailed
	 * @private
	 */
	p._playFailed = function () {
		this._cleanUp();
		this.playState = createjs.Sound.PLAY_FAILED;
		this._sendEvent("failed");
	};

	/**
	 * Audio has finished playing. Manually loop it if required.
	 * @method _handleSoundComplete
	 * @param event
	 * @protected
	 */
	p._handleSoundComplete = function (event) {
		this._position = 0;  // have to set this as it can be set by pause during playback

		if (this._loop != 0) {
			this._loop--;  // NOTE this introduces a theoretical limit on loops = float max size x 2 - 1
			this._handleLoop();
			this._sendEvent("loop");
			return;
		}

		this._cleanUp();
		this.playState = createjs.Sound.PLAY_FINISHED;
		this._sendEvent("complete");
	};

// Plugin specific code
	/**
	 * Handles starting playback when the sound is ready for playing.
	 * @method _handleSoundReady
	 * @protected
 	 */
	p._handleSoundReady = function () {
		// plugin specific code
	};

	/**
	 * Internal function used to update the volume based on the instance volume, master volume, instance mute value,
	 * and master mute value.
	 * @method _updateVolume
	 * @protected
	 */
	p._updateVolume = function () {
		// plugin specific code
	};

	/**
	 * Internal function used to update the pan
	 * @method _updatePan
	 * @protected
	 * @since 0.6.0
	 */
	p._updatePan = function () {
		// plugin specific code
	};

	/**
	 * Internal function used to update the duration of the audio.
	 * @method _updateDuration
	 * @protected
	 * @since 0.6.0
	 */
	p._updateDuration = function () {
		// plugin specific code
	};

	/**
	 * Internal function used to get the duration of the audio from the source we'll be playing.
	 * @method _updateDuration
	 * @protected
	 * @since 0.6.0
	 */
	p._setDurationFromSource = function () {
		// plugin specific code
	};

	/**
	 * Internal function that calculates the current position of the playhead and sets it on this._position
	 * @method _updatePosition
	 * @protected
	 * @since 0.6.0
	 */
	p._calculateCurrentPosition = function () {
		// plugin specific code that sets this.position
	};

	/**
	 * Internal function used to update the position of the playhead.
	 * @method _updatePosition
	 * @protected
	 * @since 0.6.0
	 */
	p._updatePosition = function () {
		// plugin specific code
	};

	/**
	 * Internal function called when looping is removed during playback.
	 * @method _removeLooping
	 * @protected
	 * @since 0.6.0
	 */
	p._removeLooping = function () {
		// plugin specific code
	};

	/**
	 * Internal function called when looping is added during playback.
	 * @method _addLooping
	 * @protected
	 * @since 0.6.0
	 */
	p._addLooping = function () {
		// plugin specific code
	};

	/**
	 * Internal function called when pausing playback
	 * @method _pause
	 * @protected
	 * @since 0.6.0
	 */
	p._pause = function () {
		// plugin specific code
	};

	/**
	 * Internal function called when resuming playback
	 * @method _resume
	 * @protected
	 * @since 0.6.0
	 */
	p._resume = function () {
		// plugin specific code
	};

	/**
	 * Internal function called when stopping playback
	 * @method _handleStop
	 * @protected
	 * @since 0.6.0
	 */
	p._handleStop = function() {
		// plugin specific code
	};

	/**
	 * Internal function called when AbstractSoundInstance is being cleaned up
	 * @method _handleCleanUp
	 * @protected
	 * @since 0.6.0
	 */
	p._handleCleanUp = function() {
		// plugin specific code
	};

	/**
	 * Internal function called when AbstractSoundInstance has played to end and is looping
	 * @method _handleCleanUp
	 * @protected
	 * @since 0.6.0
	 */
	p._handleLoop = function () {
		// plugin specific code
	};

	createjs.AbstractSoundInstance = createjs.promote(AbstractSoundInstance, "EventDispatcher");
	createjs.DefaultSoundInstance = createjs.AbstractSoundInstance;	// used when no plugin is supported
}());

//##############################################################################
// AbstractPlugin.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";


// constructor:
 	/**
	 * A default plugin class used as a base for all other plugins.
	 * @class AbstractPlugin
	 * @constructor
	 * @since 0.6.0
	 */

	var AbstractPlugin = function () {
	// private properties:
		/**
		 * The capabilities of the plugin.
		 * method and is used internally.
		 * @property _capabilities
		 * @type {Object}
		 * @default null
		 * @protected
		 * @static
		 */
		this._capabilities = null;

		/**
		 * Object hash indexed by the source URI of all created loaders, used to properly destroy them if sources are removed.
		 * @type {Object}
		 * @protected
		 */
		this._loaders = {};

		/**
		 * Object hash indexed by the source URI of each file to indicate if an audio source has begun loading,
		 * is currently loading, or has completed loading.  Can be used to store non boolean data after loading
		 * is complete (for example arrayBuffers for web audio).
		 * @property _audioSources
		 * @type {Object}
		 * @protected
		 */
		this._audioSources = {};

		/**
		 * Object hash indexed by the source URI of all created SoundInstances, updates the playbackResource if it loads after they are created,
		 * and properly destroy them if sources are removed
		 * @type {Object}
		 * @protected
		 */
		this._soundInstances = {};

		/**
		 * A reference to a loader class used by a plugin that must be set.
		 * @type {Object}
		 * @protected
		 */
		this._loaderClass;

		/**
		 * A reference to an AbstractSoundInstance class used by a plugin that must be set.
		 * @type {Object}
		 * @protected;
		 */
		this._soundInstanceClass;
	};
	var p = AbstractPlugin.prototype;


// Static Properties:
// NOTE THESE PROPERTIES NEED TO BE ADDED TO EACH PLUGIN
	/**
	 * The capabilities of the plugin. This is generated via the {{#crossLink "WebAudioPlugin/_generateCapabilities:method"}}{{/crossLink}}
	 * method and is used internally.
	 * @property _capabilities
	 * @type {Object}
	 * @default null
	 * @protected
	 * @static
	 */
	AbstractPlugin._capabilities = null;

	/**
	 * Determine if the plugin can be used in the current browser/OS.
	 * @method isSupported
	 * @return {Boolean} If the plugin can be initialized.
	 * @static
	 */
	AbstractPlugin.isSupported = function () {
		return true;
	};


// public methods:
	/**
	 * Pre-register a sound for preloading and setup. This is called by {{#crossLink "Sound"}}{{/crossLink}}.
	 * Note all plugins provide a <code>Loader</code> instance, which <a href="http://preloadjs.com" target="_blank">PreloadJS</a>
	 * can use to assist with preloading.
	 * @method register
	 * @param {String} loadItem An Object containing the source of the audio
	 * @param {Number} instances The number of concurrently playing instances to allow for the channel at any time.
	 * Note that not every plugin will manage this value.
	 * @return {Object} A result object, containing a "tag" for preloading purposes.
	 */
	p.register = function (loadItem, instances) {
		this._audioSources[loadItem.src] = true;
		this._soundInstances[loadItem.src] = [];
		if(this._loaders[loadItem.src]) {return this._loaders[loadItem.src];}	// already loading/loaded this, so don't load twice
		// OJR potential issue that we won't be firing loaded event, might need to trigger if this is already loaded?
		var loader = new this._loaderClass(loadItem);
		loader.on("complete", createjs.proxy(this._handlePreloadComplete, this));
		this._loaders[loadItem.src] = loader;
		return loader;
	};

	// note sound calls register before calling preload
	/**
	 * Internally preload a sound.
	 * @method preload
	 * @param {Loader} loader The sound URI to load.
	 */
	p.preload = function (loader) {
		loader.on("error", createjs.proxy(this._handlePreloadError, this));
		loader.load();
	};

	/**
	 * Checks if preloading has started for a specific source. If the source is found, we can assume it is loading,
	 * or has already finished loading.
	 * @method isPreloadStarted
	 * @param {String} src The sound URI to check.
	 * @return {Boolean}
	 */
	p.isPreloadStarted = function (src) {
		return (this._audioSources[src] != null);
	};

	/**
	 * Checks if preloading has finished for a specific source.
	 * @method isPreloadComplete
	 * @param {String} src The sound URI to load.
	 * @return {Boolean}
	 */
	p.isPreloadComplete = function (src) {
		return (!(this._audioSources[src] == null || this._audioSources[src] == true));
	};

	/**
	 * Remove a sound added using {{#crossLink "WebAudioPlugin/register"}}{{/crossLink}}. Note this does not cancel a preload.
	 * @method removeSound
	 * @param {String} src The sound URI to unload.
	 */
	p.removeSound = function (src) {
		if (!this._soundInstances[src]) { return; }
		for (var i = this._soundInstances[src].length; i--; ) {
			var item = this._soundInstances[src][i];
			item.destroy();
		}
		delete(this._soundInstances[src]);
		delete(this._audioSources[src]);
		if(this._loaders[src]) { this._loaders[src].destroy(); }
		delete(this._loaders[src]);
	};

	/**
	 * Remove all sounds added using {{#crossLink "WebAudioPlugin/register"}}{{/crossLink}}. Note this does not cancel a preload.
	 * @method removeAllSounds
	 * @param {String} src The sound URI to unload.
	 */
	p.removeAllSounds = function () {
		for(var key in this._audioSources) {
			this.removeSound(key);
		}
	};

	/**
	 * Create a sound instance. If the sound has not been preloaded, it is internally preloaded here.
	 * @method create
	 * @param {String} src The sound source to use.
	 * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.
	 * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.
	 * @return {AbstractSoundInstance} A sound instance for playback and control.
	 */
	p.create = function (src, startTime, duration) {
		if (!this.isPreloadStarted(src)) {
			this.preload(this.register(src));
		}
		var si = new this._soundInstanceClass(src, startTime, duration, this._audioSources[src]);
		this._soundInstances[src].push(si);
		return si;
	};

	// TODO Volume & mute Getter / Setter??
	// TODO change calls to return nothing or this for chaining??
	// if a plugin does not support volume and mute, it should set these to null
	/**
	 * Set the master volume of the plugin, which affects all SoundInstances.
	 * @method setVolume
	 * @param {Number} value The volume to set, between 0 and 1.
	 * @return {Boolean} If the plugin processes the setVolume call (true). The Sound class will affect all the
	 * instances manually otherwise.
	 */
	p.setVolume = function (value) {
		this._volume = value;
		this._updateVolume();
		return true;
	};

	/**
	 * Get the master volume of the plugin, which affects all SoundInstances.
	 * @method getVolume
	 * @return The volume level, between 0 and 1.
	 */
	p.getVolume = function () {
		return this._volume;
	};

	/**
	 * Mute all sounds via the plugin.
	 * @method setMute
	 * @param {Boolean} value If all sound should be muted or not. Note that plugin-level muting just looks up
	 * the mute value of Sound {{#crossLink "Sound/getMute"}}{{/crossLink}}, so this property is not used here.
	 * @return {Boolean} If the mute call succeeds.
	 */
	p.setMute = function (value) {
		this._updateVolume();
		return true;
	};

	// plugins should overwrite this method
	p.toString = function () {
		return "[AbstractPlugin]";
	};


// private methods:
	/**
	 * Handles internal preload completion.
	 * @method _handlePreloadComplete
	 * @protected
	 */
	p._handlePreloadComplete = function (event) {
		var src = event.target.getItem().src;
		this._audioSources[src] = event.result;
		for (var i = 0, l = this._soundInstances[src].length; i < l; i++) {
			var item = this._soundInstances[src][i];
			item.setPlaybackResource(this._audioSources[src]);
			// ToDo consider adding play call here if playstate == playfailed
		}
	};

	/**
	 * Handles internal preload erros
	 * @method _handlePreloadError
	 * @param event
	 * @protected
	 */
	p._handlePreloadError = function(event) {
		//delete(this._audioSources[src]);
	};

	/**
	 * Set the gain value for master audio. Should not be called externally.
	 * @method _updateVolume
	 * @protected
	 */
	p._updateVolume = function () {
		// Plugin Specific code
	};

	createjs.AbstractPlugin = AbstractPlugin;
}());

//##############################################################################
// WebAudioLoader.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	/**
	 * Loader provides a mechanism to preload Web Audio content via PreloadJS or internally. Instances are returned to
	 * the preloader, and the load method is called when the asset needs to be requested.
	 *
	 * @class WebAudioLoader
	 * @param {String} loadItem The item to be loaded
	 * @param {Object} flash The flash instance that will do the preloading.
	 * @extends XHRRequest
	 * @protected
	 */
	function Loader(loadItem) {
		this.AbstractLoader_constructor(loadItem, true, createjs.AbstractLoader.SOUND);

	};
	var p = createjs.extend(Loader, createjs.AbstractLoader);

	/**
	 * web audio context required for decoding audio
	 * @property context
	 * @type {AudioContext}
	 * @static
	 */
	Loader.context = null;


// public methods
	p.toString = function () {
		return "[WebAudioLoader]";
	};


// private methods
	p._createRequest = function() {
		this._request = new createjs.XHRRequest(this._item, false);
		this._request.setResponseType("arraybuffer");
	};

	p._sendComplete = function (event) {
		// OJR we leave this wrapped in Loader because we need to reference src and the handler only receives a single argument, the decodedAudio
		Loader.context.decodeAudioData(this._rawResult,
	         createjs.proxy(this._handleAudioDecoded, this),
	         createjs.proxy(this._handleError, this));
	};


	/**
	* The audio has been decoded.
	* @method handleAudioDecoded
	 * @param decoded
	* @protected
	*/
	p._handleAudioDecoded = function (decodedAudio) {
		this._result = decodedAudio;
		this.AbstractLoader__sendComplete();
	};

	createjs.WebAudioLoader = createjs.promote(Loader, "AbstractLoader");
}());

//##############################################################################
// WebAudioSoundInstance.js
//##############################################################################

this.createjs = this.createjs || {};

/**
 * WebAudioSoundInstance extends the base api of {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} and is used by
 * {{#crossLink "WebAudioPlugin"}}{{/crossLink}}.
 *
 * WebAudioSoundInstance exposes audioNodes for advanced users.
 *
 * @param {String} src The path to and file name of the sound.
 * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.
 * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.
 * @param {Object} playbackResource Any resource needed by plugin to support audio playback.
 * @class WebAudioSoundInstance
 * @extends AbstractSoundInstance
 * @constructor
 */
(function () {
	"use strict";

	function WebAudioSoundInstance(src, startTime, duration, playbackResource) {
		this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);


// public properties
		/**
		 * NOTE this is only intended for use by advanced users.
		 * <br />GainNode for controlling <code>WebAudioSoundInstance</code> volume. Connected to the {{#crossLink "WebAudioSoundInstance/destinationNode:property"}}{{/crossLink}}.
		 * @property gainNode
		 * @type {AudioGainNode}
		 * @since 0.4.0
		 *
		 */
		this.gainNode = s.context.createGain();

		/**
		 * NOTE this is only intended for use by advanced users.
		 * <br />A panNode allowing left and right audio channel panning only. Connected to WebAudioSoundInstance {{#crossLink "WebAudioSoundInstance/gainNode:property"}}{{/crossLink}}.
		 * @property panNode
		 * @type {AudioPannerNode}
		 * @since 0.4.0
		 */
		this.panNode = s.context.createPanner();
		this.panNode.panningModel = s._panningModel;
		this.panNode.connect(this.gainNode);

		/**
		 * NOTE this is only intended for use by advanced users.
		 * <br />sourceNode is the audio source. Connected to WebAudioSoundInstance {{#crossLink "WebAudioSoundInstance/panNode:property"}}{{/crossLink}}.
		 * @property sourceNode
		 * @type {AudioNode}
		 * @since 0.4.0
		 *
		 */
		this.sourceNode = null;


// private properties
		/**
		 * Timeout that is created internally to handle sound playing to completion.
		 * Stored so we can remove it when stop, pause, or cleanup are called
		 * @property _soundCompleteTimeout
		 * @type {timeoutVariable}
		 * @default null
		 * @protected
		 * @since 0.4.0
		 */
		this._soundCompleteTimeout = null;

		/**
		 * NOTE this is only intended for use by very advanced users.
		 * _sourceNodeNext is the audio source for the next loop, inserted in a look ahead approach to allow for smooth
		 * looping. Connected to {{#crossLink "WebAudioSoundInstance/gainNode:property"}}{{/crossLink}}.
		 * @property _sourceNodeNext
		 * @type {AudioNode}
		 * @default null
		 * @protected
		 * @since 0.4.1
		 *
		 */
		this._sourceNodeNext = null;

		/**
		 * Time audio started playback, in seconds. Used to handle set position, get position, and resuming from paused.
		 * @property _playbackStartTime
		 * @type {Number}
		 * @default 0
		 * @protected
		 * @since 0.4.0
		 */
		this._playbackStartTime = 0;

		// Proxies, make removing listeners easier.
		this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
	};
	var p = createjs.extend(WebAudioSoundInstance, createjs.AbstractSoundInstance);
	var s = WebAudioSoundInstance;

	/**
	 * Note this is only intended for use by advanced users.
	 * <br />Audio context used to create nodes.  This is and needs to be the same context used by {{#crossLink "WebAudioPlugin"}}{{/crossLink}}.
  	 * @property context
	 * @type {AudioContext}
	 * @static
	 * @since 0.6.0
	 */
	s.context = null;

	/**
	 * Note this is only intended for use by advanced users.
	 * <br /> Audio node from WebAudioPlugin that sequences to <code>context.destination</code>
	 * @property destinationNode
	 * @type {AudioNode}
	 * @static
	 * @since 0.6.0
	 */
	s.destinationNode = null;

	/**
	 * Value to set panning model to equal power for WebAudioSoundInstance.  Can be "equalpower" or 0 depending on browser implementation.
	 * @property _panningModel
	 * @type {Number / String}
	 * @protected
	 * @static
	 * @since 0.6.0
	 */
	s._panningModel = "equalpower";


// Public methods
	p.destroy = function() {
		this.AbstractSoundInstance_destroy();

		this.panNode.disconnect(0);
		this.panNode = null;
		this.gainNode.disconnect(0);
		this.gainNode = null;
	};

	p.toString = function () {
		return "[WebAudioSoundInstance]";
	};


// Private Methods
	p._updatePan = function() {
		this.panNode.setPosition(this._pan, 0, -0.5);
		// z need to be -0.5 otherwise the sound only plays in left, right, or center
	};

	p._removeLooping = function() {
		this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
	};

	p._addLooping = function() {
		if (this.playState != createjs.Sound.PLAY_SUCCEEDED) { return; }
		this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
	};

	p._setDurationFromSource = function () {
		this._duration = this.playbackResource.duration * 1000;
	};

	p._handleCleanUp = function () {
		if (this.sourceNode && this.playState == createjs.Sound.PLAY_SUCCEEDED) {
			this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
			this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
		}

		if (this.gainNode.numberOfOutputs != 0) {this.gainNode.disconnect(0);}
		// OJR there appears to be a bug that this doesn't always work in webkit (Chrome and Safari). According to the documentation, this should work.

		clearTimeout(this._soundCompleteTimeout);

		this._playbackStartTime = 0;	// This is used by getPosition
	};

	/**
	 * Turn off and disconnect an audioNode, then set reference to null to release it for garbage collection
	 * @method _cleanUpAudioNode
	 * @param audioNode
	 * @return {audioNode}
	 * @protected
	 * @since 0.4.1
	 */
	p._cleanUpAudioNode = function(audioNode) {
		if(audioNode) {
			audioNode.stop(0);
			audioNode.disconnect(0);
			audioNode = null;
		}
		return audioNode;
	};

	p._handleSoundReady = function (event) {
		this.gainNode.connect(s.destinationNode);  // this line can cause a memory leak.  Nodes need to be disconnected from the audioDestination or any sequence that leads to it.

		var dur = this._duration * 0.001;
		var pos = this._position * 0.001;
		this.sourceNode = this._createAndPlayAudioNode((s.context.currentTime - dur), pos);
		this._playbackStartTime = this.sourceNode.startTime - pos;

		this._soundCompleteTimeout = setTimeout(this._endedHandler, (dur - pos) * 1000);

		if(this._loop != 0) {
			this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
		}
	};

	/**
	 * Creates an audio node using the current src and context, connects it to the gain node, and starts playback.
	 * @method _createAndPlayAudioNode
	 * @param {Number} startTime The time to add this to the web audio context, in seconds.
	 * @param {Number} offset The amount of time into the src audio to start playback, in seconds.
	 * @return {audioNode}
	 * @protected
	 * @since 0.4.1
	 */
	p._createAndPlayAudioNode = function(startTime, offset) {
		var audioNode = s.context.createBufferSource();
		audioNode.buffer = this.playbackResource;
		audioNode.connect(this.panNode);
		var dur = this._duration * 0.001;
		audioNode.startTime = startTime + dur;
		audioNode.start(audioNode.startTime, offset+(this._startTime*0.001), dur - offset);
		return audioNode;
	};

	p._pause = function () {
		this._position = (s.context.currentTime - this._playbackStartTime) * 1000;  // * 1000 to give milliseconds, lets us restart at same point
		this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
		this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);

		if (this.gainNode.numberOfOutputs != 0) {this.gainNode.disconnect(0);}

		clearTimeout(this._soundCompleteTimeout);
	};

	p._resume = function () {
		this._handleSoundReady();
	};

	/*
	p._handleStop = function () {
		// web audio does not need to do anything extra
	};
	*/

	p._updateVolume = function () {
		var newVolume = this._muted ? 0 : this._volume;
	  	if (newVolume != this.gainNode.gain.value) {
		  this.gainNode.gain.value = newVolume;
  		}
	};

	p._calculateCurrentPosition = function () {
		return ((s.context.currentTime - this._playbackStartTime) * 1000); // pos in seconds * 1000 to give milliseconds
	};

	p._updatePosition = function () {
		this.sourceNode = this._cleanUpAudioNode(this.sourceNode);
		this._sourceNodeNext = this._cleanUpAudioNode(this._sourceNodeNext);
		clearTimeout(this._soundCompleteTimeout);

		if (!this._paused) {this._handleSoundReady();}
	};

	// OJR we are using a look ahead approach to ensure smooth looping.
	// We add _sourceNodeNext to the audio context so that it starts playing even if this callback is delayed.
	// This technique is described here:  http://www.html5rocks.com/en/tutorials/audio/scheduling/
	// NOTE the cost of this is that our audio loop may not always match the loop event timing precisely.
	p._handleLoop = function () {
		this._cleanUpAudioNode(this.sourceNode);
		this.sourceNode = this._sourceNodeNext;
		this._playbackStartTime = this.sourceNode.startTime;
		this._sourceNodeNext = this._createAndPlayAudioNode(this._playbackStartTime, 0);
		this._soundCompleteTimeout = setTimeout(this._endedHandler, this._duration);
	};

	p._updateDuration = function () {
		this._pause();
		this._resume();
	};

	createjs.WebAudioSoundInstance = createjs.promote(WebAudioSoundInstance, "AbstractSoundInstance");
}());

//##############################################################################
// WebAudioPlugin.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {

	"use strict";

	/**
	 * Play sounds using Web Audio in the browser. The WebAudioPlugin is currently the default plugin, and will be used
	 * anywhere that it is supported. To change plugin priority, check out the Sound API
	 * {{#crossLink "Sound/registerPlugins"}}{{/crossLink}} method.

	 * <h4>Known Browser and OS issues for Web Audio</h4>
	 * <b>Firefox 25</b>
	 * <ul><li>mp3 audio files do not load properly on all windows machines, reported
	 * <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=929969" target="_blank">here</a>. </br>
	 * For this reason it is recommended to pass another FF supported type (ie ogg) first until this bug is resolved, if possible.</li></ul>
	 * <br />
	 * <b>Webkit (Chrome and Safari)</b>
	 * <ul><li>AudioNode.disconnect does not always seem to work.  This can cause the file size to grow over time if you
	 * are playing a lot of audio files.</li></ul>
	 * <br />
	 * <b>iOS 6 limitations</b>
	 * 	<ul><li>Sound is initially muted and will only unmute through play being called inside a user initiated event (touch/click).</li>
	 *	<li>A bug exists that will distort uncached audio when a video element is present in the DOM.  You can avoid this bug
	 * 	by ensuring the audio and video audio share the same sampleRate.</li>
	 * </ul>
	 * @class WebAudioPlugin
	 * @extends AbstractPlugin
	 * @constructor
	 * @since 0.4.0
	 */
	function WebAudioPlugin() {
		this.AbstractPlugin_constructor();


// Private Properties
		/**
		 * Value to set panning model to equal power for WebAudioSoundInstance.  Can be "equalpower" or 0 depending on browser implementation.
		 * @property _panningModel
		 * @type {Number / String}
		 * @protected
		 */
		this._panningModel = s._panningModel;;

		/**
		 * The internal master volume value of the plugin.
		 * @property _volume
		 * @type {Number}
		 * @default 1
		 * @protected
		 */
		this._volume = 1;

		/**
		 * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin
		 * need to be created within this context.
		 * @property context
		 * @type {AudioContext}
		 */
		this.context = s.context;

		/**
		 * A DynamicsCompressorNode, which is used to improve sound quality and prevent audio distortion.
		 * It is connected to <code>context.destination</code>.
		 *
		 * Can be accessed by advanced users through createjs.Sound.activePlugin.dynamicsCompressorNode.
		 * @property dynamicsCompressorNode
		 * @type {AudioNode}
		 */
		this.dynamicsCompressorNode = this.context.createDynamicsCompressor();
		this.dynamicsCompressorNode.connect(this.context.destination);

		/**
		 * A GainNode for controlling master volume. It is connected to {{#crossLink "WebAudioPlugin/dynamicsCompressorNode:property"}}{{/crossLink}}.
		 *
		 * Can be accessed by advanced users through createjs.Sound.activePlugin.gainNode.
		 * @property gainNode
		 * @type {AudioGainNode}
		 */
		this.gainNode = this.context.createGain();
		this.gainNode.connect(this.dynamicsCompressorNode);
		createjs.WebAudioSoundInstance.destinationNode = this.gainNode;

		this._capabilities = s._capabilities;

		this._loaderClass = createjs.WebAudioLoader;
		this._soundInstanceClass = createjs.WebAudioSoundInstance;

		this._addPropsToClasses();
	}
	var p = createjs.extend(WebAudioPlugin, createjs.AbstractPlugin);


// Static Properties
	var s = WebAudioPlugin;
	/**
	 * The capabilities of the plugin. This is generated via the {{#crossLink "WebAudioPlugin/_generateCapabilities:method"}}{{/crossLink}}
	 * method and is used internally.
	 * @property _capabilities
	 * @type {Object}
	 * @default null
	 * @protected
	 * @static
	 */
	s._capabilities = null;

	/**
	 * Value to set panning model to equal power for WebAudioSoundInstance.  Can be "equalpower" or 0 depending on browser implementation.
	 * @property _panningModel
	 * @type {Number / String}
	 * @protected
	 * @static
	 */
	s._panningModel = "equalpower";

	/**
	 * The web audio context, which WebAudio uses to play audio. All nodes that interact with the WebAudioPlugin
	 * need to be created within this context.
	 *
	 * Advanced users can set this to an existing context, but <b>must</b> do so before they call
	 * {{#crossLink "Sound/registerPlugins"}}{{/crossLink}} or {{#crossLink "Sound/initializeDefaultPlugins"}}{{/crossLink}}.
	 *
	 * @property context
	 * @type {AudioContext}
	 * @static
	 */
	s.context = null;


// Static Public Methods
	/**
	 * Determine if the plugin can be used in the current browser/OS.
	 * @method isSupported
	 * @return {Boolean} If the plugin can be initialized.
	 * @static
	 */
	s.isSupported = function () {
		// check if this is some kind of mobile device, Web Audio works with local protocol under PhoneGap and it is unlikely someone is trying to run a local file
		var isMobilePhoneGap = createjs.BrowserDetect.isIOS || createjs.BrowserDetect.isAndroid || createjs.BrowserDetect.isBlackberry;
		// OJR isMobile may be redundant with _isFileXHRSupported available.  Consider removing.
		if (location.protocol == "file:" && !isMobilePhoneGap && !this._isFileXHRSupported()) { return false; }  // Web Audio requires XHR, which is not usually available locally
		s._generateCapabilities();
		if (s.context == null) {return false;}
		return true;
	};

	/**
	 * Plays an empty sound in the web audio context.  This is used to enable web audio on iOS devices, as they
	 * require the first sound to be played inside of a user initiated event (touch/click).  This is called when
	 * {{#crossLink "WebAudioPlugin"}}{{/crossLink}} is initialized (by Sound {{#crossLink "Sound/initializeDefaultPlugins"}}{{/crossLink}}
	 * for example).
	 *
	 * <h4>Example</h4>
	 *
	 *     function handleTouch(event) {
	 *         createjs.WebAudioPlugin.playEmptySound();
	 *     }
	 *
	 * @method playEmptySound
	 * @static
	 * @since 0.4.1
	 */
	s.playEmptySound = function() {
		var source = s.context.createBufferSource();
		source.buffer = s.context.createBuffer(1, 1, 22050);
		source.connect(s.context.destination);
		source.start(0, 0, 0);
	};


// Static Private Methods
	/**
	 * Determine if XHR is supported, which is necessary for web audio.
	 * @method _isFileXHRSupported
	 * @return {Boolean} If XHR is supported.
	 * @since 0.4.2
	 * @protected
	 * @static
	 */
	s._isFileXHRSupported = function() {
		// it's much easier to detect when something goes wrong, so let's start optimistically
		var supported = true;

		var xhr = new XMLHttpRequest();
		try {
			xhr.open("GET", "WebAudioPluginTest.fail", false); // loading non-existant file triggers 404 only if it could load (synchronous call)
		} catch (error) {
			// catch errors in cases where the onerror is passed by
			supported = false;
			return supported;
		}
		xhr.onerror = function() { supported = false; }; // cause irrelevant
		// with security turned off, we can get empty success results, which is actually a failed read (status code 0?)
		xhr.onload = function() { supported = this.status == 404 || (this.status == 200 || (this.status == 0 && this.response != "")); };
		try {
			xhr.send();
		} catch (error) {
			// catch errors in cases where the onerror is passed by
			supported = false;
		}

		return supported;
	};

	/**
	 * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink "Sound/getCapabilities"}}{{/crossLink}}
	 * method for an overview of plugin capabilities.
	 * @method _generateCapabilities
	 * @static
	 * @protected
	 */
	s._generateCapabilities = function () {
		if (s._capabilities != null) {return;}
		// Web Audio can be in any formats supported by the audio element, from http://www.w3.org/TR/webaudio/#AudioContext-section
		var t = document.createElement("audio");
		if (t.canPlayType == null) {return null;}

		if (s.context == null) {
			if (window.AudioContext) {
				s.context = new AudioContext();
			} else if (window.webkitAudioContext) {
				s.context = new webkitAudioContext();
			} else {
				return null;
			}
		}

		s._compatibilitySetUp();

		// playing this inside of a touch event will enable audio on iOS, which starts muted
		s.playEmptySound();

		s._capabilities = {
			panning:true,
			volume:true,
			tracks:-1
		};

		// determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS
		var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
		var extensionMap = createjs.Sound.EXTENSION_MAP;
		for (var i = 0, l = supportedExtensions.length; i < l; i++) {
			var ext = supportedExtensions[i];
			var playType = extensionMap[ext] || ext;
			s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
		}  // OJR another way to do this might be canPlayType:"m4a", codex: mp4

		// 0=no output, 1=mono, 2=stereo, 4=surround, 6=5.1 surround.
		// See http://www.w3.org/TR/webaudio/#AudioChannelSplitter for more details on channels.
		if (s.context.destination.numberOfChannels < 2) {
			s._capabilities.panning = false;
		}
	};

	/**
	 * Set up compatibility if only deprecated web audio calls are supported.
	 * See http://www.w3.org/TR/webaudio/#DeprecationNotes
	 * Needed so we can support new browsers that don't support deprecated calls (Firefox) as well as old browsers that
	 * don't support new calls.
	 *
	 * @method _compatibilitySetUp
	 * @static
	 * @protected
	 * @since 0.4.2
	 */
	s._compatibilitySetUp = function() {
		s._panningModel = "equalpower";
		//assume that if one new call is supported, they all are
		if (s.context.createGain) { return; }

		// simple name change, functionality the same
		s.context.createGain = s.context.createGainNode;

		// source node, add to prototype
		var audioNode = s.context.createBufferSource();
		audioNode.__proto__.start = audioNode.__proto__.noteGrainOn;	// note that noteGrainOn requires all 3 parameters
		audioNode.__proto__.stop = audioNode.__proto__.noteOff;

		// panningModel
		s._panningModel = 0;
	};


// Public Methods
	p.toString = function () {
		return "[WebAudioPlugin]";
	};


// Private Methods
	/**
	 * Set up needed properties on supported classes WebAudioSoundInstance and WebAudioLoader.
	 * @method _addPropsToClasses
	 * @static
	 * @protected
	 * @since 0.6.0
	 */
	p._addPropsToClasses = function() {
		var c = this._soundInstanceClass;
		c.context = this.context;
		c.destinationNode = this.gainNode;
		c._panningModel = this._panningModel;

		this._loaderClass.context = this.context;
	};


	/**
	 * Set the gain value for master audio. Should not be called externally.
	 * @method _updateVolume
	 * @protected
	 */
	p._updateVolume = function () {
		var newVolume = createjs.Sound._masterMute ? 0 : this._volume;
		if (newVolume != this.gainNode.gain.value) {
			this.gainNode.gain.value = newVolume;
		}
	};

	createjs.WebAudioPlugin = createjs.promote(WebAudioPlugin, "AbstractPlugin");
}());

//##############################################################################
// HTMLAudioTagPool.js
//##############################################################################

this.createjs = this.createjs || {};

//TODO verify that tags no longer need to be precreated (mac and pc)
//TODO modify this now that tags do not need to be precreated
(function () {
	"use strict";

	/**
	 * The TagPool is an object pool for HTMLAudio tag instances. In Chrome, we have to pre-create the number of HTML
	 * audio tag instances that we are going to play before we load the data, otherwise the audio stalls.
	 * (Note: This seems to be a bug in Chrome)
	 * @class HTMLAudioTagPool
	 * @param {String} src The source of the channel.
	 * @protected
	 */
	function TagPool(src) {


//Public Properties
		/**
		 * The source of the tag pool.
		 * #property src
		 * @type {String}
		 * @protected
		 */
		this.src = src;

		/**
		 * The total number of HTMLAudio tags in this pool. This is the maximum number of instance of a certain sound
		 * that can play at one time.
		 * #property length
		 * @type {Number}
		 * @default 0
		 * @protected
		 */
		this.length = 0;

		/**
		 * The number of unused HTMLAudio tags.
		 * #property available
		 * @type {Number}
		 * @default 0
		 * @protected
		 */
		this.available = 0;

		/**
		 * A list of all available tags in the pool.
		 * #property tags
		 * @type {Array}
		 * @protected
		 */
		this.tags = [];

		/**
		 * The duration property of all audio tags, converted to milliseconds, which originally is only available on the
		 * last tag in the tags array because that is the one that is loaded.
		 * #property
		 * @type {Number}
		 * @protected
		 */
		this.duration = 0;
	};

	var p = TagPool.prototype;
	p.constructor = TagPool;
	var s = TagPool;


// Static Properties
	/**
	 * A hash lookup of each sound channel, indexed by the audio source.
	 * #property tags
	 * @static
	 * @protected
	 */
	s.tags = {};


// Static Methods
	/**
	 * Get a tag pool. If the pool doesn't exist, create it.
	 * #method get
	 * @param {String} src The source file used by the audio tag.
	 * @static
	 * @protected
	 */
	s.get = function (src) {
		var channel = s.tags[src];
		if (channel == null) {
			channel = s.tags[src] = new TagPool(src);
		}
		return channel;
	};

	/**
	 * Delete a TagPool and all related tags. Note that if the TagPool does not exist, this will fail.
	 * #method remove
	 * @param {String} src The source for the tag
	 * @return {Boolean} If the TagPool was deleted.
	 * @static
	 */
	s.remove = function (src) {
		var channel = s.tags[src];
		if (channel == null) {return false;}
		channel.removeAll();
		delete(s.tags[src]);
		return true;
	};

	/**
	 * Get a tag instance. This is a shortcut method.
	 * #method getInstance
	 * @param {String} src The source file used by the audio tag.
	 * @static
	 * @protected
	 */
	s.getInstance = function (src) {
		var channel = s.tags[src];
		if (channel == null) {return null;}
		return channel.get();
	};

	/**
	 * Return a tag instance. This is a shortcut method.
	 * #method setInstance
	 * @param {String} src The source file used by the audio tag.
	 * @param {HTMLElement} tag Audio tag to set.
	 * @static
	 * @protected
	 */
	s.setInstance = function (src, tag) {
		var channel = s.tags[src];
		if (channel == null) {return null;}
		return channel.set(tag);
	};

	/**
	 * Gets the duration of the src audio in milliseconds
	 * #method getDuration
	 * @param {String} src The source file used by the audio tag.
	 * @return {Number} Duration of src in milliseconds
	 */
	s.getDuration= function (src) {
		var channel = s.tags[src];
		if (channel == null) {return 0;}
		return channel.getDuration();
	};


// Public Methods
	/**
	 * Add an HTMLAudio tag into the pool.
	 * #method add
	 * @param {HTMLAudioElement} tag A tag to be used for playback.
	 */
	p.add = function (tag) {
		this.tags.push(tag);
		this.length++;
		this.available++;
	};

	/**
	 * Remove all tags from the channel.  Usually in response to a delete call.
	 * #method removeAll
	 */
	p.removeAll = function () {
		var tag;
		while(this.length--) {
			tag = this.tags[this.length];
			if(tag.parentNode) {
				tag.parentNode.removeChild(tag);
			}
			delete(this.tags[this.length]);	// NOTE that the audio playback is already stopped by this point
		}
		this.src = null;
		this.tags.length = 0;
	};

	/**
	 * Get an HTMLAudioElement for immediate playback. This takes it out of the pool.
	 * #method get
	 * @return {HTMLAudioElement} An HTML audio tag.
	 */
	p.get = function () {
		if (this.tags.length == 0) {return null;}
		this.available = this.tags.length;
		var tag = this.tags.pop();
		if (tag.parentNode == null) {document.body.appendChild(tag);}
		return tag;
	};

	/**
	 * Put an HTMLAudioElement back in the pool for use.
	 * #method set
	 * @param {HTMLAudioElement} tag HTML audio tag
	 */
	p.set = function (tag) {
		var index = createjs.indexOf(this.tags, tag);
		if (index == -1) {this.tags.push(tag);}
		this.available = this.tags.length;
	};

	/**
	 * Gets the duration for the src audio and on first call stores it to this.duration
	 * #method getDuration
	 * @return {Number} Duration of the src in milliseconds
	 */
	p.getDuration = function () {
		// this will work because this will be only be run the first time a sound instance is created and before any tags are taken from the pool
		if (!this.duration) {this.duration = this.tags[this.tags.length - 1].duration * 1000;}
		return this.duration;
	};

	p.toString = function () {
		return "[HTMLAudioTagPool]";
	};

	createjs.HTMLAudioTagPool = TagPool;
}());

//##############################################################################
// HTMLAudioSoundInstance.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {
	"use strict";

	/**
	 * HTMLAudioSoundInstance extends the base api of {{#crossLink "AbstractSoundInstance"}}{{/crossLink}} and is used by
	 * {{#crossLink "HTMLAudioPlugin"}}{{/crossLink}}.
	 *
	 * @param {String} src The path to and file name of the sound.
	 * @param {Number} startTime Audio sprite property used to apply an offset, in milliseconds.
	 * @param {Number} duration Audio sprite property used to set the time the clip plays for, in milliseconds.
	 * @param {Object} playbackResource Any resource needed by plugin to support audio playback.
	 * @class HTMLAudioSoundInstance
	 * @extends AbstractSoundInstance
	 * @constructor
	 */
	function HTMLAudioSoundInstance(src, startTime, duration, playbackResource) {
		this.AbstractSoundInstance_constructor(src, startTime, duration, playbackResource);


// Private Properties
		this._audioSpriteStopTime = null;
		this._delayTimeoutId = null;

		// Proxies, make removing listeners easier.
		this._endedHandler = createjs.proxy(this._handleSoundComplete, this);
		this._readyHandler = createjs.proxy(this._handleTagReady, this);
		this._stalledHandler = createjs.proxy(this.playFailed, this);
		this._audioSpriteEndHandler = createjs.proxy(this._handleAudioSpriteLoop, this);
		this._loopHandler = createjs.proxy(this._handleSoundComplete, this);

		if (duration) {
			this._audioSpriteStopTime = (startTime + duration) * 0.001;
		} else {
			this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);
		}
	}
	var p = createjs.extend(HTMLAudioSoundInstance, createjs.AbstractSoundInstance);


// Public Methods
	/**
	 * Called by {{#crossLink "Sound"}}{{/crossLink}} when plugin does not handle master volume.
	 * undoc'd because it is not meant to be used outside of Sound
	 * #method setMasterVolume
	 * @param value
	 */
	p.setMasterVolume = function (value) {
		this._updateVolume();
	};

	/**
	 * Called by {{#crossLink "Sound"}}{{/crossLink}} when plugin does not handle master mute.
	 * undoc'd because it is not meant to be used outside of Sound
	 * #method setMasterMute
	 * @param value
	 */
	p.setMasterMute = function (isMuted) {
		this._updateVolume();
	};

	p.toString = function () {
		return "[HTMLAudioSoundInstance]";
	};

//Private Methods
	p._removeLooping = function() {
		if(this._playbackResource == null) {return;}
		this._playbackResource.loop = false;
		this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
	};

	p._addLooping = function() {
		if(this._playbackResource == null  || this._audioSpriteStopTime) {return;}
		this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
		this._playbackResource.loop = true;
	};

	p._handleCleanUp = function () {
		var tag = this._playbackResource;
		if (tag != null) {
			tag.pause();
			tag.loop = false;
			tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
			tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
			tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
			tag.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
			tag.removeEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);

			try {
				tag.currentTime = this._startTime;
			} catch (e) {
			} // Reset Position
			createjs.HTMLAudioTagPool.setInstance(this.src, tag);
			this._playbackResource = null;
		}
	};

	p._beginPlaying = function (offset, loop, volume, pan) {
		this._playbackResource = createjs.HTMLAudioTagPool.getInstance(this.src);
		return this.AbstractSoundInstance__beginPlaying(offset, loop, volume, pan);
	};

	p._handleSoundReady = function (event) {
		if (this._playbackResource.readyState !== 4) {
			var tag = this._playbackResource;
			tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
			tag.addEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);
			tag.preload = "auto"; // This is necessary for Firefox, as it won't ever "load" until this is set.
			tag.load();
			return;
		}

		this._updateVolume();
		this._playbackResource.currentTime = (this._startTime + this._position) * 0.001;
		if (this._audioSpriteStopTime) {
			this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
		} else {
			this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
			if(this._loop != 0) {
				this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
				this._playbackResource.loop = true;
			}
		}

		this._playbackResource.play();
	};

	/**
	 * Used to handle when a tag is not ready for immediate playback when it is returned from the HTMLAudioTagPool.
	 * @method _handleTagReady
	 * @param event
	 * @protected
	 */
	p._handleTagReady = function (event) {
		this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_READY, this._readyHandler, false);
		this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_STALLED, this._stalledHandler, false);

		this._handleSoundReady();
	};

	p._pause = function () {
		this._playbackResource.pause();
	};

	p._resume = function () {
		this._playbackResource.play();
	};

	p._updateVolume = function () {
		if (this._playbackResource != null) {
			var newVolume = (this._muted || createjs.Sound._masterMute) ? 0 : this._volume * createjs.Sound._masterVolume;
			if (newVolume != this._playbackResource.volume) {this._playbackResource.volume = newVolume;}
		}
	};

	p._calculateCurrentPosition = function() {
		return (this._playbackResource.currentTime * 1000) - this._startTime;
	};

	p._updatePosition = function() {
		this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
		this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
		try {
			this._playbackResource.currentTime = (this._position + this._startTime) * 0.001;
		} catch (error) { // Out of range
			this._handleSetPositionSeek(null);
		}
	};

	/**
	 * Used to enable setting position, as we need to wait for that seek to be done before we add back our loop handling seek listener
	 * @method _handleSetPositionSeek
	 * @param event
	 * @protected
	 */
	p._handleSetPositionSeek = function(event) {
		if (this._playbackResource == null) { return; }
		this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._handleSetPositionSeek, false);
		this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
	};

	/**
	 * Timer used to loop audio sprites.
	 * NOTE because of the inaccuracies in the timeupdate event (15 - 250ms) and in setting the tag to the desired timed
	 * (up to 300ms), it is strongly recommended not to loop audio sprites with HTML Audio if smooth looping is desired
	 *
	 * @method _handleAudioSpriteLoop
	 * @param event
	 * @private
	 */
	p._handleAudioSpriteLoop = function (event) {
		if(this._playbackResource.currentTime <= this._audioSpriteStopTime) {return;}
		this._playbackResource.pause();
		if(this._loop == 0) {
			this._handleSoundComplete(null);
		} else {
			this._position = 0;
			this._loop--;
			this._playbackResource.currentTime = this._startTime * 0.001;
			if(!this._paused) {this._playbackResource.play();}
			this._sendEvent("loop");
		}
	};

	// NOTE with this approach audio will loop as reliably as the browser allows
	// but we could end up sending the loop event after next loop playback begins
	p._handleLoop = function (event) {
		if(this._loop == 0) {
			this._playbackResource.loop = false;
			this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_SEEKED, this._loopHandler, false);
		}
	};

	p._updateDuration = function () {
		this._audioSpriteStopTime = (startTime + duration) * 0.001;

		if(this.playState == createjs.Sound.PLAY_SUCCEEDED) {
			this._playbackResource.removeEventListener(createjs.HTMLAudioPlugin._AUDIO_ENDED, this._endedHandler, false);
			this._playbackResource.addEventListener(createjs.HTMLAudioPlugin._TIME_UPDATE, this._audioSpriteEndHandler, false);
		}
	};

	/*	This should never change
	p._setDurationFromSource = function () {
		this._duration = createjs.HTMLAudioTagPool.getDuration(this.src);
	};
	*/

	createjs.HTMLAudioSoundInstance = createjs.promote(HTMLAudioSoundInstance, "AbstractSoundInstance");
}());

//##############################################################################
// HTMLAudioPlugin.js
//##############################################################################

this.createjs = this.createjs || {};

(function () {

	"use strict";

	/**
	 * Play sounds using HTML &lt;audio&gt; tags in the browser. This plugin is the second priority plugin installed
	 * by default, after the {{#crossLink "WebAudioPlugin"}}{{/crossLink}}.  For older browsers that do not support html
	 * audio, include and install the {{#crossLink "FlashAudioPlugin"}}{{/crossLink}}.
	 *
	 * <h4>Known Browser and OS issues for HTML Audio</h4>
	 * <b>All browsers</b><br />
	 * Testing has shown in all browsers there is a limit to how many audio tag instances you are allowed.  If you exceed
	 * this limit, you can expect to see unpredictable results.  This will be seen as soon as you register sounds, as
	 * tags are precreated to allow Chrome to load them.  Please use {{#crossLink "Sound.MAX_INSTANCES"}}{{/crossLink}} as
	 * a guide to how many total audio tags you can safely use in all browsers.
	 *
     * <b>IE html limitations</b><br />
     * <ul><li>There is a delay in applying volume changes to tags that occurs once playback is started. So if you have
     * muted all sounds, they will all play during this delay until the mute applies internally. This happens regardless of
     * when or how you apply the volume change, as the tag seems to need to play to apply it.</li>
     * <li>MP3 encoding will not always work for audio tags if it's not default.  We've found default encoding with
     * 64kbps works.</li>
	 * <li>Occasionally very short samples will get cut off.</li>
	 * <li>There is a limit to how many audio tags you can load and play at once, which appears to be determined by
	 * hardware and browser settings.  See {{#crossLink "HTMLAudioPlugin.MAX_INSTANCES"}}{{/crossLink}} for a safe estimate.
	 * Note that audio sprites can be used as a solution to this issue.</li></ul>
	 *
	 * <b>Safari limitations</b><br />
	 * <ul><li>Safari requires Quicktime to be installed for audio playback.</li></ul>
	 *
	 * <b>iOS 6 limitations</b><br />
	 * <ul><li>Note it is recommended to use {{#crossLink "WebAudioPlugin"}}{{/crossLink}} for iOS (6+)</li>
	 * 		<li>HTML Audio is disabled by default because</li>
	 * 		<li>can only have one &lt;audio&gt; tag</li>
	 * 		<li>can not preload or autoplay the audio</li>
	 * 		<li>can not cache the audio</li>
	 * 		<li>can not play the audio except inside a user initiated event.</li>
	 * 		<li>audio sprites can be used to mitigate some of these issues and are strongly recommended on iOS</li>
	 * </ul>
	 *
	 * <b>Android Native Browser limitations</b><br />
	 * <ul><li>We have no control over audio volume. Only the user can set volume on their device.</li>
	 *      <li>We can only play audio inside a user event (touch/click).  This currently means you cannot loop sound or use a delay.</li></ul>
	 * <b> Android Chrome 26.0.1410.58 specific limitations</b><br />
	 * <ul> <li>Can only play 1 sound at a time.</li>
	 *      <li>Sound is not cached.</li>
	 *      <li>Sound can only be loaded in a user initiated touch/click event.</li>
	 *      <li>There is a delay before a sound is played, presumably while the src is loaded.</li>
	 * </ul>
	 *
	 * See {{#crossLink "Sound"}}{{/crossLink}} for general notes on known issues.
	 *
	 * @class HTMLAudioPlugin
	 * @extends AbstractPlugin
	 * @constructor
	 */
	function HTMLAudioPlugin() {
		this.AbstractPlugin_constructor();


	// Public Properties
		/**
		 * The default number of instances to allow.  Used by {{#crossLink "Sound"}}{{/crossLink}} when a source
		 * is registered using the {{#crossLink "Sound/register"}}{{/crossLink}} method.  This is only used if
		 * a value is not provided.
		 *
		 * <b>NOTE this property only exists as a limitation of HTML audio.</b>
		 * @property defaultNumChannels
		 * @type {Number}
		 * @default 2
		 * @since 0.4.0
		 */
		this.defaultNumChannels = 2;

		this._capabilities = s._capabilities;

		this._loaderClass = createjs.SoundLoader;
		this._soundInstanceClass = createjs.HTMLAudioSoundInstance;
	}

	var p = createjs.extend(HTMLAudioPlugin, createjs.AbstractPlugin);
	var s = HTMLAudioPlugin;


// Static Properties
	/**
	 * The maximum number of instances that can be loaded and played. This is a browser limitation, primarily limited to IE9.
	 * The actual number varies from browser to browser (and is largely hardware dependant), but this is a safe estimate.
	 * Audio sprites work around this limitation.
	 * @property MAX_INSTANCES
	 * @type {Number}
	 * @default 30
	 * @static
	 */
	s.MAX_INSTANCES = 30;

	/**
	 * Event constant for the "canPlayThrough" event for cleaner code.
	 * @property _AUDIO_READY
	 * @type {String}
	 * @default canplaythrough
	 * @static
	 * @protected
	 */
	s._AUDIO_READY = "canplaythrough";

	/**
	 * Event constant for the "ended" event for cleaner code.
	 * @property _AUDIO_ENDED
	 * @type {String}
	 * @default ended
	 * @static
	 * @protected
	 */
	s._AUDIO_ENDED = "ended";

	/**
	 * Event constant for the "seeked" event for cleaner code.  We utilize this event for maintaining loop events.
	 * @property _AUDIO_SEEKED
	 * @type {String}
	 * @default seeked
	 * @static
	 * @protected
	 */
	s._AUDIO_SEEKED = "seeked";

	/**
	 * Event constant for the "stalled" event for cleaner code.
	 * @property _AUDIO_STALLED
	 * @type {String}
	 * @default stalled
	 * @static
	 * @protected
	 */
	s._AUDIO_STALLED = "stalled";

	/**
	 * Event constant for the "timeupdate" event for cleaner code.  Utilized for looping audio sprites.
	 * This event callsback ever 15 to 250ms and can be dropped by the browser for performance.
	 * @property _TIME_UPDATE
	 * @type {String}
	 * @default timeupdate
	 * @static
	 * @protected
	 */
	s._TIME_UPDATE = "timeupdate";

	/**
	 * The capabilities of the plugin. This is generated via the {{#crossLink "HTMLAudioPlugin/_generateCapabilities"}}{{/crossLink}}
	 * method. Please see the Sound {{#crossLink "Sound/getCapabilities"}}{{/crossLink}} method for an overview of all
	 * of the available properties.
	 * @property _capabilities
	 * @type {Object}
	 * @protected
	 * @static
	 */
	s._capabilities = null;

	/**
	 * Deprecated now that we have audio sprite support.  Audio sprites are strongly recommend on iOS for the following reasons:
	 * <li>it can only have one &lt;audio&gt; tag</li>
	 * <li>can not preload or autoplay the audio</li>
	 * <li>can not cache the audio</li>
	 * <li>can not play the audio except inside a user initiated event</li>
	 *
	 * @property enableIOS
	 * @type {Boolean}
	 * @default false
	 * @deprecated
	 */
	s.enableIOS = false;


// Static Methods
	/**
	 * Determine if the plugin can be used in the current browser/OS. Note that HTML audio is available in most modern
	 * browsers, but is disabled in iOS because of its limitations.
	 * @method isSupported
	 * @return {Boolean} If the plugin can be initialized.
	 * @static
	 */
	s.isSupported = function () {
		s._generateCapabilities();
		if (s._capabilities == null) {return false;}
		return true;
	};

	/**
	 * Determine the capabilities of the plugin. Used internally. Please see the Sound API {{#crossLink "Sound/getCapabilities"}}{{/crossLink}}
	 * method for an overview of plugin capabilities.
	 * @method _generateCapabilities
	 * @static
	 * @protected
	 */
	s._generateCapabilities = function () {
		if (s._capabilities != null) {return;}
		var t = document.createElement("audio");
		if (t.canPlayType == null) {return null;}

		s._capabilities = {
			panning:true,
			volume:true,
			tracks:-1
		};

		// determine which extensions our browser supports for this plugin by iterating through Sound.SUPPORTED_EXTENSIONS
		var supportedExtensions = createjs.Sound.SUPPORTED_EXTENSIONS;
		var extensionMap = createjs.Sound.EXTENSION_MAP;
		for (var i = 0, l = supportedExtensions.length; i < l; i++) {
			var ext = supportedExtensions[i];
			var playType = extensionMap[ext] || ext;
			s._capabilities[ext] = (t.canPlayType("audio/" + ext) != "no" && t.canPlayType("audio/" + ext) != "") || (t.canPlayType("audio/" + playType) != "no" && t.canPlayType("audio/" + playType) != "");
		}  // OJR another way to do this might be canPlayType:"m4a", codex: mp4
	};


// public methods
	p.register = function (loadItem, instances) {
		var channel = createjs.HTMLAudioTagPool.get(loadItem.src);
		var tag = null;
		for (var i = 0; i < instances; i++) {
			tag = this._createTag(loadItem.src);
			channel.add(tag);
		}

		var loader = this.AbstractPlugin_register(loadItem, instances);
		loader.setTag(tag);

		return loader;
	};

	p.removeSound = function (src) {
		this.AbstractPlugin_removeSound(src);
		createjs.HTMLAudioTagPool.remove(src);
	};

	p.create = function (src, startTime, duration) {
		var si = this.AbstractPlugin_create(src, startTime, duration);
		si.setPlaybackResource(null);
		return si;
	};

	p.toString = function () {
		return "[HTMLAudioPlugin]";
	};

	// plugin does not support these
	p.setVolume = p.getVolume = p.setMute = null;


// private methods
	/**
	 * Create an HTML audio tag.
	 * @method _createTag
	 * @param {String} src The source file to set for the audio tag.
	 * @return {HTMLElement} Returns an HTML audio tag.
	 * @protected
	 */
	// TODO move this to tagpool when it changes to be a standard object pool
	p._createTag = function (src) {
		var tag = document.createElement("audio");
		tag.autoplay = false;
		tag.preload = "none";
		//LM: Firefox fails when this the preload="none" for other tags, but it needs to be "none" to ensure PreloadJS works.
		tag.src = src;
		return tag;
	};

	createjs.HTMLAudioPlugin = createjs.promote(HTMLAudioPlugin, "AbstractPlugin");
}());

define("lib/SoundJS", function(){});

define(
  'component/Audio',[ 'component/Base', 'lib/SoundJS' ], function( Base, _Sound ) {

    var Audio = function( id, source ) {
      Base.call( this, Base.AUDIO_SOURCE );

      if( id && source ) {
        this.id = id;
        this.source = source;
        this.instance = null;
        this.state = Audio.STATE_STOPPED;

        createjs.Sound.alternateExtensions = [ 'mp3' ];
        createjs.Sound.registerSound( this.source, this.id );
        createjs.Sound.on(
          'fileload', function( event ) {
            this.instance = createjs.Sound.createInstance( this.id );
          }, this
        );
      } else {
        console.log( 'Audio component fail.' );
      }
    };

    Audio.prototype = Object.create( Base.prototype );

    Audio.STATE_STOPPED = 0;
    Audio.STATE_PLAYING = 1;
    Audio.STATE_PAUSED = 2;
    Audio.STATE_FINISHED = 3;

    Audio.prototype.isLoaded = function() {
      return createjs.Sound.loadComplete( this.source );
    };

    Audio.prototype.start = function( options ) {
      if( this.instance && this.isLoaded() && this.state != Audio.STATE_PLAYING ) {
        this.instance.play( options );
        this.state = Audio.STATE_PLAYING;

        this.instance.on(
          'complete', function( event ) {
            this.state = Audio.STATE_FINISHED;
          }
        );
      }
    };

    Audio.prototype.pause = function() {
      if( this.instance && this.isLoaded() && this.state != Audio.STATE_PAUSED ) {
        this.instance.pause();
        this.state = Audio.STATE_PAUSED;
      }
    };

    Audio.prototype.resume = function() {
      if( this.instance && this.isLoaded() && this.state != Audio.STATE_PLAYING ) {
        this.instance.resume();
        this.state = Audio.STATE_PLAYING;
      }
    };

    Audio.prototype.stop = function() {
      if( this.instance && this.isLoaded() && this.state != Audio.STATE_STOPPED ) {
        this.instance.stop();
        this.state = Audio.STATE_STOPPED;
      }
    };

    return Audio;
  }
);

define(
  'component/BaseThree',[ 'component/Base', 'lib/Three' ], function( Base, _Three ) {

    var BaseThree = function( material, geometry, type ) {
      Base.call( this, type || Base.BASE_THREE );
      this.isRenderable = true;

      this.texture = null;
      this.material = ( material ) ? material : null;
      this.geometry = ( geometry ) ? geometry : null;
      this.mesh = ( material && geometry ) ? new THREE.Mesh( this.geometry, this.material ) : null;
    };

    BaseThree.prototype = Object.create( Base.prototype );

    BaseThree.prototype.setMaterial = function( material ) {
      this.material = ( material ) ? material : null;
      this.updateMesh();
    };

    BaseThree.prototype.getMaterial = function() {
      return this.material;
    };

    BaseThree.prototype.setGeometry = function( geometry ) {
      this.geometry = ( geometry ) ? geometry : null;
      this.updateMesh();
    };

    BaseThree.prototype.getGeometry = function() {
      return this.geometry;
    };

    BaseThree.prototype.updateMesh = function() {
      if( this.material && this.geometry ) {
        this.mesh.geometry = this.geometry;
        this.mesh.material = this.material;
      }
    };

    BaseThree.prototype.getMesh = function() {
      return this.mesh;
    };

    BaseThree.prototype.getTexture = function() {
      return this.texture;
    };

    BaseThree.prototype.show = function() {
      this.mesh.material.visible = true;
    };

    BaseThree.prototype.hide = function() {
      this.mesh.material.visible = false;
    };

    return BaseThree;
  }
);

/**
 *[ b2BodyDef ] http://www.box2dflash.org/docs/2.1a/reference/Box2D/Dynamics/b2BodyDef.html
 *[ b2FixtureDef ] http://www.box2dflash.org/docs/2.1a/reference/Box2D/Dynamics/b2FixtureDef.html
 *
 * Box2D has been tuned to work well with moving objects between 0.1 and 10 meters.
 * So this means objects between soup cans and buses in size should work well.
 * Static objects may be up to 50 meters big without too much trouble.
 * Box2D is tuned for meters, kilograms, and seconds.
 */
define(
  'component/RigidBody',[ 'component/Base', 'lib/Box2d' ], function( Base, _Box2d ) {

    /**
     * @param {number} conversionFactor Multiplies the position from physics world (meters to screen coordinates (pixels)). Defaults to 1 (probably not what you expect).
     * @constructor
     */
    var RigidBody = function( conversionFactor ) {
      Base.call( this, Base.RIGID_BODY );

      this.bodyDef = new Box2D.b2BodyDef();
      this.materialDef = new Box2D.b2FixtureDef();
      this.body = null;

      this.conversionFactor = ( conversionFactor ) ? conversionFactor : 1;

      var shape =  new Box2D.b2CircleShape();
      shape.set_m_radius( 0.5 );
      this.materialDef.set_shape( shape );
    };

    RigidBody.prototype = Object.create( Base.prototype );

    RigidBody.prototype.STATIC = 1;
    RigidBody.prototype.KINEMATIC = 2;
    RigidBody.prototype.DYNAMIC = 3;

    /**
     * @param {number} density In kg/m^2.
     */
    RigidBody.prototype.setDensity = function( density ) {
      this.materialDef.set_density( density );
    };

    /**
     * @param {number} friction Usually in the range [0,1].
     */
    RigidBody.prototype.setFriction = function( friction ) {
      this.materialDef.set_friction( friction );
    };

    /**
     * @param {number} bounciness Usually in the range [0,1].
     */
    RigidBody.prototype.setBounciness = function( bounciness ) {
      this.materialDef.set_restitution( bounciness );
    };

    /**
     * @param position Coordinates in the physics world, NOT in pixels or game world, a proper scale is required to draw.
     */
    RigidBody.prototype.setPosition = function( position ) {
      this.bodyDef.get_position().set_x( position.x );
      this.bodyDef.get_position().set_y( position.y );
    };

    /**
     * @param {number} angle In radians.
     */
    RigidBody.prototype.setRotation = function( angle ) {
      this.bodyDef.angle.set_angle( angle );
    };

    /**
     * @param shape This is mandatory.
     */
    RigidBody.prototype.setShape = function( shape ) {
      this.materialDef.set_shape( shape );
    };

    /**
     * Prevents the collision to be resolved by Box2D, but retains collision information.
     */
    RigidBody.prototype.setSensor = function( isSensor ) {
      this.materialDef.set_isSensor( isSensor );
    };

    /**
     * Expensive! Use with care.
     */
    RigidBody.prototype.setPreventTunneling = function( preventTunneling ) {
      this.bodyDef.set_bullet( preventTunneling );
    };

    RigidBody.prototype.setType = function( type ) {
      switch( type ) {
        case this.STATIC:
          this.bodyDef.set_type( Box2D.b2_staticBody );
          break;
        case this.KINEMATIC:
          this.bodyDef.set_type( Box2D.b2_kinematicBody );
          break;
        case this.DYNAMIC:
          this.bodyDef.set_type( Box2D.b2_dynamicBody );
          break;
        default:
          this.bodyDef.set_type( Box2D.b2_staticBody );
          break;
      }
    };

    RigidBody.prototype.setAllowRotation = function( allowRotation ) {
      this.bodyDef.set_fixedRotation( !allowRotation );
    };

    return RigidBody;
  }
);

define(
  'component/Sprite',[ 'component/Base', 'component/BaseThree', 'lib/Three' ], function( Base, BaseThree, _Three ) {

    var Sprite = function( source, width, height, rows, cols ) {
      BaseThree.call( this, null, null, Base.SPRITE );
      this.isRenderable = true;

      this.texture = THREE.ImageUtils.loadTexture( ( source ) ? source : 'assets/bad-texture.png' );
      this.texture.wrapS = this.texture.wrapT = THREE.RepeatWrapping;
      this.texture.flipY = true;

      // Row and col goes from 0 to N (like an array)
      this.row = 0;
      this.col = 0;

      // Frame goes from 1 to N
      this.frame = 1;

      // Rows and cols goes from 1 to N (like array.length)
      this.rows = ( rows ) ? rows : 1;
      this.cols = ( cols ) ? cols : 1;
      this.numberOfFrames = rows * cols;

      this.w = width;
      this.h = height;

      this.lastUpdate = 0;

      this.texture.offset.x = this.row / this.cols;
      this.texture.offset.y = this.col / this.rows;
      this.texture.repeat.set( 1 / this.cols, 1 / this.rows );

      this.material = new THREE.MeshBasicMaterial(
        {
          map: this.texture,
          side: THREE.FrontSide
        }
      );
      this.material.transparent = true;

      this.geometry = new THREE.PlaneBufferGeometry( this.w, this.h, 1, 1 );

      this.mesh = new THREE.Mesh( this.geometry, this.material );
    };

    Sprite.prototype = Object.create( BaseThree.prototype );

    Sprite.prototype.getFrame = function() {
      return this.frame;
    };

    Sprite.prototype.setFrame = function( frame ) {
      this.frame = frame ? frame : 1;

      this.col = ( Math.ceil( this.frame / this.cols ) ) - 1;
      this.row = ( this.frame - 1 ) % this.cols;

      this.texture.offset.x = this.row / this.cols;
      this.texture.offset.y = this.col / this.rows;
    };

    Sprite.prototype.nextFrame = function() {
      this.setFrame( ( this.frame % this.numberOfFrames ) + 1 );
    };

    return Sprite;
  }
);

/**
 * Copyright 2013 Small Batch, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
;(function(window,document,undefined){
var j=void 0,k=!0,n=null,p=!1;function q(a){return function(){return this[a]}}var aa=this;function ba(a,b){var c=a.split("."),d=aa;!(c[0]in d)&&d.execScript&&d.execScript("var "+c[0]);for(var e;c.length&&(e=c.shift());)!c.length&&b!==j?d[e]=b:d=d[e]?d[e]:d[e]={}}function ca(a,b,c){return a.call.apply(a.bind,arguments)}
function da(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function s(a,b,c){s=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?ca:da;return s.apply(n,arguments)}var ea=Date.now||function(){return+new Date};function fa(a,b){this.G=a;this.u=b||a;this.z=this.u.document;this.R=j}fa.prototype.createElement=function(a,b,c){a=this.z.createElement(a);if(b)for(var d in b)if(b.hasOwnProperty(d))if("style"==d){var e=a,g=b[d];ga(this)?e.setAttribute("style",g):e.style.cssText=g}else a.setAttribute(d,b[d]);c&&a.appendChild(this.z.createTextNode(c));return a};function t(a,b,c){a=a.z.getElementsByTagName(b)[0];a||(a=document.documentElement);a&&a.lastChild&&a.insertBefore(c,a.lastChild)}
function u(a,b){return a.createElement("link",{rel:"stylesheet",href:b})}function ha(a,b){return a.createElement("script",{src:b})}function v(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return;c.push(b);a.className=c.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function w(a,b){for(var c=a.className.split(/\s+/),d=[],e=0,g=c.length;e<g;e++)c[e]!=b&&d.push(c[e]);a.className=d.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}
function ia(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return k;return p}function ga(a){if(a.R===j){var b=a.z.createElement("p");b.innerHTML='<a style="top:1px;">w</a>';a.R=/top/.test(b.getElementsByTagName("a")[0].getAttribute("style"))}return a.R}function x(a){var b=a.u.location.protocol;"about:"==b&&(b=a.G.location.protocol);return"https:"==b?"https:":"http:"};function y(a,b,c){this.w=a;this.T=b;this.Aa=c}ba("webfont.BrowserInfo",y);y.prototype.qa=q("w");y.prototype.hasWebFontSupport=y.prototype.qa;y.prototype.ra=q("T");y.prototype.hasWebKitFallbackBug=y.prototype.ra;y.prototype.sa=q("Aa");y.prototype.hasWebKitMetricsBug=y.prototype.sa;function z(a,b,c,d){this.e=a!=n?a:n;this.o=b!=n?b:n;this.ba=c!=n?c:n;this.f=d!=n?d:n}var ja=/^([0-9]+)(?:[\._-]([0-9]+))?(?:[\._-]([0-9]+))?(?:[\._+-]?(.*))?$/;z.prototype.toString=function(){return[this.e,this.o||"",this.ba||"",this.f||""].join("")};
function A(a){a=ja.exec(a);var b=n,c=n,d=n,e=n;a&&(a[1]!==n&&a[1]&&(b=parseInt(a[1],10)),a[2]!==n&&a[2]&&(c=parseInt(a[2],10)),a[3]!==n&&a[3]&&(d=parseInt(a[3],10)),a[4]!==n&&a[4]&&(e=/^[0-9]+$/.test(a[4])?parseInt(a[4],10):a[4]));return new z(b,c,d,e)};function B(a,b,c,d,e,g,f,h,l,m,r){this.J=a;this.Ga=b;this.za=c;this.ga=d;this.Ea=e;this.fa=g;this.xa=f;this.Fa=h;this.wa=l;this.ea=m;this.k=r}ba("webfont.UserAgent",B);B.prototype.getName=q("J");B.prototype.getName=B.prototype.getName;B.prototype.pa=q("za");B.prototype.getVersion=B.prototype.pa;B.prototype.la=q("ga");B.prototype.getEngine=B.prototype.la;B.prototype.ma=q("fa");B.prototype.getEngineVersion=B.prototype.ma;B.prototype.na=q("xa");B.prototype.getPlatform=B.prototype.na;B.prototype.oa=q("wa");
B.prototype.getPlatformVersion=B.prototype.oa;B.prototype.ka=q("ea");B.prototype.getDocumentMode=B.prototype.ka;B.prototype.ja=q("k");B.prototype.getBrowserInfo=B.prototype.ja;function C(a,b){this.a=a;this.H=b}var ka=new B("Unknown",new z,"Unknown","Unknown",new z,"Unknown","Unknown",new z,"Unknown",j,new y(p,p,p));
C.prototype.parse=function(){var a;if(-1!=this.a.indexOf("MSIE")){a=D(this);var b=E(this),c=A(b),d=F(this.a,/MSIE ([\d\w\.]+)/,1),e=A(d);a=new B("MSIE",e,d,"MSIE",e,d,a,c,b,G(this.H),new y("Windows"==a&&6<=e.e||"Windows Phone"==a&&8<=c.e,p,p))}else if(-1!=this.a.indexOf("Opera"))a:{a="Unknown";var b=F(this.a,/Presto\/([\d\w\.]+)/,1),c=A(b),d=E(this),e=A(d),g=G(this.H);c.e!==n?a="Presto":(-1!=this.a.indexOf("Gecko")&&(a="Gecko"),b=F(this.a,/rv:([^\)]+)/,1),c=A(b));if(-1!=this.a.indexOf("Opera Mini/")){var f=
F(this.a,/Opera Mini\/([\d\.]+)/,1),h=A(f);a=new B("OperaMini",h,f,a,c,b,D(this),e,d,g,new y(p,p,p))}else{if(-1!=this.a.indexOf("Version/")&&(f=F(this.a,/Version\/([\d\.]+)/,1),h=A(f),h.e!==n)){a=new B("Opera",h,f,a,c,b,D(this),e,d,g,new y(10<=h.e,p,p));break a}f=F(this.a,/Opera[\/ ]([\d\.]+)/,1);h=A(f);a=h.e!==n?new B("Opera",h,f,a,c,b,D(this),e,d,g,new y(10<=h.e,p,p)):new B("Opera",new z,"Unknown",a,c,b,D(this),e,d,g,new y(p,p,p))}}else/OPR\/[\d.]+/.test(this.a)?a=la(this):/AppleWeb(K|k)it/.test(this.a)?
a=la(this):-1!=this.a.indexOf("Gecko")?(a="Unknown",b=new z,c="Unknown",d=E(this),e=A(d),g=p,-1!=this.a.indexOf("Firefox")?(a="Firefox",c=F(this.a,/Firefox\/([\d\w\.]+)/,1),b=A(c),g=3<=b.e&&5<=b.o):-1!=this.a.indexOf("Mozilla")&&(a="Mozilla"),f=F(this.a,/rv:([^\)]+)/,1),h=A(f),g||(g=1<h.e||1==h.e&&9<h.o||1==h.e&&9==h.o&&2<=h.ba||f.match(/1\.9\.1b[123]/)!=n||f.match(/1\.9\.1\.[\d\.]+/)!=n),a=new B(a,b,c,"Gecko",h,f,D(this),e,d,G(this.H),new y(g,p,p))):a=ka;return a};
function D(a){var b=F(a.a,/(iPod|iPad|iPhone|Android|Windows Phone|BB\d{2}|BlackBerry)/,1);if(""!=b)return/BB\d{2}/.test(b)&&(b="BlackBerry"),b;a=F(a.a,/(Linux|Mac_PowerPC|Macintosh|Windows|CrOS)/,1);return""!=a?("Mac_PowerPC"==a&&(a="Macintosh"),a):"Unknown"}
function E(a){var b=F(a.a,/(OS X|Windows NT|Android) ([^;)]+)/,2);if(b||(b=F(a.a,/Windows Phone( OS)? ([^;)]+)/,2))||(b=F(a.a,/(iPhone )?OS ([\d_]+)/,2)))return b;if(b=F(a.a,/(?:Linux|CrOS) ([^;)]+)/,1))for(var b=b.split(/\s/),c=0;c<b.length;c+=1)if(/^[\d\._]+$/.test(b[c]))return b[c];return(a=F(a.a,/(BB\d{2}|BlackBerry).*?Version\/([^\s]*)/,2))?a:"Unknown"}
function la(a){var b=D(a),c=E(a),d=A(c),e=F(a.a,/AppleWeb(?:K|k)it\/([\d\.\+]+)/,1),g=A(e),f="Unknown",h=new z,l="Unknown",m=p;/OPR\/[\d.]+/.test(a.a)?f="Opera":-1!=a.a.indexOf("Chrome")||-1!=a.a.indexOf("CrMo")||-1!=a.a.indexOf("CriOS")?f="Chrome":/Silk\/\d/.test(a.a)?f="Silk":"BlackBerry"==b||"Android"==b?f="BuiltinBrowser":-1!=a.a.indexOf("PhantomJS")?f="PhantomJS":-1!=a.a.indexOf("Safari")?f="Safari":-1!=a.a.indexOf("AdobeAIR")&&(f="AdobeAIR");"BuiltinBrowser"==f?l="Unknown":"Silk"==f?l=F(a.a,
/Silk\/([\d\._]+)/,1):"Chrome"==f?l=F(a.a,/(Chrome|CrMo|CriOS)\/([\d\.]+)/,2):-1!=a.a.indexOf("Version/")?l=F(a.a,/Version\/([\d\.\w]+)/,1):"AdobeAIR"==f?l=F(a.a,/AdobeAIR\/([\d\.]+)/,1):"Opera"==f?l=F(a.a,/OPR\/([\d.]+)/,1):"PhantomJS"==f&&(l=F(a.a,/PhantomJS\/([\d.]+)/,1));h=A(l);m="AdobeAIR"==f?2<h.e||2==h.e&&5<=h.o:"BlackBerry"==b?10<=d.e:"Android"==b?2<d.e||2==d.e&&1<d.o:526<=g.e||525<=g.e&&13<=g.o;return new B(f,h,l,"AppleWebKit",g,e,b,d,c,G(a.H),new y(m,536>g.e||536==g.e&&11>g.o,"iPhone"==
b||"iPad"==b||"iPod"==b||"Macintosh"==b))}function F(a,b,c){return(a=a.match(b))&&a[c]?a[c]:""}function G(a){if(a.documentMode)return a.documentMode};function ma(a){this.va=a||"-"}ma.prototype.f=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.va)};function H(a,b){this.J=a;this.U=4;this.K="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.K=c[1],this.U=parseInt(c[2],10))}H.prototype.getName=q("J");function I(a){return a.K+a.U}function na(a){var b=4,c="n",d=n;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function oa(a,b,c){this.c=a;this.h=b;this.M=c;this.j="wf";this.g=new ma("-")}function pa(a){v(a.h,a.g.f(a.j,"loading"));J(a,"loading")}function K(a){w(a.h,a.g.f(a.j,"loading"));ia(a.h,a.g.f(a.j,"active"))||v(a.h,a.g.f(a.j,"inactive"));J(a,"inactive")}function J(a,b,c){if(a.M[b])if(c)a.M[b](c.getName(),I(c));else a.M[b]()};function L(a,b){this.c=a;this.C=b;this.s=this.c.createElement("span",{"aria-hidden":"true"},this.C)}
function M(a,b){var c=a.s,d;d=[];for(var e=b.J.split(/,\s*/),g=0;g<e.length;g++){var f=e[g].replace(/['"]/g,"");-1==f.indexOf(" ")?d.push(f):d.push("'"+f+"'")}d=d.join(",");e="normal";g=b.U+"00";"o"===b.K?e="oblique":"i"===b.K&&(e="italic");d="position:absolute;top:-999px;left:-999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+d+";"+("font-style:"+e+";font-weight:"+g+";");ga(a.c)?c.setAttribute("style",d):c.style.cssText=
d}function N(a){t(a.c,"body",a.s)}L.prototype.remove=function(){var a=this.s;a.parentNode&&a.parentNode.removeChild(a)};function qa(a,b,c,d,e,g,f,h){this.V=a;this.ta=b;this.c=c;this.q=d;this.C=h||"BESbswy";this.k=e;this.F={};this.S=g||5E3;this.Z=f||n;this.B=this.A=n;a=new L(this.c,this.C);N(a);for(var l in O)O.hasOwnProperty(l)&&(M(a,new H(O[l],I(this.q))),this.F[O[l]]=a.s.offsetWidth);a.remove()}var O={Da:"serif",Ca:"sans-serif",Ba:"monospace"};
qa.prototype.start=function(){this.A=new L(this.c,this.C);N(this.A);this.B=new L(this.c,this.C);N(this.B);this.ya=ea();M(this.A,new H(this.q.getName()+",serif",I(this.q)));M(this.B,new H(this.q.getName()+",sans-serif",I(this.q)));sa(this)};function ta(a,b,c){for(var d in O)if(O.hasOwnProperty(d)&&b===a.F[O[d]]&&c===a.F[O[d]])return k;return p}
function sa(a){var b=a.A.s.offsetWidth,c=a.B.s.offsetWidth;b===a.F.serif&&c===a.F["sans-serif"]||a.k.T&&ta(a,b,c)?ea()-a.ya>=a.S?a.k.T&&ta(a,b,c)&&(a.Z===n||a.Z.hasOwnProperty(a.q.getName()))?P(a,a.V):P(a,a.ta):setTimeout(s(function(){sa(this)},a),25):P(a,a.V)}function P(a,b){a.A.remove();a.B.remove();b(a.q)};function Q(a,b,c,d){this.c=b;this.t=c;this.N=0;this.ca=this.Y=p;this.S=d;this.k=a.k}function ua(a,b,c,d,e){if(0===b.length&&e)K(a.t);else{a.N+=b.length;e&&(a.Y=e);for(e=0;e<b.length;e++){var g=b[e],f=c[g.getName()],h=a.t,l=g;v(h.h,h.g.f(h.j,l.getName(),I(l).toString(),"loading"));J(h,"fontloading",l);(new qa(s(a.ha,a),s(a.ia,a),a.c,g,a.k,a.S,d,f)).start()}}}
Q.prototype.ha=function(a){var b=this.t;w(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"loading"));w(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"inactive"));v(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"active"));J(b,"fontactive",a);this.ca=k;va(this)};Q.prototype.ia=function(a){var b=this.t;w(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"loading"));ia(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"active"))||v(b.h,b.g.f(b.j,a.getName(),I(a).toString(),"inactive"));J(b,"fontinactive",a);va(this)};
function va(a){0==--a.N&&a.Y&&(a.ca?(a=a.t,w(a.h,a.g.f(a.j,"loading")),w(a.h,a.g.f(a.j,"inactive")),v(a.h,a.g.f(a.j,"active")),J(a,"active")):K(a.t))};function R(a,b,c){this.G=a;this.W=b;this.a=c;this.O=this.P=0}function T(a,b){U.W.$[a]=b}R.prototype.load=function(a){var b=a.context||this.G;this.c=new fa(this.G,b);b=new oa(this.c,b.document.documentElement,a);if(this.a.k.w){var c=this.W,d=this.c,e=[],g;for(g in a)if(a.hasOwnProperty(g)){var f=c.$[g];f&&e.push(f(a[g],d))}a=a.timeout;this.O=this.P=e.length;a=new Q(this.a,this.c,b,a);g=0;for(c=e.length;g<c;g++)d=e[g],d.v(this.a,s(this.ua,this,d,b,a))}else K(b)};
R.prototype.ua=function(a,b,c,d){var e=this;d?a.load(function(a,d,h){var l=0==--e.P;l&&pa(b);setTimeout(function(){ua(c,a,d||{},h||n,l)},0)}):(a=0==--this.P,this.O--,a&&(0==this.O?K(b):pa(b)),ua(c,[],{},n,a))};var wa=window,xa=(new C(navigator.userAgent,document)).parse(),U=wa.WebFont=new R(window,new function(){this.$={}},xa);U.load=U.load;function V(a,b,c){this.a=a;this.c=b;this.d=c;this.m=[]}
V.prototype.v=function(a,b){var c=this,d=c.d.projectId,e=c.d.version;if(d){var g=c.c.u,f=c.c.createElement("script");f.id="__MonotypeAPIScript__"+d;var h=p;f.onload=f.onreadystatechange=function(){if(!h&&(!this.readyState||"loaded"===this.readyState||"complete"===this.readyState)){h=k;if(g["__mti_fntLst"+d]){var e=g["__mti_fntLst"+d]();if(e)for(var m=0;m<e.length;m++)c.m.push(new H(e[m].fontfamily))}b(a.k.w);f.onload=f.onreadystatechange=n}};f.src=c.D(d,e);t(this.c,"head",f)}else b(k)};
V.prototype.D=function(a,b){var c=x(this.c),d=(this.d.api||"fast.fonts.com/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return c+"//"+d+"/"+a+".js"+(b?"?v="+b:"")};V.prototype.load=function(a){a(this.m)};T("monotype",function(a,b){var c=(new C(navigator.userAgent,document)).parse();return new V(c,b,a)});function W(a,b){this.c=a;this.d=b;this.m=[]}W.prototype.D=function(a){return x(this.c)+(this.d.api||"//f.fontdeck.com/s/css/js/")+(this.c.u.location.hostname||this.c.G.location.hostname)+"/"+a+".js"};
W.prototype.v=function(a,b){var c=this.d.id,d=this.c.u,e=this;c?(d.__webfontfontdeckmodule__||(d.__webfontfontdeckmodule__={}),d.__webfontfontdeckmodule__[c]=function(a,c){for(var d=0,l=c.fonts.length;d<l;++d){var m=c.fonts[d];e.m.push(new H(m.name,na("font-weight:"+m.weight+";font-style:"+m.style)))}b(a)},c=ha(this.c,this.D(c)),t(this.c,"head",c)):b(k)};W.prototype.load=function(a){a(this.m)};T("fontdeck",function(a,b){return new W(b,a)});function ya(a,b,c){this.L=a?a:b+za;this.p=[];this.Q=[];this.da=c||""}var za="//fonts.googleapis.com/css";ya.prototype.f=function(){if(0==this.p.length)throw Error("No fonts to load !");if(-1!=this.L.indexOf("kit="))return this.L;for(var a=this.p.length,b=[],c=0;c<a;c++)b.push(this.p[c].replace(/ /g,"+"));a=this.L+"?family="+b.join("%7C");0<this.Q.length&&(a+="&subset="+this.Q.join(","));0<this.da.length&&(a+="&text="+encodeURIComponent(this.da));return a};function Aa(a){this.p=a;this.aa=[];this.I={}}
var Ba={latin:"BESbswy",cyrillic:"&#1081;&#1103;&#1046;",greek:"&#945;&#946;&#931;",khmer:"&#x1780;&#x1781;&#x1782;",Hanuman:"&#x1780;&#x1781;&#x1782;"},Ca={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Da={i:"i",italic:"i",n:"n",normal:"n"},Ea=RegExp("^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$");
Aa.prototype.parse=function(){for(var a=this.p.length,b=0;b<a;b++){var c=this.p[b].split(":"),d=c[0].replace(/\+/g," "),e=["n4"];if(2<=c.length){var g;var f=c[1];g=[];if(f)for(var f=f.split(","),h=f.length,l=0;l<h;l++){var m;m=f[l];if(m.match(/^[\w]+$/)){m=Ea.exec(m.toLowerCase());var r=j;if(m==n)r="";else{r=j;r=m[1];if(r==n||""==r)r="4";else var ra=Ca[r],r=ra?ra:isNaN(r)?"4":r.substr(0,1);r=[m[2]==n||""==m[2]?"n":Da[m[2]],r].join("")}m=r}else m="";m&&g.push(m)}0<g.length&&(e=g);3==c.length&&(c=c[2],
g=[],c=!c?g:c.split(","),0<c.length&&(c=Ba[c[0]])&&(this.I[d]=c))}this.I[d]||(c=Ba[d])&&(this.I[d]=c);for(c=0;c<e.length;c+=1)this.aa.push(new H(d,e[c]))}};function X(a,b,c){this.a=a;this.c=b;this.d=c}var Fa={Arimo:k,Cousine:k,Tinos:k};X.prototype.v=function(a,b){b(a.k.w)};X.prototype.load=function(a){var b=this.c;if("MSIE"==this.a.getName()&&this.d.blocking!=k){var c=s(this.X,this,a),d=function(){b.z.body?c():setTimeout(d,0)};d()}else this.X(a)};
X.prototype.X=function(a){for(var b=this.c,c=new ya(this.d.api,x(b),this.d.text),d=this.d.families,e=d.length,g=0;g<e;g++){var f=d[g].split(":");3==f.length&&c.Q.push(f.pop());var h="";2==f.length&&""!=f[1]&&(h=":");c.p.push(f.join(h))}d=new Aa(d);d.parse();t(b,"head",u(b,c.f()));a(d.aa,d.I,Fa)};T("google",function(a,b){var c=(new C(navigator.userAgent,document)).parse();return new X(c,b,a)});function Y(a,b){this.c=a;this.d=b}var Ga={regular:"n4",bold:"n7",italic:"i4",bolditalic:"i7",r:"n4",b:"n7",i:"i4",bi:"i7"};Y.prototype.v=function(a,b){return b(a.k.w)};Y.prototype.load=function(a){t(this.c,"head",u(this.c,x(this.c)+"//webfonts.fontslive.com/css/"+this.d.key+".css"));for(var b=this.d.families,c=[],d=0,e=b.length;d<e;d++)c.push.apply(c,Ha(b[d]));a(c)};
function Ha(a){var b=a.split(":");a=b[0];if(b[1]){for(var c=b[1].split(","),b=[],d=0,e=c.length;d<e;d++){var g=c[d];if(g){var f=Ga[g];b.push(f?f:g)}}c=[];for(d=0;d<b.length;d+=1)c.push(new H(a,b[d]));return c}return[new H(a)]}T("ascender",function(a,b){return new Y(b,a)});function Z(a,b){this.c=a;this.d=b}Z.prototype.load=function(a){var b,c,d=this.d.urls||[],e=this.d.families||[];b=0;for(c=d.length;b<c;b++)t(this.c,"head",u(this.c,d[b]));d=[];b=0;for(c=e.length;b<c;b++){var g=e[b].split(":");if(g[1])for(var f=g[1].split(","),h=0;h<f.length;h+=1)d.push(new H(g[0],f[h]));else d.push(new H(g[0]))}a(d)};Z.prototype.v=function(a,b){return b(a.k.w)};T("custom",function(a,b){return new Z(b,a)});function $(a,b){this.c=a;this.d=b;this.m=[]}$.prototype.D=function(a){var b=x(this.c);return(this.d.api||b+"//use.typekit.net")+"/"+a+".js"};
$.prototype.v=function(a,b){var c=this.d.id,d=this.d,e=this.c.u,g=this;c?(e.__webfonttypekitmodule__||(e.__webfonttypekitmodule__={}),e.__webfonttypekitmodule__[c]=function(c){c(a,d,function(a,c,d){for(var e=0;e<c.length;e+=1){var f=d[c[e]];if(f)for(var S=0;S<f.length;S+=1)g.m.push(new H(c[e],f[S]));else g.m.push(new H(c[e]))}b(a)})},c=ha(this.c,this.D(c)),t(this.c,"head",c)):b(k)};$.prototype.load=function(a){a(this.m)};T("typekit",function(a,b){return new $(b,a)});window.WebFontConfig&&U.load(window.WebFontConfig);
})(this,document);

define("lib/WebFont", function(){});

/**
 * This module provides the basic buffering for fonts.
 * Modules that extend this one should call parse() at some point to proper buffering.
 *
 * https://github.com/typekit/webfontloader
 * http://stemkoski.github.io/Three.js/Texture-From-Canvas.html
 */
define(
  'component/BaseFont',[ 'component/Base', 'component/BaseThree', 'collection/Map', 'core/Math', 'lib/WebFont' ],
  function( Base, BaseThree, Map, Math, _WebFont ) {

    var Font = function( size, family, strokeColor, fillColor ) {
      BaseThree.call( this );
      this.type = Base.BASE_FONT;
      this.isRenderable = true;
      this.isLoaded = false;

      this.fontSize = ( size ) ? size : 10;
      this.fontFamily = ( family ) ? family : 'Verdana';
      this.strokeColor = ( strokeColor ) ? strokeColor : '#000';
      this.fillColor = ( fillColor ) ? fillColor : '#000';

      this.maxWidth = this.fontSize;

      // Stores the buffered font, one canvas for each char
      this.fontMap = new Map();
    };

    Font.prototype = Object.create( BaseThree.prototype );

    Font.CHARS = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789çÇáéíóúÁÉÍÓÚàèìòùÀÈÌÒÙäëïöüÄËÏÖÜãõñÃÕÑâêîôûÂÊÎÔÛ_()-,.[]!?@$* ';

    Font.prototype.load = function() {
      var callback = this.onLoad;
      var context = this;

      WebFont.load(
        {
          google: {
            families: [ this.fontFamily ]
          },
          fontactive: function( familyName, fvd ) {
            callback.apply( context );
          }
        }
      );
    };

    Font.prototype.onLoad = function() {
      this.parse();
      this.isLoaded = true;
    };

    Font.prototype.parse = function() {
      var canvas = null;
      var context = null;
      var w = 0;
      var h = this.fontSize * 2;

      var canvasBuffer = document.createElement( 'canvas' );
      canvasBuffer.width = w;
      canvasBuffer.height = h;

      var contextBuffer = canvasBuffer.getContext( '2d' );

      for( var i = 0, len = Font.CHARS.length; i < len; i++ ) {
        w = contextBuffer.measureText( Font.CHARS[ i ] ).width + ( this.fontSize / 2 );

        this.maxWidth = Math.max( w, this.maxWidth );

        canvas = document.createElement( 'canvas' );
        canvas.width = w;
        canvas.height = h;

        context = canvas.getContext( '2d' );
        context.clearRect( 0, 0, w, h );
        context.strokeStyle = this.strokeColor;
        context.fillStyle = this.fillColor;
        context.font = this.fontSize + 'px ' + this.fontFamily;
        context.fillText( Font.CHARS[ i ], 0, h / 2 );

        this.fontMap.put( Font.CHARS[ i ], canvas );
      }
    };

    return Font;
  }
);

define(
  'component/StaticText',[ 'component/Base', 'component/BaseFont', 'lib/Three' ], function( Base, BaseFont, _Three ) {

    var StaticText = function( text, fontSize, fontFamily, width, height ) {
      BaseFont.call( this, fontSize, fontFamily );
      this.type = Base.STATIC_TEXT;
      this.isRenderable = true;
      this.isLoaded = false;

      this.text = ( text ) ? text : 'The quick brown fox jumps over the lazy dog';
      this.w = ( width ) ? width : 256;
      this.h = ( height ) ? height : 64;

      // Buffered canvas with the final text to render
      // It is expected to be converted into a Three.Texture
      this.buffer = document.createElement( 'canvas' );
      this.buffer.width = this.w;
      this.buffer.height = this.h;

      this.texture = null;
      this.load();
    };

    StaticText.prototype = Object.create( BaseFont.prototype );

    StaticText.prototype.reset = function( text, fontSize, fontFamily, width, height ) {
      this.text = ( text ) ? text : 'The quick brown fox jumps over the lazy dog';
      this.fontSize = ( fontSize ) ? fontSize : 10;
      this.fontFamily = ( fontFamily ) ? fontFamily : 'Verdana';
      this.w = ( width ) ? width : 256;
      this.h = ( height ) ? height : 64;
    };

    StaticText.prototype.onLoad = function() {
      this.parse();

      this.texture = new THREE.Texture( this.renderIntoBuffer() );
      // This line makes the textures created during execution to work properly
      this.texture.needsUpdate = true;
      this.texture.flipY = true;
      this.material = new THREE.MeshBasicMaterial(
        {
          map: this.texture,
          side: THREE.DoubleSide
        }
      );
      this.material.transparent = true;
      this.geometry = new THREE.PlaneBufferGeometry( this.w, this.h, 1, 1 );
      this.mesh = new THREE.Mesh( this.geometry, this.material );
      this.isLoaded = true;
    };

    StaticText.prototype.renderIntoBuffer = function() {
      var context = this.buffer.getContext( '2d' );

      if( this.text.length > 0 ) {
        var c = this.fontMap.get( this.text[ 0 ] );
        var words = this.text.split( ' ' );

        // The position(x,y) and scale(width, height) of a single character
        var cX = 0, cY = 0, cW = 0, cH = 0;

        for( var i = 0, len = words.length; i < len; i++ ) {

          if( cX + ( len * cW ) >= this.w ) {
            cX = 0;
            cY += cH;
          }

          for( var j = 0, wlen = words[ i ].length; j < wlen; j++ ) {
            c = this.fontMap.get( words[ i ][ j ] );
            cW = c.width;
            cH = c.height;

            context.drawImage( c, 0, 0, cW, cH, cX, cY, cW, cH );
            cX += cW;
          }

          c = this.fontMap.get( " " );

          cW = c.width;
          cH = c.height;

          context.drawImage( c, 0, 0, cW, cH, cX, cY, cW, cH );
          cX += cW;
        }
      }

      return this.buffer;
    };

    return StaticText;
  }
);

define(
  'collection/List',[ 'core/Common' ], function( Common ) {

    var List = function( array ) {
      this.values = Common.isArray( array ) ? array : [];
    };

    List.prototype.size = function() {
      return this.values.length;
    };

    List.prototype.put = function( value ) {
      this.values.push( value );
    };

    List.prototype.get = function( index ) {
      return this.values[ index ];
    };

    List.prototype.remove = function( index ) {
      return this.values.splice( index, 1 );
    };

    List.prototype.isEmpty = function() {
      return !this.values.length;
    };

    List.prototype.clear = function() {
      this.values.length = 0;
    };

    List.prototype.toArray = function() {
      return this.values.slice( 0 );
    };

    List.prototype.indexOf = function( value ) {
      return Common.indexOf( value, this.values );
    };

    List.prototype.contains = function( value ) {
      return this.indexOf( value ) > -1;
    };

    List.prototype.iterator = function() {
      var Iterator = function( array ) {
        var index = -1;

        this.hasNext = function() {
          return index + 1 < array.length;
        };

        this.next = function() {
          return array[ ++index ];
        };

        this.hasPrevious = function() {
          return index > 0;
        };

        this.previous = function() {
          return array[ --index ];
        };

        this.first = function() {
          index = -1;
          return ( array.length > 0 ) ? array[ 0 ] : null;
        };

        this.last = function() {
          index = array.length - 1;
          return ( array.length > 0 ) ? array[ index ] : null;
        };
      };

      return new Iterator( this.values );
    };

    return List;
  }
);

define(
  'collection/Tree',[ 'core/Common' ], function( Common ) {

    var TreeNode = function( data, parent ) {
      this.data = data;
      this.parent = parent;
      this.children = [];
    };

    var Tree = function() {
      this.root = new TreeNode( 'root' );
    };

    Tree.prototype.find = function( data, startNode ) {
      var sNode = startNode ? startNode : this.root;

      var findAux = function( data, currentNode ) {
        if( Common.equals( data, currentNode.data ) ) {
          return currentNode;
        } else {
          for( var i = 0; i < currentNode.children.length; i++ ) {
            var result = findAux( data, currentNode.children[ i ] );
            if( result ) {
              return result;
            }
          }
          return null;
        }
      };

      return findAux( data, sNode );
    };

    Tree.prototype.put = function( data, parent ) {
      var pNode;
      if( parent ) {
        pNode = this.find( parent );
      }
      pNode = pNode ? pNode : this.root;
      pNode.children.push( new TreeNode( data, pNode ) );
    };

    Tree.prototype.remove = function( data ) {
      var node = this.find( data );
      if( node ) {
        // Remove reference from parent children
        var index;
        for( var i = 0; i < node.parent.children.length; i++ ) {
          if( Common.equals( node.parent.children[ i ].data, data ) ) {
            index = i;
          }
        }
        node.parent.children.splice( index, 1 );
        // Remove own references
        node.parent = null;
        node.children.length = 0;
      }
    };

    Tree.prototype.clear = function() {
      this.root.children.length = 0;
    };

    Tree.prototype.move = function( data, parent ) {
      remove( data );
      put( data, parent );
    };

    Tree.prototype.listChildren = function( data ) {
      var node = this.find( data );
      if( node ) {
        return node.children;
      } else {
        return null;
      }
    };

    Tree.prototype.listDescendants = function( data ) {
      var node = this.find( data );

      var listDescendantsAux = function( node, result ) {
        for( var i = 0; i < node.children.length; i++ ) {
          result.push( node.children[ i ] );
          result = listDescendantsAux( node.children[ i ], result );
        }
        return result;
      };

      if( node ) {
        return listDescendantsAux( node, [] );
      } else {
        return null;
      }
    };

    Tree.prototype.toArray = function() {
      return this.listDescendants( this.root );
    };

    return Tree;
  }
);

define( 'util/CommonUtils',[],function() {

  var CommonUtils = function(){};

  CommonUtils.prototype.parseUnitSizeToPixel = function( text ) {
    var len = text.length - 2;
    if ( len < 0 ) {
      return text;
    }
    if ( text.indexOf( 'pt' ) === len ) {
      return parseFloat( text.substring( 0, len ) ) * 1.25;
    }
    if ( text.indexOf( 'pc' ) === len ) {
      return parseFloat( text.substring( 0, len ) ) * 15;
    }
    if ( text.indexOf( 'mm' ) === len ) {
      return parseFloat( text.substring( 0, len ) ) * 3.543307;
    }
    if ( text.indexOf( 'cm' ) === len ) {
      return parseFloat( text.substring( 0, len ) ) * 35.43307;
    }
    if ( text.indexOf( 'in' ) === len ) {
      return parseFloat( text.substring( 0, len ) ) * 90;
    }
    if ( text.indexOf( 'px' ) === len ) {
      return parseFloat( text.substring( 0, len ) );
    }
    return parseFloat( text );
  };

  // store('num', '1');
  // store('on', 'true');
  // store('name', 'pamela');
  // store('obj', {'hello': 'world'}, true);
  CommonUtils.prototype.store = function( key, val, isObject ) {
    if ( isObject ) {
      localStorage.setItem( key, JSON.stringify( val ) );
    } else {
      localStorage.setItem( key, val );
    }
  };

  CommonUtils.prototype.isGameObject = function( object ) {
    return ( object && object.id && object.equals instanceof Function && object.update instanceof Function ) ? true : false;
  };

  return new CommonUtils(); 
} );

define(
  'util/ArrayUtils',[ 'util/CommonUtils' ], function( CommonUtils ) {

    var ArrayUtils = function() {};

    /**
     * @link http://stackoverflow.com/questions/4554252/typed-arrays-in-gecko-2-float32array-concatenation-and-expansion
     */
    ArrayUtils.prototype.float32Concat = function( first, second ) {
      var firstLength = first.length;
      var result = new Float32Array( firstLength + second.length );

      result.set( first );
      result.set( second, firstLength );

      return result;
    };

    ArrayUtils.prototype.quicksort = function( array ) {
      if( array.length === 0 ) {
        return [];
      }

      var head = [];
      var tail = [];
      var pivot = array[ 0 ];

      for( var i = 1, len = array.length; i < len; i++ ) {
        ( array[ i ] < pivot ) ? head[ head.length ] = array[ i ] : tail[ tail.length ] = array[ i ];
      }

      return this.quicksort( head ).concat( pivot, this.quicksort( tail ) );
    };

    ArrayUtils.prototype.unique = function( array ) {
      var newArr = [];
      var found = false;

      for( var x = 0, len = array.length; x < len; x++ ) {
        found = false;
        for( var y = 0; y < newArr.length; y++ ) {
          if( CommonUtils.equals( array[ x ], newArr[ y ] ) ) {
            found = true;
            break;
          }
        }

        if( !found ) {
          newArr.push( array[ x ] );
        }
      }

      return newArr;
    };

    /* side-effect */
    ArrayUtils.prototype.aphabeticalSort = function( array ) {
      if( this.isArray( array ) ) {
        array.sort(
          function( a, b ) {
            return ( a.group < b.group ) ? -1 : ( a.group < b.group ) ? 1 : 0;
          }
        );
        return array;
      } else {
        return null;
      }
    };

    /**
     * @link http://ejohn.org/blog/javascript-array-remove/
     *
     * @example Remove the second item from the array:
     *  array.remove(1);
     * @example Remove the second-to-last item from the array:
     *  array.remove(-2);
     * @example Remove the second and third items from the array:
     *  array.remove(1,2);
     * @example Remove the last and second-to-last items from the array:
     *  array.remove(-2,-1);
     */
    ArrayUtils.prototype.remove = function( array, from, to ) {
      var rest = array.slice( ( to || from ) + 1 || array.length );
      array.length = from < 0 ? array.length + from : from;
      return array.push.apply( array, rest );
    };

    ArrayUtils.prototype.equals = function( arr1, arr2 ) {
      var len1 = arr1.length, len2 = arr2.length;

      if( len1 != len2 ) {
        return false;
      }

      for( var i = 0; i < len2; i++ ) {

        if( this.isArray( arr1[ i ] ) ) { // nested array
          if( !this.equals( arr1[ i ], arr2[ i ] ) ) {
            return false;
          } else {
            continue;
          }
        }

        if( !utils.equals( arr1[ i ], arr2[ i ] ) ) {
          return false;
        }
      }

      return true;
    };

    // Take the intersection between two arrays
    // returns elements present both arrays.
    // based on Underscore.js
    ArrayUtils.prototype.intersection = function( arr1, arr2 ) {
      var rest = concat.apply( Array.prototype, slice.call( arr2, 1 ) );

      return this.unique( arr1 ).filter(
        function( value ) {
          return this.inArray( value, rest );
        }
      );
    };

    /**
     *  Produce an array that contains items that are on the first array and not on the second based on Underscore.js
     */
    ArrayUtils.prototype.difference = function( arr1, arr2 ) {
      var rest = this.concat.apply( Array.prototype, this.slice.call( arr2, 1 ) );

      var result = this.unique( arr1 ).filter(
        function( value ) {
          return !this.inArray( value, rest );
        }
      );

      return result;
    };

    /**
     * Carlos R. L. Rodrigues
     * http://jsfromhell.com/array/chunk [rev. #1]
     *
     * Input: chunk([1,2,3,4,5,6,7], 3)
     * Output: [[1,2,3],[4,5,6],[7]]
     */
    ArrayUtils.prototype.chunk = function( a, s ) {
      for( var x, i = 0, c = -1, l = a.length, n = []; i < l; i++ ) {
        ( x = i % s ) ? n[ c ][ x ] = a[ i ] : n[ ++c ] = [ a[ i ] ];
      }
      return n;
    };

    /**
     * @example
     *  Input: [[1,2,3],[4,5,6],[7]]
     *  Output: [1,2,3,4,5,6,7]
     */
    ArrayUtils.prototype.flat = function( arr ) {
      return arr.reduce(
        function( a, b ) {
          return a.concat( b );
        }, []
      );
    };

    return new ArrayUtils();
  }
);

define( 'util/StringUtils',[ 'util/ArrayUtils' ], function( _ArrayUtils ) {

  var StringUtils = function(){
    this.REGEXP_URL = /(http|https):\/\/[\w-]+(\.[\w-]+)+([\w.,@?^=%&amp;:\/~+#-]*[\w@?^=%&amp;\/~+#-])?/;
    this.REGEXP_BETWEEN_SQUARE_BRACKETS = /\[[\w|\W]+\]/;
    this.REGEXP_ENDLINE = /\r\n|\r|\n/;
  };

  /**
  * @description Substring from left to right
  * @param String str = source text
  * @param int n = how many characters will be returned
  * @return String
  * @public
  */
  StringUtils.prototype.left = function( str, n ) {
    if ( n <= 0 ) {
      return "";
    } else if ( n > str.length ) {
      return str;
    } else {
      return str.substring( 0, n );
    }
  };

  /**
  * @description Substring from right to left
  * @param String str = source text
  * @param int n = how many characters will be returned
  * @return String
  * @public
  */
  StringUtils.prototype.right = function( str, n ) {
    if ( n <= 0 ){
      return "";
    } else if ( n > str.length ) {
      return str;
    } else {
      var len = str.length;
      return str.substring( len, len - n );
    }
  };

  // from string.js
  StringUtils.prototype.endsWith = function( str, suffix ) {
    var len = str.length - suffix.length;
    return len >= 0 && str.indexOf( suffix, len ) === len;
  };

  // from string.js
  StringUtils.prototype.startsWith = function( str, prefix ) {
    return str.lastIndexOf( prefix, 0 ) === 0;
  };

  // from goog.string
  StringUtils.prototype.contains = function( str, subStr ) {
    return str.indexOf( subStr ) != -1;
  };

  StringUtils.prototype.getFileExtension = function( src ) {
    return /\.([a-zA-Z0-9]+)/.exec( src )[ 1 ];
  };

  /**
  * @description Checks if a string is surrounded by square brackets
  * @param {string} str string to check.
  * @return {boolean} True if {@code str} is surrounded by square brackets
  */
  StringUtils.prototype.isBetweenSquareBraquets = function( str ) {
    return /\[[\w|\W]+\]/.test( str );
  };

  /**
  * @description Checks if a string contains a URL.
  * @param {string} str string to check.
  * @return {boolean} True if {@code str} consists of an url
  */
  StringUtils.prototype.isUrl = function( str ) {
    return this.REGEXP_URL.test( str );
  };

  /**
  * @from goog.string
  * @description Checks if a string contains only letters.
  * @param {string} str string to check.
  * @return {boolean} True if {@code str} consists entirely of letters.
  */
  StringUtils.prototype.isAlpha = function( str ) {
    return !/[^a-zA-Z]/.test( str );
  };

  /**
  * @from goog.string
  * @description Checks if a string contains only numbers.
  * @param {*} str string to check. If not a string, it will be casted to one.
  * @return {boolean} True if {@code str} is numeric.
  */
  StringUtils.prototype.isNumeric = function( str ) {
    return !/[^0-9]/.test( str );
  };

  /**
  * @from goog.string
  * @description Checks if a string contains only numbers or letters.
  * @param {string} str string to check.
  * @return {boolean} True if {@code str} is alphanumeric.
  */
  StringUtils.prototype.isAlphaNumeric = function( str ) {
    return !/[^a-zA-Z0-9]/.test( str );
  };

  /**
  * @from goog.string
  * @description Returns the non-overlapping occurrences of subStr in str. If either str or subStr evalutes to
  *              false, then returns zero.
  * @param {string} str The string to look in.
  * @param {string} subStr The string to look for.
  * @return {number} Number of occurrences of ss in s.
  */
  StringUtils.prototype.countOf = function( str, subStr ) {
    return str && subStr ? str.split( subStr ).length - 1 : 0;
  };

  /**
  * @from PlayCanvas.string.format
  * @description Return a string with {n} replaced with the n-th argument
  * @param {String} s The string to format
  * @param {Object} [arguments] All other arguments are substituted into the string
  * @returns {String} The formatted string
  * @example var s = pc.string.format("Hello {0}", "world"); console.log(s); // Prints "Hello world"
  */
  StringUtils.prototype.format = function( str ) {
    var regexp, args = _ArrayUtils.flat( arguments );

    // drop first argument
    args.shift();

    for ( var i = 0, len = args.length; i < len; i++ ) {
      regexp = new RegExp( '\\{' + i + '\\}', 'gi' );
      str = str.replace( regexp, args[ i ] );
    }

    return str;
  };

  /**
  * @from goog.string
  * @description Trims white spaces to the left and right of a string.
  * @param {string} str The string to trim.
  * @return {string} A trimmed copy of {@code str}.
  */
  StringUtils.prototype.trim = function( str ) {
    // Since IE doesn't include non-breaking-space (0xa0) in their \s character
    // class (as required by section 7.2 of the ECMAScript spec), we explicitly
    // include it in the regexp to enforce consistent cross-browser behavior.
    return str.replace( /^[\s\xa0]+|[\s\xa0]+$/g, '' );
  };

  // from http://kvz.io/
  StringUtils.prototype.utf8_encode = function( string ) {
    string = ( string + '' ).replace( /\r\n/g, "\n" ).replace( /\r/g, "\n" );

    var utftext = "", start = 0, end = 0, stringl = 0;

    stringl = string.length;
    for ( var n = 0; n < stringl; n++ ) {
      var c1 = string.charCodeAt( n ), enc = null;

      if ( c1 < 128 ) {
        end++;
      } else if ( ( c1 > 127 ) && ( c1 < 2048 ) ) {
        enc = String.fromCharCode( ( c1 >> 6 ) | 192 ) + String.fromCharCode( ( c1 & 63 ) | 128 );
      } else {
        enc = String.fromCharCode( ( c1 >> 12 ) | 224 ) + String.fromCharCode( ( ( c1 >> 6 ) & 63 ) | 128 )
        + String.fromCharCode( ( c1 & 63 ) | 128 );
      }
      if ( enc != null ) {
        if ( end > start ) {
          utftext += string.substring( start, end );
        }
        utftext += enc;
        start = end = n + 1;
      }
    }

    if ( end > start ) {
      utftext += string.substring( start, string.length );
    }

    return utftext;
  };

  // from http://kvz.io/
  StringUtils.prototype.utf8_decode = function( str_data ) {

    var tmp_arr = [], i = 0, ac = 0, c1 = 0, c2 = 0, c3 = 0;

    str_data += '';

    while ( i < str_data.length ) {
      c1 = str_data.charCodeAt( i );
      if ( c1 < 128 ) {
        tmp_arr[ ac++ ] = String.fromCharCode( c1 );
        i++;
      } else if ( ( c1 > 191 ) && ( c1 < 224 ) ) {
        c2 = str_data.charCodeAt( i + 1 );
        tmp_arr[ ac++ ] = String.fromCharCode( ( ( c1 & 31 ) << 6 ) | ( c2 & 63 ) );
        i += 2;
      } else {
        c2 = str_data.charCodeAt( i + 1 );
        c3 = str_data.charCodeAt( i + 2 );
        tmp_arr[ ac++ ] = String.fromCharCode( ( ( c1 & 15 ) << 12 ) | ( ( c2 & 63 ) << 6 ) | ( c3 & 63 ) );
        i += 3;
      }
    }

    return tmp_arr.join( '' );
  };

  return new StringUtils();
} );

/**
 * Exports a singleton instance of {@link Monogatari} class.
 * @module Monogatari
 */
define(
  'Monogatari',[
    'core/Timer',
    'core/Math',
    'input/Keyboard',
    'input/Mouse',
    'manager/SceneManager',
    'manager/PhysicsManager',
    'lib/Chance',
    'core/GameObject',
    'component/Audio',
    'component/Base',
    'component/BaseThree',
    'component/RigidBody',
    'component/Sprite',
    'component/StaticText',
    'collection/List',
    'collection/Map',
    'collection/Tree',
    'util/ArrayUtils',
    'util/CommonUtils',
    'util/StringUtils'
  ],
  function(
    Timer,
    Math,
    Keyboard,
    Mouse,
    SceneManager,
    PhysicsManager,
    Chance,
    GameObject,
    Audio,
    Base,
    BaseThree,
    RigidBody,
    Sprite,
    StaticText,
    List,
    Map,
    Tree,
    ArrayUtils,
    CommonUtils,
    StringUtils
  ) {

    var _browser = {};
    _browser.agent = window.navigator.userAgent;
    _browser.version = window.navigator.appVersion;
    _browser.plataform = window.navigator.platform;
    _browser.isFirefox = ( _browser.agent.indexOf( 'Firefox' ) > -1 );
    _browser.isOpera = ( window.opera !== null );
    _browser.isChrome = ( _browser.agent.indexOf( 'Chrome' ) > -1 ); // Chrome on Android returns true but is a completely different browser
    _browser.isIOS = _browser.agent.indexOf( 'iPod' ) > -1 || _browser.agent.indexOf( 'iPhone' ) > -1 || _browser.agent.indexOf( 'iPad' ) > -1;
    _browser.isAndroid = ( _browser.agent.indexOf( 'Android' ) > -1 );
    _browser.isBlackberry = ( _browser.agent.indexOf( 'Blackberry' ) > -1 );
    _browser.isIE = ( _browser.agent.indexOf( 'MSIE' ) > -1 );

    /**
     * @class Monogatari
     */
    var Monogatari = function() {

      /**
       * @memberOf Monogatari
       * @type Math
       * @name math
       */
      this.math = Math;

      /**
       * @memberOf Monogatari
       * @type {Timer}
       * @name timer
       */
      this.timer = Timer;

      /**
       * The root node of the engine GameObject tree. Any GameObject will only be available to the engine when attached directly or indirectly to world.
       *
       * @example
       *
       *  var myParentGO = new m.GameObject( 'Parent' );
       *  var myGO = new m.GameObject( 'MyGO' );
       *  myParentGO.children.push( myGO );
       *  world.children.push( myParentGO );
       *
       * @memberOf Monogatari
       * @type {GameObject}
       * @name world
       */
      this.world = new GameObject( 'world' );

      /**
       * @memberOf Monogatari
       * @type {SceneManager}
       * @name sceneManager
       */
      this.sceneManager = SceneManager;

      /**
       * @memberOf Monogatari
       * @type {PhysicsManager}
       * @name physicsManager
       */
      this.physicsManager = PhysicsManager;

      /**
       * Use to create new GameObjects.
       * @type {GameObject}
       */
      this.GameObject = GameObject;

      // Input
      this.keyboard = null;
      this.mouse = null;
      this.gamepad = null;

      // Utils
      this.arrayUtils = ArrayUtils;
      this.commonUtils = CommonUtils;
      this.stringUtils = StringUtils;
      this.browser = _browser;
      this.Random = Chance; // Class

      // Collection Classes
      this.List = List;
      this.Map = Map;
      this.Tree = Tree;

      // Component Classes
      this.Audio = Audio;
      this.Base = Base;
      this.BaseThree = BaseThree;
      this.RigidBody = RigidBody;
      this.Sprite = Sprite;
      this.StaticText = StaticText;
    };

    Monogatari.prototype.init = function( bgcolor, width, height, target ) {
      var ctx = this;
      this.sceneManager.init( bgcolor, width, height, target );

      // Keyboard input setup
      this.keyboard = new Keyboard();
      window.addEventListener(
        'keyup', function( event ) {
          ctx.keyboard.onKeyUp( event, ctx.timer );
        }, false
      );
      window.addEventListener(
        'keydown', function( event ) {
          ctx.keyboard.onKeyDown( event, ctx.timer );
        }, false
      );

      // Mouse input setup
      this.mouse = new Mouse();
      window.addEventListener(
        'mousemove', function( event ) {
          ctx.mouse.onMouseMove( event, ctx.timer );
        }, false
      );
      window.addEventListener(
        'mousedown', function( event ) {
          ctx.mouse.onMouseDown( event, ctx.timer );
        }, false
      );
      window.addEventListener(
        'mouseup', function( event ) {
          ctx.mouse.onMouseUp( event, ctx.timer );
        }, false
      );

    };

    Monogatari.prototype.update = function() {
      this.timer.tick();
      this.physicsManager.update( this.timer );
      this.world.updateAll();
    };

    Monogatari.prototype.render = function() {
      this.sceneManager.render();
    };

    Monogatari.prototype.run = function() {
      requestAnimationFrame( this.run.bind( this ) );
      this.update();
      this.render();
    };

    var instance = null;

    Monogatari.getInstance = function() {
      if( instance === null ) {
        instance = new Monogatari();
      }
      return instance;
    };

    return Monogatari.getInstance();
  }
);

